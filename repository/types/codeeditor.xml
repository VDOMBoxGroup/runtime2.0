<?xml version="1.0" encoding="utf-8"?>
<Type>
  <Information>
    <Name>codeeditor</Name>
    <DisplayName>#Lang(001)</DisplayName>
    <Description>#Lang(002)</Description>
    <ClassName>VDOM_codeeditor</ClassName>
    <ID>9a8f8e07-cb43-ff0f-7179-4a437911af23</ID>
    <Icon>#Res(2a2d2448-2e13-b0bb-8a81-17014fba35bd)</Icon>
    <EditorIcon>#Res(c43c7089-459d-acc2-f636-fb4b23f22d5b)</EditorIcon>
    <StructureIcon>#Res(a7280e78-723d-4c0e-07b3-fb4b16697f8a)</StructureIcon>
    <Moveable>1</Moveable>
    <Resizable>3</Resizable>
    <Container>1</Container>
    <Category>Form</Category>
    <Dynamic>1</Dynamic>
    <Version>1.398.0</Version>
    <InterfaceType>1</InterfaceType>
    <OptimizationPriority>1</OptimizationPriority>
    <Containers>htmlcontainer, dialog, container, tablecell, form, accordeon, tabview, dialog_2, vdomclass</Containers>
    <Languages>en_US ,fr_FR ,ru_RU</Languages>
    <Handlers>on_compile, on_update</Handlers>
    <RemoteMethods/>
    <WCAG/>
    <XMLScriptName/>
  </Information>
  <Attributes>
    <Attribute>
      <Name>stateful</Name>
      <DisplayName>#Lang(101)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(201)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(401)|0)|(#Lang(402)|1))</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(301)</ErrorValidationMessage>
      <RegularExpressionValidation>^[01]$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>hierarchy</Name>
      <DisplayName>#Lang(102)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(202)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(2)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(302)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,2}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>visible</Name>
      <DisplayName>#Lang(103)</DisplayName>
      <DefaultValue>1</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(203)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(403)|0)|(#Lang(404)|1))</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(303)</ErrorValidationMessage>
      <RegularExpressionValidation>^[01]$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>zindex</Name>
      <DisplayName>#Lang(104)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(204)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(2)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(304)</ErrorValidationMessage>
      <RegularExpressionValidation>^\d{1,2}$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>classname</Name>
      <DisplayName>#Lang(118)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(318)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(500)</CodeInterface>
      <Colorgroup>4</Colorgroup>
      <ErrorValidationMessage>#Lang(218)</ErrorValidationMessage>
      <RegularExpressionValidation/>
    </Attribute>
    <Attribute>
      <Name>top</Name>
      <DisplayName>#Lang(105)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(205)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(10)</CodeInterface>
      <Colorgroup>4</Colorgroup>
      <ErrorValidationMessage>#Lang(305)</ErrorValidationMessage>
      <RegularExpressionValidation>^(\d+(px|em|rem|vh|vw|%$)?|auto)?$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>left</Name>
      <DisplayName>#Lang(106)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(206)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(10)</CodeInterface>
      <Colorgroup>4</Colorgroup>
      <ErrorValidationMessage>#Lang(306)</ErrorValidationMessage>
      <RegularExpressionValidation>^(\d+(px|em|rem|vh|vw|%$)?|auto)?$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>width</Name>
      <DisplayName>#Lang(107)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(207)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(10)</CodeInterface>
      <Colorgroup>4</Colorgroup>
      <ErrorValidationMessage>#Lang(307)</ErrorValidationMessage>
      <RegularExpressionValidation>^(\d+(px|em|rem|vh|vw|%$)?|auto)?$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>height</Name>
      <DisplayName>#Lang(108)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(208)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(10)</CodeInterface>
      <Colorgroup>4</Colorgroup>
      <ErrorValidationMessage>#Lang(308)</ErrorValidationMessage>
      <RegularExpressionValidation>^(\d+(px|em|rem|vh|vw|%$)?|auto)?$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>value</Name>
      <DisplayName>#Lang(109)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(209)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>MultiLine(10000)</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(309)</ErrorValidationMessage>
      <RegularExpressionValidation>^.*$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>syntax</Name>
      <DisplayName>#Lang(111)</DisplayName>
      <DefaultValue>vscript</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(211)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(405)|vscript)|(#Lang(406)|xml)|(#Lang(407)|python)|(#Lang(408)|javascript)|(#Lang(409)|html)|(#Lang(411)|css))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(311)</ErrorValidationMessage>
      <RegularExpressionValidation>^.*$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>is_readonly</Name>
      <DisplayName>#Lang(112)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>1</Visible>
      <Help>#Lang(212)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>DropDown((#Lang(412)|1)|(#Lang(413)|0))</CodeInterface>
      <Colorgroup>2</Colorgroup>
      <ErrorValidationMessage>#Lang(312)</ErrorValidationMessage>
      <RegularExpressionValidation>^[01]$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>customname</Name>
      <DisplayName>#Lang(113)</DisplayName>
      <DefaultValue/>
      <Visible>1</Visible>
      <Help>#Lang(213)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(100)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(313)</ErrorValidationMessage>
      <RegularExpressionValidation>^.*$</RegularExpressionValidation>
    </Attribute>
    <Attribute>
      <Name>ide_top</Name>
      <DisplayName>#Lang(114)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>0</Visible>
      <Help>#Lang(314)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(8)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(214)</ErrorValidationMessage>
      <RegularExpressionValidation/>
    </Attribute>
    <Attribute>
      <Name>ide_left</Name>
      <DisplayName>#Lang(115)</DisplayName>
      <DefaultValue>0</DefaultValue>
      <Visible>0</Visible>
      <Help>#Lang(315)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(8)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(215)</ErrorValidationMessage>
      <RegularExpressionValidation/>
    </Attribute>
    <Attribute>
      <Name>ide_width</Name>
      <DisplayName>#Lang(116)</DisplayName>
      <DefaultValue>250</DefaultValue>
      <Visible>0</Visible>
      <Help>#Lang(316)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(8)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(216)</ErrorValidationMessage>
      <RegularExpressionValidation/>
    </Attribute>
    <Attribute>
      <Name>ide_height</Name>
      <DisplayName>#Lang(117)</DisplayName>
      <DefaultValue>100</DefaultValue>
      <Visible>0</Visible>
      <Help>#Lang(317)</Help>
      <InterfaceType>0</InterfaceType>
      <CodeInterface>TextField(8)</CodeInterface>
      <Colorgroup>1</Colorgroup>
      <ErrorValidationMessage>#Lang(217)</ErrorValidationMessage>
      <RegularExpressionValidation/>
    </Attribute>
  </Attributes>
  <Languages>
    <Language Code="en_US">
      <Sentence ID="001">Code editor</Sentence>
      <Sentence ID="002">The Code editor type produces an object used to display the multiline text as a piece of code. It can automatically numerate the lines of code and highlight the code elements.</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101"></Sentence>
      <Sentence ID="102">Hierarchy</Sentence>
      <Sentence ID="103">Visibility</Sentence>
      <Sentence ID="104">Z-Index</Sentence>
      <Sentence ID="105">Top</Sentence>
      <Sentence ID="106">Left</Sentence>
      <Sentence ID="107">Width</Sentence>
      <Sentence ID="108">Height</Sentence>
      <Sentence ID="109">Value</Sentence>
      <Sentence ID="111">Syntax</Sentence>
      <Sentence ID="112">readonly</Sentence>
      <Sentence ID="113">Custom name</Sentence>
      <Sentence ID="114">IDE_top</Sentence>
      <Sentence ID="115">IDE_left</Sentence>
      <Sentence ID="116">IDE_width</Sentence>
      <Sentence ID="117">IDE_height</Sentence>
      <Sentence ID="118">CSS Class</Sentence>
      <Sentence ID="201"></Sentence>
      <Sentence ID="202">Order of rendering the object on the page</Sentence>
      <Sentence ID="203">Visibility of the object</Sentence>
      <Sentence ID="204">Position in visual hierarchy of objects</Sentence>
      <Sentence ID="205">Spacing between the top edge of the container and the object</Sentence>
      <Sentence ID="206">Spacing between the left edge of the container and the object</Sentence>
      <Sentence ID="207">Width of the object</Sentence>
      <Sentence ID="208">Height of the object</Sentence>
      <Sentence ID="209">Text to display</Sentence>
      <Sentence ID="211">Syntax</Sentence>
      <Sentence ID="212">Toggle readonly mode</Sentence>
      <Sentence ID="213">custom name for input</Sentence>
      <Sentence ID="214">newAttribute12</Sentence>
      <Sentence ID="215">newAttribute13</Sentence>
      <Sentence ID="216">newAttribute14</Sentence>
      <Sentence ID="217">newAttribute15</Sentence>
      <Sentence ID="218">Names of CSS classes</Sentence>
      <Sentence ID="301"></Sentence>
      <Sentence ID="302">Incorrect value, must be even integer from 0 to 99</Sentence>
      <Sentence ID="303">Incorrect value, must be either 0 or 1</Sentence>
      <Sentence ID="304">Incorrect value, must be even integer from 0 to 99</Sentence>
      <Sentence ID="305">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="306">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="307">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="308">Incorrect value, must be even positive integer</Sentence>
      <Sentence ID="309">Incorrect value</Sentence>
      <Sentence ID="311">Incorrect value</Sentence>
      <Sentence ID="312">newAttribute11</Sentence>
      <Sentence ID="313">invalid custom name for input</Sentence>
      <Sentence ID="314">newAttribute12</Sentence>
      <Sentence ID="315">newAttribute13</Sentence>
      <Sentence ID="316">newAttribute14</Sentence>
      <Sentence ID="317">newAttribute15</Sentence>
      <Sentence ID="318">CSS class name</Sentence>
      <Sentence ID="401"></Sentence>
      <Sentence ID="402"></Sentence>
      <Sentence ID="403">Invisible</Sentence>
      <Sentence ID="404">Visible</Sentence>
      <Sentence ID="405">VScript</Sentence>
      <Sentence ID="406">XML</Sentence>
      <Sentence ID="407">Python</Sentence>
      <Sentence ID="408">Javascript</Sentence>
      <Sentence ID="409">HTML</Sentence>
      <Sentence ID="411">CSS</Sentence>
      <Sentence ID="412">ReadOnly</Sentence>
      <Sentence ID="413">Editable</Sentence>
      <Sentence ID="501">Set new text value</Sentence>
      <Sentence ID="502">Hide the object</Sentence>
      <Sentence ID="503">Move the object to a new position</Sentence>
      <Sentence ID="504">Show the object</Sentence>
      <Sentence ID="505">Show the object</Sentence>
      <Sentence ID="506">Set cursor to line</Sentence>
      <Sentence ID="507">Set new text value</Sentence>
      <Sentence ID="508">Show the object</Sentence>
      <Sentence ID="509">Show the object</Sentence>
      <Sentence ID="511">Set new text value</Sentence>
      <Sentence ID="512">Show the object</Sentence>
      <Sentence ID="513"></Sentence>
      <Sentence ID="514"></Sentence>
      <Sentence ID="601">setValue</Sentence>
      <Sentence ID="602">Hide</Sentence>
      <Sentence ID="603">moveTo</Sentence>
      <Sentence ID="604">Show</Sentence>
      <Sentence ID="605">Show</Sentence>
      <Sentence ID="606">setCursor</Sentence>
      <Sentence ID="607">setValue</Sentence>
      <Sentence ID="608">Show</Sentence>
      <Sentence ID="609">Show</Sentence>
      <Sentence ID="611">setValue</Sentence>
      <Sentence ID="612">Show</Sentence>
      <Sentence ID="701">Fade</Sentence>
      <Sentence ID="702">newX</Sentence>
      <Sentence ID="703">newY</Sentence>
      <Sentence ID="704">Effect</Sentence>
      <Sentence ID="705">Fade</Sentence>
      <Sentence ID="706"></Sentence>
      <Sentence ID="707">line</Sentence>
      <Sentence ID="708">Fade</Sentence>
      <Sentence ID="709">Fade</Sentence>
      <Sentence ID="711">Value</Sentence>
      <Sentence ID="712">Fade</Sentence>
      <Sentence ID="801">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="802">X-coordinate of the new position relative to the left upper corner of the container</Sentence>
      <Sentence ID="803">Y-coordinate of the new position relative to the left upper corner of the container</Sentence>
      <Sentence ID="804">Visual effect of moving, time is indicated in milliseconds</Sentence>
      <Sentence ID="805">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="806"></Sentence>
      <Sentence ID="807">Line number</Sentence>
      <Sentence ID="808">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="809">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="811">New text value</Sentence>
      <Sentence ID="812">Fade effect, time is indicated in milliseconds</Sentence>
      <Sentence ID="901"></Sentence>
      <Sentence ID="902"></Sentence>
      <Sentence ID="903"></Sentence>
    </Language>
    <Language Code="fr_FR">
      <Sentence ID="001">Zone de Texte</Sentence>
      <Sentence ID="002">Zone de Texte</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101"></Sentence>
      <Sentence ID="102">Hiérarchie</Sentence>
      <Sentence ID="103">Visibilité</Sentence>
      <Sentence ID="104">Z-Index</Sentence>
      <Sentence ID="105">Haut</Sentence>
      <Sentence ID="106">Gauche</Sentence>
      <Sentence ID="107">Largeur</Sentence>
      <Sentence ID="108">Hauteur</Sentence>
      <Sentence ID="109">Valeur</Sentence>
      <Sentence ID="111"></Sentence>
      <Sentence ID="112"></Sentence>
      <Sentence ID="113"></Sentence>
      <Sentence ID="114"></Sentence>
      <Sentence ID="115"></Sentence>
      <Sentence ID="116"></Sentence>
      <Sentence ID="117"></Sentence>
      <Sentence ID="118"></Sentence>
      <Sentence ID="201"></Sentence>
      <Sentence ID="202">Hiérarchie de l'objet, ordre de chargement de l'objet par rapport aux autres</Sentence>
      <Sentence ID="203">Afficher ou cacher l'objet</Sentence>
      <Sentence ID="204">Niveau de superposition de l'objet par rapport aux autres</Sentence>
      <Sentence ID="205">Distance depuis le bord haut de l'objet parent en pixels</Sentence>
      <Sentence ID="206">Distance depuis le bord gauche de l'objet parent en pixels</Sentence>
      <Sentence ID="207">Largeur de l'objet en pixels</Sentence>
      <Sentence ID="208">Hauteur de l'objet en pixels</Sentence>
      <Sentence ID="209">Texte dans le champs</Sentence>
      <Sentence ID="211"></Sentence>
      <Sentence ID="212"></Sentence>
      <Sentence ID="213"></Sentence>
      <Sentence ID="214"></Sentence>
      <Sentence ID="215"></Sentence>
      <Sentence ID="216"></Sentence>
      <Sentence ID="217"></Sentence>
      <Sentence ID="218"></Sentence>
      <Sentence ID="301"></Sentence>
      <Sentence ID="302">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="303">Valeur Incorrecte, doit être 0 ou 1</Sentence>
      <Sentence ID="304">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="305">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="306">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="307">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="308">Valeur Incorrecte, doit être positive</Sentence>
      <Sentence ID="309">Valeur Incorrecte</Sentence>
      <Sentence ID="311"></Sentence>
      <Sentence ID="312"></Sentence>
      <Sentence ID="313"></Sentence>
      <Sentence ID="314"></Sentence>
      <Sentence ID="315"></Sentence>
      <Sentence ID="316"></Sentence>
      <Sentence ID="317"></Sentence>
      <Sentence ID="318"></Sentence>
      <Sentence ID="401"></Sentence>
      <Sentence ID="402"></Sentence>
      <Sentence ID="403">Invisible</Sentence>
      <Sentence ID="404">Visible</Sentence>
      <Sentence ID="405"></Sentence>
      <Sentence ID="406"></Sentence>
      <Sentence ID="407"></Sentence>
      <Sentence ID="408"></Sentence>
      <Sentence ID="409"></Sentence>
      <Sentence ID="411"></Sentence>
      <Sentence ID="412"></Sentence>
      <Sentence ID="413"></Sentence>
      <Sentence ID="501">Set new text</Sentence>
      <Sentence ID="502">Hide the object</Sentence>
      <Sentence ID="503">Move object to selected point</Sentence>
      <Sentence ID="504">Show the object</Sentence>
      <Sentence ID="505">Show the object</Sentence>
      <Sentence ID="506"></Sentence>
      <Sentence ID="507">Set new text</Sentence>
      <Sentence ID="508">Show the object</Sentence>
      <Sentence ID="509">Show the object</Sentence>
      <Sentence ID="511">Set new text</Sentence>
      <Sentence ID="512">Show the object</Sentence>
      <Sentence ID="513"></Sentence>
      <Sentence ID="514"></Sentence>
      <Sentence ID="601">setValue</Sentence>
      <Sentence ID="602">Hide</Sentence>
      <Sentence ID="603">moveTo</Sentence>
      <Sentence ID="604">Show</Sentence>
      <Sentence ID="605">Show</Sentence>
      <Sentence ID="606"></Sentence>
      <Sentence ID="607">setValue</Sentence>
      <Sentence ID="608">Show</Sentence>
      <Sentence ID="609">Show</Sentence>
      <Sentence ID="611">setValue</Sentence>
      <Sentence ID="612">Show</Sentence>
      <Sentence ID="701">Fade</Sentence>
      <Sentence ID="702">newX</Sentence>
      <Sentence ID="703">newY</Sentence>
      <Sentence ID="704">Effect</Sentence>
      <Sentence ID="705">Fade</Sentence>
      <Sentence ID="706"></Sentence>
      <Sentence ID="707"></Sentence>
      <Sentence ID="708">Fade</Sentence>
      <Sentence ID="709">Fade</Sentence>
      <Sentence ID="711">Value</Sentence>
      <Sentence ID="712">Fade</Sentence>
      <Sentence ID="801">Fade time</Sentence>
      <Sentence ID="802">X-coordinate of new point</Sentence>
      <Sentence ID="803">Y-coordinate of new point</Sentence>
      <Sentence ID="804">Visual effect by moving</Sentence>
      <Sentence ID="805">Time of appearance</Sentence>
      <Sentence ID="806"></Sentence>
      <Sentence ID="807"></Sentence>
      <Sentence ID="808">Time of appearance</Sentence>
      <Sentence ID="809">Time of appearance</Sentence>
      <Sentence ID="811">New text</Sentence>
      <Sentence ID="812">Time of appearance</Sentence>
      <Sentence ID="901"></Sentence>
      <Sentence ID="902"></Sentence>
      <Sentence ID="903"></Sentence>
    </Language>
    <Language Code="ru_RU">
      <Sentence ID="001">Поле текста</Sentence>
      <Sentence ID="002">Текстовое поле формы</Sentence>
      <Sentence ID="003"></Sentence>
      <Sentence ID="101"></Sentence>
      <Sentence ID="102">Иерархия</Sentence>
      <Sentence ID="103">Отображение</Sentence>
      <Sentence ID="104">Позиция</Sentence>
      <Sentence ID="105">Сверху</Sentence>
      <Sentence ID="106">Слева</Sentence>
      <Sentence ID="107">Ширина</Sentence>
      <Sentence ID="108">Высота</Sentence>
      <Sentence ID="109">Значение</Sentence>
      <Sentence ID="111"></Sentence>
      <Sentence ID="112"></Sentence>
      <Sentence ID="113"></Sentence>
      <Sentence ID="114"></Sentence>
      <Sentence ID="115"></Sentence>
      <Sentence ID="116"></Sentence>
      <Sentence ID="117"></Sentence>
      <Sentence ID="118"></Sentence>
      <Sentence ID="201"></Sentence>
      <Sentence ID="202">Порядок визуализации объекта в ходе загрузки страницы</Sentence>
      <Sentence ID="203">Режим отображения объекта</Sentence>
      <Sentence ID="204">Положение в визуальной иерархии объектов</Sentence>
      <Sentence ID="205">Расстояние от верхней границы родительского контейнера до объекта в пикселях</Sentence>
      <Sentence ID="206">Расстояние от левой границы родительского контейнера до объекта в пикселях</Sentence>
      <Sentence ID="207">Ширина объекта в пикселях</Sentence>
      <Sentence ID="208">Высота объекта в пикселях</Sentence>
      <Sentence ID="209">Отображаемый текст</Sentence>
      <Sentence ID="211"></Sentence>
      <Sentence ID="212"></Sentence>
      <Sentence ID="213"></Sentence>
      <Sentence ID="214"></Sentence>
      <Sentence ID="215"></Sentence>
      <Sentence ID="216"></Sentence>
      <Sentence ID="217"></Sentence>
      <Sentence ID="218"></Sentence>
      <Sentence ID="301"></Sentence>
      <Sentence ID="302">Неправильное значение, должно быть указано целое число от 0 до 99</Sentence>
      <Sentence ID="303">Неправильное значение, должен быть указан 0 или 1</Sentence>
      <Sentence ID="304">Неправильное значение, должно быть указано целое число от 0 до 99</Sentence>
      <Sentence ID="305">Неправильное значение, должно быть целое положительное число</Sentence>
      <Sentence ID="306">Неправильное значение, должно быть целое положительное число</Sentence>
      <Sentence ID="307">Неправильное значение, должно быть целое положительное число</Sentence>
      <Sentence ID="308">Неправильное значение, должно быть целое положительное число</Sentence>
      <Sentence ID="309">Неправильное значение</Sentence>
      <Sentence ID="311"></Sentence>
      <Sentence ID="312"></Sentence>
      <Sentence ID="313"></Sentence>
      <Sentence ID="314"></Sentence>
      <Sentence ID="315"></Sentence>
      <Sentence ID="316"></Sentence>
      <Sentence ID="317"></Sentence>
      <Sentence ID="318"></Sentence>
      <Sentence ID="401"></Sentence>
      <Sentence ID="402"></Sentence>
      <Sentence ID="403">Не отображать</Sentence>
      <Sentence ID="404">Отображать</Sentence>
      <Sentence ID="405"></Sentence>
      <Sentence ID="406"></Sentence>
      <Sentence ID="407"></Sentence>
      <Sentence ID="408"></Sentence>
      <Sentence ID="409"></Sentence>
      <Sentence ID="411"></Sentence>
      <Sentence ID="412"></Sentence>
      <Sentence ID="413"></Sentence>
      <Sentence ID="501">Установить новый текст</Sentence>
      <Sentence ID="502">Скрыть объект</Sentence>
      <Sentence ID="503">Сдвинуть объект в заданную точку</Sentence>
      <Sentence ID="504">Показать объект</Sentence>
      <Sentence ID="505">Показать объект</Sentence>
      <Sentence ID="506"></Sentence>
      <Sentence ID="507">Установить новый текст</Sentence>
      <Sentence ID="508">Показать объект</Sentence>
      <Sentence ID="509">Показать объект</Sentence>
      <Sentence ID="511">Установить новый текст</Sentence>
      <Sentence ID="512">Показать объект</Sentence>
      <Sentence ID="513"></Sentence>
      <Sentence ID="514"></Sentence>
      <Sentence ID="601">Установить текст</Sentence>
      <Sentence ID="602">Скрыть</Sentence>
      <Sentence ID="603">Сдвинуть</Sentence>
      <Sentence ID="604">Показать</Sentence>
      <Sentence ID="605">Показать</Sentence>
      <Sentence ID="606"></Sentence>
      <Sentence ID="607">Установить текст</Sentence>
      <Sentence ID="608">Показать</Sentence>
      <Sentence ID="609">Показать</Sentence>
      <Sentence ID="611">Установить текст</Sentence>
      <Sentence ID="612">Показать</Sentence>
      <Sentence ID="701">Исчезновение</Sentence>
      <Sentence ID="702">Координата по оси X</Sentence>
      <Sentence ID="703">Координата по оси X</Sentence>
      <Sentence ID="704">Эффект</Sentence>
      <Sentence ID="705">Появление</Sentence>
      <Sentence ID="706"></Sentence>
      <Sentence ID="707"></Sentence>
      <Sentence ID="708">Появление</Sentence>
      <Sentence ID="709">Появление</Sentence>
      <Sentence ID="711">Текст</Sentence>
      <Sentence ID="712">Появление</Sentence>
      <Sentence ID="801">Время исчезновения в миллисекундах</Sentence>
      <Sentence ID="802">Координата новой точки по оси X</Sentence>
      <Sentence ID="803">Координата новой точки по оси Y</Sentence>
      <Sentence ID="804">Визуальный эффект при перетаскивании</Sentence>
      <Sentence ID="805">Время появления в миллисекундах</Sentence>
      <Sentence ID="806"></Sentence>
      <Sentence ID="807"></Sentence>
      <Sentence ID="808">Время появления в миллисекундах</Sentence>
      <Sentence ID="809">Время появления в миллисекундах</Sentence>
      <Sentence ID="811">Новый текст</Sentence>
      <Sentence ID="812">Время появления в миллисекундах</Sentence>
      <Sentence ID="901"></Sentence>
      <Sentence ID="902"></Sentence>
      <Sentence ID="903"></Sentence>
    </Language>
  </Languages>
  <Resources>
    <Resource ID="064add91-8595-0f40-10ea-09d38022edee" Name="codemirror" Type="js"><![CDATA[Ly8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnMNCi8vIERpc3RyaWJ1dGVkIHVuZGVyIGFuIE1JVCBsaWNlbnNlOiBodHRwczovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0UNCg0KLy8gVGhpcyBpcyBDb2RlTWlycm9yIChodHRwczovL2NvZGVtaXJyb3IubmV0KSwgYSBjb2RlIGVkaXRvcg0KLy8gaW1wbGVtZW50ZWQgaW4gSmF2YVNjcmlwdCBvbiB0b3Agb2YgdGhlIGJyb3dzZXIncyBET00uDQovLw0KLy8gWW91IGNhbiBmaW5kIHNvbWUgdGVjaG5pY2FsIGJhY2tncm91bmQgZm9yIHNvbWUgb2YgdGhlIGNvZGUgYmVsb3cNCi8vIGF0IGh0dHA6Ly9tYXJpam5oYXZlcmJla2UubmwvYmxvZy8jY20taW50ZXJuYWxzIC4NCg0KKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHsNCiAgaWYgKGdsb2JhbC5oYXNPd25Qcm9wZXJ0eSgiQ29kZU1pcnJvciIpKSByZXR1cm47DQogIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDoNCiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDoNCiAgKGdsb2JhbC5Db2RlTWlycm9yID0gZmFjdG9yeSgpKTsNCn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnOw0KDQogIC8vIEtsdWRnZXMgZm9yIGJ1Z3MgYW5kIGJlaGF2aW9yIGRpZmZlcmVuY2VzIHRoYXQgY2FuJ3QgYmUgZmVhdHVyZQ0KICAvLyBkZXRlY3RlZCBhcmUgZW5hYmxlZCBiYXNlZCBvbiB1c2VyQWdlbnQgZXRjIHNuaWZmaW5nLg0KICB2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudDsNCiAgdmFyIHBsYXRmb3JtID0gbmF2aWdhdG9yLnBsYXRmb3JtOw0KDQogIHZhciBnZWNrbyA9IC9nZWNrb1wvXGQvaS50ZXN0KHVzZXJBZ2VudCk7DQogIHZhciBpZV91cHRvMTAgPSAvTVNJRSBcZC8udGVzdCh1c2VyQWdlbnQpOw0KICB2YXIgaWVfMTF1cCA9IC9UcmlkZW50XC8oPzpbNy05XXxcZHsyLH0pXC4uKnJ2OihcZCspLy5leGVjKHVzZXJBZ2VudCk7DQogIHZhciBlZGdlID0gL0VkZ2VcLyhcZCspLy5leGVjKHVzZXJBZ2VudCk7DQogIHZhciBpZSA9IGllX3VwdG8xMCB8fCBpZV8xMXVwIHx8IGVkZ2U7DQogIHZhciBpZV92ZXJzaW9uID0gaWUgJiYgKGllX3VwdG8xMCA/IGRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCA2IDogKyhlZGdlIHx8IGllXzExdXApWzFdKTsNCiAgdmFyIHdlYmtpdCA9ICFlZGdlICYmIC9XZWJLaXRcLy8udGVzdCh1c2VyQWdlbnQpOw0KICB2YXIgcXR3ZWJraXQgPSB3ZWJraXQgJiYgL1F0XC9cZCtcLlxkKy8udGVzdCh1c2VyQWdlbnQpOw0KICB2YXIgY2hyb21lID0gIWVkZ2UgJiYgL0Nocm9tZVwvLy50ZXN0KHVzZXJBZ2VudCk7DQogIHZhciBwcmVzdG8gPSAvT3BlcmFcLy8udGVzdCh1c2VyQWdlbnQpOw0KICB2YXIgc2FmYXJpID0gL0FwcGxlIENvbXB1dGVyLy50ZXN0KG5hdmlnYXRvci52ZW5kb3IpOw0KICB2YXIgbWFjX2dlTW91bnRhaW5MaW9uID0gL01hYyBPUyBYIDFcZFxEKFs4LTldfFxkXGQpXEQvLnRlc3QodXNlckFnZW50KTsNCiAgdmFyIHBoYW50b20gPSAvUGhhbnRvbUpTLy50ZXN0KHVzZXJBZ2VudCk7DQoNCiAgdmFyIGlvcyA9ICFlZGdlICYmIC9BcHBsZVdlYktpdC8udGVzdCh1c2VyQWdlbnQpICYmIC9Nb2JpbGVcL1x3Ky8udGVzdCh1c2VyQWdlbnQpOw0KICB2YXIgYW5kcm9pZCA9IC9BbmRyb2lkLy50ZXN0KHVzZXJBZ2VudCk7DQogIC8vIFRoaXMgaXMgd29lZnVsbHkgaW5jb21wbGV0ZS4gU3VnZ2VzdGlvbnMgZm9yIGFsdGVybmF0aXZlIG1ldGhvZHMgd2VsY29tZS4NCiAgdmFyIG1vYmlsZSA9IGlvcyB8fCBhbmRyb2lkIHx8IC93ZWJPU3xCbGFja0JlcnJ5fE9wZXJhIE1pbml8T3BlcmEgTW9iaXxJRU1vYmlsZS9pLnRlc3QodXNlckFnZW50KTsNCiAgdmFyIG1hYyA9IGlvcyB8fCAvTWFjLy50ZXN0KHBsYXRmb3JtKTsNCiAgdmFyIGNocm9tZU9TID0gL1xiQ3JPU1xiLy50ZXN0KHVzZXJBZ2VudCk7DQogIHZhciB3aW5kb3dzID0gL3dpbi9pLnRlc3QocGxhdGZvcm0pOw0KDQogIHZhciBwcmVzdG9fdmVyc2lvbiA9IHByZXN0byAmJiB1c2VyQWdlbnQubWF0Y2goL1ZlcnNpb25cLyhcZCpcLlxkKikvKTsNCiAgaWYgKHByZXN0b192ZXJzaW9uKSB7IHByZXN0b192ZXJzaW9uID0gTnVtYmVyKHByZXN0b192ZXJzaW9uWzFdKTsgfQ0KICBpZiAocHJlc3RvX3ZlcnNpb24gJiYgcHJlc3RvX3ZlcnNpb24gPj0gMTUpIHsgcHJlc3RvID0gZmFsc2U7IHdlYmtpdCA9IHRydWU7IH0NCiAgLy8gU29tZSBicm93c2VycyB1c2UgdGhlIHdyb25nIGV2ZW50IHByb3BlcnRpZXMgdG8gc2lnbmFsIGNtZC9jdHJsIG9uIE9TIFgNCiAgdmFyIGZsaXBDdHJsQ21kID0gbWFjICYmIChxdHdlYmtpdCB8fCBwcmVzdG8gJiYgKHByZXN0b192ZXJzaW9uID09IG51bGwgfHwgcHJlc3RvX3ZlcnNpb24gPCAxMi4xMSkpOw0KICB2YXIgY2FwdHVyZVJpZ2h0Q2xpY2sgPSBnZWNrbyB8fCAoaWUgJiYgaWVfdmVyc2lvbiA+PSA5KTsNCg0KICBmdW5jdGlvbiBjbGFzc1Rlc3QoY2xzKSB7IHJldHVybiBuZXcgUmVnRXhwKCIoXnxcXHMpIiArIGNscyArICIoPzokfFxccylcXHMqIikgfQ0KDQogIHZhciBybUNsYXNzID0gZnVuY3Rpb24obm9kZSwgY2xzKSB7DQogICAgdmFyIGN1cnJlbnQgPSBub2RlLmNsYXNzTmFtZTsNCiAgICB2YXIgbWF0Y2ggPSBjbGFzc1Rlc3QoY2xzKS5leGVjKGN1cnJlbnQpOw0KICAgIGlmIChtYXRjaCkgew0KICAgICAgdmFyIGFmdGVyID0gY3VycmVudC5zbGljZShtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCk7DQogICAgICBub2RlLmNsYXNzTmFtZSA9IGN1cnJlbnQuc2xpY2UoMCwgbWF0Y2guaW5kZXgpICsgKGFmdGVyID8gbWF0Y2hbMV0gKyBhZnRlciA6ICIiKTsNCiAgICB9DQogIH07DQoNCiAgZnVuY3Rpb24gcmVtb3ZlQ2hpbGRyZW4oZSkgew0KICAgIGZvciAodmFyIGNvdW50ID0gZS5jaGlsZE5vZGVzLmxlbmd0aDsgY291bnQgPiAwOyAtLWNvdW50KQ0KICAgICAgeyBlLnJlbW92ZUNoaWxkKGUuZmlyc3RDaGlsZCk7IH0NCiAgICByZXR1cm4gZQ0KICB9DQoNCiAgZnVuY3Rpb24gcmVtb3ZlQ2hpbGRyZW5BbmRBZGQocGFyZW50LCBlKSB7DQogICAgcmV0dXJuIHJlbW92ZUNoaWxkcmVuKHBhcmVudCkuYXBwZW5kQ2hpbGQoZSkNCiAgfQ0KDQogIGZ1bmN0aW9uIGVsdCh0YWcsIGNvbnRlbnQsIGNsYXNzTmFtZSwgc3R5bGUpIHsNCiAgICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTsNCiAgICBpZiAoY2xhc3NOYW1lKSB7IGUuY2xhc3NOYW1lID0gY2xhc3NOYW1lOyB9DQogICAgaWYgKHN0eWxlKSB7IGUuc3R5bGUuY3NzVGV4dCA9IHN0eWxlOyB9DQogICAgaWYgKHR5cGVvZiBjb250ZW50ID09ICJzdHJpbmciKSB7IGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY29udGVudCkpOyB9DQogICAgZWxzZSBpZiAoY29udGVudCkgeyBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRlbnQubGVuZ3RoOyArK2kpIHsgZS5hcHBlbmRDaGlsZChjb250ZW50W2ldKTsgfSB9DQogICAgcmV0dXJuIGUNCiAgfQ0KICAvLyB3cmFwcGVyIGZvciBlbHQsIHdoaWNoIHJlbW92ZXMgdGhlIGVsdCBmcm9tIHRoZSBhY2Nlc3NpYmlsaXR5IHRyZWUNCiAgZnVuY3Rpb24gZWx0UCh0YWcsIGNvbnRlbnQsIGNsYXNzTmFtZSwgc3R5bGUpIHsNCiAgICB2YXIgZSA9IGVsdCh0YWcsIGNvbnRlbnQsIGNsYXNzTmFtZSwgc3R5bGUpOw0KICAgIGUuc2V0QXR0cmlidXRlKCJyb2xlIiwgInByZXNlbnRhdGlvbiIpOw0KICAgIHJldHVybiBlDQogIH0NCg0KICB2YXIgcmFuZ2U7DQogIGlmIChkb2N1bWVudC5jcmVhdGVSYW5nZSkgeyByYW5nZSA9IGZ1bmN0aW9uKG5vZGUsIHN0YXJ0LCBlbmQsIGVuZE5vZGUpIHsNCiAgICB2YXIgciA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7DQogICAgci5zZXRFbmQoZW5kTm9kZSB8fCBub2RlLCBlbmQpOw0KICAgIHIuc2V0U3RhcnQobm9kZSwgc3RhcnQpOw0KICAgIHJldHVybiByDQogIH07IH0NCiAgZWxzZSB7IHJhbmdlID0gZnVuY3Rpb24obm9kZSwgc3RhcnQsIGVuZCkgew0KICAgIHZhciByID0gZG9jdW1lbnQuYm9keS5jcmVhdGVUZXh0UmFuZ2UoKTsNCiAgICB0cnkgeyByLm1vdmVUb0VsZW1lbnRUZXh0KG5vZGUucGFyZW50Tm9kZSk7IH0NCiAgICBjYXRjaChlKSB7IHJldHVybiByIH0NCiAgICByLmNvbGxhcHNlKHRydWUpOw0KICAgIHIubW92ZUVuZCgiY2hhcmFjdGVyIiwgZW5kKTsNCiAgICByLm1vdmVTdGFydCgiY2hhcmFjdGVyIiwgc3RhcnQpOw0KICAgIHJldHVybiByDQogIH07IH0NCg0KICBmdW5jdGlvbiBjb250YWlucyhwYXJlbnQsIGNoaWxkKSB7DQogICAgaWYgKGNoaWxkLm5vZGVUeXBlID09IDMpIC8vIEFuZHJvaWQgYnJvd3NlciBhbHdheXMgcmV0dXJucyBmYWxzZSB3aGVuIGNoaWxkIGlzIGEgdGV4dG5vZGUNCiAgICAgIHsgY2hpbGQgPSBjaGlsZC5wYXJlbnROb2RlOyB9DQogICAgaWYgKHBhcmVudC5jb250YWlucykNCiAgICAgIHsgcmV0dXJuIHBhcmVudC5jb250YWlucyhjaGlsZCkgfQ0KICAgIGRvIHsNCiAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PSAxMSkgeyBjaGlsZCA9IGNoaWxkLmhvc3Q7IH0NCiAgICAgIGlmIChjaGlsZCA9PSBwYXJlbnQpIHsgcmV0dXJuIHRydWUgfQ0KICAgIH0gd2hpbGUgKGNoaWxkID0gY2hpbGQucGFyZW50Tm9kZSkNCiAgfQ0KDQogIGZ1bmN0aW9uIGFjdGl2ZUVsdCgpIHsNCiAgICAvLyBJRSBhbmQgRWRnZSBtYXkgdGhyb3cgYW4gIlVuc3BlY2lmaWVkIEVycm9yIiB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50Lg0KICAgIC8vIElFIDwgMTAgd2lsbCB0aHJvdyB3aGVuIGFjY2Vzc2VkIHdoaWxlIHRoZSBwYWdlIGlzIGxvYWRpbmcgb3IgaW4gYW4gaWZyYW1lLg0KICAgIC8vIElFID4gOSBhbmQgRWRnZSB3aWxsIHRocm93IHdoZW4gYWNjZXNzZWQgaW4gYW4gaWZyYW1lIGlmIGRvY3VtZW50LmJvZHkgaXMgdW5hdmFpbGFibGUuDQogICAgdmFyIGFjdGl2ZUVsZW1lbnQ7DQogICAgdHJ5IHsNCiAgICAgIGFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50Ow0KICAgIH0gY2F0Y2goZSkgew0KICAgICAgYWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmJvZHkgfHwgbnVsbDsNCiAgICB9DQogICAgd2hpbGUgKGFjdGl2ZUVsZW1lbnQgJiYgYWN0aXZlRWxlbWVudC5zaGFkb3dSb290ICYmIGFjdGl2ZUVsZW1lbnQuc2hhZG93Um9vdC5hY3RpdmVFbGVtZW50KQ0KICAgICAgeyBhY3RpdmVFbGVtZW50ID0gYWN0aXZlRWxlbWVudC5zaGFkb3dSb290LmFjdGl2ZUVsZW1lbnQ7IH0NCiAgICByZXR1cm4gYWN0aXZlRWxlbWVudA0KICB9DQoNCiAgZnVuY3Rpb24gYWRkQ2xhc3Mobm9kZSwgY2xzKSB7DQogICAgdmFyIGN1cnJlbnQgPSBub2RlLmNsYXNzTmFtZTsNCiAgICBpZiAoIWNsYXNzVGVzdChjbHMpLnRlc3QoY3VycmVudCkpIHsgbm9kZS5jbGFzc05hbWUgKz0gKGN1cnJlbnQgPyAiICIgOiAiIikgKyBjbHM7IH0NCiAgfQ0KICBmdW5jdGlvbiBqb2luQ2xhc3NlcyhhLCBiKSB7DQogICAgdmFyIGFzID0gYS5zcGxpdCgiICIpOw0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXMubGVuZ3RoOyBpKyspDQogICAgICB7IGlmIChhc1tpXSAmJiAhY2xhc3NUZXN0KGFzW2ldKS50ZXN0KGIpKSB7IGIgKz0gIiAiICsgYXNbaV07IH0gfQ0KICAgIHJldHVybiBiDQogIH0NCg0KICB2YXIgc2VsZWN0SW5wdXQgPSBmdW5jdGlvbihub2RlKSB7IG5vZGUuc2VsZWN0KCk7IH07DQogIGlmIChpb3MpIC8vIE1vYmlsZSBTYWZhcmkgYXBwYXJlbnRseSBoYXMgYSBidWcgd2hlcmUgc2VsZWN0KCkgaXMgYnJva2VuLg0KICAgIHsgc2VsZWN0SW5wdXQgPSBmdW5jdGlvbihub2RlKSB7IG5vZGUuc2VsZWN0aW9uU3RhcnQgPSAwOyBub2RlLnNlbGVjdGlvbkVuZCA9IG5vZGUudmFsdWUubGVuZ3RoOyB9OyB9DQogIGVsc2UgaWYgKGllKSAvLyBTdXBwcmVzcyBteXN0ZXJpb3VzIElFMTAgZXJyb3JzDQogICAgeyBzZWxlY3RJbnB1dCA9IGZ1bmN0aW9uKG5vZGUpIHsgdHJ5IHsgbm9kZS5zZWxlY3QoKTsgfSBjYXRjaChfZSkge30gfTsgfQ0KDQogIGZ1bmN0aW9uIGJpbmQoZikgew0KICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsNCiAgICByZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gZi5hcHBseShudWxsLCBhcmdzKX0NCiAgfQ0KDQogIGZ1bmN0aW9uIGNvcHlPYmoob2JqLCB0YXJnZXQsIG92ZXJ3cml0ZSkgew0KICAgIGlmICghdGFyZ2V0KSB7IHRhcmdldCA9IHt9OyB9DQogICAgZm9yICh2YXIgcHJvcCBpbiBvYmopDQogICAgICB7IGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkgJiYgKG92ZXJ3cml0ZSAhPT0gZmFsc2UgfHwgIXRhcmdldC5oYXNPd25Qcm9wZXJ0eShwcm9wKSkpDQogICAgICAgIHsgdGFyZ2V0W3Byb3BdID0gb2JqW3Byb3BdOyB9IH0NCiAgICByZXR1cm4gdGFyZ2V0DQogIH0NCg0KICAvLyBDb3VudHMgdGhlIGNvbHVtbiBvZmZzZXQgaW4gYSBzdHJpbmcsIHRha2luZyB0YWJzIGludG8gYWNjb3VudC4NCiAgLy8gVXNlZCBtb3N0bHkgdG8gZmluZCBpbmRlbnRhdGlvbi4NCiAgZnVuY3Rpb24gY291bnRDb2x1bW4oc3RyaW5nLCBlbmQsIHRhYlNpemUsIHN0YXJ0SW5kZXgsIHN0YXJ0VmFsdWUpIHsNCiAgICBpZiAoZW5kID09IG51bGwpIHsNCiAgICAgIGVuZCA9IHN0cmluZy5zZWFyY2goL1teXHNcdTAwYTBdLyk7DQogICAgICBpZiAoZW5kID09IC0xKSB7IGVuZCA9IHN0cmluZy5sZW5ndGg7IH0NCiAgICB9DQogICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXggfHwgMCwgbiA9IHN0YXJ0VmFsdWUgfHwgMDs7KSB7DQogICAgICB2YXIgbmV4dFRhYiA9IHN0cmluZy5pbmRleE9mKCJcdCIsIGkpOw0KICAgICAgaWYgKG5leHRUYWIgPCAwIHx8IG5leHRUYWIgPj0gZW5kKQ0KICAgICAgICB7IHJldHVybiBuICsgKGVuZCAtIGkpIH0NCiAgICAgIG4gKz0gbmV4dFRhYiAtIGk7DQogICAgICBuICs9IHRhYlNpemUgLSAobiAlIHRhYlNpemUpOw0KICAgICAgaSA9IG5leHRUYWIgKyAxOw0KICAgIH0NCiAgfQ0KDQogIHZhciBEZWxheWVkID0gZnVuY3Rpb24oKSB7DQogICAgdGhpcy5pZCA9IG51bGw7DQogICAgdGhpcy5mID0gbnVsbDsNCiAgICB0aGlzLnRpbWUgPSAwOw0KICAgIHRoaXMuaGFuZGxlciA9IGJpbmQodGhpcy5vblRpbWVvdXQsIHRoaXMpOw0KICB9Ow0KICBEZWxheWVkLnByb3RvdHlwZS5vblRpbWVvdXQgPSBmdW5jdGlvbiAoc2VsZikgew0KICAgIHNlbGYuaWQgPSAwOw0KICAgIGlmIChzZWxmLnRpbWUgPD0gK25ldyBEYXRlKSB7DQogICAgICBzZWxmLmYoKTsNCiAgICB9IGVsc2Ugew0KICAgICAgc2V0VGltZW91dChzZWxmLmhhbmRsZXIsIHNlbGYudGltZSAtICtuZXcgRGF0ZSk7DQogICAgfQ0KICB9Ow0KICBEZWxheWVkLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAobXMsIGYpIHsNCiAgICB0aGlzLmYgPSBmOw0KICAgIHZhciB0aW1lID0gK25ldyBEYXRlICsgbXM7DQogICAgaWYgKCF0aGlzLmlkIHx8IHRpbWUgPCB0aGlzLnRpbWUpIHsNCiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmlkKTsNCiAgICAgIHRoaXMuaWQgPSBzZXRUaW1lb3V0KHRoaXMuaGFuZGxlciwgbXMpOw0KICAgICAgdGhpcy50aW1lID0gdGltZTsNCiAgICB9DQogIH07DQoNCiAgZnVuY3Rpb24gaW5kZXhPZihhcnJheSwgZWx0KSB7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7ICsraSkNCiAgICAgIHsgaWYgKGFycmF5W2ldID09IGVsdCkgeyByZXR1cm4gaSB9IH0NCiAgICByZXR1cm4gLTENCiAgfQ0KDQogIC8vIE51bWJlciBvZiBwaXhlbHMgYWRkZWQgdG8gc2Nyb2xsZXIgYW5kIHNpemVyIHRvIGhpZGUgc2Nyb2xsYmFyDQogIHZhciBzY3JvbGxlckdhcCA9IDMwOw0KDQogIC8vIFJldHVybmVkIG9yIHRocm93biBieSB2YXJpb3VzIHByb3RvY29scyB0byBzaWduYWwgJ0knbSBub3QNCiAgLy8gaGFuZGxpbmcgdGhpcycuDQogIHZhciBQYXNzID0ge3RvU3RyaW5nOiBmdW5jdGlvbigpe3JldHVybiAiQ29kZU1pcnJvci5QYXNzIn19Ow0KDQogIC8vIFJldXNlZCBvcHRpb24gb2JqZWN0cyBmb3Igc2V0U2VsZWN0aW9uICYgZnJpZW5kcw0KICB2YXIgc2VsX2RvbnRTY3JvbGwgPSB7c2Nyb2xsOiBmYWxzZX0sIHNlbF9tb3VzZSA9IHtvcmlnaW46ICIqbW91c2UifSwgc2VsX21vdmUgPSB7b3JpZ2luOiAiK21vdmUifTsNCg0KICAvLyBUaGUgaW52ZXJzZSBvZiBjb3VudENvbHVtbiAtLSBmaW5kIHRoZSBvZmZzZXQgdGhhdCBjb3JyZXNwb25kcyB0bw0KICAvLyBhIHBhcnRpY3VsYXIgY29sdW1uLg0KICBmdW5jdGlvbiBmaW5kQ29sdW1uKHN0cmluZywgZ29hbCwgdGFiU2l6ZSkgew0KICAgIGZvciAodmFyIHBvcyA9IDAsIGNvbCA9IDA7Oykgew0KICAgICAgdmFyIG5leHRUYWIgPSBzdHJpbmcuaW5kZXhPZigiXHQiLCBwb3MpOw0KICAgICAgaWYgKG5leHRUYWIgPT0gLTEpIHsgbmV4dFRhYiA9IHN0cmluZy5sZW5ndGg7IH0NCiAgICAgIHZhciBza2lwcGVkID0gbmV4dFRhYiAtIHBvczsNCiAgICAgIGlmIChuZXh0VGFiID09IHN0cmluZy5sZW5ndGggfHwgY29sICsgc2tpcHBlZCA+PSBnb2FsKQ0KICAgICAgICB7IHJldHVybiBwb3MgKyBNYXRoLm1pbihza2lwcGVkLCBnb2FsIC0gY29sKSB9DQogICAgICBjb2wgKz0gbmV4dFRhYiAtIHBvczsNCiAgICAgIGNvbCArPSB0YWJTaXplIC0gKGNvbCAlIHRhYlNpemUpOw0KICAgICAgcG9zID0gbmV4dFRhYiArIDE7DQogICAgICBpZiAoY29sID49IGdvYWwpIHsgcmV0dXJuIHBvcyB9DQogICAgfQ0KICB9DQoNCiAgdmFyIHNwYWNlU3RycyA9IFsiIl07DQogIGZ1bmN0aW9uIHNwYWNlU3RyKG4pIHsNCiAgICB3aGlsZSAoc3BhY2VTdHJzLmxlbmd0aCA8PSBuKQ0KICAgICAgeyBzcGFjZVN0cnMucHVzaChsc3Qoc3BhY2VTdHJzKSArICIgIik7IH0NCiAgICByZXR1cm4gc3BhY2VTdHJzW25dDQogIH0NCg0KICBmdW5jdGlvbiBsc3QoYXJyKSB7IHJldHVybiBhcnJbYXJyLmxlbmd0aC0xXSB9DQoNCiAgZnVuY3Rpb24gbWFwKGFycmF5LCBmKSB7DQogICAgdmFyIG91dCA9IFtdOw0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHsgb3V0W2ldID0gZihhcnJheVtpXSwgaSk7IH0NCiAgICByZXR1cm4gb3V0DQogIH0NCg0KICBmdW5jdGlvbiBpbnNlcnRTb3J0ZWQoYXJyYXksIHZhbHVlLCBzY29yZSkgew0KICAgIHZhciBwb3MgPSAwLCBwcmlvcml0eSA9IHNjb3JlKHZhbHVlKTsNCiAgICB3aGlsZSAocG9zIDwgYXJyYXkubGVuZ3RoICYmIHNjb3JlKGFycmF5W3Bvc10pIDw9IHByaW9yaXR5KSB7IHBvcysrOyB9DQogICAgYXJyYXkuc3BsaWNlKHBvcywgMCwgdmFsdWUpOw0KICB9DQoNCiAgZnVuY3Rpb24gbm90aGluZygpIHt9DQoNCiAgZnVuY3Rpb24gY3JlYXRlT2JqKGJhc2UsIHByb3BzKSB7DQogICAgdmFyIGluc3Q7DQogICAgaWYgKE9iamVjdC5jcmVhdGUpIHsNCiAgICAgIGluc3QgPSBPYmplY3QuY3JlYXRlKGJhc2UpOw0KICAgIH0gZWxzZSB7DQogICAgICBub3RoaW5nLnByb3RvdHlwZSA9IGJhc2U7DQogICAgICBpbnN0ID0gbmV3IG5vdGhpbmcoKTsNCiAgICB9DQogICAgaWYgKHByb3BzKSB7IGNvcHlPYmoocHJvcHMsIGluc3QpOyB9DQogICAgcmV0dXJuIGluc3QNCiAgfQ0KDQogIHZhciBub25BU0NJSVNpbmdsZUNhc2VXb3JkQ2hhciA9IC9bXHUwMGRmXHUwNTg3XHUwNTkwLVx1MDVmNFx1MDYwMC1cdTA2ZmZcdTMwNDAtXHUzMDlmXHUzMGEwLVx1MzBmZlx1MzQwMC1cdTRkYjVcdTRlMDAtXHU5ZmNjXHVhYzAwLVx1ZDdhZl0vOw0KICBmdW5jdGlvbiBpc1dvcmRDaGFyQmFzaWMoY2gpIHsNCiAgICByZXR1cm4gL1x3Ly50ZXN0KGNoKSB8fCBjaCA+ICJceDgwIiAmJg0KICAgICAgKGNoLnRvVXBwZXJDYXNlKCkgIT0gY2gudG9Mb3dlckNhc2UoKSB8fCBub25BU0NJSVNpbmdsZUNhc2VXb3JkQ2hhci50ZXN0KGNoKSkNCiAgfQ0KICBmdW5jdGlvbiBpc1dvcmRDaGFyKGNoLCBoZWxwZXIpIHsNCiAgICBpZiAoIWhlbHBlcikgeyByZXR1cm4gaXNXb3JkQ2hhckJhc2ljKGNoKSB9DQogICAgaWYgKGhlbHBlci5zb3VyY2UuaW5kZXhPZigiXFx3IikgPiAtMSAmJiBpc1dvcmRDaGFyQmFzaWMoY2gpKSB7IHJldHVybiB0cnVlIH0NCiAgICByZXR1cm4gaGVscGVyLnRlc3QoY2gpDQogIH0NCg0KICBmdW5jdGlvbiBpc0VtcHR5KG9iaikgew0KICAgIGZvciAodmFyIG4gaW4gb2JqKSB7IGlmIChvYmouaGFzT3duUHJvcGVydHkobikgJiYgb2JqW25dKSB7IHJldHVybiBmYWxzZSB9IH0NCiAgICByZXR1cm4gdHJ1ZQ0KICB9DQoNCiAgLy8gRXh0ZW5kaW5nIHVuaWNvZGUgY2hhcmFjdGVycy4gQSBzZXJpZXMgb2YgYSBub24tZXh0ZW5kaW5nIGNoYXIgKw0KICAvLyBhbnkgbnVtYmVyIG9mIGV4dGVuZGluZyBjaGFycyBpcyB0cmVhdGVkIGFzIGEgc2luZ2xlIHVuaXQgYXMgZmFyDQogIC8vIGFzIGVkaXRpbmcgYW5kIG1lYXN1cmluZyBpcyBjb25jZXJuZWQuIFRoaXMgaXMgbm90IGZ1bGx5IGNvcnJlY3QsDQogIC8vIHNpbmNlIHNvbWUgc2NyaXB0cy9mb250cy9icm93c2VycyBhbHNvIHRyZWF0IG90aGVyIGNvbmZpZ3VyYXRpb25zDQogIC8vIG9mIGNvZGUgcG9pbnRzIGFzIGEgZ3JvdXAuDQogIHZhciBleHRlbmRpbmdDaGFycyA9IC9bXHUwMzAwLVx1MDM2Zlx1MDQ4My1cdTA0ODlcdTA1OTEtXHUwNWJkXHUwNWJmXHUwNWMxXHUwNWMyXHUwNWM0XHUwNWM1XHUwNWM3XHUwNjEwLVx1MDYxYVx1MDY0Yi1cdTA2NWVcdTA2NzBcdTA2ZDYtXHUwNmRjXHUwNmRlLVx1MDZlNFx1MDZlN1x1MDZlOFx1MDZlYS1cdTA2ZWRcdTA3MTFcdTA3MzAtXHUwNzRhXHUwN2E2LVx1MDdiMFx1MDdlYi1cdTA3ZjNcdTA4MTYtXHUwODE5XHUwODFiLVx1MDgyM1x1MDgyNS1cdTA4MjdcdTA4MjktXHUwODJkXHUwOTAwLVx1MDkwMlx1MDkzY1x1MDk0MS1cdTA5NDhcdTA5NGRcdTA5NTEtXHUwOTU1XHUwOTYyXHUwOTYzXHUwOTgxXHUwOWJjXHUwOWJlXHUwOWMxLVx1MDljNFx1MDljZFx1MDlkN1x1MDllMlx1MDllM1x1MGEwMVx1MGEwMlx1MGEzY1x1MGE0MVx1MGE0Mlx1MGE0N1x1MGE0OFx1MGE0Yi1cdTBhNGRcdTBhNTFcdTBhNzBcdTBhNzFcdTBhNzVcdTBhODFcdTBhODJcdTBhYmNcdTBhYzEtXHUwYWM1XHUwYWM3XHUwYWM4XHUwYWNkXHUwYWUyXHUwYWUzXHUwYjAxXHUwYjNjXHUwYjNlXHUwYjNmXHUwYjQxLVx1MGI0NFx1MGI0ZFx1MGI1Nlx1MGI1N1x1MGI2Mlx1MGI2M1x1MGI4Mlx1MGJiZVx1MGJjMFx1MGJjZFx1MGJkN1x1MGMzZS1cdTBjNDBcdTBjNDYtXHUwYzQ4XHUwYzRhLVx1MGM0ZFx1MGM1NVx1MGM1Nlx1MGM2Mlx1MGM2M1x1MGNiY1x1MGNiZlx1MGNjMlx1MGNjNlx1MGNjY1x1MGNjZFx1MGNkNVx1MGNkNlx1MGNlMlx1MGNlM1x1MGQzZVx1MGQ0MS1cdTBkNDRcdTBkNGRcdTBkNTdcdTBkNjJcdTBkNjNcdTBkY2FcdTBkY2ZcdTBkZDItXHUwZGQ0XHUwZGQ2XHUwZGRmXHUwZTMxXHUwZTM0LVx1MGUzYVx1MGU0Ny1cdTBlNGVcdTBlYjFcdTBlYjQtXHUwZWI5XHUwZWJiXHUwZWJjXHUwZWM4LVx1MGVjZFx1MGYxOFx1MGYxOVx1MGYzNVx1MGYzN1x1MGYzOVx1MGY3MS1cdTBmN2VcdTBmODAtXHUwZjg0XHUwZjg2XHUwZjg3XHUwZjkwLVx1MGY5N1x1MGY5OS1cdTBmYmNcdTBmYzZcdTEwMmQtXHUxMDMwXHUxMDMyLVx1MTAzN1x1MTAzOVx1MTAzYVx1MTAzZFx1MTAzZVx1MTA1OFx1MTA1OVx1MTA1ZS1cdTEwNjBcdTEwNzEtXHUxMDc0XHUxMDgyXHUxMDg1XHUxMDg2XHUxMDhkXHUxMDlkXHUxMzVmXHUxNzEyLVx1MTcxNFx1MTczMi1cdTE3MzRcdTE3NTJcdTE3NTNcdTE3NzJcdTE3NzNcdTE3YjctXHUxN2JkXHUxN2M2XHUxN2M5LVx1MTdkM1x1MTdkZFx1MTgwYi1cdTE4MGRcdTE4YTlcdTE5MjAtXHUxOTIyXHUxOTI3XHUxOTI4XHUxOTMyXHUxOTM5LVx1MTkzYlx1MWExN1x1MWExOFx1MWE1Nlx1MWE1OC1cdTFhNWVcdTFhNjBcdTFhNjJcdTFhNjUtXHUxYTZjXHUxYTczLVx1MWE3Y1x1MWE3Zlx1MWIwMC1cdTFiMDNcdTFiMzRcdTFiMzYtXHUxYjNhXHUxYjNjXHUxYjQyXHUxYjZiLVx1MWI3M1x1MWI4MFx1MWI4MVx1MWJhMi1cdTFiYTVcdTFiYThcdTFiYTlcdTFjMmMtXHUxYzMzXHUxYzM2XHUxYzM3XHUxY2QwLVx1MWNkMlx1MWNkNC1cdTFjZTBcdTFjZTItXHUxY2U4XHUxY2VkXHUxZGMwLVx1MWRlNlx1MWRmZC1cdTFkZmZcdTIwMGNcdTIwMGRcdTIwZDAtXHUyMGYwXHUyY2VmLVx1MmNmMVx1MmRlMC1cdTJkZmZcdTMwMmEtXHUzMDJmXHUzMDk5XHUzMDlhXHVhNjZmLVx1YTY3Mlx1YTY3Y1x1YTY3ZFx1YTZmMFx1YTZmMVx1YTgwMlx1YTgwNlx1YTgwYlx1YTgyNVx1YTgyNlx1YThjNFx1YThlMC1cdWE4ZjFcdWE5MjYtXHVhOTJkXHVhOTQ3LVx1YTk1MVx1YTk4MC1cdWE5ODJcdWE5YjNcdWE5YjYtXHVhOWI5XHVhOWJjXHVhYTI5LVx1YWEyZVx1YWEzMVx1YWEzMlx1YWEzNVx1YWEzNlx1YWE0M1x1YWE0Y1x1YWFiMFx1YWFiMi1cdWFhYjRcdWFhYjdcdWFhYjhcdWFhYmVcdWFhYmZcdWFhYzFcdWFiZTVcdWFiZThcdWFiZWRcdWRjMDAtXHVkZmZmXHVmYjFlXHVmZTAwLVx1ZmUwZlx1ZmUyMC1cdWZlMjZcdWZmOWVcdWZmOWZdLzsNCiAgZnVuY3Rpb24gaXNFeHRlbmRpbmdDaGFyKGNoKSB7IHJldHVybiBjaC5jaGFyQ29kZUF0KDApID49IDc2OCAmJiBleHRlbmRpbmdDaGFycy50ZXN0KGNoKSB9DQoNCiAgLy8gUmV0dXJucyBhIG51bWJlciBmcm9tIHRoZSByYW5nZSBbYDBgOyBgc3RyLmxlbmd0aGBdIHVubGVzcyBgcG9zYCBpcyBvdXRzaWRlIHRoYXQgcmFuZ2UuDQogIGZ1bmN0aW9uIHNraXBFeHRlbmRpbmdDaGFycyhzdHIsIHBvcywgZGlyKSB7DQogICAgd2hpbGUgKChkaXIgPCAwID8gcG9zID4gMCA6IHBvcyA8IHN0ci5sZW5ndGgpICYmIGlzRXh0ZW5kaW5nQ2hhcihzdHIuY2hhckF0KHBvcykpKSB7IHBvcyArPSBkaXI7IH0NCiAgICByZXR1cm4gcG9zDQogIH0NCg0KICAvLyBSZXR1cm5zIHRoZSB2YWx1ZSBmcm9tIHRoZSByYW5nZSBbYGZyb21gOyBgdG9gXSB0aGF0IHNhdGlzZmllcw0KICAvLyBgcHJlZGAgYW5kIGlzIGNsb3Nlc3QgdG8gYGZyb21gLiBBc3N1bWVzIHRoYXQgYXQgbGVhc3QgYHRvYA0KICAvLyBzYXRpc2ZpZXMgYHByZWRgLiBTdXBwb3J0cyBgZnJvbWAgYmVpbmcgZ3JlYXRlciB0aGFuIGB0b2AuDQogIGZ1bmN0aW9uIGZpbmRGaXJzdChwcmVkLCBmcm9tLCB0bykgew0KICAgIC8vIEF0IGFueSBwb2ludCB3ZSBhcmUgY2VydGFpbiBgdG9gIHNhdGlzZmllcyBgcHJlZGAsIGRvbid0IGtub3cNCiAgICAvLyB3aGV0aGVyIGBmcm9tYCBkb2VzLg0KICAgIHZhciBkaXIgPSBmcm9tID4gdG8gPyAtMSA6IDE7DQogICAgZm9yICg7Oykgew0KICAgICAgaWYgKGZyb20gPT0gdG8pIHsgcmV0dXJuIGZyb20gfQ0KICAgICAgdmFyIG1pZEYgPSAoZnJvbSArIHRvKSAvIDIsIG1pZCA9IGRpciA8IDAgPyBNYXRoLmNlaWwobWlkRikgOiBNYXRoLmZsb29yKG1pZEYpOw0KICAgICAgaWYgKG1pZCA9PSBmcm9tKSB7IHJldHVybiBwcmVkKG1pZCkgPyBmcm9tIDogdG8gfQ0KICAgICAgaWYgKHByZWQobWlkKSkgeyB0byA9IG1pZDsgfQ0KICAgICAgZWxzZSB7IGZyb20gPSBtaWQgKyBkaXI7IH0NCiAgICB9DQogIH0NCg0KICAvLyBCSURJIEhFTFBFUlMNCg0KICBmdW5jdGlvbiBpdGVyYXRlQmlkaVNlY3Rpb25zKG9yZGVyLCBmcm9tLCB0bywgZikgew0KICAgIGlmICghb3JkZXIpIHsgcmV0dXJuIGYoZnJvbSwgdG8sICJsdHIiLCAwKSB9DQogICAgdmFyIGZvdW5kID0gZmFsc2U7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmRlci5sZW5ndGg7ICsraSkgew0KICAgICAgdmFyIHBhcnQgPSBvcmRlcltpXTsNCiAgICAgIGlmIChwYXJ0LmZyb20gPCB0byAmJiBwYXJ0LnRvID4gZnJvbSB8fCBmcm9tID09IHRvICYmIHBhcnQudG8gPT0gZnJvbSkgew0KICAgICAgICBmKE1hdGgubWF4KHBhcnQuZnJvbSwgZnJvbSksIE1hdGgubWluKHBhcnQudG8sIHRvKSwgcGFydC5sZXZlbCA9PSAxID8gInJ0bCIgOiAibHRyIiwgaSk7DQogICAgICAgIGZvdW5kID0gdHJ1ZTsNCiAgICAgIH0NCiAgICB9DQogICAgaWYgKCFmb3VuZCkgeyBmKGZyb20sIHRvLCAibHRyIik7IH0NCiAgfQ0KDQogIHZhciBiaWRpT3RoZXIgPSBudWxsOw0KICBmdW5jdGlvbiBnZXRCaWRpUGFydEF0KG9yZGVyLCBjaCwgc3RpY2t5KSB7DQogICAgdmFyIGZvdW5kOw0KICAgIGJpZGlPdGhlciA9IG51bGw7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmRlci5sZW5ndGg7ICsraSkgew0KICAgICAgdmFyIGN1ciA9IG9yZGVyW2ldOw0KICAgICAgaWYgKGN1ci5mcm9tIDwgY2ggJiYgY3VyLnRvID4gY2gpIHsgcmV0dXJuIGkgfQ0KICAgICAgaWYgKGN1ci50byA9PSBjaCkgew0KICAgICAgICBpZiAoY3VyLmZyb20gIT0gY3VyLnRvICYmIHN0aWNreSA9PSAiYmVmb3JlIikgeyBmb3VuZCA9IGk7IH0NCiAgICAgICAgZWxzZSB7IGJpZGlPdGhlciA9IGk7IH0NCiAgICAgIH0NCiAgICAgIGlmIChjdXIuZnJvbSA9PSBjaCkgew0KICAgICAgICBpZiAoY3VyLmZyb20gIT0gY3VyLnRvICYmIHN0aWNreSAhPSAiYmVmb3JlIikgeyBmb3VuZCA9IGk7IH0NCiAgICAgICAgZWxzZSB7IGJpZGlPdGhlciA9IGk7IH0NCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIGZvdW5kICE9IG51bGwgPyBmb3VuZCA6IGJpZGlPdGhlcg0KICB9DQoNCiAgLy8gQmlkaXJlY3Rpb25hbCBvcmRlcmluZyBhbGdvcml0aG0NCiAgLy8gU2VlIGh0dHA6Ly91bmljb2RlLm9yZy9yZXBvcnRzL3RyOS90cjktMTMuaHRtbCBmb3IgdGhlIGFsZ29yaXRobQ0KICAvLyB0aGF0IHRoaXMgKHBhcnRpYWxseSkgaW1wbGVtZW50cy4NCg0KICAvLyBPbmUtY2hhciBjb2RlcyB1c2VkIGZvciBjaGFyYWN0ZXIgdHlwZXM6DQogIC8vIEwgKEwpOiAgIExlZnQtdG8tUmlnaHQNCiAgLy8gUiAoUik6ICAgUmlnaHQtdG8tTGVmdA0KICAvLyByIChBTCk6ICBSaWdodC10by1MZWZ0IEFyYWJpYw0KICAvLyAxIChFTik6ICBFdXJvcGVhbiBOdW1iZXINCiAgLy8gKyAoRVMpOiAgRXVyb3BlYW4gTnVtYmVyIFNlcGFyYXRvcg0KICAvLyAlIChFVCk6ICBFdXJvcGVhbiBOdW1iZXIgVGVybWluYXRvcg0KICAvLyBuIChBTik6ICBBcmFiaWMgTnVtYmVyDQogIC8vICwgKENTKTogIENvbW1vbiBOdW1iZXIgU2VwYXJhdG9yDQogIC8vIG0gKE5TTSk6IE5vbi1TcGFjaW5nIE1hcmsNCiAgLy8gYiAoQk4pOiAgQm91bmRhcnkgTmV1dHJhbA0KICAvLyBzIChCKTogICBQYXJhZ3JhcGggU2VwYXJhdG9yDQogIC8vIHQgKFMpOiAgIFNlZ21lbnQgU2VwYXJhdG9yDQogIC8vIHcgKFdTKTogIFdoaXRlc3BhY2UNCiAgLy8gTiAoT04pOiAgT3RoZXIgTmV1dHJhbHMNCg0KICAvLyBSZXR1cm5zIG51bGwgaWYgY2hhcmFjdGVycyBhcmUgb3JkZXJlZCBhcyB0aGV5IGFwcGVhcg0KICAvLyAobGVmdC10by1yaWdodCksIG9yIGFuIGFycmF5IG9mIHNlY3Rpb25zICh7ZnJvbSwgdG8sIGxldmVsfQ0KICAvLyBvYmplY3RzKSBpbiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBvY2N1ciB2aXN1YWxseS4NCiAgdmFyIGJpZGlPcmRlcmluZyA9IChmdW5jdGlvbigpIHsNCiAgICAvLyBDaGFyYWN0ZXIgdHlwZXMgZm9yIGNvZGVwb2ludHMgMCB0byAweGZmDQogICAgdmFyIGxvd1R5cGVzID0gImJiYmJiYmJiYnRzdHdzYmJiYmJiYmJiYmJiYmJzc3N0d05OJSUlTk5OTk5OLE4sTjExMTExMTExMTFOTk5OTk5OTExMTExMTExMTExMTExMTExMTExMTExMTExOTk5OTk5MTExMTExMTExMTExMTExMTExMTExMTExMTE5OTk5iYmJiYmJzYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmJiYmIsTiUlJSVOTk5OTE5OTk5OJSUxMU5MTk5OMUxOTk5OTkxMTExMTExMTExMTExMTExMTExMTExMTkxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExOIjsNCiAgICAvLyBDaGFyYWN0ZXIgdHlwZXMgZm9yIGNvZGVwb2ludHMgMHg2MDAgdG8gMHg2ZjkNCiAgICB2YXIgYXJhYmljVHlwZXMgPSAibm5ubm5uTk5yJSVyLHJOTm1tbW1tbW1tbW1tcnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJybW1tbW1tbW1tbW1tbW1tbW1tbW1tbm5ubm5ubm5ubiVubnJycm1ycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycnJycm1tbW1tbW1uTm1tbW1tbXJybW1ObW1tbXJyMTExMTExMTExMSI7DQogICAgZnVuY3Rpb24gY2hhclR5cGUoY29kZSkgew0KICAgICAgaWYgKGNvZGUgPD0gMHhmNykgeyByZXR1cm4gbG93VHlwZXMuY2hhckF0KGNvZGUpIH0NCiAgICAgIGVsc2UgaWYgKDB4NTkwIDw9IGNvZGUgJiYgY29kZSA8PSAweDVmNCkgeyByZXR1cm4gIlIiIH0NCiAgICAgIGVsc2UgaWYgKDB4NjAwIDw9IGNvZGUgJiYgY29kZSA8PSAweDZmOSkgeyByZXR1cm4gYXJhYmljVHlwZXMuY2hhckF0KGNvZGUgLSAweDYwMCkgfQ0KICAgICAgZWxzZSBpZiAoMHg2ZWUgPD0gY29kZSAmJiBjb2RlIDw9IDB4OGFjKSB7IHJldHVybiAiciIgfQ0KICAgICAgZWxzZSBpZiAoMHgyMDAwIDw9IGNvZGUgJiYgY29kZSA8PSAweDIwMGIpIHsgcmV0dXJuICJ3IiB9DQogICAgICBlbHNlIGlmIChjb2RlID09IDB4MjAwYykgeyByZXR1cm4gImIiIH0NCiAgICAgIGVsc2UgeyByZXR1cm4gIkwiIH0NCiAgICB9DQoNCiAgICB2YXIgYmlkaVJFID0gL1tcdTA1OTAtXHUwNWY0XHUwNjAwLVx1MDZmZlx1MDcwMC1cdTA4YWNdLzsNCiAgICB2YXIgaXNOZXV0cmFsID0gL1tzdHdOXS8sIGlzU3Ryb25nID0gL1tMUnJdLywgY291bnRzQXNMZWZ0ID0gL1tMYjFuXS8sIGNvdW50c0FzTnVtID0gL1sxbl0vOw0KDQogICAgZnVuY3Rpb24gQmlkaVNwYW4obGV2ZWwsIGZyb20sIHRvKSB7DQogICAgICB0aGlzLmxldmVsID0gbGV2ZWw7DQogICAgICB0aGlzLmZyb20gPSBmcm9tOyB0aGlzLnRvID0gdG87DQogICAgfQ0KDQogICAgcmV0dXJuIGZ1bmN0aW9uKHN0ciwgZGlyZWN0aW9uKSB7DQogICAgICB2YXIgb3V0ZXJUeXBlID0gZGlyZWN0aW9uID09ICJsdHIiID8gIkwiIDogIlIiOw0KDQogICAgICBpZiAoc3RyLmxlbmd0aCA9PSAwIHx8IGRpcmVjdGlvbiA9PSAibHRyIiAmJiAhYmlkaVJFLnRlc3Qoc3RyKSkgeyByZXR1cm4gZmFsc2UgfQ0KICAgICAgdmFyIGxlbiA9IHN0ci5sZW5ndGgsIHR5cGVzID0gW107DQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKQ0KICAgICAgICB7IHR5cGVzLnB1c2goY2hhclR5cGUoc3RyLmNoYXJDb2RlQXQoaSkpKTsgfQ0KDQogICAgICAvLyBXMS4gRXhhbWluZSBlYWNoIG5vbi1zcGFjaW5nIG1hcmsgKE5TTSkgaW4gdGhlIGxldmVsIHJ1biwgYW5kDQogICAgICAvLyBjaGFuZ2UgdGhlIHR5cGUgb2YgdGhlIE5TTSB0byB0aGUgdHlwZSBvZiB0aGUgcHJldmlvdXMNCiAgICAgIC8vIGNoYXJhY3Rlci4gSWYgdGhlIE5TTSBpcyBhdCB0aGUgc3RhcnQgb2YgdGhlIGxldmVsIHJ1biwgaXQgd2lsbA0KICAgICAgLy8gZ2V0IHRoZSB0eXBlIG9mIHNvci4NCiAgICAgIGZvciAodmFyIGkkMSA9IDAsIHByZXYgPSBvdXRlclR5cGU7IGkkMSA8IGxlbjsgKytpJDEpIHsNCiAgICAgICAgdmFyIHR5cGUgPSB0eXBlc1tpJDFdOw0KICAgICAgICBpZiAodHlwZSA9PSAibSIpIHsgdHlwZXNbaSQxXSA9IHByZXY7IH0NCiAgICAgICAgZWxzZSB7IHByZXYgPSB0eXBlOyB9DQogICAgICB9DQoNCiAgICAgIC8vIFcyLiBTZWFyY2ggYmFja3dhcmRzIGZyb20gZWFjaCBpbnN0YW5jZSBvZiBhIEV1cm9wZWFuIG51bWJlcg0KICAgICAgLy8gdW50aWwgdGhlIGZpcnN0IHN0cm9uZyB0eXBlIChSLCBMLCBBTCwgb3Igc29yKSBpcyBmb3VuZC4gSWYgYW4NCiAgICAgIC8vIEFMIGlzIGZvdW5kLCBjaGFuZ2UgdGhlIHR5cGUgb2YgdGhlIEV1cm9wZWFuIG51bWJlciB0byBBcmFiaWMNCiAgICAgIC8vIG51bWJlci4NCiAgICAgIC8vIFczLiBDaGFuZ2UgYWxsIEFMcyB0byBSLg0KICAgICAgZm9yICh2YXIgaSQyID0gMCwgY3VyID0gb3V0ZXJUeXBlOyBpJDIgPCBsZW47ICsraSQyKSB7DQogICAgICAgIHZhciB0eXBlJDEgPSB0eXBlc1tpJDJdOw0KICAgICAgICBpZiAodHlwZSQxID09ICIxIiAmJiBjdXIgPT0gInIiKSB7IHR5cGVzW2kkMl0gPSAibiI7IH0NCiAgICAgICAgZWxzZSBpZiAoaXNTdHJvbmcudGVzdCh0eXBlJDEpKSB7IGN1ciA9IHR5cGUkMTsgaWYgKHR5cGUkMSA9PSAiciIpIHsgdHlwZXNbaSQyXSA9ICJSIjsgfSB9DQogICAgICB9DQoNCiAgICAgIC8vIFc0LiBBIHNpbmdsZSBFdXJvcGVhbiBzZXBhcmF0b3IgYmV0d2VlbiB0d28gRXVyb3BlYW4gbnVtYmVycw0KICAgICAgLy8gY2hhbmdlcyB0byBhIEV1cm9wZWFuIG51bWJlci4gQSBzaW5nbGUgY29tbW9uIHNlcGFyYXRvciBiZXR3ZWVuDQogICAgICAvLyB0d28gbnVtYmVycyBvZiB0aGUgc2FtZSB0eXBlIGNoYW5nZXMgdG8gdGhhdCB0eXBlLg0KICAgICAgZm9yICh2YXIgaSQzID0gMSwgcHJldiQxID0gdHlwZXNbMF07IGkkMyA8IGxlbiAtIDE7ICsraSQzKSB7DQogICAgICAgIHZhciB0eXBlJDIgPSB0eXBlc1tpJDNdOw0KICAgICAgICBpZiAodHlwZSQyID09ICIrIiAmJiBwcmV2JDEgPT0gIjEiICYmIHR5cGVzW2kkMysxXSA9PSAiMSIpIHsgdHlwZXNbaSQzXSA9ICIxIjsgfQ0KICAgICAgICBlbHNlIGlmICh0eXBlJDIgPT0gIiwiICYmIHByZXYkMSA9PSB0eXBlc1tpJDMrMV0gJiYNCiAgICAgICAgICAgICAgICAgKHByZXYkMSA9PSAiMSIgfHwgcHJldiQxID09ICJuIikpIHsgdHlwZXNbaSQzXSA9IHByZXYkMTsgfQ0KICAgICAgICBwcmV2JDEgPSB0eXBlJDI7DQogICAgICB9DQoNCiAgICAgIC8vIFc1LiBBIHNlcXVlbmNlIG9mIEV1cm9wZWFuIHRlcm1pbmF0b3JzIGFkamFjZW50IHRvIEV1cm9wZWFuDQogICAgICAvLyBudW1iZXJzIGNoYW5nZXMgdG8gYWxsIEV1cm9wZWFuIG51bWJlcnMuDQogICAgICAvLyBXNi4gT3RoZXJ3aXNlLCBzZXBhcmF0b3JzIGFuZCB0ZXJtaW5hdG9ycyBjaGFuZ2UgdG8gT3RoZXINCiAgICAgIC8vIE5ldXRyYWwuDQogICAgICBmb3IgKHZhciBpJDQgPSAwOyBpJDQgPCBsZW47ICsraSQ0KSB7DQogICAgICAgIHZhciB0eXBlJDMgPSB0eXBlc1tpJDRdOw0KICAgICAgICBpZiAodHlwZSQzID09ICIsIikgeyB0eXBlc1tpJDRdID0gIk4iOyB9DQogICAgICAgIGVsc2UgaWYgKHR5cGUkMyA9PSAiJSIpIHsNCiAgICAgICAgICB2YXIgZW5kID0gKHZvaWQgMCk7DQogICAgICAgICAgZm9yIChlbmQgPSBpJDQgKyAxOyBlbmQgPCBsZW4gJiYgdHlwZXNbZW5kXSA9PSAiJSI7ICsrZW5kKSB7fQ0KICAgICAgICAgIHZhciByZXBsYWNlID0gKGkkNCAmJiB0eXBlc1tpJDQtMV0gPT0gIiEiKSB8fCAoZW5kIDwgbGVuICYmIHR5cGVzW2VuZF0gPT0gIjEiKSA/ICIxIiA6ICJOIjsNCiAgICAgICAgICBmb3IgKHZhciBqID0gaSQ0OyBqIDwgZW5kOyArK2opIHsgdHlwZXNbal0gPSByZXBsYWNlOyB9DQogICAgICAgICAgaSQ0ID0gZW5kIC0gMTsNCiAgICAgICAgfQ0KICAgICAgfQ0KDQogICAgICAvLyBXNy4gU2VhcmNoIGJhY2t3YXJkcyBmcm9tIGVhY2ggaW5zdGFuY2Ugb2YgYSBFdXJvcGVhbiBudW1iZXINCiAgICAgIC8vIHVudGlsIHRoZSBmaXJzdCBzdHJvbmcgdHlwZSAoUiwgTCwgb3Igc29yKSBpcyBmb3VuZC4gSWYgYW4gTCBpcw0KICAgICAgLy8gZm91bmQsIHRoZW4gY2hhbmdlIHRoZSB0eXBlIG9mIHRoZSBFdXJvcGVhbiBudW1iZXIgdG8gTC4NCiAgICAgIGZvciAodmFyIGkkNSA9IDAsIGN1ciQxID0gb3V0ZXJUeXBlOyBpJDUgPCBsZW47ICsraSQ1KSB7DQogICAgICAgIHZhciB0eXBlJDQgPSB0eXBlc1tpJDVdOw0KICAgICAgICBpZiAoY3VyJDEgPT0gIkwiICYmIHR5cGUkNCA9PSAiMSIpIHsgdHlwZXNbaSQ1XSA9ICJMIjsgfQ0KICAgICAgICBlbHNlIGlmIChpc1N0cm9uZy50ZXN0KHR5cGUkNCkpIHsgY3VyJDEgPSB0eXBlJDQ7IH0NCiAgICAgIH0NCg0KICAgICAgLy8gTjEuIEEgc2VxdWVuY2Ugb2YgbmV1dHJhbHMgdGFrZXMgdGhlIGRpcmVjdGlvbiBvZiB0aGUNCiAgICAgIC8vIHN1cnJvdW5kaW5nIHN0cm9uZyB0ZXh0IGlmIHRoZSB0ZXh0IG9uIGJvdGggc2lkZXMgaGFzIHRoZSBzYW1lDQogICAgICAvLyBkaXJlY3Rpb24uIEV1cm9wZWFuIGFuZCBBcmFiaWMgbnVtYmVycyBhY3QgYXMgaWYgdGhleSB3ZXJlIFIgaW4NCiAgICAgIC8vIHRlcm1zIG9mIHRoZWlyIGluZmx1ZW5jZSBvbiBuZXV0cmFscy4gU3RhcnQtb2YtbGV2ZWwtcnVuIChzb3IpDQogICAgICAvLyBhbmQgZW5kLW9mLWxldmVsLXJ1biAoZW9yKSBhcmUgdXNlZCBhdCBsZXZlbCBydW4gYm91bmRhcmllcy4NCiAgICAgIC8vIE4yLiBBbnkgcmVtYWluaW5nIG5ldXRyYWxzIHRha2UgdGhlIGVtYmVkZGluZyBkaXJlY3Rpb24uDQogICAgICBmb3IgKHZhciBpJDYgPSAwOyBpJDYgPCBsZW47ICsraSQ2KSB7DQogICAgICAgIGlmIChpc05ldXRyYWwudGVzdCh0eXBlc1tpJDZdKSkgew0KICAgICAgICAgIHZhciBlbmQkMSA9ICh2b2lkIDApOw0KICAgICAgICAgIGZvciAoZW5kJDEgPSBpJDYgKyAxOyBlbmQkMSA8IGxlbiAmJiBpc05ldXRyYWwudGVzdCh0eXBlc1tlbmQkMV0pOyArK2VuZCQxKSB7fQ0KICAgICAgICAgIHZhciBiZWZvcmUgPSAoaSQ2ID8gdHlwZXNbaSQ2LTFdIDogb3V0ZXJUeXBlKSA9PSAiTCI7DQogICAgICAgICAgdmFyIGFmdGVyID0gKGVuZCQxIDwgbGVuID8gdHlwZXNbZW5kJDFdIDogb3V0ZXJUeXBlKSA9PSAiTCI7DQogICAgICAgICAgdmFyIHJlcGxhY2UkMSA9IGJlZm9yZSA9PSBhZnRlciA/IChiZWZvcmUgPyAiTCIgOiAiUiIpIDogb3V0ZXJUeXBlOw0KICAgICAgICAgIGZvciAodmFyIGokMSA9IGkkNjsgaiQxIDwgZW5kJDE7ICsraiQxKSB7IHR5cGVzW2okMV0gPSByZXBsYWNlJDE7IH0NCiAgICAgICAgICBpJDYgPSBlbmQkMSAtIDE7DQogICAgICAgIH0NCiAgICAgIH0NCg0KICAgICAgLy8gSGVyZSB3ZSBkZXBhcnQgZnJvbSB0aGUgZG9jdW1lbnRlZCBhbGdvcml0aG0sIGluIG9yZGVyIHRvIGF2b2lkDQogICAgICAvLyBidWlsZGluZyB1cCBhbiBhY3R1YWwgbGV2ZWxzIGFycmF5LiBTaW5jZSB0aGVyZSBhcmUgb25seSB0aHJlZQ0KICAgICAgLy8gbGV2ZWxzICgwLCAxLCAyKSBpbiBhbiBpbXBsZW1lbnRhdGlvbiB0aGF0IGRvZXNuJ3QgdGFrZQ0KICAgICAgLy8gZXhwbGljaXQgZW1iZWRkaW5nIGludG8gYWNjb3VudCwgd2UgY2FuIGJ1aWxkIHVwIHRoZSBvcmRlciBvbg0KICAgICAgLy8gdGhlIGZseSwgd2l0aG91dCBmb2xsb3dpbmcgdGhlIGxldmVsLWJhc2VkIGFsZ29yaXRobS4NCiAgICAgIHZhciBvcmRlciA9IFtdLCBtOw0KICAgICAgZm9yICh2YXIgaSQ3ID0gMDsgaSQ3IDwgbGVuOykgew0KICAgICAgICBpZiAoY291bnRzQXNMZWZ0LnRlc3QodHlwZXNbaSQ3XSkpIHsNCiAgICAgICAgICB2YXIgc3RhcnQgPSBpJDc7DQogICAgICAgICAgZm9yICgrK2kkNzsgaSQ3IDwgbGVuICYmIGNvdW50c0FzTGVmdC50ZXN0KHR5cGVzW2kkN10pOyArK2kkNykge30NCiAgICAgICAgICBvcmRlci5wdXNoKG5ldyBCaWRpU3BhbigwLCBzdGFydCwgaSQ3KSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgdmFyIHBvcyA9IGkkNywgYXQgPSBvcmRlci5sZW5ndGgsIGlzUlRMID0gZGlyZWN0aW9uID09ICJydGwiID8gMSA6IDA7DQogICAgICAgICAgZm9yICgrK2kkNzsgaSQ3IDwgbGVuICYmIHR5cGVzW2kkN10gIT0gIkwiOyArK2kkNykge30NCiAgICAgICAgICBmb3IgKHZhciBqJDIgPSBwb3M7IGokMiA8IGkkNzspIHsNCiAgICAgICAgICAgIGlmIChjb3VudHNBc051bS50ZXN0KHR5cGVzW2okMl0pKSB7DQogICAgICAgICAgICAgIGlmIChwb3MgPCBqJDIpIHsgb3JkZXIuc3BsaWNlKGF0LCAwLCBuZXcgQmlkaVNwYW4oMSwgcG9zLCBqJDIpKTsgYXQgKz0gaXNSVEw7IH0NCiAgICAgICAgICAgICAgdmFyIG5zdGFydCA9IGokMjsNCiAgICAgICAgICAgICAgZm9yICgrK2okMjsgaiQyIDwgaSQ3ICYmIGNvdW50c0FzTnVtLnRlc3QodHlwZXNbaiQyXSk7ICsraiQyKSB7fQ0KICAgICAgICAgICAgICBvcmRlci5zcGxpY2UoYXQsIDAsIG5ldyBCaWRpU3BhbigyLCBuc3RhcnQsIGokMikpOw0KICAgICAgICAgICAgICBhdCArPSBpc1JUTDsNCiAgICAgICAgICAgICAgcG9zID0gaiQyOw0KICAgICAgICAgICAgfSBlbHNlIHsgKytqJDI7IH0NCiAgICAgICAgICB9DQogICAgICAgICAgaWYgKHBvcyA8IGkkNykgeyBvcmRlci5zcGxpY2UoYXQsIDAsIG5ldyBCaWRpU3BhbigxLCBwb3MsIGkkNykpOyB9DQogICAgICAgIH0NCiAgICAgIH0NCiAgICAgIGlmIChkaXJlY3Rpb24gPT0gImx0ciIpIHsNCiAgICAgICAgaWYgKG9yZGVyWzBdLmxldmVsID09IDEgJiYgKG0gPSBzdHIubWF0Y2goL15ccysvKSkpIHsNCiAgICAgICAgICBvcmRlclswXS5mcm9tID0gbVswXS5sZW5ndGg7DQogICAgICAgICAgb3JkZXIudW5zaGlmdChuZXcgQmlkaVNwYW4oMCwgMCwgbVswXS5sZW5ndGgpKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAobHN0KG9yZGVyKS5sZXZlbCA9PSAxICYmIChtID0gc3RyLm1hdGNoKC9ccyskLykpKSB7DQogICAgICAgICAgbHN0KG9yZGVyKS50byAtPSBtWzBdLmxlbmd0aDsNCiAgICAgICAgICBvcmRlci5wdXNoKG5ldyBCaWRpU3BhbigwLCBsZW4gLSBtWzBdLmxlbmd0aCwgbGVuKSk7DQogICAgICAgIH0NCiAgICAgIH0NCg0KICAgICAgcmV0dXJuIGRpcmVjdGlvbiA9PSAicnRsIiA/IG9yZGVyLnJldmVyc2UoKSA6IG9yZGVyDQogICAgfQ0KICB9KSgpOw0KDQogIC8vIEdldCB0aGUgYmlkaSBvcmRlcmluZyBmb3IgdGhlIGdpdmVuIGxpbmUgKGFuZCBjYWNoZSBpdCkuIFJldHVybnMNCiAgLy8gZmFsc2UgZm9yIGxpbmVzIHRoYXQgYXJlIGZ1bGx5IGxlZnQtdG8tcmlnaHQsIGFuZCBhbiBhcnJheSBvZg0KICAvLyBCaWRpU3BhbiBvYmplY3RzIG90aGVyd2lzZS4NCiAgZnVuY3Rpb24gZ2V0T3JkZXIobGluZSwgZGlyZWN0aW9uKSB7DQogICAgdmFyIG9yZGVyID0gbGluZS5vcmRlcjsNCiAgICBpZiAob3JkZXIgPT0gbnVsbCkgeyBvcmRlciA9IGxpbmUub3JkZXIgPSBiaWRpT3JkZXJpbmcobGluZS50ZXh0LCBkaXJlY3Rpb24pOyB9DQogICAgcmV0dXJuIG9yZGVyDQogIH0NCg0KICAvLyBFVkVOVCBIQU5ETElORw0KDQogIC8vIExpZ2h0d2VpZ2h0IGV2ZW50IGZyYW1ld29yay4gb24vb2ZmIGFsc28gd29yayBvbiBET00gbm9kZXMsDQogIC8vIHJlZ2lzdGVyaW5nIG5hdGl2ZSBET00gaGFuZGxlcnMuDQoNCiAgdmFyIG5vSGFuZGxlcnMgPSBbXTsNCg0KICB2YXIgb24gPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlLCBmKSB7DQogICAgaWYgKGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lcikgew0KICAgICAgZW1pdHRlci5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGYsIGZhbHNlKTsNCiAgICB9IGVsc2UgaWYgKGVtaXR0ZXIuYXR0YWNoRXZlbnQpIHsNCiAgICAgIGVtaXR0ZXIuYXR0YWNoRXZlbnQoIm9uIiArIHR5cGUsIGYpOw0KICAgIH0gZWxzZSB7DQogICAgICB2YXIgbWFwJCQxID0gZW1pdHRlci5faGFuZGxlcnMgfHwgKGVtaXR0ZXIuX2hhbmRsZXJzID0ge30pOw0KICAgICAgbWFwJCQxW3R5cGVdID0gKG1hcCQkMVt0eXBlXSB8fCBub0hhbmRsZXJzKS5jb25jYXQoZik7DQogICAgfQ0KICB9Ow0KDQogIGZ1bmN0aW9uIGdldEhhbmRsZXJzKGVtaXR0ZXIsIHR5cGUpIHsNCiAgICByZXR1cm4gZW1pdHRlci5faGFuZGxlcnMgJiYgZW1pdHRlci5faGFuZGxlcnNbdHlwZV0gfHwgbm9IYW5kbGVycw0KICB9DQoNCiAgZnVuY3Rpb24gb2ZmKGVtaXR0ZXIsIHR5cGUsIGYpIHsNCiAgICBpZiAoZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKSB7DQogICAgICBlbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgZiwgZmFsc2UpOw0KICAgIH0gZWxzZSBpZiAoZW1pdHRlci5kZXRhY2hFdmVudCkgew0KICAgICAgZW1pdHRlci5kZXRhY2hFdmVudCgib24iICsgdHlwZSwgZik7DQogICAgfSBlbHNlIHsNCiAgICAgIHZhciBtYXAkJDEgPSBlbWl0dGVyLl9oYW5kbGVycywgYXJyID0gbWFwJCQxICYmIG1hcCQkMVt0eXBlXTsNCiAgICAgIGlmIChhcnIpIHsNCiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhPZihhcnIsIGYpOw0KICAgICAgICBpZiAoaW5kZXggPiAtMSkNCiAgICAgICAgICB7IG1hcCQkMVt0eXBlXSA9IGFyci5zbGljZSgwLCBpbmRleCkuY29uY2F0KGFyci5zbGljZShpbmRleCArIDEpKTsgfQ0KICAgICAgfQ0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIHNpZ25hbChlbWl0dGVyLCB0eXBlIC8qLCB2YWx1ZXMuLi4qLykgew0KICAgIHZhciBoYW5kbGVycyA9IGdldEhhbmRsZXJzKGVtaXR0ZXIsIHR5cGUpOw0KICAgIGlmICghaGFuZGxlcnMubGVuZ3RoKSB7IHJldHVybiB9DQogICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpOw0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlcnMubGVuZ3RoOyArK2kpIHsgaGFuZGxlcnNbaV0uYXBwbHkobnVsbCwgYXJncyk7IH0NCiAgfQ0KDQogIC8vIFRoZSBET00gZXZlbnRzIHRoYXQgQ29kZU1pcnJvciBoYW5kbGVzIGNhbiBiZSBvdmVycmlkZGVuIGJ5DQogIC8vIHJlZ2lzdGVyaW5nIGEgKG5vbi1ET00pIGhhbmRsZXIgb24gdGhlIGVkaXRvciBmb3IgdGhlIGV2ZW50IG5hbWUsDQogIC8vIGFuZCBwcmV2ZW50RGVmYXVsdC1pbmcgdGhlIGV2ZW50IGluIHRoYXQgaGFuZGxlci4NCiAgZnVuY3Rpb24gc2lnbmFsRE9NRXZlbnQoY20sIGUsIG92ZXJyaWRlKSB7DQogICAgaWYgKHR5cGVvZiBlID09ICJzdHJpbmciKQ0KICAgICAgeyBlID0ge3R5cGU6IGUsIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHsgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTsgfX07IH0NCiAgICBzaWduYWwoY20sIG92ZXJyaWRlIHx8IGUudHlwZSwgY20sIGUpOw0KICAgIHJldHVybiBlX2RlZmF1bHRQcmV2ZW50ZWQoZSkgfHwgZS5jb2RlbWlycm9ySWdub3JlDQogIH0NCg0KICBmdW5jdGlvbiBzaWduYWxDdXJzb3JBY3Rpdml0eShjbSkgew0KICAgIHZhciBhcnIgPSBjbS5faGFuZGxlcnMgJiYgY20uX2hhbmRsZXJzLmN1cnNvckFjdGl2aXR5Ow0KICAgIGlmICghYXJyKSB7IHJldHVybiB9DQogICAgdmFyIHNldCA9IGNtLmN1ck9wLmN1cnNvckFjdGl2aXR5SGFuZGxlcnMgfHwgKGNtLmN1ck9wLmN1cnNvckFjdGl2aXR5SGFuZGxlcnMgPSBbXSk7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHsgaWYgKGluZGV4T2Yoc2V0LCBhcnJbaV0pID09IC0xKQ0KICAgICAgeyBzZXQucHVzaChhcnJbaV0pOyB9IH0NCiAgfQ0KDQogIGZ1bmN0aW9uIGhhc0hhbmRsZXIoZW1pdHRlciwgdHlwZSkgew0KICAgIHJldHVybiBnZXRIYW5kbGVycyhlbWl0dGVyLCB0eXBlKS5sZW5ndGggPiAwDQogIH0NCg0KICAvLyBBZGQgb24gYW5kIG9mZiBtZXRob2RzIHRvIGEgY29uc3RydWN0b3IncyBwcm90b3R5cGUsIHRvIG1ha2UNCiAgLy8gcmVnaXN0ZXJpbmcgZXZlbnRzIG9uIHN1Y2ggb2JqZWN0cyBtb3JlIGNvbnZlbmllbnQuDQogIGZ1bmN0aW9uIGV2ZW50TWl4aW4oY3Rvcikgew0KICAgIGN0b3IucHJvdG90eXBlLm9uID0gZnVuY3Rpb24odHlwZSwgZikge29uKHRoaXMsIHR5cGUsIGYpO307DQogICAgY3Rvci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24odHlwZSwgZikge29mZih0aGlzLCB0eXBlLCBmKTt9Ow0KICB9DQoNCiAgLy8gRHVlIHRvIHRoZSBmYWN0IHRoYXQgd2Ugc3RpbGwgc3VwcG9ydCBqdXJhc3NpYyBJRSB2ZXJzaW9ucywgc29tZQ0KICAvLyBjb21wYXRpYmlsaXR5IHdyYXBwZXJzIGFyZSBuZWVkZWQuDQoNCiAgZnVuY3Rpb24gZV9wcmV2ZW50RGVmYXVsdChlKSB7DQogICAgaWYgKGUucHJldmVudERlZmF1bHQpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyB9DQogICAgZWxzZSB7IGUucmV0dXJuVmFsdWUgPSBmYWxzZTsgfQ0KICB9DQogIGZ1bmN0aW9uIGVfc3RvcFByb3BhZ2F0aW9uKGUpIHsNCiAgICBpZiAoZS5zdG9wUHJvcGFnYXRpb24pIHsgZS5zdG9wUHJvcGFnYXRpb24oKTsgfQ0KICAgIGVsc2UgeyBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7IH0NCiAgfQ0KICBmdW5jdGlvbiBlX2RlZmF1bHRQcmV2ZW50ZWQoZSkgew0KICAgIHJldHVybiBlLmRlZmF1bHRQcmV2ZW50ZWQgIT0gbnVsbCA/IGUuZGVmYXVsdFByZXZlbnRlZCA6IGUucmV0dXJuVmFsdWUgPT0gZmFsc2UNCiAgfQ0KICBmdW5jdGlvbiBlX3N0b3AoZSkge2VfcHJldmVudERlZmF1bHQoZSk7IGVfc3RvcFByb3BhZ2F0aW9uKGUpO30NCg0KICBmdW5jdGlvbiBlX3RhcmdldChlKSB7cmV0dXJuIGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudH0NCiAgZnVuY3Rpb24gZV9idXR0b24oZSkgew0KICAgIHZhciBiID0gZS53aGljaDsNCiAgICBpZiAoYiA9PSBudWxsKSB7DQogICAgICBpZiAoZS5idXR0b24gJiAxKSB7IGIgPSAxOyB9DQogICAgICBlbHNlIGlmIChlLmJ1dHRvbiAmIDIpIHsgYiA9IDM7IH0NCiAgICAgIGVsc2UgaWYgKGUuYnV0dG9uICYgNCkgeyBiID0gMjsgfQ0KICAgIH0NCiAgICBpZiAobWFjICYmIGUuY3RybEtleSAmJiBiID09IDEpIHsgYiA9IDM7IH0NCiAgICByZXR1cm4gYg0KICB9DQoNCiAgLy8gRGV0ZWN0IGRyYWctYW5kLWRyb3ANCiAgdmFyIGRyYWdBbmREcm9wID0gZnVuY3Rpb24oKSB7DQogICAgLy8gVGhlcmUgaXMgKnNvbWUqIGtpbmQgb2YgZHJhZy1hbmQtZHJvcCBzdXBwb3J0IGluIElFNi04LCBidXQgSQ0KICAgIC8vIGNvdWxkbid0IGdldCBpdCB0byB3b3JrIHlldC4NCiAgICBpZiAoaWUgJiYgaWVfdmVyc2lvbiA8IDkpIHsgcmV0dXJuIGZhbHNlIH0NCiAgICB2YXIgZGl2ID0gZWx0KCdkaXYnKTsNCiAgICByZXR1cm4gImRyYWdnYWJsZSIgaW4gZGl2IHx8ICJkcmFnRHJvcCIgaW4gZGl2DQogIH0oKTsNCg0KICB2YXIgendzcFN1cHBvcnRlZDsNCiAgZnVuY3Rpb24gemVyb1dpZHRoRWxlbWVudChtZWFzdXJlKSB7DQogICAgaWYgKHp3c3BTdXBwb3J0ZWQgPT0gbnVsbCkgew0KICAgICAgdmFyIHRlc3QgPSBlbHQoInNwYW4iLCAiXHUyMDBiIik7DQogICAgICByZW1vdmVDaGlsZHJlbkFuZEFkZChtZWFzdXJlLCBlbHQoInNwYW4iLCBbdGVzdCwgZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIngiKV0pKTsNCiAgICAgIGlmIChtZWFzdXJlLmZpcnN0Q2hpbGQub2Zmc2V0SGVpZ2h0ICE9IDApDQogICAgICAgIHsgendzcFN1cHBvcnRlZCA9IHRlc3Qub2Zmc2V0V2lkdGggPD0gMSAmJiB0ZXN0Lm9mZnNldEhlaWdodCA+IDIgJiYgIShpZSAmJiBpZV92ZXJzaW9uIDwgOCk7IH0NCiAgICB9DQogICAgdmFyIG5vZGUgPSB6d3NwU3VwcG9ydGVkID8gZWx0KCJzcGFuIiwgIlx1MjAwYiIpIDoNCiAgICAgIGVsdCgic3BhbiIsICJcdTAwYTAiLCBudWxsLCAiZGlzcGxheTogaW5saW5lLWJsb2NrOyB3aWR0aDogMXB4OyBtYXJnaW4tcmlnaHQ6IC0xcHgiKTsNCiAgICBub2RlLnNldEF0dHJpYnV0ZSgiY20tdGV4dCIsICIiKTsNCiAgICByZXR1cm4gbm9kZQ0KICB9DQoNCiAgLy8gRmVhdHVyZS1kZXRlY3QgSUUncyBjcnVtbXkgY2xpZW50IHJlY3QgcmVwb3J0aW5nIGZvciBiaWRpIHRleHQNCiAgdmFyIGJhZEJpZGlSZWN0czsNCiAgZnVuY3Rpb24gaGFzQmFkQmlkaVJlY3RzKG1lYXN1cmUpIHsNCiAgICBpZiAoYmFkQmlkaVJlY3RzICE9IG51bGwpIHsgcmV0dXJuIGJhZEJpZGlSZWN0cyB9DQogICAgdmFyIHR4dCA9IHJlbW92ZUNoaWxkcmVuQW5kQWRkKG1lYXN1cmUsIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCJBXHUwNjJlQSIpKTsNCiAgICB2YXIgcjAgPSByYW5nZSh0eHQsIDAsIDEpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOw0KICAgIHZhciByMSA9IHJhbmdlKHR4dCwgMSwgMikuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7DQogICAgcmVtb3ZlQ2hpbGRyZW4obWVhc3VyZSk7DQogICAgaWYgKCFyMCB8fCByMC5sZWZ0ID09IHIwLnJpZ2h0KSB7IHJldHVybiBmYWxzZSB9IC8vIFNhZmFyaSByZXR1cm5zIG51bGwgaW4gc29tZSBjYXNlcyAoIzI3ODApDQogICAgcmV0dXJuIGJhZEJpZGlSZWN0cyA9IChyMS5yaWdodCAtIHIwLnJpZ2h0IDwgMykNCiAgfQ0KDQogIC8vIFNlZSBpZiAiIi5zcGxpdCBpcyB0aGUgYnJva2VuIElFIHZlcnNpb24sIGlmIHNvLCBwcm92aWRlIGFuDQogIC8vIGFsdGVybmF0aXZlIHdheSB0byBzcGxpdCBsaW5lcy4NCiAgdmFyIHNwbGl0TGluZXNBdXRvID0gIlxuXG5iIi5zcGxpdCgvXG4vKS5sZW5ndGggIT0gMyA/IGZ1bmN0aW9uIChzdHJpbmcpIHsNCiAgICB2YXIgcG9zID0gMCwgcmVzdWx0ID0gW10sIGwgPSBzdHJpbmcubGVuZ3RoOw0KICAgIHdoaWxlIChwb3MgPD0gbCkgew0KICAgICAgdmFyIG5sID0gc3RyaW5nLmluZGV4T2YoIlxuIiwgcG9zKTsNCiAgICAgIGlmIChubCA9PSAtMSkgeyBubCA9IHN0cmluZy5sZW5ndGg7IH0NCiAgICAgIHZhciBsaW5lID0gc3RyaW5nLnNsaWNlKHBvcywgc3RyaW5nLmNoYXJBdChubCAtIDEpID09ICJcciIgPyBubCAtIDEgOiBubCk7DQogICAgICB2YXIgcnQgPSBsaW5lLmluZGV4T2YoIlxyIik7DQogICAgICBpZiAocnQgIT0gLTEpIHsNCiAgICAgICAgcmVzdWx0LnB1c2gobGluZS5zbGljZSgwLCBydCkpOw0KICAgICAgICBwb3MgKz0gcnQgKyAxOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgcmVzdWx0LnB1c2gobGluZSk7DQogICAgICAgIHBvcyA9IG5sICsgMTsNCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIHJlc3VsdA0KICB9IDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gc3RyaW5nLnNwbGl0KC9cclxuP3xcbi8pOyB9Ow0KDQogIHZhciBoYXNTZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uID8gZnVuY3Rpb24gKHRlKSB7DQogICAgdHJ5IHsgcmV0dXJuIHRlLnNlbGVjdGlvblN0YXJ0ICE9IHRlLnNlbGVjdGlvbkVuZCB9DQogICAgY2F0Y2goZSkgeyByZXR1cm4gZmFsc2UgfQ0KICB9IDogZnVuY3Rpb24gKHRlKSB7DQogICAgdmFyIHJhbmdlJCQxOw0KICAgIHRyeSB7cmFuZ2UkJDEgPSB0ZS5vd25lckRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO30NCiAgICBjYXRjaChlKSB7fQ0KICAgIGlmICghcmFuZ2UkJDEgfHwgcmFuZ2UkJDEucGFyZW50RWxlbWVudCgpICE9IHRlKSB7IHJldHVybiBmYWxzZSB9DQogICAgcmV0dXJuIHJhbmdlJCQxLmNvbXBhcmVFbmRQb2ludHMoIlN0YXJ0VG9FbmQiLCByYW5nZSQkMSkgIT0gMA0KICB9Ow0KDQogIHZhciBoYXNDb3B5RXZlbnQgPSAoZnVuY3Rpb24gKCkgew0KICAgIHZhciBlID0gZWx0KCJkaXYiKTsNCiAgICBpZiAoIm9uY29weSIgaW4gZSkgeyByZXR1cm4gdHJ1ZSB9DQogICAgZS5zZXRBdHRyaWJ1dGUoIm9uY29weSIsICJyZXR1cm47Iik7DQogICAgcmV0dXJuIHR5cGVvZiBlLm9uY29weSA9PSAiZnVuY3Rpb24iDQogIH0pKCk7DQoNCiAgdmFyIGJhZFpvb21lZFJlY3RzID0gbnVsbDsNCiAgZnVuY3Rpb24gaGFzQmFkWm9vbWVkUmVjdHMobWVhc3VyZSkgew0KICAgIGlmIChiYWRab29tZWRSZWN0cyAhPSBudWxsKSB7IHJldHVybiBiYWRab29tZWRSZWN0cyB9DQogICAgdmFyIG5vZGUgPSByZW1vdmVDaGlsZHJlbkFuZEFkZChtZWFzdXJlLCBlbHQoInNwYW4iLCAieCIpKTsNCiAgICB2YXIgbm9ybWFsID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsNCiAgICB2YXIgZnJvbVJhbmdlID0gcmFuZ2Uobm9kZSwgMCwgMSkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7DQogICAgcmV0dXJuIGJhZFpvb21lZFJlY3RzID0gTWF0aC5hYnMobm9ybWFsLmxlZnQgLSBmcm9tUmFuZ2UubGVmdCkgPiAxDQogIH0NCg0KICAvLyBLbm93biBtb2RlcywgYnkgbmFtZSBhbmQgYnkgTUlNRQ0KICB2YXIgbW9kZXMgPSB7fSwgbWltZU1vZGVzID0ge307DQoNCiAgLy8gRXh0cmEgYXJndW1lbnRzIGFyZSBzdG9yZWQgYXMgdGhlIG1vZGUncyBkZXBlbmRlbmNpZXMsIHdoaWNoIGlzDQogIC8vIHVzZWQgYnkgKGxlZ2FjeSkgbWVjaGFuaXNtcyBsaWtlIGxvYWRtb2RlLmpzIHRvIGF1dG9tYXRpY2FsbHkNCiAgLy8gbG9hZCBhIG1vZGUuIChQcmVmZXJyZWQgbWVjaGFuaXNtIGlzIHRoZSByZXF1aXJlL2RlZmluZSBjYWxscy4pDQogIGZ1bmN0aW9uIGRlZmluZU1vZGUobmFtZSwgbW9kZSkgew0KICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikNCiAgICAgIHsgbW9kZS5kZXBlbmRlbmNpZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpOyB9DQogICAgbW9kZXNbbmFtZV0gPSBtb2RlOw0KICB9DQoNCiAgZnVuY3Rpb24gZGVmaW5lTUlNRShtaW1lLCBzcGVjKSB7DQogICAgbWltZU1vZGVzW21pbWVdID0gc3BlYzsNCiAgfQ0KDQogIC8vIEdpdmVuIGEgTUlNRSB0eXBlLCBhIHtuYW1lLCAuLi5vcHRpb25zfSBjb25maWcgb2JqZWN0LCBvciBhIG5hbWUNCiAgLy8gc3RyaW5nLCByZXR1cm4gYSBtb2RlIGNvbmZpZyBvYmplY3QuDQogIGZ1bmN0aW9uIHJlc29sdmVNb2RlKHNwZWMpIHsNCiAgICBpZiAodHlwZW9mIHNwZWMgPT0gInN0cmluZyIgJiYgbWltZU1vZGVzLmhhc093blByb3BlcnR5KHNwZWMpKSB7DQogICAgICBzcGVjID0gbWltZU1vZGVzW3NwZWNdOw0KICAgIH0gZWxzZSBpZiAoc3BlYyAmJiB0eXBlb2Ygc3BlYy5uYW1lID09ICJzdHJpbmciICYmIG1pbWVNb2Rlcy5oYXNPd25Qcm9wZXJ0eShzcGVjLm5hbWUpKSB7DQogICAgICB2YXIgZm91bmQgPSBtaW1lTW9kZXNbc3BlYy5uYW1lXTsNCiAgICAgIGlmICh0eXBlb2YgZm91bmQgPT0gInN0cmluZyIpIHsgZm91bmQgPSB7bmFtZTogZm91bmR9OyB9DQogICAgICBzcGVjID0gY3JlYXRlT2JqKGZvdW5kLCBzcGVjKTsNCiAgICAgIHNwZWMubmFtZSA9IGZvdW5kLm5hbWU7DQogICAgfSBlbHNlIGlmICh0eXBlb2Ygc3BlYyA9PSAic3RyaW5nIiAmJiAvXltcd1wtXStcL1tcd1wtXStcK3htbCQvLnRlc3Qoc3BlYykpIHsNCiAgICAgIHJldHVybiByZXNvbHZlTW9kZSgiYXBwbGljYXRpb24veG1sIikNCiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzcGVjID09ICJzdHJpbmciICYmIC9eW1x3XC1dK1wvW1x3XC1dK1wranNvbiQvLnRlc3Qoc3BlYykpIHsNCiAgICAgIHJldHVybiByZXNvbHZlTW9kZSgiYXBwbGljYXRpb24vanNvbiIpDQogICAgfQ0KICAgIGlmICh0eXBlb2Ygc3BlYyA9PSAic3RyaW5nIikgeyByZXR1cm4ge25hbWU6IHNwZWN9IH0NCiAgICBlbHNlIHsgcmV0dXJuIHNwZWMgfHwge25hbWU6ICJudWxsIn0gfQ0KICB9DQoNCiAgLy8gR2l2ZW4gYSBtb2RlIHNwZWMgKGFueXRoaW5nIHRoYXQgcmVzb2x2ZU1vZGUgYWNjZXB0cyksIGZpbmQgYW5kDQogIC8vIGluaXRpYWxpemUgYW4gYWN0dWFsIG1vZGUgb2JqZWN0Lg0KICBmdW5jdGlvbiBnZXRNb2RlKG9wdGlvbnMsIHNwZWMpIHsNCiAgICBzcGVjID0gcmVzb2x2ZU1vZGUoc3BlYyk7DQogICAgdmFyIG1mYWN0b3J5ID0gbW9kZXNbc3BlYy5uYW1lXTsNCiAgICBpZiAoIW1mYWN0b3J5KSB7IHJldHVybiBnZXRNb2RlKG9wdGlvbnMsICJ0ZXh0L3BsYWluIikgfQ0KICAgIHZhciBtb2RlT2JqID0gbWZhY3Rvcnkob3B0aW9ucywgc3BlYyk7DQogICAgaWYgKG1vZGVFeHRlbnNpb25zLmhhc093blByb3BlcnR5KHNwZWMubmFtZSkpIHsNCiAgICAgIHZhciBleHRzID0gbW9kZUV4dGVuc2lvbnNbc3BlYy5uYW1lXTsNCiAgICAgIGZvciAodmFyIHByb3AgaW4gZXh0cykgew0KICAgICAgICBpZiAoIWV4dHMuaGFzT3duUHJvcGVydHkocHJvcCkpIHsgY29udGludWUgfQ0KICAgICAgICBpZiAobW9kZU9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgeyBtb2RlT2JqWyJfIiArIHByb3BdID0gbW9kZU9ialtwcm9wXTsgfQ0KICAgICAgICBtb2RlT2JqW3Byb3BdID0gZXh0c1twcm9wXTsNCiAgICAgIH0NCiAgICB9DQogICAgbW9kZU9iai5uYW1lID0gc3BlYy5uYW1lOw0KICAgIGlmIChzcGVjLmhlbHBlclR5cGUpIHsgbW9kZU9iai5oZWxwZXJUeXBlID0gc3BlYy5oZWxwZXJUeXBlOyB9DQogICAgaWYgKHNwZWMubW9kZVByb3BzKSB7IGZvciAodmFyIHByb3AkMSBpbiBzcGVjLm1vZGVQcm9wcykNCiAgICAgIHsgbW9kZU9ialtwcm9wJDFdID0gc3BlYy5tb2RlUHJvcHNbcHJvcCQxXTsgfSB9DQoNCiAgICByZXR1cm4gbW9kZU9iag0KICB9DQoNCiAgLy8gVGhpcyBjYW4gYmUgdXNlZCB0byBhdHRhY2ggcHJvcGVydGllcyB0byBtb2RlIG9iamVjdHMgZnJvbQ0KICAvLyBvdXRzaWRlIHRoZSBhY3R1YWwgbW9kZSBkZWZpbml0aW9uLg0KICB2YXIgbW9kZUV4dGVuc2lvbnMgPSB7fTsNCiAgZnVuY3Rpb24gZXh0ZW5kTW9kZShtb2RlLCBwcm9wZXJ0aWVzKSB7DQogICAgdmFyIGV4dHMgPSBtb2RlRXh0ZW5zaW9ucy5oYXNPd25Qcm9wZXJ0eShtb2RlKSA/IG1vZGVFeHRlbnNpb25zW21vZGVdIDogKG1vZGVFeHRlbnNpb25zW21vZGVdID0ge30pOw0KICAgIGNvcHlPYmoocHJvcGVydGllcywgZXh0cyk7DQogIH0NCg0KICBmdW5jdGlvbiBjb3B5U3RhdGUobW9kZSwgc3RhdGUpIHsNCiAgICBpZiAoc3RhdGUgPT09IHRydWUpIHsgcmV0dXJuIHN0YXRlIH0NCiAgICBpZiAobW9kZS5jb3B5U3RhdGUpIHsgcmV0dXJuIG1vZGUuY29weVN0YXRlKHN0YXRlKSB9DQogICAgdmFyIG5zdGF0ZSA9IHt9Ow0KICAgIGZvciAodmFyIG4gaW4gc3RhdGUpIHsNCiAgICAgIHZhciB2YWwgPSBzdGF0ZVtuXTsNCiAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBBcnJheSkgeyB2YWwgPSB2YWwuY29uY2F0KFtdKTsgfQ0KICAgICAgbnN0YXRlW25dID0gdmFsOw0KICAgIH0NCiAgICByZXR1cm4gbnN0YXRlDQogIH0NCg0KICAvLyBHaXZlbiBhIG1vZGUgYW5kIGEgc3RhdGUgKGZvciB0aGF0IG1vZGUpLCBmaW5kIHRoZSBpbm5lciBtb2RlIGFuZA0KICAvLyBzdGF0ZSBhdCB0aGUgcG9zaXRpb24gdGhhdCB0aGUgc3RhdGUgcmVmZXJzIHRvLg0KICBmdW5jdGlvbiBpbm5lck1vZGUobW9kZSwgc3RhdGUpIHsNCiAgICB2YXIgaW5mbzsNCiAgICB3aGlsZSAobW9kZS5pbm5lck1vZGUpIHsNCiAgICAgIGluZm8gPSBtb2RlLmlubmVyTW9kZShzdGF0ZSk7DQogICAgICBpZiAoIWluZm8gfHwgaW5mby5tb2RlID09IG1vZGUpIHsgYnJlYWsgfQ0KICAgICAgc3RhdGUgPSBpbmZvLnN0YXRlOw0KICAgICAgbW9kZSA9IGluZm8ubW9kZTsNCiAgICB9DQogICAgcmV0dXJuIGluZm8gfHwge21vZGU6IG1vZGUsIHN0YXRlOiBzdGF0ZX0NCiAgfQ0KDQogIGZ1bmN0aW9uIHN0YXJ0U3RhdGUobW9kZSwgYTEsIGEyKSB7DQogICAgcmV0dXJuIG1vZGUuc3RhcnRTdGF0ZSA/IG1vZGUuc3RhcnRTdGF0ZShhMSwgYTIpIDogdHJ1ZQ0KICB9DQoNCiAgLy8gU1RSSU5HIFNUUkVBTQ0KDQogIC8vIEZlZCB0byB0aGUgbW9kZSBwYXJzZXJzLCBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIG1ha2UNCiAgLy8gcGFyc2VycyBtb3JlIHN1Y2NpbmN0Lg0KDQogIHZhciBTdHJpbmdTdHJlYW0gPSBmdW5jdGlvbihzdHJpbmcsIHRhYlNpemUsIGxpbmVPcmFjbGUpIHsNCiAgICB0aGlzLnBvcyA9IHRoaXMuc3RhcnQgPSAwOw0KICAgIHRoaXMuc3RyaW5nID0gc3RyaW5nOw0KICAgIHRoaXMudGFiU2l6ZSA9IHRhYlNpemUgfHwgODsNCiAgICB0aGlzLmxhc3RDb2x1bW5Qb3MgPSB0aGlzLmxhc3RDb2x1bW5WYWx1ZSA9IDA7DQogICAgdGhpcy5saW5lU3RhcnQgPSAwOw0KICAgIHRoaXMubGluZU9yYWNsZSA9IGxpbmVPcmFjbGU7DQogIH07DQoNCiAgU3RyaW5nU3RyZWFtLnByb3RvdHlwZS5lb2wgPSBmdW5jdGlvbiAoKSB7cmV0dXJuIHRoaXMucG9zID49IHRoaXMuc3RyaW5nLmxlbmd0aH07DQogIFN0cmluZ1N0cmVhbS5wcm90b3R5cGUuc29sID0gZnVuY3Rpb24gKCkge3JldHVybiB0aGlzLnBvcyA9PSB0aGlzLmxpbmVTdGFydH07DQogIFN0cmluZ1N0cmVhbS5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uICgpIHtyZXR1cm4gdGhpcy5zdHJpbmcuY2hhckF0KHRoaXMucG9zKSB8fCB1bmRlZmluZWR9Ow0KICBTdHJpbmdTdHJlYW0ucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7DQogICAgaWYgKHRoaXMucG9zIDwgdGhpcy5zdHJpbmcubGVuZ3RoKQ0KICAgICAgeyByZXR1cm4gdGhpcy5zdHJpbmcuY2hhckF0KHRoaXMucG9zKyspIH0NCiAgfTsNCiAgU3RyaW5nU3RyZWFtLnByb3RvdHlwZS5lYXQgPSBmdW5jdGlvbiAobWF0Y2gpIHsNCiAgICB2YXIgY2ggPSB0aGlzLnN0cmluZy5jaGFyQXQodGhpcy5wb3MpOw0KICAgIHZhciBvazsNCiAgICBpZiAodHlwZW9mIG1hdGNoID09ICJzdHJpbmciKSB7IG9rID0gY2ggPT0gbWF0Y2g7IH0NCiAgICBlbHNlIHsgb2sgPSBjaCAmJiAobWF0Y2gudGVzdCA/IG1hdGNoLnRlc3QoY2gpIDogbWF0Y2goY2gpKTsgfQ0KICAgIGlmIChvaykgeysrdGhpcy5wb3M7IHJldHVybiBjaH0NCiAgfTsNCiAgU3RyaW5nU3RyZWFtLnByb3RvdHlwZS5lYXRXaGlsZSA9IGZ1bmN0aW9uIChtYXRjaCkgew0KICAgIHZhciBzdGFydCA9IHRoaXMucG9zOw0KICAgIHdoaWxlICh0aGlzLmVhdChtYXRjaCkpe30NCiAgICByZXR1cm4gdGhpcy5wb3MgPiBzdGFydA0KICB9Ow0KICBTdHJpbmdTdHJlYW0ucHJvdG90eXBlLmVhdFNwYWNlID0gZnVuY3Rpb24gKCkgew0KICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICB2YXIgc3RhcnQgPSB0aGlzLnBvczsNCiAgICB3aGlsZSAoL1tcc1x1MDBhMF0vLnRlc3QodGhpcy5zdHJpbmcuY2hhckF0KHRoaXMucG9zKSkpIHsgKyt0aGlzJDEucG9zOyB9DQogICAgcmV0dXJuIHRoaXMucG9zID4gc3RhcnQNCiAgfTsNCiAgU3RyaW5nU3RyZWFtLnByb3RvdHlwZS5za2lwVG9FbmQgPSBmdW5jdGlvbiAoKSB7dGhpcy5wb3MgPSB0aGlzLnN0cmluZy5sZW5ndGg7fTsNCiAgU3RyaW5nU3RyZWFtLnByb3RvdHlwZS5za2lwVG8gPSBmdW5jdGlvbiAoY2gpIHsNCiAgICB2YXIgZm91bmQgPSB0aGlzLnN0cmluZy5pbmRleE9mKGNoLCB0aGlzLnBvcyk7DQogICAgaWYgKGZvdW5kID4gLTEpIHt0aGlzLnBvcyA9IGZvdW5kOyByZXR1cm4gdHJ1ZX0NCiAgfTsNCiAgU3RyaW5nU3RyZWFtLnByb3RvdHlwZS5iYWNrVXAgPSBmdW5jdGlvbiAobikge3RoaXMucG9zIC09IG47fTsNCiAgU3RyaW5nU3RyZWFtLnByb3RvdHlwZS5jb2x1bW4gPSBmdW5jdGlvbiAoKSB7DQogICAgaWYgKHRoaXMubGFzdENvbHVtblBvcyA8IHRoaXMuc3RhcnQpIHsNCiAgICAgIHRoaXMubGFzdENvbHVtblZhbHVlID0gY291bnRDb2x1bW4odGhpcy5zdHJpbmcsIHRoaXMuc3RhcnQsIHRoaXMudGFiU2l6ZSwgdGhpcy5sYXN0Q29sdW1uUG9zLCB0aGlzLmxhc3RDb2x1bW5WYWx1ZSk7DQogICAgICB0aGlzLmxhc3RDb2x1bW5Qb3MgPSB0aGlzLnN0YXJ0Ow0KICAgIH0NCiAgICByZXR1cm4gdGhpcy5sYXN0Q29sdW1uVmFsdWUgLSAodGhpcy5saW5lU3RhcnQgPyBjb3VudENvbHVtbih0aGlzLnN0cmluZywgdGhpcy5saW5lU3RhcnQsIHRoaXMudGFiU2l6ZSkgOiAwKQ0KICB9Ow0KICBTdHJpbmdTdHJlYW0ucHJvdG90eXBlLmluZGVudGF0aW9uID0gZnVuY3Rpb24gKCkgew0KICAgIHJldHVybiBjb3VudENvbHVtbih0aGlzLnN0cmluZywgbnVsbCwgdGhpcy50YWJTaXplKSAtDQogICAgICAodGhpcy5saW5lU3RhcnQgPyBjb3VudENvbHVtbih0aGlzLnN0cmluZywgdGhpcy5saW5lU3RhcnQsIHRoaXMudGFiU2l6ZSkgOiAwKQ0KICB9Ow0KICBTdHJpbmdTdHJlYW0ucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gKHBhdHRlcm4sIGNvbnN1bWUsIGNhc2VJbnNlbnNpdGl2ZSkgew0KICAgIGlmICh0eXBlb2YgcGF0dGVybiA9PSAic3RyaW5nIikgew0KICAgICAgdmFyIGNhc2VkID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gY2FzZUluc2Vuc2l0aXZlID8gc3RyLnRvTG93ZXJDYXNlKCkgOiBzdHI7IH07DQogICAgICB2YXIgc3Vic3RyID0gdGhpcy5zdHJpbmcuc3Vic3RyKHRoaXMucG9zLCBwYXR0ZXJuLmxlbmd0aCk7DQogICAgICBpZiAoY2FzZWQoc3Vic3RyKSA9PSBjYXNlZChwYXR0ZXJuKSkgew0KICAgICAgICBpZiAoY29uc3VtZSAhPT0gZmFsc2UpIHsgdGhpcy5wb3MgKz0gcGF0dGVybi5sZW5ndGg7IH0NCiAgICAgICAgcmV0dXJuIHRydWUNCiAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgdmFyIG1hdGNoID0gdGhpcy5zdHJpbmcuc2xpY2UodGhpcy5wb3MpLm1hdGNoKHBhdHRlcm4pOw0KICAgICAgaWYgKG1hdGNoICYmIG1hdGNoLmluZGV4ID4gMCkgeyByZXR1cm4gbnVsbCB9DQogICAgICBpZiAobWF0Y2ggJiYgY29uc3VtZSAhPT0gZmFsc2UpIHsgdGhpcy5wb3MgKz0gbWF0Y2hbMF0ubGVuZ3RoOyB9DQogICAgICByZXR1cm4gbWF0Y2gNCiAgICB9DQogIH07DQogIFN0cmluZ1N0cmVhbS5wcm90b3R5cGUuY3VycmVudCA9IGZ1bmN0aW9uICgpe3JldHVybiB0aGlzLnN0cmluZy5zbGljZSh0aGlzLnN0YXJ0LCB0aGlzLnBvcyl9Ow0KICBTdHJpbmdTdHJlYW0ucHJvdG90eXBlLmhpZGVGaXJzdENoYXJzID0gZnVuY3Rpb24gKG4sIGlubmVyKSB7DQogICAgdGhpcy5saW5lU3RhcnQgKz0gbjsNCiAgICB0cnkgeyByZXR1cm4gaW5uZXIoKSB9DQogICAgZmluYWxseSB7IHRoaXMubGluZVN0YXJ0IC09IG47IH0NCiAgfTsNCiAgU3RyaW5nU3RyZWFtLnByb3RvdHlwZS5sb29rQWhlYWQgPSBmdW5jdGlvbiAobikgew0KICAgIHZhciBvcmFjbGUgPSB0aGlzLmxpbmVPcmFjbGU7DQogICAgcmV0dXJuIG9yYWNsZSAmJiBvcmFjbGUubG9va0FoZWFkKG4pDQogIH07DQogIFN0cmluZ1N0cmVhbS5wcm90b3R5cGUuYmFzZVRva2VuID0gZnVuY3Rpb24gKCkgew0KICAgIHZhciBvcmFjbGUgPSB0aGlzLmxpbmVPcmFjbGU7DQogICAgcmV0dXJuIG9yYWNsZSAmJiBvcmFjbGUuYmFzZVRva2VuKHRoaXMucG9zKQ0KICB9Ow0KDQogIC8vIEZpbmQgdGhlIGxpbmUgb2JqZWN0IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGdpdmVuIGxpbmUgbnVtYmVyLg0KICBmdW5jdGlvbiBnZXRMaW5lKGRvYywgbikgew0KICAgIG4gLT0gZG9jLmZpcnN0Ow0KICAgIGlmIChuIDwgMCB8fCBuID49IGRvYy5zaXplKSB7IHRocm93IG5ldyBFcnJvcigiVGhlcmUgaXMgbm8gbGluZSAiICsgKG4gKyBkb2MuZmlyc3QpICsgIiBpbiB0aGUgZG9jdW1lbnQuIikgfQ0KICAgIHZhciBjaHVuayA9IGRvYzsNCiAgICB3aGlsZSAoIWNodW5rLmxpbmVzKSB7DQogICAgICBmb3IgKHZhciBpID0gMDs7ICsraSkgew0KICAgICAgICB2YXIgY2hpbGQgPSBjaHVuay5jaGlsZHJlbltpXSwgc3ogPSBjaGlsZC5jaHVua1NpemUoKTsNCiAgICAgICAgaWYgKG4gPCBzeikgeyBjaHVuayA9IGNoaWxkOyBicmVhayB9DQogICAgICAgIG4gLT0gc3o7DQogICAgICB9DQogICAgfQ0KICAgIHJldHVybiBjaHVuay5saW5lc1tuXQ0KICB9DQoNCiAgLy8gR2V0IHRoZSBwYXJ0IG9mIGEgZG9jdW1lbnQgYmV0d2VlbiB0d28gcG9zaXRpb25zLCBhcyBhbiBhcnJheSBvZg0KICAvLyBzdHJpbmdzLg0KICBmdW5jdGlvbiBnZXRCZXR3ZWVuKGRvYywgc3RhcnQsIGVuZCkgew0KICAgIHZhciBvdXQgPSBbXSwgbiA9IHN0YXJ0LmxpbmU7DQogICAgZG9jLml0ZXIoc3RhcnQubGluZSwgZW5kLmxpbmUgKyAxLCBmdW5jdGlvbiAobGluZSkgew0KICAgICAgdmFyIHRleHQgPSBsaW5lLnRleHQ7DQogICAgICBpZiAobiA9PSBlbmQubGluZSkgeyB0ZXh0ID0gdGV4dC5zbGljZSgwLCBlbmQuY2gpOyB9DQogICAgICBpZiAobiA9PSBzdGFydC5saW5lKSB7IHRleHQgPSB0ZXh0LnNsaWNlKHN0YXJ0LmNoKTsgfQ0KICAgICAgb3V0LnB1c2godGV4dCk7DQogICAgICArK247DQogICAgfSk7DQogICAgcmV0dXJuIG91dA0KICB9DQogIC8vIEdldCB0aGUgbGluZXMgYmV0d2VlbiBmcm9tIGFuZCB0bywgYXMgYXJyYXkgb2Ygc3RyaW5ncy4NCiAgZnVuY3Rpb24gZ2V0TGluZXMoZG9jLCBmcm9tLCB0bykgew0KICAgIHZhciBvdXQgPSBbXTsNCiAgICBkb2MuaXRlcihmcm9tLCB0bywgZnVuY3Rpb24gKGxpbmUpIHsgb3V0LnB1c2gobGluZS50ZXh0KTsgfSk7IC8vIGl0ZXIgYWJvcnRzIHdoZW4gY2FsbGJhY2sgcmV0dXJucyB0cnV0aHkgdmFsdWUNCiAgICByZXR1cm4gb3V0DQogIH0NCg0KICAvLyBVcGRhdGUgdGhlIGhlaWdodCBvZiBhIGxpbmUsIHByb3BhZ2F0aW5nIHRoZSBoZWlnaHQgY2hhbmdlDQogIC8vIHVwd2FyZHMgdG8gcGFyZW50IG5vZGVzLg0KICBmdW5jdGlvbiB1cGRhdGVMaW5lSGVpZ2h0KGxpbmUsIGhlaWdodCkgew0KICAgIHZhciBkaWZmID0gaGVpZ2h0IC0gbGluZS5oZWlnaHQ7DQogICAgaWYgKGRpZmYpIHsgZm9yICh2YXIgbiA9IGxpbmU7IG47IG4gPSBuLnBhcmVudCkgeyBuLmhlaWdodCArPSBkaWZmOyB9IH0NCiAgfQ0KDQogIC8vIEdpdmVuIGEgbGluZSBvYmplY3QsIGZpbmQgaXRzIGxpbmUgbnVtYmVyIGJ5IHdhbGtpbmcgdXAgdGhyb3VnaA0KICAvLyBpdHMgcGFyZW50IGxpbmtzLg0KICBmdW5jdGlvbiBsaW5lTm8obGluZSkgew0KICAgIGlmIChsaW5lLnBhcmVudCA9PSBudWxsKSB7IHJldHVybiBudWxsIH0NCiAgICB2YXIgY3VyID0gbGluZS5wYXJlbnQsIG5vID0gaW5kZXhPZihjdXIubGluZXMsIGxpbmUpOw0KICAgIGZvciAodmFyIGNodW5rID0gY3VyLnBhcmVudDsgY2h1bms7IGN1ciA9IGNodW5rLCBjaHVuayA9IGNodW5rLnBhcmVudCkgew0KICAgICAgZm9yICh2YXIgaSA9IDA7OyArK2kpIHsNCiAgICAgICAgaWYgKGNodW5rLmNoaWxkcmVuW2ldID09IGN1cikgeyBicmVhayB9DQogICAgICAgIG5vICs9IGNodW5rLmNoaWxkcmVuW2ldLmNodW5rU2l6ZSgpOw0KICAgICAgfQ0KICAgIH0NCiAgICByZXR1cm4gbm8gKyBjdXIuZmlyc3QNCiAgfQ0KDQogIC8vIEZpbmQgdGhlIGxpbmUgYXQgdGhlIGdpdmVuIHZlcnRpY2FsIHBvc2l0aW9uLCB1c2luZyB0aGUgaGVpZ2h0DQogIC8vIGluZm9ybWF0aW9uIGluIHRoZSBkb2N1bWVudCB0cmVlLg0KICBmdW5jdGlvbiBsaW5lQXRIZWlnaHQoY2h1bmssIGgpIHsNCiAgICB2YXIgbiA9IGNodW5rLmZpcnN0Ow0KICAgIG91dGVyOiBkbyB7DQogICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaHVuay5jaGlsZHJlbi5sZW5ndGg7ICsraSQxKSB7DQogICAgICAgIHZhciBjaGlsZCA9IGNodW5rLmNoaWxkcmVuW2kkMV0sIGNoID0gY2hpbGQuaGVpZ2h0Ow0KICAgICAgICBpZiAoaCA8IGNoKSB7IGNodW5rID0gY2hpbGQ7IGNvbnRpbnVlIG91dGVyIH0NCiAgICAgICAgaCAtPSBjaDsNCiAgICAgICAgbiArPSBjaGlsZC5jaHVua1NpemUoKTsNCiAgICAgIH0NCiAgICAgIHJldHVybiBuDQogICAgfSB3aGlsZSAoIWNodW5rLmxpbmVzKQ0KICAgIHZhciBpID0gMDsNCiAgICBmb3IgKDsgaSA8IGNodW5rLmxpbmVzLmxlbmd0aDsgKytpKSB7DQogICAgICB2YXIgbGluZSA9IGNodW5rLmxpbmVzW2ldLCBsaCA9IGxpbmUuaGVpZ2h0Ow0KICAgICAgaWYgKGggPCBsaCkgeyBicmVhayB9DQogICAgICBoIC09IGxoOw0KICAgIH0NCiAgICByZXR1cm4gbiArIGkNCiAgfQ0KDQogIGZ1bmN0aW9uIGlzTGluZShkb2MsIGwpIHtyZXR1cm4gbCA+PSBkb2MuZmlyc3QgJiYgbCA8IGRvYy5maXJzdCArIGRvYy5zaXplfQ0KDQogIGZ1bmN0aW9uIGxpbmVOdW1iZXJGb3Iob3B0aW9ucywgaSkgew0KICAgIHJldHVybiBTdHJpbmcob3B0aW9ucy5saW5lTnVtYmVyRm9ybWF0dGVyKGkgKyBvcHRpb25zLmZpcnN0TGluZU51bWJlcikpDQogIH0NCg0KICAvLyBBIFBvcyBpbnN0YW5jZSByZXByZXNlbnRzIGEgcG9zaXRpb24gd2l0aGluIHRoZSB0ZXh0Lg0KICBmdW5jdGlvbiBQb3MobGluZSwgY2gsIHN0aWNreSkgew0KICAgIGlmICggc3RpY2t5ID09PSB2b2lkIDAgKSBzdGlja3kgPSBudWxsOw0KDQogICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFBvcykpIHsgcmV0dXJuIG5ldyBQb3MobGluZSwgY2gsIHN0aWNreSkgfQ0KICAgIHRoaXMubGluZSA9IGxpbmU7DQogICAgdGhpcy5jaCA9IGNoOw0KICAgIHRoaXMuc3RpY2t5ID0gc3RpY2t5Ow0KICB9DQoNCiAgLy8gQ29tcGFyZSB0d28gcG9zaXRpb25zLCByZXR1cm4gMCBpZiB0aGV5IGFyZSB0aGUgc2FtZSwgYSBuZWdhdGl2ZQ0KICAvLyBudW1iZXIgd2hlbiBhIGlzIGxlc3MsIGFuZCBhIHBvc2l0aXZlIG51bWJlciBvdGhlcndpc2UuDQogIGZ1bmN0aW9uIGNtcChhLCBiKSB7IHJldHVybiBhLmxpbmUgLSBiLmxpbmUgfHwgYS5jaCAtIGIuY2ggfQ0KDQogIGZ1bmN0aW9uIGVxdWFsQ3Vyc29yUG9zKGEsIGIpIHsgcmV0dXJuIGEuc3RpY2t5ID09IGIuc3RpY2t5ICYmIGNtcChhLCBiKSA9PSAwIH0NCg0KICBmdW5jdGlvbiBjb3B5UG9zKHgpIHtyZXR1cm4gUG9zKHgubGluZSwgeC5jaCl9DQogIGZ1bmN0aW9uIG1heFBvcyhhLCBiKSB7IHJldHVybiBjbXAoYSwgYikgPCAwID8gYiA6IGEgfQ0KICBmdW5jdGlvbiBtaW5Qb3MoYSwgYikgeyByZXR1cm4gY21wKGEsIGIpIDwgMCA/IGEgOiBiIH0NCg0KICAvLyBNb3N0IG9mIHRoZSBleHRlcm5hbCBBUEkgY2xpcHMgZ2l2ZW4gcG9zaXRpb25zIHRvIG1ha2Ugc3VyZSB0aGV5DQogIC8vIGFjdHVhbGx5IGV4aXN0IHdpdGhpbiB0aGUgZG9jdW1lbnQuDQogIGZ1bmN0aW9uIGNsaXBMaW5lKGRvYywgbikge3JldHVybiBNYXRoLm1heChkb2MuZmlyc3QsIE1hdGgubWluKG4sIGRvYy5maXJzdCArIGRvYy5zaXplIC0gMSkpfQ0KICBmdW5jdGlvbiBjbGlwUG9zKGRvYywgcG9zKSB7DQogICAgaWYgKHBvcy5saW5lIDwgZG9jLmZpcnN0KSB7IHJldHVybiBQb3MoZG9jLmZpcnN0LCAwKSB9DQogICAgdmFyIGxhc3QgPSBkb2MuZmlyc3QgKyBkb2Muc2l6ZSAtIDE7DQogICAgaWYgKHBvcy5saW5lID4gbGFzdCkgeyByZXR1cm4gUG9zKGxhc3QsIGdldExpbmUoZG9jLCBsYXN0KS50ZXh0Lmxlbmd0aCkgfQ0KICAgIHJldHVybiBjbGlwVG9MZW4ocG9zLCBnZXRMaW5lKGRvYywgcG9zLmxpbmUpLnRleHQubGVuZ3RoKQ0KICB9DQogIGZ1bmN0aW9uIGNsaXBUb0xlbihwb3MsIGxpbmVsZW4pIHsNCiAgICB2YXIgY2ggPSBwb3MuY2g7DQogICAgaWYgKGNoID09IG51bGwgfHwgY2ggPiBsaW5lbGVuKSB7IHJldHVybiBQb3MocG9zLmxpbmUsIGxpbmVsZW4pIH0NCiAgICBlbHNlIGlmIChjaCA8IDApIHsgcmV0dXJuIFBvcyhwb3MubGluZSwgMCkgfQ0KICAgIGVsc2UgeyByZXR1cm4gcG9zIH0NCiAgfQ0KICBmdW5jdGlvbiBjbGlwUG9zQXJyYXkoZG9jLCBhcnJheSkgew0KICAgIHZhciBvdXQgPSBbXTsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7IG91dFtpXSA9IGNsaXBQb3MoZG9jLCBhcnJheVtpXSk7IH0NCiAgICByZXR1cm4gb3V0DQogIH0NCg0KICB2YXIgU2F2ZWRDb250ZXh0ID0gZnVuY3Rpb24oc3RhdGUsIGxvb2tBaGVhZCkgew0KICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTsNCiAgICB0aGlzLmxvb2tBaGVhZCA9IGxvb2tBaGVhZDsNCiAgfTsNCg0KICB2YXIgQ29udGV4dCA9IGZ1bmN0aW9uKGRvYywgc3RhdGUsIGxpbmUsIGxvb2tBaGVhZCkgew0KICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTsNCiAgICB0aGlzLmRvYyA9IGRvYzsNCiAgICB0aGlzLmxpbmUgPSBsaW5lOw0KICAgIHRoaXMubWF4TG9va0FoZWFkID0gbG9va0FoZWFkIHx8IDA7DQogICAgdGhpcy5iYXNlVG9rZW5zID0gbnVsbDsNCiAgICB0aGlzLmJhc2VUb2tlblBvcyA9IDE7DQogIH07DQoNCiAgQ29udGV4dC5wcm90b3R5cGUubG9va0FoZWFkID0gZnVuY3Rpb24gKG4pIHsNCiAgICB2YXIgbGluZSA9IHRoaXMuZG9jLmdldExpbmUodGhpcy5saW5lICsgbik7DQogICAgaWYgKGxpbmUgIT0gbnVsbCAmJiBuID4gdGhpcy5tYXhMb29rQWhlYWQpIHsgdGhpcy5tYXhMb29rQWhlYWQgPSBuOyB9DQogICAgcmV0dXJuIGxpbmUNCiAgfTsNCg0KICBDb250ZXh0LnByb3RvdHlwZS5iYXNlVG9rZW4gPSBmdW5jdGlvbiAobikgew0KICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICBpZiAoIXRoaXMuYmFzZVRva2VucykgeyByZXR1cm4gbnVsbCB9DQogICAgd2hpbGUgKHRoaXMuYmFzZVRva2Vuc1t0aGlzLmJhc2VUb2tlblBvc10gPD0gbikNCiAgICAgIHsgdGhpcyQxLmJhc2VUb2tlblBvcyArPSAyOyB9DQogICAgdmFyIHR5cGUgPSB0aGlzLmJhc2VUb2tlbnNbdGhpcy5iYXNlVG9rZW5Qb3MgKyAxXTsNCiAgICByZXR1cm4ge3R5cGU6IHR5cGUgJiYgdHlwZS5yZXBsYWNlKC8oIHxeKW92ZXJsYXkgLiovLCAiIiksDQogICAgICAgICAgICBzaXplOiB0aGlzLmJhc2VUb2tlbnNbdGhpcy5iYXNlVG9rZW5Qb3NdIC0gbn0NCiAgfTsNCg0KICBDb250ZXh0LnByb3RvdHlwZS5uZXh0TGluZSA9IGZ1bmN0aW9uICgpIHsNCiAgICB0aGlzLmxpbmUrKzsNCiAgICBpZiAodGhpcy5tYXhMb29rQWhlYWQgPiAwKSB7IHRoaXMubWF4TG9va0FoZWFkLS07IH0NCiAgfTsNCg0KICBDb250ZXh0LmZyb21TYXZlZCA9IGZ1bmN0aW9uIChkb2MsIHNhdmVkLCBsaW5lKSB7DQogICAgaWYgKHNhdmVkIGluc3RhbmNlb2YgU2F2ZWRDb250ZXh0KQ0KICAgICAgeyByZXR1cm4gbmV3IENvbnRleHQoZG9jLCBjb3B5U3RhdGUoZG9jLm1vZGUsIHNhdmVkLnN0YXRlKSwgbGluZSwgc2F2ZWQubG9va0FoZWFkKSB9DQogICAgZWxzZQ0KICAgICAgeyByZXR1cm4gbmV3IENvbnRleHQoZG9jLCBjb3B5U3RhdGUoZG9jLm1vZGUsIHNhdmVkKSwgbGluZSkgfQ0KICB9Ow0KDQogIENvbnRleHQucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAoY29weSkgew0KICAgIHZhciBzdGF0ZSA9IGNvcHkgIT09IGZhbHNlID8gY29weVN0YXRlKHRoaXMuZG9jLm1vZGUsIHRoaXMuc3RhdGUpIDogdGhpcy5zdGF0ZTsNCiAgICByZXR1cm4gdGhpcy5tYXhMb29rQWhlYWQgPiAwID8gbmV3IFNhdmVkQ29udGV4dChzdGF0ZSwgdGhpcy5tYXhMb29rQWhlYWQpIDogc3RhdGUNCiAgfTsNCg0KDQogIC8vIENvbXB1dGUgYSBzdHlsZSBhcnJheSAoYW4gYXJyYXkgc3RhcnRpbmcgd2l0aCBhIG1vZGUgZ2VuZXJhdGlvbg0KICAvLyAtLSBmb3IgaW52YWxpZGF0aW9uIC0tIGZvbGxvd2VkIGJ5IHBhaXJzIG9mIGVuZCBwb3NpdGlvbnMgYW5kDQogIC8vIHN0eWxlIHN0cmluZ3MpLCB3aGljaCBpcyB1c2VkIHRvIGhpZ2hsaWdodCB0aGUgdG9rZW5zIG9uIHRoZQ0KICAvLyBsaW5lLg0KICBmdW5jdGlvbiBoaWdobGlnaHRMaW5lKGNtLCBsaW5lLCBjb250ZXh0LCBmb3JjZVRvRW5kKSB7DQogICAgLy8gQSBzdHlsZXMgYXJyYXkgYWx3YXlzIHN0YXJ0cyB3aXRoIGEgbnVtYmVyIGlkZW50aWZ5aW5nIHRoZQ0KICAgIC8vIG1vZGUvb3ZlcmxheXMgdGhhdCBpdCBpcyBiYXNlZCBvbiAoZm9yIGVhc3kgaW52YWxpZGF0aW9uKS4NCiAgICB2YXIgc3QgPSBbY20uc3RhdGUubW9kZUdlbl0sIGxpbmVDbGFzc2VzID0ge307DQogICAgLy8gQ29tcHV0ZSB0aGUgYmFzZSBhcnJheSBvZiBzdHlsZXMNCiAgICBydW5Nb2RlKGNtLCBsaW5lLnRleHQsIGNtLmRvYy5tb2RlLCBjb250ZXh0LCBmdW5jdGlvbiAoZW5kLCBzdHlsZSkgeyByZXR1cm4gc3QucHVzaChlbmQsIHN0eWxlKTsgfSwNCiAgICAgICAgICAgIGxpbmVDbGFzc2VzLCBmb3JjZVRvRW5kKTsNCiAgICB2YXIgc3RhdGUgPSBjb250ZXh0LnN0YXRlOw0KDQogICAgLy8gUnVuIG92ZXJsYXlzLCBhZGp1c3Qgc3R5bGUgYXJyYXkuDQogICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIG8gKSB7DQogICAgICBjb250ZXh0LmJhc2VUb2tlbnMgPSBzdDsNCiAgICAgIHZhciBvdmVybGF5ID0gY20uc3RhdGUub3ZlcmxheXNbb10sIGkgPSAxLCBhdCA9IDA7DQogICAgICBjb250ZXh0LnN0YXRlID0gdHJ1ZTsNCiAgICAgIHJ1bk1vZGUoY20sIGxpbmUudGV4dCwgb3ZlcmxheS5tb2RlLCBjb250ZXh0LCBmdW5jdGlvbiAoZW5kLCBzdHlsZSkgew0KICAgICAgICB2YXIgc3RhcnQgPSBpOw0KICAgICAgICAvLyBFbnN1cmUgdGhlcmUncyBhIHRva2VuIGVuZCBhdCB0aGUgY3VycmVudCBwb3NpdGlvbiwgYW5kIHRoYXQgaSBwb2ludHMgYXQgaXQNCiAgICAgICAgd2hpbGUgKGF0IDwgZW5kKSB7DQogICAgICAgICAgdmFyIGlfZW5kID0gc3RbaV07DQogICAgICAgICAgaWYgKGlfZW5kID4gZW5kKQ0KICAgICAgICAgICAgeyBzdC5zcGxpY2UoaSwgMSwgZW5kLCBzdFtpKzFdLCBpX2VuZCk7IH0NCiAgICAgICAgICBpICs9IDI7DQogICAgICAgICAgYXQgPSBNYXRoLm1pbihlbmQsIGlfZW5kKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoIXN0eWxlKSB7IHJldHVybiB9DQogICAgICAgIGlmIChvdmVybGF5Lm9wYXF1ZSkgew0KICAgICAgICAgIHN0LnNwbGljZShzdGFydCwgaSAtIHN0YXJ0LCBlbmQsICJvdmVybGF5ICIgKyBzdHlsZSk7DQogICAgICAgICAgaSA9IHN0YXJ0ICsgMjsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICBmb3IgKDsgc3RhcnQgPCBpOyBzdGFydCArPSAyKSB7DQogICAgICAgICAgICB2YXIgY3VyID0gc3Rbc3RhcnQrMV07DQogICAgICAgICAgICBzdFtzdGFydCsxXSA9IChjdXIgPyBjdXIgKyAiICIgOiAiIikgKyAib3ZlcmxheSAiICsgc3R5bGU7DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9LCBsaW5lQ2xhc3Nlcyk7DQogICAgICBjb250ZXh0LnN0YXRlID0gc3RhdGU7DQogICAgICBjb250ZXh0LmJhc2VUb2tlbnMgPSBudWxsOw0KICAgICAgY29udGV4dC5iYXNlVG9rZW5Qb3MgPSAxOw0KICAgIH07DQoNCiAgICBmb3IgKHZhciBvID0gMDsgbyA8IGNtLnN0YXRlLm92ZXJsYXlzLmxlbmd0aDsgKytvKSBsb29wKCBvICk7DQoNCiAgICByZXR1cm4ge3N0eWxlczogc3QsIGNsYXNzZXM6IGxpbmVDbGFzc2VzLmJnQ2xhc3MgfHwgbGluZUNsYXNzZXMudGV4dENsYXNzID8gbGluZUNsYXNzZXMgOiBudWxsfQ0KICB9DQoNCiAgZnVuY3Rpb24gZ2V0TGluZVN0eWxlcyhjbSwgbGluZSwgdXBkYXRlRnJvbnRpZXIpIHsNCiAgICBpZiAoIWxpbmUuc3R5bGVzIHx8IGxpbmUuc3R5bGVzWzBdICE9IGNtLnN0YXRlLm1vZGVHZW4pIHsNCiAgICAgIHZhciBjb250ZXh0ID0gZ2V0Q29udGV4dEJlZm9yZShjbSwgbGluZU5vKGxpbmUpKTsNCiAgICAgIHZhciByZXNldFN0YXRlID0gbGluZS50ZXh0Lmxlbmd0aCA+IGNtLm9wdGlvbnMubWF4SGlnaGxpZ2h0TGVuZ3RoICYmIGNvcHlTdGF0ZShjbS5kb2MubW9kZSwgY29udGV4dC5zdGF0ZSk7DQogICAgICB2YXIgcmVzdWx0ID0gaGlnaGxpZ2h0TGluZShjbSwgbGluZSwgY29udGV4dCk7DQogICAgICBpZiAocmVzZXRTdGF0ZSkgeyBjb250ZXh0LnN0YXRlID0gcmVzZXRTdGF0ZTsgfQ0KICAgICAgbGluZS5zdGF0ZUFmdGVyID0gY29udGV4dC5zYXZlKCFyZXNldFN0YXRlKTsNCiAgICAgIGxpbmUuc3R5bGVzID0gcmVzdWx0LnN0eWxlczsNCiAgICAgIGlmIChyZXN1bHQuY2xhc3NlcykgeyBsaW5lLnN0eWxlQ2xhc3NlcyA9IHJlc3VsdC5jbGFzc2VzOyB9DQogICAgICBlbHNlIGlmIChsaW5lLnN0eWxlQ2xhc3NlcykgeyBsaW5lLnN0eWxlQ2xhc3NlcyA9IG51bGw7IH0NCiAgICAgIGlmICh1cGRhdGVGcm9udGllciA9PT0gY20uZG9jLmhpZ2hsaWdodEZyb250aWVyKQ0KICAgICAgICB7IGNtLmRvYy5tb2RlRnJvbnRpZXIgPSBNYXRoLm1heChjbS5kb2MubW9kZUZyb250aWVyLCArK2NtLmRvYy5oaWdobGlnaHRGcm9udGllcik7IH0NCiAgICB9DQogICAgcmV0dXJuIGxpbmUuc3R5bGVzDQogIH0NCg0KICBmdW5jdGlvbiBnZXRDb250ZXh0QmVmb3JlKGNtLCBuLCBwcmVjaXNlKSB7DQogICAgdmFyIGRvYyA9IGNtLmRvYywgZGlzcGxheSA9IGNtLmRpc3BsYXk7DQogICAgaWYgKCFkb2MubW9kZS5zdGFydFN0YXRlKSB7IHJldHVybiBuZXcgQ29udGV4dChkb2MsIHRydWUsIG4pIH0NCiAgICB2YXIgc3RhcnQgPSBmaW5kU3RhcnRMaW5lKGNtLCBuLCBwcmVjaXNlKTsNCiAgICB2YXIgc2F2ZWQgPSBzdGFydCA+IGRvYy5maXJzdCAmJiBnZXRMaW5lKGRvYywgc3RhcnQgLSAxKS5zdGF0ZUFmdGVyOw0KICAgIHZhciBjb250ZXh0ID0gc2F2ZWQgPyBDb250ZXh0LmZyb21TYXZlZChkb2MsIHNhdmVkLCBzdGFydCkgOiBuZXcgQ29udGV4dChkb2MsIHN0YXJ0U3RhdGUoZG9jLm1vZGUpLCBzdGFydCk7DQoNCiAgICBkb2MuaXRlcihzdGFydCwgbiwgZnVuY3Rpb24gKGxpbmUpIHsNCiAgICAgIHByb2Nlc3NMaW5lKGNtLCBsaW5lLnRleHQsIGNvbnRleHQpOw0KICAgICAgdmFyIHBvcyA9IGNvbnRleHQubGluZTsNCiAgICAgIGxpbmUuc3RhdGVBZnRlciA9IHBvcyA9PSBuIC0gMSB8fCBwb3MgJSA1ID09IDAgfHwgcG9zID49IGRpc3BsYXkudmlld0Zyb20gJiYgcG9zIDwgZGlzcGxheS52aWV3VG8gPyBjb250ZXh0LnNhdmUoKSA6IG51bGw7DQogICAgICBjb250ZXh0Lm5leHRMaW5lKCk7DQogICAgfSk7DQogICAgaWYgKHByZWNpc2UpIHsgZG9jLm1vZGVGcm9udGllciA9IGNvbnRleHQubGluZTsgfQ0KICAgIHJldHVybiBjb250ZXh0DQogIH0NCg0KICAvLyBMaWdodHdlaWdodCBmb3JtIG9mIGhpZ2hsaWdodCAtLSBwcm9jZWVkIG92ZXIgdGhpcyBsaW5lIGFuZA0KICAvLyB1cGRhdGUgc3RhdGUsIGJ1dCBkb24ndCBzYXZlIGEgc3R5bGUgYXJyYXkuIFVzZWQgZm9yIGxpbmVzIHRoYXQNCiAgLy8gYXJlbid0IGN1cnJlbnRseSB2aXNpYmxlLg0KICBmdW5jdGlvbiBwcm9jZXNzTGluZShjbSwgdGV4dCwgY29udGV4dCwgc3RhcnRBdCkgew0KICAgIHZhciBtb2RlID0gY20uZG9jLm1vZGU7DQogICAgdmFyIHN0cmVhbSA9IG5ldyBTdHJpbmdTdHJlYW0odGV4dCwgY20ub3B0aW9ucy50YWJTaXplLCBjb250ZXh0KTsNCiAgICBzdHJlYW0uc3RhcnQgPSBzdHJlYW0ucG9zID0gc3RhcnRBdCB8fCAwOw0KICAgIGlmICh0ZXh0ID09ICIiKSB7IGNhbGxCbGFua0xpbmUobW9kZSwgY29udGV4dC5zdGF0ZSk7IH0NCiAgICB3aGlsZSAoIXN0cmVhbS5lb2woKSkgew0KICAgICAgcmVhZFRva2VuKG1vZGUsIHN0cmVhbSwgY29udGV4dC5zdGF0ZSk7DQogICAgICBzdHJlYW0uc3RhcnQgPSBzdHJlYW0ucG9zOw0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIGNhbGxCbGFua0xpbmUobW9kZSwgc3RhdGUpIHsNCiAgICBpZiAobW9kZS5ibGFua0xpbmUpIHsgcmV0dXJuIG1vZGUuYmxhbmtMaW5lKHN0YXRlKSB9DQogICAgaWYgKCFtb2RlLmlubmVyTW9kZSkgeyByZXR1cm4gfQ0KICAgIHZhciBpbm5lciA9IGlubmVyTW9kZShtb2RlLCBzdGF0ZSk7DQogICAgaWYgKGlubmVyLm1vZGUuYmxhbmtMaW5lKSB7IHJldHVybiBpbm5lci5tb2RlLmJsYW5rTGluZShpbm5lci5zdGF0ZSkgfQ0KICB9DQoNCiAgZnVuY3Rpb24gcmVhZFRva2VuKG1vZGUsIHN0cmVhbSwgc3RhdGUsIGlubmVyKSB7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7DQogICAgICBpZiAoaW5uZXIpIHsgaW5uZXJbMF0gPSBpbm5lck1vZGUobW9kZSwgc3RhdGUpLm1vZGU7IH0NCiAgICAgIHZhciBzdHlsZSA9IG1vZGUudG9rZW4oc3RyZWFtLCBzdGF0ZSk7DQogICAgICBpZiAoc3RyZWFtLnBvcyA+IHN0cmVhbS5zdGFydCkgeyByZXR1cm4gc3R5bGUgfQ0KICAgIH0NCiAgICB0aHJvdyBuZXcgRXJyb3IoIk1vZGUgIiArIG1vZGUubmFtZSArICIgZmFpbGVkIHRvIGFkdmFuY2Ugc3RyZWFtLiIpDQogIH0NCg0KICB2YXIgVG9rZW4gPSBmdW5jdGlvbihzdHJlYW0sIHR5cGUsIHN0YXRlKSB7DQogICAgdGhpcy5zdGFydCA9IHN0cmVhbS5zdGFydDsgdGhpcy5lbmQgPSBzdHJlYW0ucG9zOw0KICAgIHRoaXMuc3RyaW5nID0gc3RyZWFtLmN1cnJlbnQoKTsNCiAgICB0aGlzLnR5cGUgPSB0eXBlIHx8IG51bGw7DQogICAgdGhpcy5zdGF0ZSA9IHN0YXRlOw0KICB9Ow0KDQogIC8vIFV0aWxpdHkgZm9yIGdldFRva2VuQXQgYW5kIGdldExpbmVUb2tlbnMNCiAgZnVuY3Rpb24gdGFrZVRva2VuKGNtLCBwb3MsIHByZWNpc2UsIGFzQXJyYXkpIHsNCiAgICB2YXIgZG9jID0gY20uZG9jLCBtb2RlID0gZG9jLm1vZGUsIHN0eWxlOw0KICAgIHBvcyA9IGNsaXBQb3MoZG9jLCBwb3MpOw0KICAgIHZhciBsaW5lID0gZ2V0TGluZShkb2MsIHBvcy5saW5lKSwgY29udGV4dCA9IGdldENvbnRleHRCZWZvcmUoY20sIHBvcy5saW5lLCBwcmVjaXNlKTsNCiAgICB2YXIgc3RyZWFtID0gbmV3IFN0cmluZ1N0cmVhbShsaW5lLnRleHQsIGNtLm9wdGlvbnMudGFiU2l6ZSwgY29udGV4dCksIHRva2VuczsNCiAgICBpZiAoYXNBcnJheSkgeyB0b2tlbnMgPSBbXTsgfQ0KICAgIHdoaWxlICgoYXNBcnJheSB8fCBzdHJlYW0ucG9zIDwgcG9zLmNoKSAmJiAhc3RyZWFtLmVvbCgpKSB7DQogICAgICBzdHJlYW0uc3RhcnQgPSBzdHJlYW0ucG9zOw0KICAgICAgc3R5bGUgPSByZWFkVG9rZW4obW9kZSwgc3RyZWFtLCBjb250ZXh0LnN0YXRlKTsNCiAgICAgIGlmIChhc0FycmF5KSB7IHRva2Vucy5wdXNoKG5ldyBUb2tlbihzdHJlYW0sIHN0eWxlLCBjb3B5U3RhdGUoZG9jLm1vZGUsIGNvbnRleHQuc3RhdGUpKSk7IH0NCiAgICB9DQogICAgcmV0dXJuIGFzQXJyYXkgPyB0b2tlbnMgOiBuZXcgVG9rZW4oc3RyZWFtLCBzdHlsZSwgY29udGV4dC5zdGF0ZSkNCiAgfQ0KDQogIGZ1bmN0aW9uIGV4dHJhY3RMaW5lQ2xhc3Nlcyh0eXBlLCBvdXRwdXQpIHsNCiAgICBpZiAodHlwZSkgeyBmb3IgKDs7KSB7DQogICAgICB2YXIgbGluZUNsYXNzID0gdHlwZS5tYXRjaCgvKD86XnxccyspbGluZS0oYmFja2dyb3VuZC0pPyhcUyspLyk7DQogICAgICBpZiAoIWxpbmVDbGFzcykgeyBicmVhayB9DQogICAgICB0eXBlID0gdHlwZS5zbGljZSgwLCBsaW5lQ2xhc3MuaW5kZXgpICsgdHlwZS5zbGljZShsaW5lQ2xhc3MuaW5kZXggKyBsaW5lQ2xhc3NbMF0ubGVuZ3RoKTsNCiAgICAgIHZhciBwcm9wID0gbGluZUNsYXNzWzFdID8gImJnQ2xhc3MiIDogInRleHRDbGFzcyI7DQogICAgICBpZiAob3V0cHV0W3Byb3BdID09IG51bGwpDQogICAgICAgIHsgb3V0cHV0W3Byb3BdID0gbGluZUNsYXNzWzJdOyB9DQogICAgICBlbHNlIGlmICghKG5ldyBSZWdFeHAoIig/Ol58XHMpIiArIGxpbmVDbGFzc1syXSArICIoPzokfFxzKSIpKS50ZXN0KG91dHB1dFtwcm9wXSkpDQogICAgICAgIHsgb3V0cHV0W3Byb3BdICs9ICIgIiArIGxpbmVDbGFzc1syXTsgfQ0KICAgIH0gfQ0KICAgIHJldHVybiB0eXBlDQogIH0NCg0KICAvLyBSdW4gdGhlIGdpdmVuIG1vZGUncyBwYXJzZXIgb3ZlciBhIGxpbmUsIGNhbGxpbmcgZiBmb3IgZWFjaCB0b2tlbi4NCiAgZnVuY3Rpb24gcnVuTW9kZShjbSwgdGV4dCwgbW9kZSwgY29udGV4dCwgZiwgbGluZUNsYXNzZXMsIGZvcmNlVG9FbmQpIHsNCiAgICB2YXIgZmxhdHRlblNwYW5zID0gbW9kZS5mbGF0dGVuU3BhbnM7DQogICAgaWYgKGZsYXR0ZW5TcGFucyA9PSBudWxsKSB7IGZsYXR0ZW5TcGFucyA9IGNtLm9wdGlvbnMuZmxhdHRlblNwYW5zOyB9DQogICAgdmFyIGN1clN0YXJ0ID0gMCwgY3VyU3R5bGUgPSBudWxsOw0KICAgIHZhciBzdHJlYW0gPSBuZXcgU3RyaW5nU3RyZWFtKHRleHQsIGNtLm9wdGlvbnMudGFiU2l6ZSwgY29udGV4dCksIHN0eWxlOw0KICAgIHZhciBpbm5lciA9IGNtLm9wdGlvbnMuYWRkTW9kZUNsYXNzICYmIFtudWxsXTsNCiAgICBpZiAodGV4dCA9PSAiIikgeyBleHRyYWN0TGluZUNsYXNzZXMoY2FsbEJsYW5rTGluZShtb2RlLCBjb250ZXh0LnN0YXRlKSwgbGluZUNsYXNzZXMpOyB9DQogICAgd2hpbGUgKCFzdHJlYW0uZW9sKCkpIHsNCiAgICAgIGlmIChzdHJlYW0ucG9zID4gY20ub3B0aW9ucy5tYXhIaWdobGlnaHRMZW5ndGgpIHsNCiAgICAgICAgZmxhdHRlblNwYW5zID0gZmFsc2U7DQogICAgICAgIGlmIChmb3JjZVRvRW5kKSB7IHByb2Nlc3NMaW5lKGNtLCB0ZXh0LCBjb250ZXh0LCBzdHJlYW0ucG9zKTsgfQ0KICAgICAgICBzdHJlYW0ucG9zID0gdGV4dC5sZW5ndGg7DQogICAgICAgIHN0eWxlID0gbnVsbDsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHN0eWxlID0gZXh0cmFjdExpbmVDbGFzc2VzKHJlYWRUb2tlbihtb2RlLCBzdHJlYW0sIGNvbnRleHQuc3RhdGUsIGlubmVyKSwgbGluZUNsYXNzZXMpOw0KICAgICAgfQ0KICAgICAgaWYgKGlubmVyKSB7DQogICAgICAgIHZhciBtTmFtZSA9IGlubmVyWzBdLm5hbWU7DQogICAgICAgIGlmIChtTmFtZSkgeyBzdHlsZSA9ICJtLSIgKyAoc3R5bGUgPyBtTmFtZSArICIgIiArIHN0eWxlIDogbU5hbWUpOyB9DQogICAgICB9DQogICAgICBpZiAoIWZsYXR0ZW5TcGFucyB8fCBjdXJTdHlsZSAhPSBzdHlsZSkgew0KICAgICAgICB3aGlsZSAoY3VyU3RhcnQgPCBzdHJlYW0uc3RhcnQpIHsNCiAgICAgICAgICBjdXJTdGFydCA9IE1hdGgubWluKHN0cmVhbS5zdGFydCwgY3VyU3RhcnQgKyA1MDAwKTsNCiAgICAgICAgICBmKGN1clN0YXJ0LCBjdXJTdHlsZSk7DQogICAgICAgIH0NCiAgICAgICAgY3VyU3R5bGUgPSBzdHlsZTsNCiAgICAgIH0NCiAgICAgIHN0cmVhbS5zdGFydCA9IHN0cmVhbS5wb3M7DQogICAgfQ0KICAgIHdoaWxlIChjdXJTdGFydCA8IHN0cmVhbS5wb3MpIHsNCiAgICAgIC8vIFdlYmtpdCBzZWVtcyB0byByZWZ1c2UgdG8gcmVuZGVyIHRleHQgbm9kZXMgbG9uZ2VyIHRoYW4gNTc0NDQNCiAgICAgIC8vIGNoYXJhY3RlcnMsIGFuZCByZXR1cm5zIGluYWNjdXJhdGUgbWVhc3VyZW1lbnRzIGluIG5vZGVzDQogICAgICAvLyBzdGFydGluZyBhcm91bmQgNTAwMCBjaGFycy4NCiAgICAgIHZhciBwb3MgPSBNYXRoLm1pbihzdHJlYW0ucG9zLCBjdXJTdGFydCArIDUwMDApOw0KICAgICAgZihwb3MsIGN1clN0eWxlKTsNCiAgICAgIGN1clN0YXJ0ID0gcG9zOw0KICAgIH0NCiAgfQ0KDQogIC8vIEZpbmRzIHRoZSBsaW5lIHRvIHN0YXJ0IHdpdGggd2hlbiBzdGFydGluZyBhIHBhcnNlLiBUcmllcyB0bw0KICAvLyBmaW5kIGEgbGluZSB3aXRoIGEgc3RhdGVBZnRlciwgc28gdGhhdCBpdCBjYW4gc3RhcnQgd2l0aCBhDQogIC8vIHZhbGlkIHN0YXRlLiBJZiB0aGF0IGZhaWxzLCBpdCByZXR1cm5zIHRoZSBsaW5lIHdpdGggdGhlDQogIC8vIHNtYWxsZXN0IGluZGVudGF0aW9uLCB3aGljaCB0ZW5kcyB0byBuZWVkIHRoZSBsZWFzdCBjb250ZXh0IHRvDQogIC8vIHBhcnNlIGNvcnJlY3RseS4NCiAgZnVuY3Rpb24gZmluZFN0YXJ0TGluZShjbSwgbiwgcHJlY2lzZSkgew0KICAgIHZhciBtaW5pbmRlbnQsIG1pbmxpbmUsIGRvYyA9IGNtLmRvYzsNCiAgICB2YXIgbGltID0gcHJlY2lzZSA/IC0xIDogbiAtIChjbS5kb2MubW9kZS5pbm5lck1vZGUgPyAxMDAwIDogMTAwKTsNCiAgICBmb3IgKHZhciBzZWFyY2ggPSBuOyBzZWFyY2ggPiBsaW07IC0tc2VhcmNoKSB7DQogICAgICBpZiAoc2VhcmNoIDw9IGRvYy5maXJzdCkgeyByZXR1cm4gZG9jLmZpcnN0IH0NCiAgICAgIHZhciBsaW5lID0gZ2V0TGluZShkb2MsIHNlYXJjaCAtIDEpLCBhZnRlciA9IGxpbmUuc3RhdGVBZnRlcjsNCiAgICAgIGlmIChhZnRlciAmJiAoIXByZWNpc2UgfHwgc2VhcmNoICsgKGFmdGVyIGluc3RhbmNlb2YgU2F2ZWRDb250ZXh0ID8gYWZ0ZXIubG9va0FoZWFkIDogMCkgPD0gZG9jLm1vZGVGcm9udGllcikpDQogICAgICAgIHsgcmV0dXJuIHNlYXJjaCB9DQogICAgICB2YXIgaW5kZW50ZWQgPSBjb3VudENvbHVtbihsaW5lLnRleHQsIG51bGwsIGNtLm9wdGlvbnMudGFiU2l6ZSk7DQogICAgICBpZiAobWlubGluZSA9PSBudWxsIHx8IG1pbmluZGVudCA+IGluZGVudGVkKSB7DQogICAgICAgIG1pbmxpbmUgPSBzZWFyY2ggLSAxOw0KICAgICAgICBtaW5pbmRlbnQgPSBpbmRlbnRlZDsNCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIG1pbmxpbmUNCiAgfQ0KDQogIGZ1bmN0aW9uIHJldHJlYXRGcm9udGllcihkb2MsIG4pIHsNCiAgICBkb2MubW9kZUZyb250aWVyID0gTWF0aC5taW4oZG9jLm1vZGVGcm9udGllciwgbik7DQogICAgaWYgKGRvYy5oaWdobGlnaHRGcm9udGllciA8IG4gLSAxMCkgeyByZXR1cm4gfQ0KICAgIHZhciBzdGFydCA9IGRvYy5maXJzdDsNCiAgICBmb3IgKHZhciBsaW5lID0gbiAtIDE7IGxpbmUgPiBzdGFydDsgbGluZS0tKSB7DQogICAgICB2YXIgc2F2ZWQgPSBnZXRMaW5lKGRvYywgbGluZSkuc3RhdGVBZnRlcjsNCiAgICAgIC8vIGNoYW5nZSBpcyBvbiAzDQogICAgICAvLyBzdGF0ZSBvbiBsaW5lIDEgbG9va2VkIGFoZWFkIDIgLS0gc28gc2F3IDMNCiAgICAgIC8vIHRlc3QgMSArIDIgPCAzIHNob3VsZCBjb3ZlciB0aGlzDQogICAgICBpZiAoc2F2ZWQgJiYgKCEoc2F2ZWQgaW5zdGFuY2VvZiBTYXZlZENvbnRleHQpIHx8IGxpbmUgKyBzYXZlZC5sb29rQWhlYWQgPCBuKSkgew0KICAgICAgICBzdGFydCA9IGxpbmUgKyAxOw0KICAgICAgICBicmVhaw0KICAgICAgfQ0KICAgIH0NCiAgICBkb2MuaGlnaGxpZ2h0RnJvbnRpZXIgPSBNYXRoLm1pbihkb2MuaGlnaGxpZ2h0RnJvbnRpZXIsIHN0YXJ0KTsNCiAgfQ0KDQogIC8vIE9wdGltaXplIHNvbWUgY29kZSB3aGVuIHRoZXNlIGZlYXR1cmVzIGFyZSBub3QgdXNlZC4NCiAgdmFyIHNhd1JlYWRPbmx5U3BhbnMgPSBmYWxzZSwgc2F3Q29sbGFwc2VkU3BhbnMgPSBmYWxzZTsNCg0KICBmdW5jdGlvbiBzZWVSZWFkT25seVNwYW5zKCkgew0KICAgIHNhd1JlYWRPbmx5U3BhbnMgPSB0cnVlOw0KICB9DQoNCiAgZnVuY3Rpb24gc2VlQ29sbGFwc2VkU3BhbnMoKSB7DQogICAgc2F3Q29sbGFwc2VkU3BhbnMgPSB0cnVlOw0KICB9DQoNCiAgLy8gVEVYVE1BUktFUiBTUEFOUw0KDQogIGZ1bmN0aW9uIE1hcmtlZFNwYW4obWFya2VyLCBmcm9tLCB0bykgew0KICAgIHRoaXMubWFya2VyID0gbWFya2VyOw0KICAgIHRoaXMuZnJvbSA9IGZyb207IHRoaXMudG8gPSB0bzsNCiAgfQ0KDQogIC8vIFNlYXJjaCBhbiBhcnJheSBvZiBzcGFucyBmb3IgYSBzcGFuIG1hdGNoaW5nIHRoZSBnaXZlbiBtYXJrZXIuDQogIGZ1bmN0aW9uIGdldE1hcmtlZFNwYW5Gb3Ioc3BhbnMsIG1hcmtlcikgew0KICAgIGlmIChzcGFucykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHNwYW5zLmxlbmd0aDsgKytpKSB7DQogICAgICB2YXIgc3BhbiA9IHNwYW5zW2ldOw0KICAgICAgaWYgKHNwYW4ubWFya2VyID09IG1hcmtlcikgeyByZXR1cm4gc3BhbiB9DQogICAgfSB9DQogIH0NCiAgLy8gUmVtb3ZlIGEgc3BhbiBmcm9tIGFuIGFycmF5LCByZXR1cm5pbmcgdW5kZWZpbmVkIGlmIG5vIHNwYW5zIGFyZQ0KICAvLyBsZWZ0ICh3ZSBkb24ndCBzdG9yZSBhcnJheXMgZm9yIGxpbmVzIHdpdGhvdXQgc3BhbnMpLg0KICBmdW5jdGlvbiByZW1vdmVNYXJrZWRTcGFuKHNwYW5zLCBzcGFuKSB7DQogICAgdmFyIHI7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGFucy5sZW5ndGg7ICsraSkNCiAgICAgIHsgaWYgKHNwYW5zW2ldICE9IHNwYW4pIHsgKHIgfHwgKHIgPSBbXSkpLnB1c2goc3BhbnNbaV0pOyB9IH0NCiAgICByZXR1cm4gcg0KICB9DQogIC8vIEFkZCBhIHNwYW4gdG8gYSBsaW5lLg0KICBmdW5jdGlvbiBhZGRNYXJrZWRTcGFuKGxpbmUsIHNwYW4pIHsNCiAgICBsaW5lLm1hcmtlZFNwYW5zID0gbGluZS5tYXJrZWRTcGFucyA/IGxpbmUubWFya2VkU3BhbnMuY29uY2F0KFtzcGFuXSkgOiBbc3Bhbl07DQogICAgc3Bhbi5tYXJrZXIuYXR0YWNoTGluZShsaW5lKTsNCiAgfQ0KDQogIC8vIFVzZWQgZm9yIHRoZSBhbGdvcml0aG0gdGhhdCBhZGp1c3RzIG1hcmtlcnMgZm9yIGEgY2hhbmdlIGluIHRoZQ0KICAvLyBkb2N1bWVudC4gVGhlc2UgZnVuY3Rpb25zIGN1dCBhbiBhcnJheSBvZiBzcGFucyBhdCBhIGdpdmVuDQogIC8vIGNoYXJhY3RlciBwb3NpdGlvbiwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHJlbWFpbmluZyBjaHVua3MgKG9yDQogIC8vIHVuZGVmaW5lZCBpZiBub3RoaW5nIHJlbWFpbnMpLg0KICBmdW5jdGlvbiBtYXJrZWRTcGFuc0JlZm9yZShvbGQsIHN0YXJ0Q2gsIGlzSW5zZXJ0KSB7DQogICAgdmFyIG53Ow0KICAgIGlmIChvbGQpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBvbGQubGVuZ3RoOyArK2kpIHsNCiAgICAgIHZhciBzcGFuID0gb2xkW2ldLCBtYXJrZXIgPSBzcGFuLm1hcmtlcjsNCiAgICAgIHZhciBzdGFydHNCZWZvcmUgPSBzcGFuLmZyb20gPT0gbnVsbCB8fCAobWFya2VyLmluY2x1c2l2ZUxlZnQgPyBzcGFuLmZyb20gPD0gc3RhcnRDaCA6IHNwYW4uZnJvbSA8IHN0YXJ0Q2gpOw0KICAgICAgaWYgKHN0YXJ0c0JlZm9yZSB8fCBzcGFuLmZyb20gPT0gc3RhcnRDaCAmJiBtYXJrZXIudHlwZSA9PSAiYm9va21hcmsiICYmICghaXNJbnNlcnQgfHwgIXNwYW4ubWFya2VyLmluc2VydExlZnQpKSB7DQogICAgICAgIHZhciBlbmRzQWZ0ZXIgPSBzcGFuLnRvID09IG51bGwgfHwgKG1hcmtlci5pbmNsdXNpdmVSaWdodCA/IHNwYW4udG8gPj0gc3RhcnRDaCA6IHNwYW4udG8gPiBzdGFydENoKQ0KICAgICAgICA7KG53IHx8IChudyA9IFtdKSkucHVzaChuZXcgTWFya2VkU3BhbihtYXJrZXIsIHNwYW4uZnJvbSwgZW5kc0FmdGVyID8gbnVsbCA6IHNwYW4udG8pKTsNCiAgICAgIH0NCiAgICB9IH0NCiAgICByZXR1cm4gbncNCiAgfQ0KICBmdW5jdGlvbiBtYXJrZWRTcGFuc0FmdGVyKG9sZCwgZW5kQ2gsIGlzSW5zZXJ0KSB7DQogICAgdmFyIG53Ow0KICAgIGlmIChvbGQpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBvbGQubGVuZ3RoOyArK2kpIHsNCiAgICAgIHZhciBzcGFuID0gb2xkW2ldLCBtYXJrZXIgPSBzcGFuLm1hcmtlcjsNCiAgICAgIHZhciBlbmRzQWZ0ZXIgPSBzcGFuLnRvID09IG51bGwgfHwgKG1hcmtlci5pbmNsdXNpdmVSaWdodCA/IHNwYW4udG8gPj0gZW5kQ2ggOiBzcGFuLnRvID4gZW5kQ2gpOw0KICAgICAgaWYgKGVuZHNBZnRlciB8fCBzcGFuLmZyb20gPT0gZW5kQ2ggJiYgbWFya2VyLnR5cGUgPT0gImJvb2ttYXJrIiAmJiAoIWlzSW5zZXJ0IHx8IHNwYW4ubWFya2VyLmluc2VydExlZnQpKSB7DQogICAgICAgIHZhciBzdGFydHNCZWZvcmUgPSBzcGFuLmZyb20gPT0gbnVsbCB8fCAobWFya2VyLmluY2x1c2l2ZUxlZnQgPyBzcGFuLmZyb20gPD0gZW5kQ2ggOiBzcGFuLmZyb20gPCBlbmRDaCkNCiAgICAgICAgOyhudyB8fCAobncgPSBbXSkpLnB1c2gobmV3IE1hcmtlZFNwYW4obWFya2VyLCBzdGFydHNCZWZvcmUgPyBudWxsIDogc3Bhbi5mcm9tIC0gZW5kQ2gsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi50byA9PSBudWxsID8gbnVsbCA6IHNwYW4udG8gLSBlbmRDaCkpOw0KICAgICAgfQ0KICAgIH0gfQ0KICAgIHJldHVybiBudw0KICB9DQoNCiAgLy8gR2l2ZW4gYSBjaGFuZ2Ugb2JqZWN0LCBjb21wdXRlIHRoZSBuZXcgc2V0IG9mIG1hcmtlciBzcGFucyB0aGF0DQogIC8vIGNvdmVyIHRoZSBsaW5lIGluIHdoaWNoIHRoZSBjaGFuZ2UgdG9vayBwbGFjZS4gUmVtb3ZlcyBzcGFucw0KICAvLyBlbnRpcmVseSB3aXRoaW4gdGhlIGNoYW5nZSwgcmVjb25uZWN0cyBzcGFucyBiZWxvbmdpbmcgdG8gdGhlDQogIC8vIHNhbWUgbWFya2VyIHRoYXQgYXBwZWFyIG9uIGJvdGggc2lkZXMgb2YgdGhlIGNoYW5nZSwgYW5kIGN1dHMgb2ZmDQogIC8vIHNwYW5zIHBhcnRpYWxseSB3aXRoaW4gdGhlIGNoYW5nZS4gUmV0dXJucyBhbiBhcnJheSBvZiBzcGFuDQogIC8vIGFycmF5cyB3aXRoIG9uZSBlbGVtZW50IGZvciBlYWNoIGxpbmUgaW4gKGFmdGVyKSB0aGUgY2hhbmdlLg0KICBmdW5jdGlvbiBzdHJldGNoU3BhbnNPdmVyQ2hhbmdlKGRvYywgY2hhbmdlKSB7DQogICAgaWYgKGNoYW5nZS5mdWxsKSB7IHJldHVybiBudWxsIH0NCiAgICB2YXIgb2xkRmlyc3QgPSBpc0xpbmUoZG9jLCBjaGFuZ2UuZnJvbS5saW5lKSAmJiBnZXRMaW5lKGRvYywgY2hhbmdlLmZyb20ubGluZSkubWFya2VkU3BhbnM7DQogICAgdmFyIG9sZExhc3QgPSBpc0xpbmUoZG9jLCBjaGFuZ2UudG8ubGluZSkgJiYgZ2V0TGluZShkb2MsIGNoYW5nZS50by5saW5lKS5tYXJrZWRTcGFuczsNCiAgICBpZiAoIW9sZEZpcnN0ICYmICFvbGRMYXN0KSB7IHJldHVybiBudWxsIH0NCg0KICAgIHZhciBzdGFydENoID0gY2hhbmdlLmZyb20uY2gsIGVuZENoID0gY2hhbmdlLnRvLmNoLCBpc0luc2VydCA9IGNtcChjaGFuZ2UuZnJvbSwgY2hhbmdlLnRvKSA9PSAwOw0KICAgIC8vIEdldCB0aGUgc3BhbnMgdGhhdCAnc3RpY2sgb3V0JyBvbiBib3RoIHNpZGVzDQogICAgdmFyIGZpcnN0ID0gbWFya2VkU3BhbnNCZWZvcmUob2xkRmlyc3QsIHN0YXJ0Q2gsIGlzSW5zZXJ0KTsNCiAgICB2YXIgbGFzdCA9IG1hcmtlZFNwYW5zQWZ0ZXIob2xkTGFzdCwgZW5kQ2gsIGlzSW5zZXJ0KTsNCg0KICAgIC8vIE5leHQsIG1lcmdlIHRob3NlIHR3byBlbmRzDQogICAgdmFyIHNhbWVMaW5lID0gY2hhbmdlLnRleHQubGVuZ3RoID09IDEsIG9mZnNldCA9IGxzdChjaGFuZ2UudGV4dCkubGVuZ3RoICsgKHNhbWVMaW5lID8gc3RhcnRDaCA6IDApOw0KICAgIGlmIChmaXJzdCkgew0KICAgICAgLy8gRml4IHVwIC50byBwcm9wZXJ0aWVzIG9mIGZpcnN0DQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpcnN0Lmxlbmd0aDsgKytpKSB7DQogICAgICAgIHZhciBzcGFuID0gZmlyc3RbaV07DQogICAgICAgIGlmIChzcGFuLnRvID09IG51bGwpIHsNCiAgICAgICAgICB2YXIgZm91bmQgPSBnZXRNYXJrZWRTcGFuRm9yKGxhc3QsIHNwYW4ubWFya2VyKTsNCiAgICAgICAgICBpZiAoIWZvdW5kKSB7IHNwYW4udG8gPSBzdGFydENoOyB9DQogICAgICAgICAgZWxzZSBpZiAoc2FtZUxpbmUpIHsgc3Bhbi50byA9IGZvdW5kLnRvID09IG51bGwgPyBudWxsIDogZm91bmQudG8gKyBvZmZzZXQ7IH0NCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgICBpZiAobGFzdCkgew0KICAgICAgLy8gRml4IHVwIC5mcm9tIGluIGxhc3QgKG9yIG1vdmUgdGhlbSBpbnRvIGZpcnN0IGluIGNhc2Ugb2Ygc2FtZUxpbmUpDQogICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBsYXN0Lmxlbmd0aDsgKytpJDEpIHsNCiAgICAgICAgdmFyIHNwYW4kMSA9IGxhc3RbaSQxXTsNCiAgICAgICAgaWYgKHNwYW4kMS50byAhPSBudWxsKSB7IHNwYW4kMS50byArPSBvZmZzZXQ7IH0NCiAgICAgICAgaWYgKHNwYW4kMS5mcm9tID09IG51bGwpIHsNCiAgICAgICAgICB2YXIgZm91bmQkMSA9IGdldE1hcmtlZFNwYW5Gb3IoZmlyc3QsIHNwYW4kMS5tYXJrZXIpOw0KICAgICAgICAgIGlmICghZm91bmQkMSkgew0KICAgICAgICAgICAgc3BhbiQxLmZyb20gPSBvZmZzZXQ7DQogICAgICAgICAgICBpZiAoc2FtZUxpbmUpIHsgKGZpcnN0IHx8IChmaXJzdCA9IFtdKSkucHVzaChzcGFuJDEpOyB9DQogICAgICAgICAgfQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIHNwYW4kMS5mcm9tICs9IG9mZnNldDsNCiAgICAgICAgICBpZiAoc2FtZUxpbmUpIHsgKGZpcnN0IHx8IChmaXJzdCA9IFtdKSkucHVzaChzcGFuJDEpOyB9DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9DQogICAgLy8gTWFrZSBzdXJlIHdlIGRpZG4ndCBjcmVhdGUgYW55IHplcm8tbGVuZ3RoIHNwYW5zDQogICAgaWYgKGZpcnN0KSB7IGZpcnN0ID0gY2xlYXJFbXB0eVNwYW5zKGZpcnN0KTsgfQ0KICAgIGlmIChsYXN0ICYmIGxhc3QgIT0gZmlyc3QpIHsgbGFzdCA9IGNsZWFyRW1wdHlTcGFucyhsYXN0KTsgfQ0KDQogICAgdmFyIG5ld01hcmtlcnMgPSBbZmlyc3RdOw0KICAgIGlmICghc2FtZUxpbmUpIHsNCiAgICAgIC8vIEZpbGwgZ2FwIHdpdGggd2hvbGUtbGluZS1zcGFucw0KICAgICAgdmFyIGdhcCA9IGNoYW5nZS50ZXh0Lmxlbmd0aCAtIDIsIGdhcE1hcmtlcnM7DQogICAgICBpZiAoZ2FwID4gMCAmJiBmaXJzdCkNCiAgICAgICAgeyBmb3IgKHZhciBpJDIgPSAwOyBpJDIgPCBmaXJzdC5sZW5ndGg7ICsraSQyKQ0KICAgICAgICAgIHsgaWYgKGZpcnN0W2kkMl0udG8gPT0gbnVsbCkNCiAgICAgICAgICAgIHsgKGdhcE1hcmtlcnMgfHwgKGdhcE1hcmtlcnMgPSBbXSkpLnB1c2gobmV3IE1hcmtlZFNwYW4oZmlyc3RbaSQyXS5tYXJrZXIsIG51bGwsIG51bGwpKTsgfSB9IH0NCiAgICAgIGZvciAodmFyIGkkMyA9IDA7IGkkMyA8IGdhcDsgKytpJDMpDQogICAgICAgIHsgbmV3TWFya2Vycy5wdXNoKGdhcE1hcmtlcnMpOyB9DQogICAgICBuZXdNYXJrZXJzLnB1c2gobGFzdCk7DQogICAgfQ0KICAgIHJldHVybiBuZXdNYXJrZXJzDQogIH0NCg0KICAvLyBSZW1vdmUgc3BhbnMgdGhhdCBhcmUgZW1wdHkgYW5kIGRvbid0IGhhdmUgYSBjbGVhcldoZW5FbXB0eQ0KICAvLyBvcHRpb24gb2YgZmFsc2UuDQogIGZ1bmN0aW9uIGNsZWFyRW1wdHlTcGFucyhzcGFucykgew0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3BhbnMubGVuZ3RoOyArK2kpIHsNCiAgICAgIHZhciBzcGFuID0gc3BhbnNbaV07DQogICAgICBpZiAoc3Bhbi5mcm9tICE9IG51bGwgJiYgc3Bhbi5mcm9tID09IHNwYW4udG8gJiYgc3Bhbi5tYXJrZXIuY2xlYXJXaGVuRW1wdHkgIT09IGZhbHNlKQ0KICAgICAgICB7IHNwYW5zLnNwbGljZShpLS0sIDEpOyB9DQogICAgfQ0KICAgIGlmICghc3BhbnMubGVuZ3RoKSB7IHJldHVybiBudWxsIH0NCiAgICByZXR1cm4gc3BhbnMNCiAgfQ0KDQogIC8vIFVzZWQgdG8gJ2NsaXAnIG91dCByZWFkT25seSByYW5nZXMgd2hlbiBtYWtpbmcgYSBjaGFuZ2UuDQogIGZ1bmN0aW9uIHJlbW92ZVJlYWRPbmx5UmFuZ2VzKGRvYywgZnJvbSwgdG8pIHsNCiAgICB2YXIgbWFya2VycyA9IG51bGw7DQogICAgZG9jLml0ZXIoZnJvbS5saW5lLCB0by5saW5lICsgMSwgZnVuY3Rpb24gKGxpbmUpIHsNCiAgICAgIGlmIChsaW5lLm1hcmtlZFNwYW5zKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgbGluZS5tYXJrZWRTcGFucy5sZW5ndGg7ICsraSkgew0KICAgICAgICB2YXIgbWFyayA9IGxpbmUubWFya2VkU3BhbnNbaV0ubWFya2VyOw0KICAgICAgICBpZiAobWFyay5yZWFkT25seSAmJiAoIW1hcmtlcnMgfHwgaW5kZXhPZihtYXJrZXJzLCBtYXJrKSA9PSAtMSkpDQogICAgICAgICAgeyAobWFya2VycyB8fCAobWFya2VycyA9IFtdKSkucHVzaChtYXJrKTsgfQ0KICAgICAgfSB9DQogICAgfSk7DQogICAgaWYgKCFtYXJrZXJzKSB7IHJldHVybiBudWxsIH0NCiAgICB2YXIgcGFydHMgPSBbe2Zyb206IGZyb20sIHRvOiB0b31dOw0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFya2Vycy5sZW5ndGg7ICsraSkgew0KICAgICAgdmFyIG1rID0gbWFya2Vyc1tpXSwgbSA9IG1rLmZpbmQoMCk7DQogICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBhcnRzLmxlbmd0aDsgKytqKSB7DQogICAgICAgIHZhciBwID0gcGFydHNbal07DQogICAgICAgIGlmIChjbXAocC50bywgbS5mcm9tKSA8IDAgfHwgY21wKHAuZnJvbSwgbS50bykgPiAwKSB7IGNvbnRpbnVlIH0NCiAgICAgICAgdmFyIG5ld1BhcnRzID0gW2osIDFdLCBkZnJvbSA9IGNtcChwLmZyb20sIG0uZnJvbSksIGR0byA9IGNtcChwLnRvLCBtLnRvKTsNCiAgICAgICAgaWYgKGRmcm9tIDwgMCB8fCAhbWsuaW5jbHVzaXZlTGVmdCAmJiAhZGZyb20pDQogICAgICAgICAgeyBuZXdQYXJ0cy5wdXNoKHtmcm9tOiBwLmZyb20sIHRvOiBtLmZyb219KTsgfQ0KICAgICAgICBpZiAoZHRvID4gMCB8fCAhbWsuaW5jbHVzaXZlUmlnaHQgJiYgIWR0bykNCiAgICAgICAgICB7IG5ld1BhcnRzLnB1c2goe2Zyb206IG0udG8sIHRvOiBwLnRvfSk7IH0NCiAgICAgICAgcGFydHMuc3BsaWNlLmFwcGx5KHBhcnRzLCBuZXdQYXJ0cyk7DQogICAgICAgIGogKz0gbmV3UGFydHMubGVuZ3RoIC0gMzsNCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIHBhcnRzDQogIH0NCg0KICAvLyBDb25uZWN0IG9yIGRpc2Nvbm5lY3Qgc3BhbnMgZnJvbSBhIGxpbmUuDQogIGZ1bmN0aW9uIGRldGFjaE1hcmtlZFNwYW5zKGxpbmUpIHsNCiAgICB2YXIgc3BhbnMgPSBsaW5lLm1hcmtlZFNwYW5zOw0KICAgIGlmICghc3BhbnMpIHsgcmV0dXJuIH0NCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNwYW5zLmxlbmd0aDsgKytpKQ0KICAgICAgeyBzcGFuc1tpXS5tYXJrZXIuZGV0YWNoTGluZShsaW5lKTsgfQ0KICAgIGxpbmUubWFya2VkU3BhbnMgPSBudWxsOw0KICB9DQogIGZ1bmN0aW9uIGF0dGFjaE1hcmtlZFNwYW5zKGxpbmUsIHNwYW5zKSB7DQogICAgaWYgKCFzcGFucykgeyByZXR1cm4gfQ0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3BhbnMubGVuZ3RoOyArK2kpDQogICAgICB7IHNwYW5zW2ldLm1hcmtlci5hdHRhY2hMaW5lKGxpbmUpOyB9DQogICAgbGluZS5tYXJrZWRTcGFucyA9IHNwYW5zOw0KICB9DQoNCiAgLy8gSGVscGVycyB1c2VkIHdoZW4gY29tcHV0aW5nIHdoaWNoIG92ZXJsYXBwaW5nIGNvbGxhcHNlZCBzcGFuDQogIC8vIGNvdW50cyBhcyB0aGUgbGFyZ2VyIG9uZS4NCiAgZnVuY3Rpb24gZXh0cmFMZWZ0KG1hcmtlcikgeyByZXR1cm4gbWFya2VyLmluY2x1c2l2ZUxlZnQgPyAtMSA6IDAgfQ0KICBmdW5jdGlvbiBleHRyYVJpZ2h0KG1hcmtlcikgeyByZXR1cm4gbWFya2VyLmluY2x1c2l2ZVJpZ2h0ID8gMSA6IDAgfQ0KDQogIC8vIFJldHVybnMgYSBudW1iZXIgaW5kaWNhdGluZyB3aGljaCBvZiB0d28gb3ZlcmxhcHBpbmcgY29sbGFwc2VkDQogIC8vIHNwYW5zIGlzIGxhcmdlciAoYW5kIHRodXMgaW5jbHVkZXMgdGhlIG90aGVyKS4gRmFsbHMgYmFjayB0bw0KICAvLyBjb21wYXJpbmcgaWRzIHdoZW4gdGhlIHNwYW5zIGNvdmVyIGV4YWN0bHkgdGhlIHNhbWUgcmFuZ2UuDQogIGZ1bmN0aW9uIGNvbXBhcmVDb2xsYXBzZWRNYXJrZXJzKGEsIGIpIHsNCiAgICB2YXIgbGVuRGlmZiA9IGEubGluZXMubGVuZ3RoIC0gYi5saW5lcy5sZW5ndGg7DQogICAgaWYgKGxlbkRpZmYgIT0gMCkgeyByZXR1cm4gbGVuRGlmZiB9DQogICAgdmFyIGFQb3MgPSBhLmZpbmQoKSwgYlBvcyA9IGIuZmluZCgpOw0KICAgIHZhciBmcm9tQ21wID0gY21wKGFQb3MuZnJvbSwgYlBvcy5mcm9tKSB8fCBleHRyYUxlZnQoYSkgLSBleHRyYUxlZnQoYik7DQogICAgaWYgKGZyb21DbXApIHsgcmV0dXJuIC1mcm9tQ21wIH0NCiAgICB2YXIgdG9DbXAgPSBjbXAoYVBvcy50bywgYlBvcy50bykgfHwgZXh0cmFSaWdodChhKSAtIGV4dHJhUmlnaHQoYik7DQogICAgaWYgKHRvQ21wKSB7IHJldHVybiB0b0NtcCB9DQogICAgcmV0dXJuIGIuaWQgLSBhLmlkDQogIH0NCg0KICAvLyBGaW5kIG91dCB3aGV0aGVyIGEgbGluZSBlbmRzIG9yIHN0YXJ0cyBpbiBhIGNvbGxhcHNlZCBzcGFuLiBJZg0KICAvLyBzbywgcmV0dXJuIHRoZSBtYXJrZXIgZm9yIHRoYXQgc3Bhbi4NCiAgZnVuY3Rpb24gY29sbGFwc2VkU3BhbkF0U2lkZShsaW5lLCBzdGFydCkgew0KICAgIHZhciBzcHMgPSBzYXdDb2xsYXBzZWRTcGFucyAmJiBsaW5lLm1hcmtlZFNwYW5zLCBmb3VuZDsNCiAgICBpZiAoc3BzKSB7IGZvciAodmFyIHNwID0gKHZvaWQgMCksIGkgPSAwOyBpIDwgc3BzLmxlbmd0aDsgKytpKSB7DQogICAgICBzcCA9IHNwc1tpXTsNCiAgICAgIGlmIChzcC5tYXJrZXIuY29sbGFwc2VkICYmIChzdGFydCA/IHNwLmZyb20gOiBzcC50bykgPT0gbnVsbCAmJg0KICAgICAgICAgICghZm91bmQgfHwgY29tcGFyZUNvbGxhcHNlZE1hcmtlcnMoZm91bmQsIHNwLm1hcmtlcikgPCAwKSkNCiAgICAgICAgeyBmb3VuZCA9IHNwLm1hcmtlcjsgfQ0KICAgIH0gfQ0KICAgIHJldHVybiBmb3VuZA0KICB9DQogIGZ1bmN0aW9uIGNvbGxhcHNlZFNwYW5BdFN0YXJ0KGxpbmUpIHsgcmV0dXJuIGNvbGxhcHNlZFNwYW5BdFNpZGUobGluZSwgdHJ1ZSkgfQ0KICBmdW5jdGlvbiBjb2xsYXBzZWRTcGFuQXRFbmQobGluZSkgeyByZXR1cm4gY29sbGFwc2VkU3BhbkF0U2lkZShsaW5lLCBmYWxzZSkgfQ0KDQogIGZ1bmN0aW9uIGNvbGxhcHNlZFNwYW5Bcm91bmQobGluZSwgY2gpIHsNCiAgICB2YXIgc3BzID0gc2F3Q29sbGFwc2VkU3BhbnMgJiYgbGluZS5tYXJrZWRTcGFucywgZm91bmQ7DQogICAgaWYgKHNwcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHNwcy5sZW5ndGg7ICsraSkgew0KICAgICAgdmFyIHNwID0gc3BzW2ldOw0KICAgICAgaWYgKHNwLm1hcmtlci5jb2xsYXBzZWQgJiYgKHNwLmZyb20gPT0gbnVsbCB8fCBzcC5mcm9tIDwgY2gpICYmIChzcC50byA9PSBudWxsIHx8IHNwLnRvID4gY2gpICYmDQogICAgICAgICAgKCFmb3VuZCB8fCBjb21wYXJlQ29sbGFwc2VkTWFya2Vycyhmb3VuZCwgc3AubWFya2VyKSA8IDApKSB7IGZvdW5kID0gc3AubWFya2VyOyB9DQogICAgfSB9DQogICAgcmV0dXJuIGZvdW5kDQogIH0NCg0KICAvLyBUZXN0IHdoZXRoZXIgdGhlcmUgZXhpc3RzIGEgY29sbGFwc2VkIHNwYW4gdGhhdCBwYXJ0aWFsbHkNCiAgLy8gb3ZlcmxhcHMgKGNvdmVycyB0aGUgc3RhcnQgb3IgZW5kLCBidXQgbm90IGJvdGgpIG9mIGEgbmV3IHNwYW4uDQogIC8vIFN1Y2ggb3ZlcmxhcCBpcyBub3QgYWxsb3dlZC4NCiAgZnVuY3Rpb24gY29uZmxpY3RpbmdDb2xsYXBzZWRSYW5nZShkb2MsIGxpbmVObyQkMSwgZnJvbSwgdG8sIG1hcmtlcikgew0KICAgIHZhciBsaW5lID0gZ2V0TGluZShkb2MsIGxpbmVObyQkMSk7DQogICAgdmFyIHNwcyA9IHNhd0NvbGxhcHNlZFNwYW5zICYmIGxpbmUubWFya2VkU3BhbnM7DQogICAgaWYgKHNwcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHNwcy5sZW5ndGg7ICsraSkgew0KICAgICAgdmFyIHNwID0gc3BzW2ldOw0KICAgICAgaWYgKCFzcC5tYXJrZXIuY29sbGFwc2VkKSB7IGNvbnRpbnVlIH0NCiAgICAgIHZhciBmb3VuZCA9IHNwLm1hcmtlci5maW5kKDApOw0KICAgICAgdmFyIGZyb21DbXAgPSBjbXAoZm91bmQuZnJvbSwgZnJvbSkgfHwgZXh0cmFMZWZ0KHNwLm1hcmtlcikgLSBleHRyYUxlZnQobWFya2VyKTsNCiAgICAgIHZhciB0b0NtcCA9IGNtcChmb3VuZC50bywgdG8pIHx8IGV4dHJhUmlnaHQoc3AubWFya2VyKSAtIGV4dHJhUmlnaHQobWFya2VyKTsNCiAgICAgIGlmIChmcm9tQ21wID49IDAgJiYgdG9DbXAgPD0gMCB8fCBmcm9tQ21wIDw9IDAgJiYgdG9DbXAgPj0gMCkgeyBjb250aW51ZSB9DQogICAgICBpZiAoZnJvbUNtcCA8PSAwICYmIChzcC5tYXJrZXIuaW5jbHVzaXZlUmlnaHQgJiYgbWFya2VyLmluY2x1c2l2ZUxlZnQgPyBjbXAoZm91bmQudG8sIGZyb20pID49IDAgOiBjbXAoZm91bmQudG8sIGZyb20pID4gMCkgfHwNCiAgICAgICAgICBmcm9tQ21wID49IDAgJiYgKHNwLm1hcmtlci5pbmNsdXNpdmVSaWdodCAmJiBtYXJrZXIuaW5jbHVzaXZlTGVmdCA/IGNtcChmb3VuZC5mcm9tLCB0bykgPD0gMCA6IGNtcChmb3VuZC5mcm9tLCB0bykgPCAwKSkNCiAgICAgICAgeyByZXR1cm4gdHJ1ZSB9DQogICAgfSB9DQogIH0NCg0KICAvLyBBIHZpc3VhbCBsaW5lIGlzIGEgbGluZSBhcyBkcmF3biBvbiB0aGUgc2NyZWVuLiBGb2xkaW5nLCBmb3INCiAgLy8gZXhhbXBsZSwgY2FuIGNhdXNlIG11bHRpcGxlIGxvZ2ljYWwgbGluZXMgdG8gYXBwZWFyIG9uIHRoZSBzYW1lDQogIC8vIHZpc3VhbCBsaW5lLiBUaGlzIGZpbmRzIHRoZSBzdGFydCBvZiB0aGUgdmlzdWFsIGxpbmUgdGhhdCB0aGUNCiAgLy8gZ2l2ZW4gbGluZSBpcyBwYXJ0IG9mICh1c3VhbGx5IHRoYXQgaXMgdGhlIGxpbmUgaXRzZWxmKS4NCiAgZnVuY3Rpb24gdmlzdWFsTGluZShsaW5lKSB7DQogICAgdmFyIG1lcmdlZDsNCiAgICB3aGlsZSAobWVyZ2VkID0gY29sbGFwc2VkU3BhbkF0U3RhcnQobGluZSkpDQogICAgICB7IGxpbmUgPSBtZXJnZWQuZmluZCgtMSwgdHJ1ZSkubGluZTsgfQ0KICAgIHJldHVybiBsaW5lDQogIH0NCg0KICBmdW5jdGlvbiB2aXN1YWxMaW5lRW5kKGxpbmUpIHsNCiAgICB2YXIgbWVyZ2VkOw0KICAgIHdoaWxlIChtZXJnZWQgPSBjb2xsYXBzZWRTcGFuQXRFbmQobGluZSkpDQogICAgICB7IGxpbmUgPSBtZXJnZWQuZmluZCgxLCB0cnVlKS5saW5lOyB9DQogICAgcmV0dXJuIGxpbmUNCiAgfQ0KDQogIC8vIFJldHVybnMgYW4gYXJyYXkgb2YgbG9naWNhbCBsaW5lcyB0aGF0IGNvbnRpbnVlIHRoZSB2aXN1YWwgbGluZQ0KICAvLyBzdGFydGVkIGJ5IHRoZSBhcmd1bWVudCwgb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGFyZSBubyBzdWNoIGxpbmVzLg0KICBmdW5jdGlvbiB2aXN1YWxMaW5lQ29udGludWVkKGxpbmUpIHsNCiAgICB2YXIgbWVyZ2VkLCBsaW5lczsNCiAgICB3aGlsZSAobWVyZ2VkID0gY29sbGFwc2VkU3BhbkF0RW5kKGxpbmUpKSB7DQogICAgICBsaW5lID0gbWVyZ2VkLmZpbmQoMSwgdHJ1ZSkubGluZQ0KICAgICAgOyhsaW5lcyB8fCAobGluZXMgPSBbXSkpLnB1c2gobGluZSk7DQogICAgfQ0KICAgIHJldHVybiBsaW5lcw0KICB9DQoNCiAgLy8gR2V0IHRoZSBsaW5lIG51bWJlciBvZiB0aGUgc3RhcnQgb2YgdGhlIHZpc3VhbCBsaW5lIHRoYXQgdGhlDQogIC8vIGdpdmVuIGxpbmUgbnVtYmVyIGlzIHBhcnQgb2YuDQogIGZ1bmN0aW9uIHZpc3VhbExpbmVObyhkb2MsIGxpbmVOKSB7DQogICAgdmFyIGxpbmUgPSBnZXRMaW5lKGRvYywgbGluZU4pLCB2aXMgPSB2aXN1YWxMaW5lKGxpbmUpOw0KICAgIGlmIChsaW5lID09IHZpcykgeyByZXR1cm4gbGluZU4gfQ0KICAgIHJldHVybiBsaW5lTm8odmlzKQ0KICB9DQoNCiAgLy8gR2V0IHRoZSBsaW5lIG51bWJlciBvZiB0aGUgc3RhcnQgb2YgdGhlIG5leHQgdmlzdWFsIGxpbmUgYWZ0ZXINCiAgLy8gdGhlIGdpdmVuIGxpbmUuDQogIGZ1bmN0aW9uIHZpc3VhbExpbmVFbmRObyhkb2MsIGxpbmVOKSB7DQogICAgaWYgKGxpbmVOID4gZG9jLmxhc3RMaW5lKCkpIHsgcmV0dXJuIGxpbmVOIH0NCiAgICB2YXIgbGluZSA9IGdldExpbmUoZG9jLCBsaW5lTiksIG1lcmdlZDsNCiAgICBpZiAoIWxpbmVJc0hpZGRlbihkb2MsIGxpbmUpKSB7IHJldHVybiBsaW5lTiB9DQogICAgd2hpbGUgKG1lcmdlZCA9IGNvbGxhcHNlZFNwYW5BdEVuZChsaW5lKSkNCiAgICAgIHsgbGluZSA9IG1lcmdlZC5maW5kKDEsIHRydWUpLmxpbmU7IH0NCiAgICByZXR1cm4gbGluZU5vKGxpbmUpICsgMQ0KICB9DQoNCiAgLy8gQ29tcHV0ZSB3aGV0aGVyIGEgbGluZSBpcyBoaWRkZW4uIExpbmVzIGNvdW50IGFzIGhpZGRlbiB3aGVuIHRoZXkNCiAgLy8gYXJlIHBhcnQgb2YgYSB2aXN1YWwgbGluZSB0aGF0IHN0YXJ0cyB3aXRoIGFub3RoZXIgbGluZSwgb3Igd2hlbg0KICAvLyB0aGV5IGFyZSBlbnRpcmVseSBjb3ZlcmVkIGJ5IGNvbGxhcHNlZCwgbm9uLXdpZGdldCBzcGFuLg0KICBmdW5jdGlvbiBsaW5lSXNIaWRkZW4oZG9jLCBsaW5lKSB7DQogICAgdmFyIHNwcyA9IHNhd0NvbGxhcHNlZFNwYW5zICYmIGxpbmUubWFya2VkU3BhbnM7DQogICAgaWYgKHNwcykgeyBmb3IgKHZhciBzcCA9ICh2b2lkIDApLCBpID0gMDsgaSA8IHNwcy5sZW5ndGg7ICsraSkgew0KICAgICAgc3AgPSBzcHNbaV07DQogICAgICBpZiAoIXNwLm1hcmtlci5jb2xsYXBzZWQpIHsgY29udGludWUgfQ0KICAgICAgaWYgKHNwLmZyb20gPT0gbnVsbCkgeyByZXR1cm4gdHJ1ZSB9DQogICAgICBpZiAoc3AubWFya2VyLndpZGdldE5vZGUpIHsgY29udGludWUgfQ0KICAgICAgaWYgKHNwLmZyb20gPT0gMCAmJiBzcC5tYXJrZXIuaW5jbHVzaXZlTGVmdCAmJiBsaW5lSXNIaWRkZW5Jbm5lcihkb2MsIGxpbmUsIHNwKSkNCiAgICAgICAgeyByZXR1cm4gdHJ1ZSB9DQogICAgfSB9DQogIH0NCiAgZnVuY3Rpb24gbGluZUlzSGlkZGVuSW5uZXIoZG9jLCBsaW5lLCBzcGFuKSB7DQogICAgaWYgKHNwYW4udG8gPT0gbnVsbCkgew0KICAgICAgdmFyIGVuZCA9IHNwYW4ubWFya2VyLmZpbmQoMSwgdHJ1ZSk7DQogICAgICByZXR1cm4gbGluZUlzSGlkZGVuSW5uZXIoZG9jLCBlbmQubGluZSwgZ2V0TWFya2VkU3BhbkZvcihlbmQubGluZS5tYXJrZWRTcGFucywgc3Bhbi5tYXJrZXIpKQ0KICAgIH0NCiAgICBpZiAoc3Bhbi5tYXJrZXIuaW5jbHVzaXZlUmlnaHQgJiYgc3Bhbi50byA9PSBsaW5lLnRleHQubGVuZ3RoKQ0KICAgICAgeyByZXR1cm4gdHJ1ZSB9DQogICAgZm9yICh2YXIgc3AgPSAodm9pZCAwKSwgaSA9IDA7IGkgPCBsaW5lLm1hcmtlZFNwYW5zLmxlbmd0aDsgKytpKSB7DQogICAgICBzcCA9IGxpbmUubWFya2VkU3BhbnNbaV07DQogICAgICBpZiAoc3AubWFya2VyLmNvbGxhcHNlZCAmJiAhc3AubWFya2VyLndpZGdldE5vZGUgJiYgc3AuZnJvbSA9PSBzcGFuLnRvICYmDQogICAgICAgICAgKHNwLnRvID09IG51bGwgfHwgc3AudG8gIT0gc3Bhbi5mcm9tKSAmJg0KICAgICAgICAgIChzcC5tYXJrZXIuaW5jbHVzaXZlTGVmdCB8fCBzcGFuLm1hcmtlci5pbmNsdXNpdmVSaWdodCkgJiYNCiAgICAgICAgICBsaW5lSXNIaWRkZW5Jbm5lcihkb2MsIGxpbmUsIHNwKSkgeyByZXR1cm4gdHJ1ZSB9DQogICAgfQ0KICB9DQoNCiAgLy8gRmluZCB0aGUgaGVpZ2h0IGFib3ZlIHRoZSBnaXZlbiBsaW5lLg0KICBmdW5jdGlvbiBoZWlnaHRBdExpbmUobGluZU9iaikgew0KICAgIGxpbmVPYmogPSB2aXN1YWxMaW5lKGxpbmVPYmopOw0KDQogICAgdmFyIGggPSAwLCBjaHVuayA9IGxpbmVPYmoucGFyZW50Ow0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2h1bmsubGluZXMubGVuZ3RoOyArK2kpIHsNCiAgICAgIHZhciBsaW5lID0gY2h1bmsubGluZXNbaV07DQogICAgICBpZiAobGluZSA9PSBsaW5lT2JqKSB7IGJyZWFrIH0NCiAgICAgIGVsc2UgeyBoICs9IGxpbmUuaGVpZ2h0OyB9DQogICAgfQ0KICAgIGZvciAodmFyIHAgPSBjaHVuay5wYXJlbnQ7IHA7IGNodW5rID0gcCwgcCA9IGNodW5rLnBhcmVudCkgew0KICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcC5jaGlsZHJlbi5sZW5ndGg7ICsraSQxKSB7DQogICAgICAgIHZhciBjdXIgPSBwLmNoaWxkcmVuW2kkMV07DQogICAgICAgIGlmIChjdXIgPT0gY2h1bmspIHsgYnJlYWsgfQ0KICAgICAgICBlbHNlIHsgaCArPSBjdXIuaGVpZ2h0OyB9DQogICAgICB9DQogICAgfQ0KICAgIHJldHVybiBoDQogIH0NCg0KICAvLyBDb21wdXRlIHRoZSBjaGFyYWN0ZXIgbGVuZ3RoIG9mIGEgbGluZSwgdGFraW5nIGludG8gYWNjb3VudA0KICAvLyBjb2xsYXBzZWQgcmFuZ2VzIChzZWUgbWFya1RleHQpIHRoYXQgbWlnaHQgaGlkZSBwYXJ0cywgYW5kIGpvaW4NCiAgLy8gb3RoZXIgbGluZXMgb250byBpdC4NCiAgZnVuY3Rpb24gbGluZUxlbmd0aChsaW5lKSB7DQogICAgaWYgKGxpbmUuaGVpZ2h0ID09IDApIHsgcmV0dXJuIDAgfQ0KICAgIHZhciBsZW4gPSBsaW5lLnRleHQubGVuZ3RoLCBtZXJnZWQsIGN1ciA9IGxpbmU7DQogICAgd2hpbGUgKG1lcmdlZCA9IGNvbGxhcHNlZFNwYW5BdFN0YXJ0KGN1cikpIHsNCiAgICAgIHZhciBmb3VuZCA9IG1lcmdlZC5maW5kKDAsIHRydWUpOw0KICAgICAgY3VyID0gZm91bmQuZnJvbS5saW5lOw0KICAgICAgbGVuICs9IGZvdW5kLmZyb20uY2ggLSBmb3VuZC50by5jaDsNCiAgICB9DQogICAgY3VyID0gbGluZTsNCiAgICB3aGlsZSAobWVyZ2VkID0gY29sbGFwc2VkU3BhbkF0RW5kKGN1cikpIHsNCiAgICAgIHZhciBmb3VuZCQxID0gbWVyZ2VkLmZpbmQoMCwgdHJ1ZSk7DQogICAgICBsZW4gLT0gY3VyLnRleHQubGVuZ3RoIC0gZm91bmQkMS5mcm9tLmNoOw0KICAgICAgY3VyID0gZm91bmQkMS50by5saW5lOw0KICAgICAgbGVuICs9IGN1ci50ZXh0Lmxlbmd0aCAtIGZvdW5kJDEudG8uY2g7DQogICAgfQ0KICAgIHJldHVybiBsZW4NCiAgfQ0KDQogIC8vIEZpbmQgdGhlIGxvbmdlc3QgbGluZSBpbiB0aGUgZG9jdW1lbnQuDQogIGZ1bmN0aW9uIGZpbmRNYXhMaW5lKGNtKSB7DQogICAgdmFyIGQgPSBjbS5kaXNwbGF5LCBkb2MgPSBjbS5kb2M7DQogICAgZC5tYXhMaW5lID0gZ2V0TGluZShkb2MsIGRvYy5maXJzdCk7DQogICAgZC5tYXhMaW5lTGVuZ3RoID0gbGluZUxlbmd0aChkLm1heExpbmUpOw0KICAgIGQubWF4TGluZUNoYW5nZWQgPSB0cnVlOw0KICAgIGRvYy5pdGVyKGZ1bmN0aW9uIChsaW5lKSB7DQogICAgICB2YXIgbGVuID0gbGluZUxlbmd0aChsaW5lKTsNCiAgICAgIGlmIChsZW4gPiBkLm1heExpbmVMZW5ndGgpIHsNCiAgICAgICAgZC5tYXhMaW5lTGVuZ3RoID0gbGVuOw0KICAgICAgICBkLm1heExpbmUgPSBsaW5lOw0KICAgICAgfQ0KICAgIH0pOw0KICB9DQoNCiAgLy8gTElORSBEQVRBIFNUUlVDVFVSRQ0KDQogIC8vIExpbmUgb2JqZWN0cy4gVGhlc2UgaG9sZCBzdGF0ZSByZWxhdGVkIHRvIGEgbGluZSwgaW5jbHVkaW5nDQogIC8vIGhpZ2hsaWdodGluZyBpbmZvICh0aGUgc3R5bGVzIGFycmF5KS4NCiAgdmFyIExpbmUgPSBmdW5jdGlvbih0ZXh0LCBtYXJrZWRTcGFucywgZXN0aW1hdGVIZWlnaHQpIHsNCiAgICB0aGlzLnRleHQgPSB0ZXh0Ow0KICAgIGF0dGFjaE1hcmtlZFNwYW5zKHRoaXMsIG1hcmtlZFNwYW5zKTsNCiAgICB0aGlzLmhlaWdodCA9IGVzdGltYXRlSGVpZ2h0ID8gZXN0aW1hdGVIZWlnaHQodGhpcykgOiAxOw0KICB9Ow0KDQogIExpbmUucHJvdG90eXBlLmxpbmVObyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGxpbmVObyh0aGlzKSB9Ow0KICBldmVudE1peGluKExpbmUpOw0KDQogIC8vIENoYW5nZSB0aGUgY29udGVudCAodGV4dCwgbWFya2Vycykgb2YgYSBsaW5lLiBBdXRvbWF0aWNhbGx5DQogIC8vIGludmFsaWRhdGVzIGNhY2hlZCBpbmZvcm1hdGlvbiBhbmQgdHJpZXMgdG8gcmUtZXN0aW1hdGUgdGhlDQogIC8vIGxpbmUncyBoZWlnaHQuDQogIGZ1bmN0aW9uIHVwZGF0ZUxpbmUobGluZSwgdGV4dCwgbWFya2VkU3BhbnMsIGVzdGltYXRlSGVpZ2h0KSB7DQogICAgbGluZS50ZXh0ID0gdGV4dDsNCiAgICBpZiAobGluZS5zdGF0ZUFmdGVyKSB7IGxpbmUuc3RhdGVBZnRlciA9IG51bGw7IH0NCiAgICBpZiAobGluZS5zdHlsZXMpIHsgbGluZS5zdHlsZXMgPSBudWxsOyB9DQogICAgaWYgKGxpbmUub3JkZXIgIT0gbnVsbCkgeyBsaW5lLm9yZGVyID0gbnVsbDsgfQ0KICAgIGRldGFjaE1hcmtlZFNwYW5zKGxpbmUpOw0KICAgIGF0dGFjaE1hcmtlZFNwYW5zKGxpbmUsIG1hcmtlZFNwYW5zKTsNCiAgICB2YXIgZXN0SGVpZ2h0ID0gZXN0aW1hdGVIZWlnaHQgPyBlc3RpbWF0ZUhlaWdodChsaW5lKSA6IDE7DQogICAgaWYgKGVzdEhlaWdodCAhPSBsaW5lLmhlaWdodCkgeyB1cGRhdGVMaW5lSGVpZ2h0KGxpbmUsIGVzdEhlaWdodCk7IH0NCiAgfQ0KDQogIC8vIERldGFjaCBhIGxpbmUgZnJvbSB0aGUgZG9jdW1lbnQgdHJlZSBhbmQgaXRzIG1hcmtlcnMuDQogIGZ1bmN0aW9uIGNsZWFuVXBMaW5lKGxpbmUpIHsNCiAgICBsaW5lLnBhcmVudCA9IG51bGw7DQogICAgZGV0YWNoTWFya2VkU3BhbnMobGluZSk7DQogIH0NCg0KICAvLyBDb252ZXJ0IGEgc3R5bGUgYXMgcmV0dXJuZWQgYnkgYSBtb2RlIChlaXRoZXIgbnVsbCwgb3IgYSBzdHJpbmcNCiAgLy8gY29udGFpbmluZyBvbmUgb3IgbW9yZSBzdHlsZXMpIHRvIGEgQ1NTIHN0eWxlLiBUaGlzIGlzIGNhY2hlZCwNCiAgLy8gYW5kIGFsc28gbG9va3MgZm9yIGxpbmUtd2lkZSBzdHlsZXMuDQogIHZhciBzdHlsZVRvQ2xhc3NDYWNoZSA9IHt9LCBzdHlsZVRvQ2xhc3NDYWNoZVdpdGhNb2RlID0ge307DQogIGZ1bmN0aW9uIGludGVycHJldFRva2VuU3R5bGUoc3R5bGUsIG9wdGlvbnMpIHsNCiAgICBpZiAoIXN0eWxlIHx8IC9eXHMqJC8udGVzdChzdHlsZSkpIHsgcmV0dXJuIG51bGwgfQ0KICAgIHZhciBjYWNoZSA9IG9wdGlvbnMuYWRkTW9kZUNsYXNzID8gc3R5bGVUb0NsYXNzQ2FjaGVXaXRoTW9kZSA6IHN0eWxlVG9DbGFzc0NhY2hlOw0KICAgIHJldHVybiBjYWNoZVtzdHlsZV0gfHwNCiAgICAgIChjYWNoZVtzdHlsZV0gPSBzdHlsZS5yZXBsYWNlKC9cUysvZywgImNtLSQmIikpDQogIH0NCg0KICAvLyBSZW5kZXIgdGhlIERPTSByZXByZXNlbnRhdGlvbiBvZiB0aGUgdGV4dCBvZiBhIGxpbmUuIEFsc28gYnVpbGRzDQogIC8vIHVwIGEgJ2xpbmUgbWFwJywgd2hpY2ggcG9pbnRzIGF0IHRoZSBET00gbm9kZXMgdGhhdCByZXByZXNlbnQNCiAgLy8gc3BlY2lmaWMgc3RyZXRjaGVzIG9mIHRleHQsIGFuZCBpcyB1c2VkIGJ5IHRoZSBtZWFzdXJpbmcgY29kZS4NCiAgLy8gVGhlIHJldHVybmVkIG9iamVjdCBjb250YWlucyB0aGUgRE9NIG5vZGUsIHRoaXMgbWFwLCBhbmQNCiAgLy8gaW5mb3JtYXRpb24gYWJvdXQgbGluZS13aWRlIHN0eWxlcyB0aGF0IHdlcmUgc2V0IGJ5IHRoZSBtb2RlLg0KICBmdW5jdGlvbiBidWlsZExpbmVDb250ZW50KGNtLCBsaW5lVmlldykgew0KICAgIC8vIFRoZSBwYWRkaW5nLXJpZ2h0IGZvcmNlcyB0aGUgZWxlbWVudCB0byBoYXZlIGEgJ2JvcmRlcicsIHdoaWNoDQogICAgLy8gaXMgbmVlZGVkIG9uIFdlYmtpdCB0byBiZSBhYmxlIHRvIGdldCBsaW5lLWxldmVsIGJvdW5kaW5nDQogICAgLy8gcmVjdGFuZ2xlcyBmb3IgaXQgKGluIG1lYXN1cmVDaGFyKS4NCiAgICB2YXIgY29udGVudCA9IGVsdFAoInNwYW4iLCBudWxsLCBudWxsLCB3ZWJraXQgPyAicGFkZGluZy1yaWdodDogLjFweCIgOiBudWxsKTsNCiAgICB2YXIgYnVpbGRlciA9IHtwcmU6IGVsdFAoInByZSIsIFtjb250ZW50XSwgIkNvZGVNaXJyb3ItbGluZSIpLCBjb250ZW50OiBjb250ZW50LA0KICAgICAgICAgICAgICAgICAgIGNvbDogMCwgcG9zOiAwLCBjbTogY20sDQogICAgICAgICAgICAgICAgICAgdHJhaWxpbmdTcGFjZTogZmFsc2UsDQogICAgICAgICAgICAgICAgICAgc3BsaXRTcGFjZXM6IGNtLmdldE9wdGlvbigibGluZVdyYXBwaW5nIil9Ow0KICAgIGxpbmVWaWV3Lm1lYXN1cmUgPSB7fTsNCg0KICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUgbG9naWNhbCBsaW5lcyB0aGF0IG1ha2UgdXAgdGhpcyB2aXN1YWwgbGluZS4NCiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSAobGluZVZpZXcucmVzdCA/IGxpbmVWaWV3LnJlc3QubGVuZ3RoIDogMCk7IGkrKykgew0KICAgICAgdmFyIGxpbmUgPSBpID8gbGluZVZpZXcucmVzdFtpIC0gMV0gOiBsaW5lVmlldy5saW5lLCBvcmRlciA9ICh2b2lkIDApOw0KICAgICAgYnVpbGRlci5wb3MgPSAwOw0KICAgICAgYnVpbGRlci5hZGRUb2tlbiA9IGJ1aWxkVG9rZW47DQogICAgICAvLyBPcHRpb25hbGx5IHdpcmUgaW4gc29tZSBoYWNrcyBpbnRvIHRoZSB0b2tlbi1yZW5kZXJpbmcNCiAgICAgIC8vIGFsZ29yaXRobSwgdG8gZGVhbCB3aXRoIGJyb3dzZXIgcXVpcmtzLg0KICAgICAgaWYgKGhhc0JhZEJpZGlSZWN0cyhjbS5kaXNwbGF5Lm1lYXN1cmUpICYmIChvcmRlciA9IGdldE9yZGVyKGxpbmUsIGNtLmRvYy5kaXJlY3Rpb24pKSkNCiAgICAgICAgeyBidWlsZGVyLmFkZFRva2VuID0gYnVpbGRUb2tlbkJhZEJpZGkoYnVpbGRlci5hZGRUb2tlbiwgb3JkZXIpOyB9DQogICAgICBidWlsZGVyLm1hcCA9IFtdOw0KICAgICAgdmFyIGFsbG93RnJvbnRpZXJVcGRhdGUgPSBsaW5lVmlldyAhPSBjbS5kaXNwbGF5LmV4dGVybmFsTWVhc3VyZWQgJiYgbGluZU5vKGxpbmUpOw0KICAgICAgaW5zZXJ0TGluZUNvbnRlbnQobGluZSwgYnVpbGRlciwgZ2V0TGluZVN0eWxlcyhjbSwgbGluZSwgYWxsb3dGcm9udGllclVwZGF0ZSkpOw0KICAgICAgaWYgKGxpbmUuc3R5bGVDbGFzc2VzKSB7DQogICAgICAgIGlmIChsaW5lLnN0eWxlQ2xhc3Nlcy5iZ0NsYXNzKQ0KICAgICAgICAgIHsgYnVpbGRlci5iZ0NsYXNzID0gam9pbkNsYXNzZXMobGluZS5zdHlsZUNsYXNzZXMuYmdDbGFzcywgYnVpbGRlci5iZ0NsYXNzIHx8ICIiKTsgfQ0KICAgICAgICBpZiAobGluZS5zdHlsZUNsYXNzZXMudGV4dENsYXNzKQ0KICAgICAgICAgIHsgYnVpbGRlci50ZXh0Q2xhc3MgPSBqb2luQ2xhc3NlcyhsaW5lLnN0eWxlQ2xhc3Nlcy50ZXh0Q2xhc3MsIGJ1aWxkZXIudGV4dENsYXNzIHx8ICIiKTsgfQ0KICAgICAgfQ0KDQogICAgICAvLyBFbnN1cmUgYXQgbGVhc3QgYSBzaW5nbGUgbm9kZSBpcyBwcmVzZW50LCBmb3IgbWVhc3VyaW5nLg0KICAgICAgaWYgKGJ1aWxkZXIubWFwLmxlbmd0aCA9PSAwKQ0KICAgICAgICB7IGJ1aWxkZXIubWFwLnB1c2goMCwgMCwgYnVpbGRlci5jb250ZW50LmFwcGVuZENoaWxkKHplcm9XaWR0aEVsZW1lbnQoY20uZGlzcGxheS5tZWFzdXJlKSkpOyB9DQoNCiAgICAgIC8vIFN0b3JlIHRoZSBtYXAgYW5kIGEgY2FjaGUgb2JqZWN0IGZvciB0aGUgY3VycmVudCBsb2dpY2FsIGxpbmUNCiAgICAgIGlmIChpID09IDApIHsNCiAgICAgICAgbGluZVZpZXcubWVhc3VyZS5tYXAgPSBidWlsZGVyLm1hcDsNCiAgICAgICAgbGluZVZpZXcubWVhc3VyZS5jYWNoZSA9IHt9Ow0KICAgICAgfSBlbHNlIHsNCiAgKGxpbmVWaWV3Lm1lYXN1cmUubWFwcyB8fCAobGluZVZpZXcubWVhc3VyZS5tYXBzID0gW10pKS5wdXNoKGJ1aWxkZXIubWFwKQ0KICAgICAgICA7KGxpbmVWaWV3Lm1lYXN1cmUuY2FjaGVzIHx8IChsaW5lVmlldy5tZWFzdXJlLmNhY2hlcyA9IFtdKSkucHVzaCh7fSk7DQogICAgICB9DQogICAgfQ0KDQogICAgLy8gU2VlIGlzc3VlICMyOTAxDQogICAgaWYgKHdlYmtpdCkgew0KICAgICAgdmFyIGxhc3QgPSBidWlsZGVyLmNvbnRlbnQubGFzdENoaWxkOw0KICAgICAgaWYgKC9cYmNtLXRhYlxiLy50ZXN0KGxhc3QuY2xhc3NOYW1lKSB8fCAobGFzdC5xdWVyeVNlbGVjdG9yICYmIGxhc3QucXVlcnlTZWxlY3RvcigiLmNtLXRhYiIpKSkNCiAgICAgICAgeyBidWlsZGVyLmNvbnRlbnQuY2xhc3NOYW1lID0gImNtLXRhYi13cmFwLWhhY2siOyB9DQogICAgfQ0KDQogICAgc2lnbmFsKGNtLCAicmVuZGVyTGluZSIsIGNtLCBsaW5lVmlldy5saW5lLCBidWlsZGVyLnByZSk7DQogICAgaWYgKGJ1aWxkZXIucHJlLmNsYXNzTmFtZSkNCiAgICAgIHsgYnVpbGRlci50ZXh0Q2xhc3MgPSBqb2luQ2xhc3NlcyhidWlsZGVyLnByZS5jbGFzc05hbWUsIGJ1aWxkZXIudGV4dENsYXNzIHx8ICIiKTsgfQ0KDQogICAgcmV0dXJuIGJ1aWxkZXINCiAgfQ0KDQogIGZ1bmN0aW9uIGRlZmF1bHRTcGVjaWFsQ2hhclBsYWNlaG9sZGVyKGNoKSB7DQogICAgdmFyIHRva2VuID0gZWx0KCJzcGFuIiwgIlx1MjAyMiIsICJjbS1pbnZhbGlkY2hhciIpOw0KICAgIHRva2VuLnRpdGxlID0gIlxcdSIgKyBjaC5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KTsNCiAgICB0b2tlbi5zZXRBdHRyaWJ1dGUoImFyaWEtbGFiZWwiLCB0b2tlbi50aXRsZSk7DQogICAgcmV0dXJuIHRva2VuDQogIH0NCg0KICAvLyBCdWlsZCB1cCB0aGUgRE9NIHJlcHJlc2VudGF0aW9uIGZvciBhIHNpbmdsZSB0b2tlbiwgYW5kIGFkZCBpdCB0bw0KICAvLyB0aGUgbGluZSBtYXAuIFRha2VzIGNhcmUgdG8gcmVuZGVyIHNwZWNpYWwgY2hhcmFjdGVycyBzZXBhcmF0ZWx5Lg0KICBmdW5jdGlvbiBidWlsZFRva2VuKGJ1aWxkZXIsIHRleHQsIHN0eWxlLCBzdGFydFN0eWxlLCBlbmRTdHlsZSwgY3NzLCBhdHRyaWJ1dGVzKSB7DQogICAgaWYgKCF0ZXh0KSB7IHJldHVybiB9DQogICAgdmFyIGRpc3BsYXlUZXh0ID0gYnVpbGRlci5zcGxpdFNwYWNlcyA/IHNwbGl0U3BhY2VzKHRleHQsIGJ1aWxkZXIudHJhaWxpbmdTcGFjZSkgOiB0ZXh0Ow0KICAgIHZhciBzcGVjaWFsID0gYnVpbGRlci5jbS5zdGF0ZS5zcGVjaWFsQ2hhcnMsIG11c3RXcmFwID0gZmFsc2U7DQogICAgdmFyIGNvbnRlbnQ7DQogICAgaWYgKCFzcGVjaWFsLnRlc3QodGV4dCkpIHsNCiAgICAgIGJ1aWxkZXIuY29sICs9IHRleHQubGVuZ3RoOw0KICAgICAgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRpc3BsYXlUZXh0KTsNCiAgICAgIGJ1aWxkZXIubWFwLnB1c2goYnVpbGRlci5wb3MsIGJ1aWxkZXIucG9zICsgdGV4dC5sZW5ndGgsIGNvbnRlbnQpOw0KICAgICAgaWYgKGllICYmIGllX3ZlcnNpb24gPCA5KSB7IG11c3RXcmFwID0gdHJ1ZTsgfQ0KICAgICAgYnVpbGRlci5wb3MgKz0gdGV4dC5sZW5ndGg7DQogICAgfSBlbHNlIHsNCiAgICAgIGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7DQogICAgICB2YXIgcG9zID0gMDsNCiAgICAgIHdoaWxlICh0cnVlKSB7DQogICAgICAgIHNwZWNpYWwubGFzdEluZGV4ID0gcG9zOw0KICAgICAgICB2YXIgbSA9IHNwZWNpYWwuZXhlYyh0ZXh0KTsNCiAgICAgICAgdmFyIHNraXBwZWQgPSBtID8gbS5pbmRleCAtIHBvcyA6IHRleHQubGVuZ3RoIC0gcG9zOw0KICAgICAgICBpZiAoc2tpcHBlZCkgew0KICAgICAgICAgIHZhciB0eHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkaXNwbGF5VGV4dC5zbGljZShwb3MsIHBvcyArIHNraXBwZWQpKTsNCiAgICAgICAgICBpZiAoaWUgJiYgaWVfdmVyc2lvbiA8IDkpIHsgY29udGVudC5hcHBlbmRDaGlsZChlbHQoInNwYW4iLCBbdHh0XSkpOyB9DQogICAgICAgICAgZWxzZSB7IGNvbnRlbnQuYXBwZW5kQ2hpbGQodHh0KTsgfQ0KICAgICAgICAgIGJ1aWxkZXIubWFwLnB1c2goYnVpbGRlci5wb3MsIGJ1aWxkZXIucG9zICsgc2tpcHBlZCwgdHh0KTsNCiAgICAgICAgICBidWlsZGVyLmNvbCArPSBza2lwcGVkOw0KICAgICAgICAgIGJ1aWxkZXIucG9zICs9IHNraXBwZWQ7DQogICAgICAgIH0NCiAgICAgICAgaWYgKCFtKSB7IGJyZWFrIH0NCiAgICAgICAgcG9zICs9IHNraXBwZWQgKyAxOw0KICAgICAgICB2YXIgdHh0JDEgPSAodm9pZCAwKTsNCiAgICAgICAgaWYgKG1bMF0gPT0gIlx0Iikgew0KICAgICAgICAgIHZhciB0YWJTaXplID0gYnVpbGRlci5jbS5vcHRpb25zLnRhYlNpemUsIHRhYldpZHRoID0gdGFiU2l6ZSAtIGJ1aWxkZXIuY29sICUgdGFiU2l6ZTsNCiAgICAgICAgICB0eHQkMSA9IGNvbnRlbnQuYXBwZW5kQ2hpbGQoZWx0KCJzcGFuIiwgc3BhY2VTdHIodGFiV2lkdGgpLCAiY20tdGFiIikpOw0KICAgICAgICAgIHR4dCQxLnNldEF0dHJpYnV0ZSgicm9sZSIsICJwcmVzZW50YXRpb24iKTsNCiAgICAgICAgICB0eHQkMS5zZXRBdHRyaWJ1dGUoImNtLXRleHQiLCAiXHQiKTsNCiAgICAgICAgICBidWlsZGVyLmNvbCArPSB0YWJXaWR0aDsNCiAgICAgICAgfSBlbHNlIGlmIChtWzBdID09ICJcciIgfHwgbVswXSA9PSAiXG4iKSB7DQogICAgICAgICAgdHh0JDEgPSBjb250ZW50LmFwcGVuZENoaWxkKGVsdCgic3BhbiIsIG1bMF0gPT0gIlxyIiA/ICJcdTI0MGQiIDogIlx1MjQyNCIsICJjbS1pbnZhbGlkY2hhciIpKTsNCiAgICAgICAgICB0eHQkMS5zZXRBdHRyaWJ1dGUoImNtLXRleHQiLCBtWzBdKTsNCiAgICAgICAgICBidWlsZGVyLmNvbCArPSAxOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIHR4dCQxID0gYnVpbGRlci5jbS5vcHRpb25zLnNwZWNpYWxDaGFyUGxhY2Vob2xkZXIobVswXSk7DQogICAgICAgICAgdHh0JDEuc2V0QXR0cmlidXRlKCJjbS10ZXh0IiwgbVswXSk7DQogICAgICAgICAgaWYgKGllICYmIGllX3ZlcnNpb24gPCA5KSB7IGNvbnRlbnQuYXBwZW5kQ2hpbGQoZWx0KCJzcGFuIiwgW3R4dCQxXSkpOyB9DQogICAgICAgICAgZWxzZSB7IGNvbnRlbnQuYXBwZW5kQ2hpbGQodHh0JDEpOyB9DQogICAgICAgICAgYnVpbGRlci5jb2wgKz0gMTsNCiAgICAgICAgfQ0KICAgICAgICBidWlsZGVyLm1hcC5wdXNoKGJ1aWxkZXIucG9zLCBidWlsZGVyLnBvcyArIDEsIHR4dCQxKTsNCiAgICAgICAgYnVpbGRlci5wb3MrKzsNCiAgICAgIH0NCiAgICB9DQogICAgYnVpbGRlci50cmFpbGluZ1NwYWNlID0gZGlzcGxheVRleHQuY2hhckNvZGVBdCh0ZXh0Lmxlbmd0aCAtIDEpID09IDMyOw0KICAgIGlmIChzdHlsZSB8fCBzdGFydFN0eWxlIHx8IGVuZFN0eWxlIHx8IG11c3RXcmFwIHx8IGNzcykgew0KICAgICAgdmFyIGZ1bGxTdHlsZSA9IHN0eWxlIHx8ICIiOw0KICAgICAgaWYgKHN0YXJ0U3R5bGUpIHsgZnVsbFN0eWxlICs9IHN0YXJ0U3R5bGU7IH0NCiAgICAgIGlmIChlbmRTdHlsZSkgeyBmdWxsU3R5bGUgKz0gZW5kU3R5bGU7IH0NCiAgICAgIHZhciB0b2tlbiA9IGVsdCgic3BhbiIsIFtjb250ZW50XSwgZnVsbFN0eWxlLCBjc3MpOw0KICAgICAgaWYgKGF0dHJpYnV0ZXMpIHsNCiAgICAgICAgZm9yICh2YXIgYXR0ciBpbiBhdHRyaWJ1dGVzKSB7IGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGF0dHIpICYmIGF0dHIgIT0gInN0eWxlIiAmJiBhdHRyICE9ICJjbGFzcyIpDQogICAgICAgICAgeyB0b2tlbi5zZXRBdHRyaWJ1dGUoYXR0ciwgYXR0cmlidXRlc1thdHRyXSk7IH0gfQ0KICAgICAgfQ0KICAgICAgcmV0dXJuIGJ1aWxkZXIuY29udGVudC5hcHBlbmRDaGlsZCh0b2tlbikNCiAgICB9DQogICAgYnVpbGRlci5jb250ZW50LmFwcGVuZENoaWxkKGNvbnRlbnQpOw0KICB9DQoNCiAgLy8gQ2hhbmdlIHNvbWUgc3BhY2VzIHRvIE5CU1AgdG8gcHJldmVudCB0aGUgYnJvd3NlciBmcm9tIGNvbGxhcHNpbmcNCiAgLy8gdHJhaWxpbmcgc3BhY2VzIGF0IHRoZSBlbmQgb2YgYSBsaW5lIHdoZW4gcmVuZGVyaW5nIHRleHQgKGlzc3VlICMxMzYyKS4NCiAgZnVuY3Rpb24gc3BsaXRTcGFjZXModGV4dCwgdHJhaWxpbmdCZWZvcmUpIHsNCiAgICBpZiAodGV4dC5sZW5ndGggPiAxICYmICEvICAvLnRlc3QodGV4dCkpIHsgcmV0dXJuIHRleHQgfQ0KICAgIHZhciBzcGFjZUJlZm9yZSA9IHRyYWlsaW5nQmVmb3JlLCByZXN1bHQgPSAiIjsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHsNCiAgICAgIHZhciBjaCA9IHRleHQuY2hhckF0KGkpOw0KICAgICAgaWYgKGNoID09ICIgIiAmJiBzcGFjZUJlZm9yZSAmJiAoaSA9PSB0ZXh0Lmxlbmd0aCAtIDEgfHwgdGV4dC5jaGFyQ29kZUF0KGkgKyAxKSA9PSAzMikpDQogICAgICAgIHsgY2ggPSAiXHUwMGEwIjsgfQ0KICAgICAgcmVzdWx0ICs9IGNoOw0KICAgICAgc3BhY2VCZWZvcmUgPSBjaCA9PSAiICI7DQogICAgfQ0KICAgIHJldHVybiByZXN1bHQNCiAgfQ0KDQogIC8vIFdvcmsgYXJvdW5kIG5vbnNlbnNlIGRpbWVuc2lvbnMgYmVpbmcgcmVwb3J0ZWQgZm9yIHN0cmV0Y2hlcyBvZg0KICAvLyByaWdodC10by1sZWZ0IHRleHQuDQogIGZ1bmN0aW9uIGJ1aWxkVG9rZW5CYWRCaWRpKGlubmVyLCBvcmRlcikgew0KICAgIHJldHVybiBmdW5jdGlvbiAoYnVpbGRlciwgdGV4dCwgc3R5bGUsIHN0YXJ0U3R5bGUsIGVuZFN0eWxlLCBjc3MsIGF0dHJpYnV0ZXMpIHsNCiAgICAgIHN0eWxlID0gc3R5bGUgPyBzdHlsZSArICIgY20tZm9yY2UtYm9yZGVyIiA6ICJjbS1mb3JjZS1ib3JkZXIiOw0KICAgICAgdmFyIHN0YXJ0ID0gYnVpbGRlci5wb3MsIGVuZCA9IHN0YXJ0ICsgdGV4dC5sZW5ndGg7DQogICAgICBmb3IgKDs7KSB7DQogICAgICAgIC8vIEZpbmQgdGhlIHBhcnQgdGhhdCBvdmVybGFwcyB3aXRoIHRoZSBzdGFydCBvZiB0aGlzIHRleHQNCiAgICAgICAgdmFyIHBhcnQgPSAodm9pZCAwKTsNCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmRlci5sZW5ndGg7IGkrKykgew0KICAgICAgICAgIHBhcnQgPSBvcmRlcltpXTsNCiAgICAgICAgICBpZiAocGFydC50byA+IHN0YXJ0ICYmIHBhcnQuZnJvbSA8PSBzdGFydCkgeyBicmVhayB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKHBhcnQudG8gPj0gZW5kKSB7IHJldHVybiBpbm5lcihidWlsZGVyLCB0ZXh0LCBzdHlsZSwgc3RhcnRTdHlsZSwgZW5kU3R5bGUsIGNzcywgYXR0cmlidXRlcykgfQ0KICAgICAgICBpbm5lcihidWlsZGVyLCB0ZXh0LnNsaWNlKDAsIHBhcnQudG8gLSBzdGFydCksIHN0eWxlLCBzdGFydFN0eWxlLCBudWxsLCBjc3MsIGF0dHJpYnV0ZXMpOw0KICAgICAgICBzdGFydFN0eWxlID0gbnVsbDsNCiAgICAgICAgdGV4dCA9IHRleHQuc2xpY2UocGFydC50byAtIHN0YXJ0KTsNCiAgICAgICAgc3RhcnQgPSBwYXJ0LnRvOw0KICAgICAgfQ0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIGJ1aWxkQ29sbGFwc2VkU3BhbihidWlsZGVyLCBzaXplLCBtYXJrZXIsIGlnbm9yZVdpZGdldCkgew0KICAgIHZhciB3aWRnZXQgPSAhaWdub3JlV2lkZ2V0ICYmIG1hcmtlci53aWRnZXROb2RlOw0KICAgIGlmICh3aWRnZXQpIHsgYnVpbGRlci5tYXAucHVzaChidWlsZGVyLnBvcywgYnVpbGRlci5wb3MgKyBzaXplLCB3aWRnZXQpOyB9DQogICAgaWYgKCFpZ25vcmVXaWRnZXQgJiYgYnVpbGRlci5jbS5kaXNwbGF5LmlucHV0Lm5lZWRzQ29udGVudEF0dHJpYnV0ZSkgew0KICAgICAgaWYgKCF3aWRnZXQpDQogICAgICAgIHsgd2lkZ2V0ID0gYnVpbGRlci5jb250ZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKSk7IH0NCiAgICAgIHdpZGdldC5zZXRBdHRyaWJ1dGUoImNtLW1hcmtlciIsIG1hcmtlci5pZCk7DQogICAgfQ0KICAgIGlmICh3aWRnZXQpIHsNCiAgICAgIGJ1aWxkZXIuY20uZGlzcGxheS5pbnB1dC5zZXRVbmVkaXRhYmxlKHdpZGdldCk7DQogICAgICBidWlsZGVyLmNvbnRlbnQuYXBwZW5kQ2hpbGQod2lkZ2V0KTsNCiAgICB9DQogICAgYnVpbGRlci5wb3MgKz0gc2l6ZTsNCiAgICBidWlsZGVyLnRyYWlsaW5nU3BhY2UgPSBmYWxzZTsNCiAgfQ0KDQogIC8vIE91dHB1dHMgYSBudW1iZXIgb2Ygc3BhbnMgdG8gbWFrZSB1cCBhIGxpbmUsIHRha2luZyBoaWdobGlnaHRpbmcNCiAgLy8gYW5kIG1hcmtlZCB0ZXh0IGludG8gYWNjb3VudC4NCiAgZnVuY3Rpb24gaW5zZXJ0TGluZUNvbnRlbnQobGluZSwgYnVpbGRlciwgc3R5bGVzKSB7DQogICAgdmFyIHNwYW5zID0gbGluZS5tYXJrZWRTcGFucywgYWxsVGV4dCA9IGxpbmUudGV4dCwgYXQgPSAwOw0KICAgIGlmICghc3BhbnMpIHsNCiAgICAgIGZvciAodmFyIGkkMSA9IDE7IGkkMSA8IHN0eWxlcy5sZW5ndGg7IGkkMSs9MikNCiAgICAgICAgeyBidWlsZGVyLmFkZFRva2VuKGJ1aWxkZXIsIGFsbFRleHQuc2xpY2UoYXQsIGF0ID0gc3R5bGVzW2kkMV0pLCBpbnRlcnByZXRUb2tlblN0eWxlKHN0eWxlc1tpJDErMV0sIGJ1aWxkZXIuY20ub3B0aW9ucykpOyB9DQogICAgICByZXR1cm4NCiAgICB9DQoNCiAgICB2YXIgbGVuID0gYWxsVGV4dC5sZW5ndGgsIHBvcyA9IDAsIGkgPSAxLCB0ZXh0ID0gIiIsIHN0eWxlLCBjc3M7DQogICAgdmFyIG5leHRDaGFuZ2UgPSAwLCBzcGFuU3R5bGUsIHNwYW5FbmRTdHlsZSwgc3BhblN0YXJ0U3R5bGUsIGNvbGxhcHNlZCwgYXR0cmlidXRlczsNCiAgICBmb3IgKDs7KSB7DQogICAgICBpZiAobmV4dENoYW5nZSA9PSBwb3MpIHsgLy8gVXBkYXRlIGN1cnJlbnQgbWFya2VyIHNldA0KICAgICAgICBzcGFuU3R5bGUgPSBzcGFuRW5kU3R5bGUgPSBzcGFuU3RhcnRTdHlsZSA9IGNzcyA9ICIiOw0KICAgICAgICBhdHRyaWJ1dGVzID0gbnVsbDsNCiAgICAgICAgY29sbGFwc2VkID0gbnVsbDsgbmV4dENoYW5nZSA9IEluZmluaXR5Ow0KICAgICAgICB2YXIgZm91bmRCb29rbWFya3MgPSBbXSwgZW5kU3R5bGVzID0gKHZvaWQgMCk7DQogICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3BhbnMubGVuZ3RoOyArK2opIHsNCiAgICAgICAgICB2YXIgc3AgPSBzcGFuc1tqXSwgbSA9IHNwLm1hcmtlcjsNCiAgICAgICAgICBpZiAobS50eXBlID09ICJib29rbWFyayIgJiYgc3AuZnJvbSA9PSBwb3MgJiYgbS53aWRnZXROb2RlKSB7DQogICAgICAgICAgICBmb3VuZEJvb2ttYXJrcy5wdXNoKG0pOw0KICAgICAgICAgIH0gZWxzZSBpZiAoc3AuZnJvbSA8PSBwb3MgJiYgKHNwLnRvID09IG51bGwgfHwgc3AudG8gPiBwb3MgfHwgbS5jb2xsYXBzZWQgJiYgc3AudG8gPT0gcG9zICYmIHNwLmZyb20gPT0gcG9zKSkgew0KICAgICAgICAgICAgaWYgKHNwLnRvICE9IG51bGwgJiYgc3AudG8gIT0gcG9zICYmIG5leHRDaGFuZ2UgPiBzcC50bykgew0KICAgICAgICAgICAgICBuZXh0Q2hhbmdlID0gc3AudG87DQogICAgICAgICAgICAgIHNwYW5FbmRTdHlsZSA9ICIiOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKG0uY2xhc3NOYW1lKSB7IHNwYW5TdHlsZSArPSAiICIgKyBtLmNsYXNzTmFtZTsgfQ0KICAgICAgICAgICAgaWYgKG0uY3NzKSB7IGNzcyA9IChjc3MgPyBjc3MgKyAiOyIgOiAiIikgKyBtLmNzczsgfQ0KICAgICAgICAgICAgaWYgKG0uc3RhcnRTdHlsZSAmJiBzcC5mcm9tID09IHBvcykgeyBzcGFuU3RhcnRTdHlsZSArPSAiICIgKyBtLnN0YXJ0U3R5bGU7IH0NCiAgICAgICAgICAgIGlmIChtLmVuZFN0eWxlICYmIHNwLnRvID09IG5leHRDaGFuZ2UpIHsgKGVuZFN0eWxlcyB8fCAoZW5kU3R5bGVzID0gW10pKS5wdXNoKG0uZW5kU3R5bGUsIHNwLnRvKTsgfQ0KICAgICAgICAgICAgLy8gc3VwcG9ydCBmb3IgdGhlIG9sZCB0aXRsZSBwcm9wZXJ0eQ0KICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NvZGVtaXJyb3IvQ29kZU1pcnJvci9wdWxsLzU2NzMNCiAgICAgICAgICAgIGlmIChtLnRpdGxlKSB7IChhdHRyaWJ1dGVzIHx8IChhdHRyaWJ1dGVzID0ge30pKS50aXRsZSA9IG0udGl0bGU7IH0NCiAgICAgICAgICAgIGlmIChtLmF0dHJpYnV0ZXMpIHsNCiAgICAgICAgICAgICAgZm9yICh2YXIgYXR0ciBpbiBtLmF0dHJpYnV0ZXMpDQogICAgICAgICAgICAgICAgeyAoYXR0cmlidXRlcyB8fCAoYXR0cmlidXRlcyA9IHt9KSlbYXR0cl0gPSBtLmF0dHJpYnV0ZXNbYXR0cl07IH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChtLmNvbGxhcHNlZCAmJiAoIWNvbGxhcHNlZCB8fCBjb21wYXJlQ29sbGFwc2VkTWFya2Vycyhjb2xsYXBzZWQubWFya2VyLCBtKSA8IDApKQ0KICAgICAgICAgICAgICB7IGNvbGxhcHNlZCA9IHNwOyB9DQogICAgICAgICAgfSBlbHNlIGlmIChzcC5mcm9tID4gcG9zICYmIG5leHRDaGFuZ2UgPiBzcC5mcm9tKSB7DQogICAgICAgICAgICBuZXh0Q2hhbmdlID0gc3AuZnJvbTsNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKGVuZFN0eWxlcykgeyBmb3IgKHZhciBqJDEgPSAwOyBqJDEgPCBlbmRTdHlsZXMubGVuZ3RoOyBqJDEgKz0gMikNCiAgICAgICAgICB7IGlmIChlbmRTdHlsZXNbaiQxICsgMV0gPT0gbmV4dENoYW5nZSkgeyBzcGFuRW5kU3R5bGUgKz0gIiAiICsgZW5kU3R5bGVzW2okMV07IH0gfSB9DQoNCiAgICAgICAgaWYgKCFjb2xsYXBzZWQgfHwgY29sbGFwc2VkLmZyb20gPT0gcG9zKSB7IGZvciAodmFyIGokMiA9IDA7IGokMiA8IGZvdW5kQm9va21hcmtzLmxlbmd0aDsgKytqJDIpDQogICAgICAgICAgeyBidWlsZENvbGxhcHNlZFNwYW4oYnVpbGRlciwgMCwgZm91bmRCb29rbWFya3NbaiQyXSk7IH0gfQ0KICAgICAgICBpZiAoY29sbGFwc2VkICYmIChjb2xsYXBzZWQuZnJvbSB8fCAwKSA9PSBwb3MpIHsNCiAgICAgICAgICBidWlsZENvbGxhcHNlZFNwYW4oYnVpbGRlciwgKGNvbGxhcHNlZC50byA9PSBudWxsID8gbGVuICsgMSA6IGNvbGxhcHNlZC50bykgLSBwb3MsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlZC5tYXJrZXIsIGNvbGxhcHNlZC5mcm9tID09IG51bGwpOw0KICAgICAgICAgIGlmIChjb2xsYXBzZWQudG8gPT0gbnVsbCkgeyByZXR1cm4gfQ0KICAgICAgICAgIGlmIChjb2xsYXBzZWQudG8gPT0gcG9zKSB7IGNvbGxhcHNlZCA9IGZhbHNlOyB9DQogICAgICAgIH0NCiAgICAgIH0NCiAgICAgIGlmIChwb3MgPj0gbGVuKSB7IGJyZWFrIH0NCg0KICAgICAgdmFyIHVwdG8gPSBNYXRoLm1pbihsZW4sIG5leHRDaGFuZ2UpOw0KICAgICAgd2hpbGUgKHRydWUpIHsNCiAgICAgICAgaWYgKHRleHQpIHsNCiAgICAgICAgICB2YXIgZW5kID0gcG9zICsgdGV4dC5sZW5ndGg7DQogICAgICAgICAgaWYgKCFjb2xsYXBzZWQpIHsNCiAgICAgICAgICAgIHZhciB0b2tlblRleHQgPSBlbmQgPiB1cHRvID8gdGV4dC5zbGljZSgwLCB1cHRvIC0gcG9zKSA6IHRleHQ7DQogICAgICAgICAgICBidWlsZGVyLmFkZFRva2VuKGJ1aWxkZXIsIHRva2VuVGV4dCwgc3R5bGUgPyBzdHlsZSArIHNwYW5TdHlsZSA6IHNwYW5TdHlsZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhblN0YXJ0U3R5bGUsIHBvcyArIHRva2VuVGV4dC5sZW5ndGggPT0gbmV4dENoYW5nZSA/IHNwYW5FbmRTdHlsZSA6ICIiLCBjc3MsIGF0dHJpYnV0ZXMpOw0KICAgICAgICAgIH0NCiAgICAgICAgICBpZiAoZW5kID49IHVwdG8pIHt0ZXh0ID0gdGV4dC5zbGljZSh1cHRvIC0gcG9zKTsgcG9zID0gdXB0bzsgYnJlYWt9DQogICAgICAgICAgcG9zID0gZW5kOw0KICAgICAgICAgIHNwYW5TdGFydFN0eWxlID0gIiI7DQogICAgICAgIH0NCiAgICAgICAgdGV4dCA9IGFsbFRleHQuc2xpY2UoYXQsIGF0ID0gc3R5bGVzW2krK10pOw0KICAgICAgICBzdHlsZSA9IGludGVycHJldFRva2VuU3R5bGUoc3R5bGVzW2krK10sIGJ1aWxkZXIuY20ub3B0aW9ucyk7DQogICAgICB9DQogICAgfQ0KICB9DQoNCg0KICAvLyBUaGVzZSBvYmplY3RzIGFyZSB1c2VkIHRvIHJlcHJlc2VudCB0aGUgdmlzaWJsZSAoY3VycmVudGx5IGRyYXduKQ0KICAvLyBwYXJ0IG9mIHRoZSBkb2N1bWVudC4gQSBMaW5lVmlldyBtYXkgY29ycmVzcG9uZCB0byBtdWx0aXBsZQ0KICAvLyBsb2dpY2FsIGxpbmVzLCBpZiB0aG9zZSBhcmUgY29ubmVjdGVkIGJ5IGNvbGxhcHNlZCByYW5nZXMuDQogIGZ1bmN0aW9uIExpbmVWaWV3KGRvYywgbGluZSwgbGluZU4pIHsNCiAgICAvLyBUaGUgc3RhcnRpbmcgbGluZQ0KICAgIHRoaXMubGluZSA9IGxpbmU7DQogICAgLy8gQ29udGludWluZyBsaW5lcywgaWYgYW55DQogICAgdGhpcy5yZXN0ID0gdmlzdWFsTGluZUNvbnRpbnVlZChsaW5lKTsNCiAgICAvLyBOdW1iZXIgb2YgbG9naWNhbCBsaW5lcyBpbiB0aGlzIHZpc3VhbCBsaW5lDQogICAgdGhpcy5zaXplID0gdGhpcy5yZXN0ID8gbGluZU5vKGxzdCh0aGlzLnJlc3QpKSAtIGxpbmVOICsgMSA6IDE7DQogICAgdGhpcy5ub2RlID0gdGhpcy50ZXh0ID0gbnVsbDsNCiAgICB0aGlzLmhpZGRlbiA9IGxpbmVJc0hpZGRlbihkb2MsIGxpbmUpOw0KICB9DQoNCiAgLy8gQ3JlYXRlIGEgcmFuZ2Ugb2YgTGluZVZpZXcgb2JqZWN0cyBmb3IgdGhlIGdpdmVuIGxpbmVzLg0KICBmdW5jdGlvbiBidWlsZFZpZXdBcnJheShjbSwgZnJvbSwgdG8pIHsNCiAgICB2YXIgYXJyYXkgPSBbXSwgbmV4dFBvczsNCiAgICBmb3IgKHZhciBwb3MgPSBmcm9tOyBwb3MgPCB0bzsgcG9zID0gbmV4dFBvcykgew0KICAgICAgdmFyIHZpZXcgPSBuZXcgTGluZVZpZXcoY20uZG9jLCBnZXRMaW5lKGNtLmRvYywgcG9zKSwgcG9zKTsNCiAgICAgIG5leHRQb3MgPSBwb3MgKyB2aWV3LnNpemU7DQogICAgICBhcnJheS5wdXNoKHZpZXcpOw0KICAgIH0NCiAgICByZXR1cm4gYXJyYXkNCiAgfQ0KDQogIHZhciBvcGVyYXRpb25Hcm91cCA9IG51bGw7DQoNCiAgZnVuY3Rpb24gcHVzaE9wZXJhdGlvbihvcCkgew0KICAgIGlmIChvcGVyYXRpb25Hcm91cCkgew0KICAgICAgb3BlcmF0aW9uR3JvdXAub3BzLnB1c2gob3ApOw0KICAgIH0gZWxzZSB7DQogICAgICBvcC5vd25zR3JvdXAgPSBvcGVyYXRpb25Hcm91cCA9IHsNCiAgICAgICAgb3BzOiBbb3BdLA0KICAgICAgICBkZWxheWVkQ2FsbGJhY2tzOiBbXQ0KICAgICAgfTsNCiAgICB9DQogIH0NCg0KICBmdW5jdGlvbiBmaXJlQ2FsbGJhY2tzRm9yT3BzKGdyb3VwKSB7DQogICAgLy8gQ2FsbHMgZGVsYXllZCBjYWxsYmFja3MgYW5kIGN1cnNvckFjdGl2aXR5IGhhbmRsZXJzIHVudGlsIG5vDQogICAgLy8gbmV3IG9uZXMgYXBwZWFyDQogICAgdmFyIGNhbGxiYWNrcyA9IGdyb3VwLmRlbGF5ZWRDYWxsYmFja3MsIGkgPSAwOw0KICAgIGRvIHsNCiAgICAgIGZvciAoOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKQ0KICAgICAgICB7IGNhbGxiYWNrc1tpXS5jYWxsKG51bGwpOyB9DQogICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGdyb3VwLm9wcy5sZW5ndGg7IGorKykgew0KICAgICAgICB2YXIgb3AgPSBncm91cC5vcHNbal07DQogICAgICAgIGlmIChvcC5jdXJzb3JBY3Rpdml0eUhhbmRsZXJzKQ0KICAgICAgICAgIHsgd2hpbGUgKG9wLmN1cnNvckFjdGl2aXR5Q2FsbGVkIDwgb3AuY3Vyc29yQWN0aXZpdHlIYW5kbGVycy5sZW5ndGgpDQogICAgICAgICAgICB7IG9wLmN1cnNvckFjdGl2aXR5SGFuZGxlcnNbb3AuY3Vyc29yQWN0aXZpdHlDYWxsZWQrK10uY2FsbChudWxsLCBvcC5jbSk7IH0gfQ0KICAgICAgfQ0KICAgIH0gd2hpbGUgKGkgPCBjYWxsYmFja3MubGVuZ3RoKQ0KICB9DQoNCiAgZnVuY3Rpb24gZmluaXNoT3BlcmF0aW9uKG9wLCBlbmRDYikgew0KICAgIHZhciBncm91cCA9IG9wLm93bnNHcm91cDsNCiAgICBpZiAoIWdyb3VwKSB7IHJldHVybiB9DQoNCiAgICB0cnkgeyBmaXJlQ2FsbGJhY2tzRm9yT3BzKGdyb3VwKTsgfQ0KICAgIGZpbmFsbHkgew0KICAgICAgb3BlcmF0aW9uR3JvdXAgPSBudWxsOw0KICAgICAgZW5kQ2IoZ3JvdXApOw0KICAgIH0NCiAgfQ0KDQogIHZhciBvcnBoYW5EZWxheWVkQ2FsbGJhY2tzID0gbnVsbDsNCg0KICAvLyBPZnRlbiwgd2Ugd2FudCB0byBzaWduYWwgZXZlbnRzIGF0IGEgcG9pbnQgd2hlcmUgd2UgYXJlIGluIHRoZQ0KICAvLyBtaWRkbGUgb2Ygc29tZSB3b3JrLCBidXQgZG9uJ3Qgd2FudCB0aGUgaGFuZGxlciB0byBzdGFydCBjYWxsaW5nDQogIC8vIG90aGVyIG1ldGhvZHMgb24gdGhlIGVkaXRvciwgd2hpY2ggbWlnaHQgYmUgaW4gYW4gaW5jb25zaXN0ZW50DQogIC8vIHN0YXRlIG9yIHNpbXBseSBub3QgZXhwZWN0IGFueSBvdGhlciBldmVudHMgdG8gaGFwcGVuLg0KICAvLyBzaWduYWxMYXRlciBsb29rcyB3aGV0aGVyIHRoZXJlIGFyZSBhbnkgaGFuZGxlcnMsIGFuZCBzY2hlZHVsZXMNCiAgLy8gdGhlbSB0byBiZSBleGVjdXRlZCB3aGVuIHRoZSBsYXN0IG9wZXJhdGlvbiBlbmRzLCBvciwgaWYgbm8NCiAgLy8gb3BlcmF0aW9uIGlzIGFjdGl2ZSwgd2hlbiBhIHRpbWVvdXQgZmlyZXMuDQogIGZ1bmN0aW9uIHNpZ25hbExhdGVyKGVtaXR0ZXIsIHR5cGUgLyosIHZhbHVlcy4uLiovKSB7DQogICAgdmFyIGFyciA9IGdldEhhbmRsZXJzKGVtaXR0ZXIsIHR5cGUpOw0KICAgIGlmICghYXJyLmxlbmd0aCkgeyByZXR1cm4gfQ0KICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSwgbGlzdDsNCiAgICBpZiAob3BlcmF0aW9uR3JvdXApIHsNCiAgICAgIGxpc3QgPSBvcGVyYXRpb25Hcm91cC5kZWxheWVkQ2FsbGJhY2tzOw0KICAgIH0gZWxzZSBpZiAob3JwaGFuRGVsYXllZENhbGxiYWNrcykgew0KICAgICAgbGlzdCA9IG9ycGhhbkRlbGF5ZWRDYWxsYmFja3M7DQogICAgfSBlbHNlIHsNCiAgICAgIGxpc3QgPSBvcnBoYW5EZWxheWVkQ2FsbGJhY2tzID0gW107DQogICAgICBzZXRUaW1lb3V0KGZpcmVPcnBoYW5EZWxheWVkLCAwKTsNCiAgICB9DQogICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGkgKSB7DQogICAgICBsaXN0LnB1c2goZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJyW2ldLmFwcGx5KG51bGwsIGFyZ3MpOyB9KTsNCiAgICB9Ow0KDQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpDQogICAgICBsb29wKCBpICk7DQogIH0NCg0KICBmdW5jdGlvbiBmaXJlT3JwaGFuRGVsYXllZCgpIHsNCiAgICB2YXIgZGVsYXllZCA9IG9ycGhhbkRlbGF5ZWRDYWxsYmFja3M7DQogICAgb3JwaGFuRGVsYXllZENhbGxiYWNrcyA9IG51bGw7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWxheWVkLmxlbmd0aDsgKytpKSB7IGRlbGF5ZWRbaV0oKTsgfQ0KICB9DQoNCiAgLy8gV2hlbiBhbiBhc3BlY3Qgb2YgYSBsaW5lIGNoYW5nZXMsIGEgc3RyaW5nIGlzIGFkZGVkIHRvDQogIC8vIGxpbmVWaWV3LmNoYW5nZXMuIFRoaXMgdXBkYXRlcyB0aGUgcmVsZXZhbnQgcGFydCBvZiB0aGUgbGluZSdzDQogIC8vIERPTSBzdHJ1Y3R1cmUuDQogIGZ1bmN0aW9uIHVwZGF0ZUxpbmVGb3JDaGFuZ2VzKGNtLCBsaW5lVmlldywgbGluZU4sIGRpbXMpIHsNCiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxpbmVWaWV3LmNoYW5nZXMubGVuZ3RoOyBqKyspIHsNCiAgICAgIHZhciB0eXBlID0gbGluZVZpZXcuY2hhbmdlc1tqXTsNCiAgICAgIGlmICh0eXBlID09ICJ0ZXh0IikgeyB1cGRhdGVMaW5lVGV4dChjbSwgbGluZVZpZXcpOyB9DQogICAgICBlbHNlIGlmICh0eXBlID09ICJndXR0ZXIiKSB7IHVwZGF0ZUxpbmVHdXR0ZXIoY20sIGxpbmVWaWV3LCBsaW5lTiwgZGltcyk7IH0NCiAgICAgIGVsc2UgaWYgKHR5cGUgPT0gImNsYXNzIikgeyB1cGRhdGVMaW5lQ2xhc3NlcyhjbSwgbGluZVZpZXcpOyB9DQogICAgICBlbHNlIGlmICh0eXBlID09ICJ3aWRnZXQiKSB7IHVwZGF0ZUxpbmVXaWRnZXRzKGNtLCBsaW5lVmlldywgZGltcyk7IH0NCiAgICB9DQogICAgbGluZVZpZXcuY2hhbmdlcyA9IG51bGw7DQogIH0NCg0KICAvLyBMaW5lcyB3aXRoIGd1dHRlciBlbGVtZW50cywgd2lkZ2V0cyBvciBhIGJhY2tncm91bmQgY2xhc3MgbmVlZCB0bw0KICAvLyBiZSB3cmFwcGVkLCBhbmQgaGF2ZSB0aGUgZXh0cmEgZWxlbWVudHMgYWRkZWQgdG8gdGhlIHdyYXBwZXIgZGl2DQogIGZ1bmN0aW9uIGVuc3VyZUxpbmVXcmFwcGVkKGxpbmVWaWV3KSB7DQogICAgaWYgKGxpbmVWaWV3Lm5vZGUgPT0gbGluZVZpZXcudGV4dCkgew0KICAgICAgbGluZVZpZXcubm9kZSA9IGVsdCgiZGl2IiwgbnVsbCwgbnVsbCwgInBvc2l0aW9uOiByZWxhdGl2ZSIpOw0KICAgICAgaWYgKGxpbmVWaWV3LnRleHQucGFyZW50Tm9kZSkNCiAgICAgICAgeyBsaW5lVmlldy50ZXh0LnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGxpbmVWaWV3Lm5vZGUsIGxpbmVWaWV3LnRleHQpOyB9DQogICAgICBsaW5lVmlldy5ub2RlLmFwcGVuZENoaWxkKGxpbmVWaWV3LnRleHQpOw0KICAgICAgaWYgKGllICYmIGllX3ZlcnNpb24gPCA4KSB7IGxpbmVWaWV3Lm5vZGUuc3R5bGUuekluZGV4ID0gMjsgfQ0KICAgIH0NCiAgICByZXR1cm4gbGluZVZpZXcubm9kZQ0KICB9DQoNCiAgZnVuY3Rpb24gdXBkYXRlTGluZUJhY2tncm91bmQoY20sIGxpbmVWaWV3KSB7DQogICAgdmFyIGNscyA9IGxpbmVWaWV3LmJnQ2xhc3MgPyBsaW5lVmlldy5iZ0NsYXNzICsgIiAiICsgKGxpbmVWaWV3LmxpbmUuYmdDbGFzcyB8fCAiIikgOiBsaW5lVmlldy5saW5lLmJnQ2xhc3M7DQogICAgaWYgKGNscykgeyBjbHMgKz0gIiBDb2RlTWlycm9yLWxpbmViYWNrZ3JvdW5kIjsgfQ0KICAgIGlmIChsaW5lVmlldy5iYWNrZ3JvdW5kKSB7DQogICAgICBpZiAoY2xzKSB7IGxpbmVWaWV3LmJhY2tncm91bmQuY2xhc3NOYW1lID0gY2xzOyB9DQogICAgICBlbHNlIHsgbGluZVZpZXcuYmFja2dyb3VuZC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxpbmVWaWV3LmJhY2tncm91bmQpOyBsaW5lVmlldy5iYWNrZ3JvdW5kID0gbnVsbDsgfQ0KICAgIH0gZWxzZSBpZiAoY2xzKSB7DQogICAgICB2YXIgd3JhcCA9IGVuc3VyZUxpbmVXcmFwcGVkKGxpbmVWaWV3KTsNCiAgICAgIGxpbmVWaWV3LmJhY2tncm91bmQgPSB3cmFwLmluc2VydEJlZm9yZShlbHQoImRpdiIsIG51bGwsIGNscyksIHdyYXAuZmlyc3RDaGlsZCk7DQogICAgICBjbS5kaXNwbGF5LmlucHV0LnNldFVuZWRpdGFibGUobGluZVZpZXcuYmFja2dyb3VuZCk7DQogICAgfQ0KICB9DQoNCiAgLy8gV3JhcHBlciBhcm91bmQgYnVpbGRMaW5lQ29udGVudCB3aGljaCB3aWxsIHJldXNlIHRoZSBzdHJ1Y3R1cmUNCiAgLy8gaW4gZGlzcGxheS5leHRlcm5hbE1lYXN1cmVkIHdoZW4gcG9zc2libGUuDQogIGZ1bmN0aW9uIGdldExpbmVDb250ZW50KGNtLCBsaW5lVmlldykgew0KICAgIHZhciBleHQgPSBjbS5kaXNwbGF5LmV4dGVybmFsTWVhc3VyZWQ7DQogICAgaWYgKGV4dCAmJiBleHQubGluZSA9PSBsaW5lVmlldy5saW5lKSB7DQogICAgICBjbS5kaXNwbGF5LmV4dGVybmFsTWVhc3VyZWQgPSBudWxsOw0KICAgICAgbGluZVZpZXcubWVhc3VyZSA9IGV4dC5tZWFzdXJlOw0KICAgICAgcmV0dXJuIGV4dC5idWlsdA0KICAgIH0NCiAgICByZXR1cm4gYnVpbGRMaW5lQ29udGVudChjbSwgbGluZVZpZXcpDQogIH0NCg0KICAvLyBSZWRyYXcgdGhlIGxpbmUncyB0ZXh0LiBJbnRlcmFjdHMgd2l0aCB0aGUgYmFja2dyb3VuZCBhbmQgdGV4dA0KICAvLyBjbGFzc2VzIGJlY2F1c2UgdGhlIG1vZGUgbWF5IG91dHB1dCB0b2tlbnMgdGhhdCBpbmZsdWVuY2UgdGhlc2UNCiAgLy8gY2xhc3Nlcy4NCiAgZnVuY3Rpb24gdXBkYXRlTGluZVRleHQoY20sIGxpbmVWaWV3KSB7DQogICAgdmFyIGNscyA9IGxpbmVWaWV3LnRleHQuY2xhc3NOYW1lOw0KICAgIHZhciBidWlsdCA9IGdldExpbmVDb250ZW50KGNtLCBsaW5lVmlldyk7DQogICAgaWYgKGxpbmVWaWV3LnRleHQgPT0gbGluZVZpZXcubm9kZSkgeyBsaW5lVmlldy5ub2RlID0gYnVpbHQucHJlOyB9DQogICAgbGluZVZpZXcudGV4dC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChidWlsdC5wcmUsIGxpbmVWaWV3LnRleHQpOw0KICAgIGxpbmVWaWV3LnRleHQgPSBidWlsdC5wcmU7DQogICAgaWYgKGJ1aWx0LmJnQ2xhc3MgIT0gbGluZVZpZXcuYmdDbGFzcyB8fCBidWlsdC50ZXh0Q2xhc3MgIT0gbGluZVZpZXcudGV4dENsYXNzKSB7DQogICAgICBsaW5lVmlldy5iZ0NsYXNzID0gYnVpbHQuYmdDbGFzczsNCiAgICAgIGxpbmVWaWV3LnRleHRDbGFzcyA9IGJ1aWx0LnRleHRDbGFzczsNCiAgICAgIHVwZGF0ZUxpbmVDbGFzc2VzKGNtLCBsaW5lVmlldyk7DQogICAgfSBlbHNlIGlmIChjbHMpIHsNCiAgICAgIGxpbmVWaWV3LnRleHQuY2xhc3NOYW1lID0gY2xzOw0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIHVwZGF0ZUxpbmVDbGFzc2VzKGNtLCBsaW5lVmlldykgew0KICAgIHVwZGF0ZUxpbmVCYWNrZ3JvdW5kKGNtLCBsaW5lVmlldyk7DQogICAgaWYgKGxpbmVWaWV3LmxpbmUud3JhcENsYXNzKQ0KICAgICAgeyBlbnN1cmVMaW5lV3JhcHBlZChsaW5lVmlldykuY2xhc3NOYW1lID0gbGluZVZpZXcubGluZS53cmFwQ2xhc3M7IH0NCiAgICBlbHNlIGlmIChsaW5lVmlldy5ub2RlICE9IGxpbmVWaWV3LnRleHQpDQogICAgICB7IGxpbmVWaWV3Lm5vZGUuY2xhc3NOYW1lID0gIiI7IH0NCiAgICB2YXIgdGV4dENsYXNzID0gbGluZVZpZXcudGV4dENsYXNzID8gbGluZVZpZXcudGV4dENsYXNzICsgIiAiICsgKGxpbmVWaWV3LmxpbmUudGV4dENsYXNzIHx8ICIiKSA6IGxpbmVWaWV3LmxpbmUudGV4dENsYXNzOw0KICAgIGxpbmVWaWV3LnRleHQuY2xhc3NOYW1lID0gdGV4dENsYXNzIHx8ICIiOw0KICB9DQoNCiAgZnVuY3Rpb24gdXBkYXRlTGluZUd1dHRlcihjbSwgbGluZVZpZXcsIGxpbmVOLCBkaW1zKSB7DQogICAgaWYgKGxpbmVWaWV3Lmd1dHRlcikgew0KICAgICAgbGluZVZpZXcubm9kZS5yZW1vdmVDaGlsZChsaW5lVmlldy5ndXR0ZXIpOw0KICAgICAgbGluZVZpZXcuZ3V0dGVyID0gbnVsbDsNCiAgICB9DQogICAgaWYgKGxpbmVWaWV3Lmd1dHRlckJhY2tncm91bmQpIHsNCiAgICAgIGxpbmVWaWV3Lm5vZGUucmVtb3ZlQ2hpbGQobGluZVZpZXcuZ3V0dGVyQmFja2dyb3VuZCk7DQogICAgICBsaW5lVmlldy5ndXR0ZXJCYWNrZ3JvdW5kID0gbnVsbDsNCiAgICB9DQogICAgaWYgKGxpbmVWaWV3LmxpbmUuZ3V0dGVyQ2xhc3MpIHsNCiAgICAgIHZhciB3cmFwID0gZW5zdXJlTGluZVdyYXBwZWQobGluZVZpZXcpOw0KICAgICAgbGluZVZpZXcuZ3V0dGVyQmFja2dyb3VuZCA9IGVsdCgiZGl2IiwgbnVsbCwgIkNvZGVNaXJyb3ItZ3V0dGVyLWJhY2tncm91bmQgIiArIGxpbmVWaWV3LmxpbmUuZ3V0dGVyQ2xhc3MsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgibGVmdDogIiArIChjbS5vcHRpb25zLmZpeGVkR3V0dGVyID8gZGltcy5maXhlZFBvcyA6IC1kaW1zLmd1dHRlclRvdGFsV2lkdGgpICsgInB4OyB3aWR0aDogIiArIChkaW1zLmd1dHRlclRvdGFsV2lkdGgpICsgInB4IikpOw0KICAgICAgY20uZGlzcGxheS5pbnB1dC5zZXRVbmVkaXRhYmxlKGxpbmVWaWV3Lmd1dHRlckJhY2tncm91bmQpOw0KICAgICAgd3JhcC5pbnNlcnRCZWZvcmUobGluZVZpZXcuZ3V0dGVyQmFja2dyb3VuZCwgbGluZVZpZXcudGV4dCk7DQogICAgfQ0KICAgIHZhciBtYXJrZXJzID0gbGluZVZpZXcubGluZS5ndXR0ZXJNYXJrZXJzOw0KICAgIGlmIChjbS5vcHRpb25zLmxpbmVOdW1iZXJzIHx8IG1hcmtlcnMpIHsNCiAgICAgIHZhciB3cmFwJDEgPSBlbnN1cmVMaW5lV3JhcHBlZChsaW5lVmlldyk7DQogICAgICB2YXIgZ3V0dGVyV3JhcCA9IGxpbmVWaWV3Lmd1dHRlciA9IGVsdCgiZGl2IiwgbnVsbCwgIkNvZGVNaXJyb3ItZ3V0dGVyLXdyYXBwZXIiLCAoImxlZnQ6ICIgKyAoY20ub3B0aW9ucy5maXhlZEd1dHRlciA/IGRpbXMuZml4ZWRQb3MgOiAtZGltcy5ndXR0ZXJUb3RhbFdpZHRoKSArICJweCIpKTsNCiAgICAgIGNtLmRpc3BsYXkuaW5wdXQuc2V0VW5lZGl0YWJsZShndXR0ZXJXcmFwKTsNCiAgICAgIHdyYXAkMS5pbnNlcnRCZWZvcmUoZ3V0dGVyV3JhcCwgbGluZVZpZXcudGV4dCk7DQogICAgICBpZiAobGluZVZpZXcubGluZS5ndXR0ZXJDbGFzcykNCiAgICAgICAgeyBndXR0ZXJXcmFwLmNsYXNzTmFtZSArPSAiICIgKyBsaW5lVmlldy5saW5lLmd1dHRlckNsYXNzOyB9DQogICAgICBpZiAoY20ub3B0aW9ucy5saW5lTnVtYmVycyAmJiAoIW1hcmtlcnMgfHwgIW1hcmtlcnNbIkNvZGVNaXJyb3ItbGluZW51bWJlcnMiXSkpDQogICAgICAgIHsgbGluZVZpZXcubGluZU51bWJlciA9IGd1dHRlcldyYXAuYXBwZW5kQ2hpbGQoDQogICAgICAgICAgZWx0KCJkaXYiLCBsaW5lTnVtYmVyRm9yKGNtLm9wdGlvbnMsIGxpbmVOKSwNCiAgICAgICAgICAgICAgIkNvZGVNaXJyb3ItbGluZW51bWJlciBDb2RlTWlycm9yLWd1dHRlci1lbHQiLA0KICAgICAgICAgICAgICAoImxlZnQ6ICIgKyAoZGltcy5ndXR0ZXJMZWZ0WyJDb2RlTWlycm9yLWxpbmVudW1iZXJzIl0pICsgInB4OyB3aWR0aDogIiArIChjbS5kaXNwbGF5LmxpbmVOdW1Jbm5lcldpZHRoKSArICJweCIpKSk7IH0NCiAgICAgIGlmIChtYXJrZXJzKSB7IGZvciAodmFyIGsgPSAwOyBrIDwgY20uZGlzcGxheS5ndXR0ZXJTcGVjcy5sZW5ndGg7ICsraykgew0KICAgICAgICB2YXIgaWQgPSBjbS5kaXNwbGF5Lmd1dHRlclNwZWNzW2tdLmNsYXNzTmFtZSwgZm91bmQgPSBtYXJrZXJzLmhhc093blByb3BlcnR5KGlkKSAmJiBtYXJrZXJzW2lkXTsNCiAgICAgICAgaWYgKGZvdW5kKQ0KICAgICAgICAgIHsgZ3V0dGVyV3JhcC5hcHBlbmRDaGlsZChlbHQoImRpdiIsIFtmb3VuZF0sICJDb2RlTWlycm9yLWd1dHRlci1lbHQiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgibGVmdDogIiArIChkaW1zLmd1dHRlckxlZnRbaWRdKSArICJweDsgd2lkdGg6ICIgKyAoZGltcy5ndXR0ZXJXaWR0aFtpZF0pICsgInB4IikpKTsgfQ0KICAgICAgfSB9DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gdXBkYXRlTGluZVdpZGdldHMoY20sIGxpbmVWaWV3LCBkaW1zKSB7DQogICAgaWYgKGxpbmVWaWV3LmFsaWduYWJsZSkgeyBsaW5lVmlldy5hbGlnbmFibGUgPSBudWxsOyB9DQogICAgdmFyIGlzV2lkZ2V0ID0gY2xhc3NUZXN0KCJDb2RlTWlycm9yLWxpbmV3aWRnZXQiKTsNCiAgICBmb3IgKHZhciBub2RlID0gbGluZVZpZXcubm9kZS5maXJzdENoaWxkLCBuZXh0ID0gKHZvaWQgMCk7IG5vZGU7IG5vZGUgPSBuZXh0KSB7DQogICAgICBuZXh0ID0gbm9kZS5uZXh0U2libGluZzsNCiAgICAgIGlmIChpc1dpZGdldC50ZXN0KG5vZGUuY2xhc3NOYW1lKSkgeyBsaW5lVmlldy5ub2RlLnJlbW92ZUNoaWxkKG5vZGUpOyB9DQogICAgfQ0KICAgIGluc2VydExpbmVXaWRnZXRzKGNtLCBsaW5lVmlldywgZGltcyk7DQogIH0NCg0KICAvLyBCdWlsZCBhIGxpbmUncyBET00gcmVwcmVzZW50YXRpb24gZnJvbSBzY3JhdGNoDQogIGZ1bmN0aW9uIGJ1aWxkTGluZUVsZW1lbnQoY20sIGxpbmVWaWV3LCBsaW5lTiwgZGltcykgew0KICAgIHZhciBidWlsdCA9IGdldExpbmVDb250ZW50KGNtLCBsaW5lVmlldyk7DQogICAgbGluZVZpZXcudGV4dCA9IGxpbmVWaWV3Lm5vZGUgPSBidWlsdC5wcmU7DQogICAgaWYgKGJ1aWx0LmJnQ2xhc3MpIHsgbGluZVZpZXcuYmdDbGFzcyA9IGJ1aWx0LmJnQ2xhc3M7IH0NCiAgICBpZiAoYnVpbHQudGV4dENsYXNzKSB7IGxpbmVWaWV3LnRleHRDbGFzcyA9IGJ1aWx0LnRleHRDbGFzczsgfQ0KDQogICAgdXBkYXRlTGluZUNsYXNzZXMoY20sIGxpbmVWaWV3KTsNCiAgICB1cGRhdGVMaW5lR3V0dGVyKGNtLCBsaW5lVmlldywgbGluZU4sIGRpbXMpOw0KICAgIGluc2VydExpbmVXaWRnZXRzKGNtLCBsaW5lVmlldywgZGltcyk7DQogICAgcmV0dXJuIGxpbmVWaWV3Lm5vZGUNCiAgfQ0KDQogIC8vIEEgbGluZVZpZXcgbWF5IGNvbnRhaW4gbXVsdGlwbGUgbG9naWNhbCBsaW5lcyAod2hlbiBtZXJnZWQgYnkNCiAgLy8gY29sbGFwc2VkIHNwYW5zKS4gVGhlIHdpZGdldHMgZm9yIGFsbCBvZiB0aGVtIG5lZWQgdG8gYmUgZHJhd24uDQogIGZ1bmN0aW9uIGluc2VydExpbmVXaWRnZXRzKGNtLCBsaW5lVmlldywgZGltcykgew0KICAgIGluc2VydExpbmVXaWRnZXRzRm9yKGNtLCBsaW5lVmlldy5saW5lLCBsaW5lVmlldywgZGltcywgdHJ1ZSk7DQogICAgaWYgKGxpbmVWaWV3LnJlc3QpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lVmlldy5yZXN0Lmxlbmd0aDsgaSsrKQ0KICAgICAgeyBpbnNlcnRMaW5lV2lkZ2V0c0ZvcihjbSwgbGluZVZpZXcucmVzdFtpXSwgbGluZVZpZXcsIGRpbXMsIGZhbHNlKTsgfSB9DQogIH0NCg0KICBmdW5jdGlvbiBpbnNlcnRMaW5lV2lkZ2V0c0ZvcihjbSwgbGluZSwgbGluZVZpZXcsIGRpbXMsIGFsbG93QWJvdmUpIHsNCiAgICBpZiAoIWxpbmUud2lkZ2V0cykgeyByZXR1cm4gfQ0KICAgIHZhciB3cmFwID0gZW5zdXJlTGluZVdyYXBwZWQobGluZVZpZXcpOw0KICAgIGZvciAodmFyIGkgPSAwLCB3cyA9IGxpbmUud2lkZ2V0czsgaSA8IHdzLmxlbmd0aDsgKytpKSB7DQogICAgICB2YXIgd2lkZ2V0ID0gd3NbaV0sIG5vZGUgPSBlbHQoImRpdiIsIFt3aWRnZXQubm9kZV0sICJDb2RlTWlycm9yLWxpbmV3aWRnZXQiICsgKHdpZGdldC5jbGFzc05hbWUgPyAiICIgKyB3aWRnZXQuY2xhc3NOYW1lIDogIiIpKTsNCiAgICAgIGlmICghd2lkZ2V0LmhhbmRsZU1vdXNlRXZlbnRzKSB7IG5vZGUuc2V0QXR0cmlidXRlKCJjbS1pZ25vcmUtZXZlbnRzIiwgInRydWUiKTsgfQ0KICAgICAgcG9zaXRpb25MaW5lV2lkZ2V0KHdpZGdldCwgbm9kZSwgbGluZVZpZXcsIGRpbXMpOw0KICAgICAgY20uZGlzcGxheS5pbnB1dC5zZXRVbmVkaXRhYmxlKG5vZGUpOw0KICAgICAgaWYgKGFsbG93QWJvdmUgJiYgd2lkZ2V0LmFib3ZlKQ0KICAgICAgICB7IHdyYXAuaW5zZXJ0QmVmb3JlKG5vZGUsIGxpbmVWaWV3Lmd1dHRlciB8fCBsaW5lVmlldy50ZXh0KTsgfQ0KICAgICAgZWxzZQ0KICAgICAgICB7IHdyYXAuYXBwZW5kQ2hpbGQobm9kZSk7IH0NCiAgICAgIHNpZ25hbExhdGVyKHdpZGdldCwgInJlZHJhdyIpOw0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIHBvc2l0aW9uTGluZVdpZGdldCh3aWRnZXQsIG5vZGUsIGxpbmVWaWV3LCBkaW1zKSB7DQogICAgaWYgKHdpZGdldC5ub0hTY3JvbGwpIHsNCiAgKGxpbmVWaWV3LmFsaWduYWJsZSB8fCAobGluZVZpZXcuYWxpZ25hYmxlID0gW10pKS5wdXNoKG5vZGUpOw0KICAgICAgdmFyIHdpZHRoID0gZGltcy53cmFwcGVyV2lkdGg7DQogICAgICBub2RlLnN0eWxlLmxlZnQgPSBkaW1zLmZpeGVkUG9zICsgInB4IjsNCiAgICAgIGlmICghd2lkZ2V0LmNvdmVyR3V0dGVyKSB7DQogICAgICAgIHdpZHRoIC09IGRpbXMuZ3V0dGVyVG90YWxXaWR0aDsNCiAgICAgICAgbm9kZS5zdHlsZS5wYWRkaW5nTGVmdCA9IGRpbXMuZ3V0dGVyVG90YWxXaWR0aCArICJweCI7DQogICAgICB9DQogICAgICBub2RlLnN0eWxlLndpZHRoID0gd2lkdGggKyAicHgiOw0KICAgIH0NCiAgICBpZiAod2lkZ2V0LmNvdmVyR3V0dGVyKSB7DQogICAgICBub2RlLnN0eWxlLnpJbmRleCA9IDU7DQogICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gInJlbGF0aXZlIjsNCiAgICAgIGlmICghd2lkZ2V0Lm5vSFNjcm9sbCkgeyBub2RlLnN0eWxlLm1hcmdpbkxlZnQgPSAtZGltcy5ndXR0ZXJUb3RhbFdpZHRoICsgInB4IjsgfQ0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIHdpZGdldEhlaWdodCh3aWRnZXQpIHsNCiAgICBpZiAod2lkZ2V0LmhlaWdodCAhPSBudWxsKSB7IHJldHVybiB3aWRnZXQuaGVpZ2h0IH0NCiAgICB2YXIgY20gPSB3aWRnZXQuZG9jLmNtOw0KICAgIGlmICghY20pIHsgcmV0dXJuIDAgfQ0KICAgIGlmICghY29udGFpbnMoZG9jdW1lbnQuYm9keSwgd2lkZ2V0Lm5vZGUpKSB7DQogICAgICB2YXIgcGFyZW50U3R5bGUgPSAicG9zaXRpb246IHJlbGF0aXZlOyI7DQogICAgICBpZiAod2lkZ2V0LmNvdmVyR3V0dGVyKQ0KICAgICAgICB7IHBhcmVudFN0eWxlICs9ICJtYXJnaW4tbGVmdDogLSIgKyBjbS5kaXNwbGF5Lmd1dHRlcnMub2Zmc2V0V2lkdGggKyAicHg7IjsgfQ0KICAgICAgaWYgKHdpZGdldC5ub0hTY3JvbGwpDQogICAgICAgIHsgcGFyZW50U3R5bGUgKz0gIndpZHRoOiAiICsgY20uZGlzcGxheS53cmFwcGVyLmNsaWVudFdpZHRoICsgInB4OyI7IH0NCiAgICAgIHJlbW92ZUNoaWxkcmVuQW5kQWRkKGNtLmRpc3BsYXkubWVhc3VyZSwgZWx0KCJkaXYiLCBbd2lkZ2V0Lm5vZGVdLCBudWxsLCBwYXJlbnRTdHlsZSkpOw0KICAgIH0NCiAgICByZXR1cm4gd2lkZ2V0LmhlaWdodCA9IHdpZGdldC5ub2RlLnBhcmVudE5vZGUub2Zmc2V0SGVpZ2h0DQogIH0NCg0KICAvLyBSZXR1cm4gdHJ1ZSB3aGVuIHRoZSBnaXZlbiBtb3VzZSBldmVudCBoYXBwZW5lZCBpbiBhIHdpZGdldA0KICBmdW5jdGlvbiBldmVudEluV2lkZ2V0KGRpc3BsYXksIGUpIHsNCiAgICBmb3IgKHZhciBuID0gZV90YXJnZXQoZSk7IG4gIT0gZGlzcGxheS53cmFwcGVyOyBuID0gbi5wYXJlbnROb2RlKSB7DQogICAgICBpZiAoIW4gfHwgKG4ubm9kZVR5cGUgPT0gMSAmJiBuLmdldEF0dHJpYnV0ZSgiY20taWdub3JlLWV2ZW50cyIpID09ICJ0cnVlIikgfHwNCiAgICAgICAgICAobi5wYXJlbnROb2RlID09IGRpc3BsYXkuc2l6ZXIgJiYgbiAhPSBkaXNwbGF5Lm1vdmVyKSkNCiAgICAgICAgeyByZXR1cm4gdHJ1ZSB9DQogICAgfQ0KICB9DQoNCiAgLy8gUE9TSVRJT04gTUVBU1VSRU1FTlQNCg0KICBmdW5jdGlvbiBwYWRkaW5nVG9wKGRpc3BsYXkpIHtyZXR1cm4gZGlzcGxheS5saW5lU3BhY2Uub2Zmc2V0VG9wfQ0KICBmdW5jdGlvbiBwYWRkaW5nVmVydChkaXNwbGF5KSB7cmV0dXJuIGRpc3BsYXkubW92ZXIub2Zmc2V0SGVpZ2h0IC0gZGlzcGxheS5saW5lU3BhY2Uub2Zmc2V0SGVpZ2h0fQ0KICBmdW5jdGlvbiBwYWRkaW5nSChkaXNwbGF5KSB7DQogICAgaWYgKGRpc3BsYXkuY2FjaGVkUGFkZGluZ0gpIHsgcmV0dXJuIGRpc3BsYXkuY2FjaGVkUGFkZGluZ0ggfQ0KICAgIHZhciBlID0gcmVtb3ZlQ2hpbGRyZW5BbmRBZGQoZGlzcGxheS5tZWFzdXJlLCBlbHQoInByZSIsICJ4IiwgIkNvZGVNaXJyb3ItbGluZS1saWtlIikpOw0KICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlID8gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZSkgOiBlLmN1cnJlbnRTdHlsZTsNCiAgICB2YXIgZGF0YSA9IHtsZWZ0OiBwYXJzZUludChzdHlsZS5wYWRkaW5nTGVmdCksIHJpZ2h0OiBwYXJzZUludChzdHlsZS5wYWRkaW5nUmlnaHQpfTsNCiAgICBpZiAoIWlzTmFOKGRhdGEubGVmdCkgJiYgIWlzTmFOKGRhdGEucmlnaHQpKSB7IGRpc3BsYXkuY2FjaGVkUGFkZGluZ0ggPSBkYXRhOyB9DQogICAgcmV0dXJuIGRhdGENCiAgfQ0KDQogIGZ1bmN0aW9uIHNjcm9sbEdhcChjbSkgeyByZXR1cm4gc2Nyb2xsZXJHYXAgLSBjbS5kaXNwbGF5Lm5hdGl2ZUJhcldpZHRoIH0NCiAgZnVuY3Rpb24gZGlzcGxheVdpZHRoKGNtKSB7DQogICAgcmV0dXJuIGNtLmRpc3BsYXkuc2Nyb2xsZXIuY2xpZW50V2lkdGggLSBzY3JvbGxHYXAoY20pIC0gY20uZGlzcGxheS5iYXJXaWR0aA0KICB9DQogIGZ1bmN0aW9uIGRpc3BsYXlIZWlnaHQoY20pIHsNCiAgICByZXR1cm4gY20uZGlzcGxheS5zY3JvbGxlci5jbGllbnRIZWlnaHQgLSBzY3JvbGxHYXAoY20pIC0gY20uZGlzcGxheS5iYXJIZWlnaHQNCiAgfQ0KDQogIC8vIEVuc3VyZSB0aGUgbGluZVZpZXcud3JhcHBpbmcuaGVpZ2h0cyBhcnJheSBpcyBwb3B1bGF0ZWQuIFRoaXMgaXMNCiAgLy8gYW4gYXJyYXkgb2YgYm90dG9tIG9mZnNldHMgZm9yIHRoZSBsaW5lcyB0aGF0IG1ha2UgdXAgYSBkcmF3bg0KICAvLyBsaW5lLiBXaGVuIGxpbmVXcmFwcGluZyBpcyBvbiwgdGhlcmUgbWlnaHQgYmUgbW9yZSB0aGFuIG9uZQ0KICAvLyBoZWlnaHQuDQogIGZ1bmN0aW9uIGVuc3VyZUxpbmVIZWlnaHRzKGNtLCBsaW5lVmlldywgcmVjdCkgew0KICAgIHZhciB3cmFwcGluZyA9IGNtLm9wdGlvbnMubGluZVdyYXBwaW5nOw0KICAgIHZhciBjdXJXaWR0aCA9IHdyYXBwaW5nICYmIGRpc3BsYXlXaWR0aChjbSk7DQogICAgaWYgKCFsaW5lVmlldy5tZWFzdXJlLmhlaWdodHMgfHwgd3JhcHBpbmcgJiYgbGluZVZpZXcubWVhc3VyZS53aWR0aCAhPSBjdXJXaWR0aCkgew0KICAgICAgdmFyIGhlaWdodHMgPSBsaW5lVmlldy5tZWFzdXJlLmhlaWdodHMgPSBbXTsNCiAgICAgIGlmICh3cmFwcGluZykgew0KICAgICAgICBsaW5lVmlldy5tZWFzdXJlLndpZHRoID0gY3VyV2lkdGg7DQogICAgICAgIHZhciByZWN0cyA9IGxpbmVWaWV3LnRleHQuZmlyc3RDaGlsZC5nZXRDbGllbnRSZWN0cygpOw0KICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlY3RzLmxlbmd0aCAtIDE7IGkrKykgew0KICAgICAgICAgIHZhciBjdXIgPSByZWN0c1tpXSwgbmV4dCA9IHJlY3RzW2kgKyAxXTsNCiAgICAgICAgICBpZiAoTWF0aC5hYnMoY3VyLmJvdHRvbSAtIG5leHQuYm90dG9tKSA+IDIpDQogICAgICAgICAgICB7IGhlaWdodHMucHVzaCgoY3VyLmJvdHRvbSArIG5leHQudG9wKSAvIDIgLSByZWN0LnRvcCk7IH0NCiAgICAgICAgfQ0KICAgICAgfQ0KICAgICAgaGVpZ2h0cy5wdXNoKHJlY3QuYm90dG9tIC0gcmVjdC50b3ApOw0KICAgIH0NCiAgfQ0KDQogIC8vIEZpbmQgYSBsaW5lIG1hcCAobWFwcGluZyBjaGFyYWN0ZXIgb2Zmc2V0cyB0byB0ZXh0IG5vZGVzKSBhbmQgYQ0KICAvLyBtZWFzdXJlbWVudCBjYWNoZSBmb3IgdGhlIGdpdmVuIGxpbmUgbnVtYmVyLiAoQSBsaW5lIHZpZXcgbWlnaHQNCiAgLy8gY29udGFpbiBtdWx0aXBsZSBsaW5lcyB3aGVuIGNvbGxhcHNlZCByYW5nZXMgYXJlIHByZXNlbnQuKQ0KICBmdW5jdGlvbiBtYXBGcm9tTGluZVZpZXcobGluZVZpZXcsIGxpbmUsIGxpbmVOKSB7DQogICAgaWYgKGxpbmVWaWV3LmxpbmUgPT0gbGluZSkNCiAgICAgIHsgcmV0dXJuIHttYXA6IGxpbmVWaWV3Lm1lYXN1cmUubWFwLCBjYWNoZTogbGluZVZpZXcubWVhc3VyZS5jYWNoZX0gfQ0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZVZpZXcucmVzdC5sZW5ndGg7IGkrKykNCiAgICAgIHsgaWYgKGxpbmVWaWV3LnJlc3RbaV0gPT0gbGluZSkNCiAgICAgICAgeyByZXR1cm4ge21hcDogbGluZVZpZXcubWVhc3VyZS5tYXBzW2ldLCBjYWNoZTogbGluZVZpZXcubWVhc3VyZS5jYWNoZXNbaV19IH0gfQ0KICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGxpbmVWaWV3LnJlc3QubGVuZ3RoOyBpJDErKykNCiAgICAgIHsgaWYgKGxpbmVObyhsaW5lVmlldy5yZXN0W2kkMV0pID4gbGluZU4pDQogICAgICAgIHsgcmV0dXJuIHttYXA6IGxpbmVWaWV3Lm1lYXN1cmUubWFwc1tpJDFdLCBjYWNoZTogbGluZVZpZXcubWVhc3VyZS5jYWNoZXNbaSQxXSwgYmVmb3JlOiB0cnVlfSB9IH0NCiAgfQ0KDQogIC8vIFJlbmRlciBhIGxpbmUgaW50byB0aGUgaGlkZGVuIG5vZGUgZGlzcGxheS5leHRlcm5hbE1lYXN1cmVkLiBVc2VkDQogIC8vIHdoZW4gbWVhc3VyZW1lbnQgaXMgbmVlZGVkIGZvciBhIGxpbmUgdGhhdCdzIG5vdCBpbiB0aGUgdmlld3BvcnQuDQogIGZ1bmN0aW9uIHVwZGF0ZUV4dGVybmFsTWVhc3VyZW1lbnQoY20sIGxpbmUpIHsNCiAgICBsaW5lID0gdmlzdWFsTGluZShsaW5lKTsNCiAgICB2YXIgbGluZU4gPSBsaW5lTm8obGluZSk7DQogICAgdmFyIHZpZXcgPSBjbS5kaXNwbGF5LmV4dGVybmFsTWVhc3VyZWQgPSBuZXcgTGluZVZpZXcoY20uZG9jLCBsaW5lLCBsaW5lTik7DQogICAgdmlldy5saW5lTiA9IGxpbmVOOw0KICAgIHZhciBidWlsdCA9IHZpZXcuYnVpbHQgPSBidWlsZExpbmVDb250ZW50KGNtLCB2aWV3KTsNCiAgICB2aWV3LnRleHQgPSBidWlsdC5wcmU7DQogICAgcmVtb3ZlQ2hpbGRyZW5BbmRBZGQoY20uZGlzcGxheS5saW5lTWVhc3VyZSwgYnVpbHQucHJlKTsNCiAgICByZXR1cm4gdmlldw0KICB9DQoNCiAgLy8gR2V0IGEge3RvcCwgYm90dG9tLCBsZWZ0LCByaWdodH0gYm94IChpbiBsaW5lLWxvY2FsIGNvb3JkaW5hdGVzKQ0KICAvLyBmb3IgYSBnaXZlbiBjaGFyYWN0ZXIuDQogIGZ1bmN0aW9uIG1lYXN1cmVDaGFyKGNtLCBsaW5lLCBjaCwgYmlhcykgew0KICAgIHJldHVybiBtZWFzdXJlQ2hhclByZXBhcmVkKGNtLCBwcmVwYXJlTWVhc3VyZUZvckxpbmUoY20sIGxpbmUpLCBjaCwgYmlhcykNCiAgfQ0KDQogIC8vIEZpbmQgYSBsaW5lIHZpZXcgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgZ2l2ZW4gbGluZSBudW1iZXIuDQogIGZ1bmN0aW9uIGZpbmRWaWV3Rm9yTGluZShjbSwgbGluZU4pIHsNCiAgICBpZiAobGluZU4gPj0gY20uZGlzcGxheS52aWV3RnJvbSAmJiBsaW5lTiA8IGNtLmRpc3BsYXkudmlld1RvKQ0KICAgICAgeyByZXR1cm4gY20uZGlzcGxheS52aWV3W2ZpbmRWaWV3SW5kZXgoY20sIGxpbmVOKV0gfQ0KICAgIHZhciBleHQgPSBjbS5kaXNwbGF5LmV4dGVybmFsTWVhc3VyZWQ7DQogICAgaWYgKGV4dCAmJiBsaW5lTiA+PSBleHQubGluZU4gJiYgbGluZU4gPCBleHQubGluZU4gKyBleHQuc2l6ZSkNCiAgICAgIHsgcmV0dXJuIGV4dCB9DQogIH0NCg0KICAvLyBNZWFzdXJlbWVudCBjYW4gYmUgc3BsaXQgaW4gdHdvIHN0ZXBzLCB0aGUgc2V0LXVwIHdvcmsgdGhhdA0KICAvLyBhcHBsaWVzIHRvIHRoZSB3aG9sZSBsaW5lLCBhbmQgdGhlIG1lYXN1cmVtZW50IG9mIHRoZSBhY3R1YWwNCiAgLy8gY2hhcmFjdGVyLiBGdW5jdGlvbnMgbGlrZSBjb29yZHNDaGFyLCB0aGF0IG5lZWQgdG8gZG8gYSBsb3Qgb2YNCiAgLy8gbWVhc3VyZW1lbnRzIGluIGEgcm93LCBjYW4gdGh1cyBlbnN1cmUgdGhhdCB0aGUgc2V0LXVwIHdvcmsgaXMNCiAgLy8gb25seSBkb25lIG9uY2UuDQogIGZ1bmN0aW9uIHByZXBhcmVNZWFzdXJlRm9yTGluZShjbSwgbGluZSkgew0KICAgIHZhciBsaW5lTiA9IGxpbmVObyhsaW5lKTsNCiAgICB2YXIgdmlldyA9IGZpbmRWaWV3Rm9yTGluZShjbSwgbGluZU4pOw0KICAgIGlmICh2aWV3ICYmICF2aWV3LnRleHQpIHsNCiAgICAgIHZpZXcgPSBudWxsOw0KICAgIH0gZWxzZSBpZiAodmlldyAmJiB2aWV3LmNoYW5nZXMpIHsNCiAgICAgIHVwZGF0ZUxpbmVGb3JDaGFuZ2VzKGNtLCB2aWV3LCBsaW5lTiwgZ2V0RGltZW5zaW9ucyhjbSkpOw0KICAgICAgY20uY3VyT3AuZm9yY2VVcGRhdGUgPSB0cnVlOw0KICAgIH0NCiAgICBpZiAoIXZpZXcpDQogICAgICB7IHZpZXcgPSB1cGRhdGVFeHRlcm5hbE1lYXN1cmVtZW50KGNtLCBsaW5lKTsgfQ0KDQogICAgdmFyIGluZm8gPSBtYXBGcm9tTGluZVZpZXcodmlldywgbGluZSwgbGluZU4pOw0KICAgIHJldHVybiB7DQogICAgICBsaW5lOiBsaW5lLCB2aWV3OiB2aWV3LCByZWN0OiBudWxsLA0KICAgICAgbWFwOiBpbmZvLm1hcCwgY2FjaGU6IGluZm8uY2FjaGUsIGJlZm9yZTogaW5mby5iZWZvcmUsDQogICAgICBoYXNIZWlnaHRzOiBmYWxzZQ0KICAgIH0NCiAgfQ0KDQogIC8vIEdpdmVuIGEgcHJlcGFyZWQgbWVhc3VyZW1lbnQgb2JqZWN0LCBtZWFzdXJlcyB0aGUgcG9zaXRpb24gb2YgYW4NCiAgLy8gYWN0dWFsIGNoYXJhY3RlciAob3IgZmV0Y2hlcyBpdCBmcm9tIHRoZSBjYWNoZSkuDQogIGZ1bmN0aW9uIG1lYXN1cmVDaGFyUHJlcGFyZWQoY20sIHByZXBhcmVkLCBjaCwgYmlhcywgdmFySGVpZ2h0KSB7DQogICAgaWYgKHByZXBhcmVkLmJlZm9yZSkgeyBjaCA9IC0xOyB9DQogICAgdmFyIGtleSA9IGNoICsgKGJpYXMgfHwgIiIpLCBmb3VuZDsNCiAgICBpZiAocHJlcGFyZWQuY2FjaGUuaGFzT3duUHJvcGVydHkoa2V5KSkgew0KICAgICAgZm91bmQgPSBwcmVwYXJlZC5jYWNoZVtrZXldOw0KICAgIH0gZWxzZSB7DQogICAgICBpZiAoIXByZXBhcmVkLnJlY3QpDQogICAgICAgIHsgcHJlcGFyZWQucmVjdCA9IHByZXBhcmVkLnZpZXcudGV4dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgfQ0KICAgICAgaWYgKCFwcmVwYXJlZC5oYXNIZWlnaHRzKSB7DQogICAgICAgIGVuc3VyZUxpbmVIZWlnaHRzKGNtLCBwcmVwYXJlZC52aWV3LCBwcmVwYXJlZC5yZWN0KTsNCiAgICAgICAgcHJlcGFyZWQuaGFzSGVpZ2h0cyA9IHRydWU7DQogICAgICB9DQogICAgICBmb3VuZCA9IG1lYXN1cmVDaGFySW5uZXIoY20sIHByZXBhcmVkLCBjaCwgYmlhcyk7DQogICAgICBpZiAoIWZvdW5kLmJvZ3VzKSB7IHByZXBhcmVkLmNhY2hlW2tleV0gPSBmb3VuZDsgfQ0KICAgIH0NCiAgICByZXR1cm4ge2xlZnQ6IGZvdW5kLmxlZnQsIHJpZ2h0OiBmb3VuZC5yaWdodCwNCiAgICAgICAgICAgIHRvcDogdmFySGVpZ2h0ID8gZm91bmQucnRvcCA6IGZvdW5kLnRvcCwNCiAgICAgICAgICAgIGJvdHRvbTogdmFySGVpZ2h0ID8gZm91bmQucmJvdHRvbSA6IGZvdW5kLmJvdHRvbX0NCiAgfQ0KDQogIHZhciBudWxsUmVjdCA9IHtsZWZ0OiAwLCByaWdodDogMCwgdG9wOiAwLCBib3R0b206IDB9Ow0KDQogIGZ1bmN0aW9uIG5vZGVBbmRPZmZzZXRJbkxpbmVNYXAobWFwJCQxLCBjaCwgYmlhcykgew0KICAgIHZhciBub2RlLCBzdGFydCwgZW5kLCBjb2xsYXBzZSwgbVN0YXJ0LCBtRW5kOw0KICAgIC8vIEZpcnN0LCBzZWFyY2ggdGhlIGxpbmUgbWFwIGZvciB0aGUgdGV4dCBub2RlIGNvcnJlc3BvbmRpbmcgdG8sDQogICAgLy8gb3IgY2xvc2VzdCB0bywgdGhlIHRhcmdldCBjaGFyYWN0ZXIuDQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXAkJDEubGVuZ3RoOyBpICs9IDMpIHsNCiAgICAgIG1TdGFydCA9IG1hcCQkMVtpXTsNCiAgICAgIG1FbmQgPSBtYXAkJDFbaSArIDFdOw0KICAgICAgaWYgKGNoIDwgbVN0YXJ0KSB7DQogICAgICAgIHN0YXJ0ID0gMDsgZW5kID0gMTsNCiAgICAgICAgY29sbGFwc2UgPSAibGVmdCI7DQogICAgICB9IGVsc2UgaWYgKGNoIDwgbUVuZCkgew0KICAgICAgICBzdGFydCA9IGNoIC0gbVN0YXJ0Ow0KICAgICAgICBlbmQgPSBzdGFydCArIDE7DQogICAgICB9IGVsc2UgaWYgKGkgPT0gbWFwJCQxLmxlbmd0aCAtIDMgfHwgY2ggPT0gbUVuZCAmJiBtYXAkJDFbaSArIDNdID4gY2gpIHsNCiAgICAgICAgZW5kID0gbUVuZCAtIG1TdGFydDsNCiAgICAgICAgc3RhcnQgPSBlbmQgLSAxOw0KICAgICAgICBpZiAoY2ggPj0gbUVuZCkgeyBjb2xsYXBzZSA9ICJyaWdodCI7IH0NCiAgICAgIH0NCiAgICAgIGlmIChzdGFydCAhPSBudWxsKSB7DQogICAgICAgIG5vZGUgPSBtYXAkJDFbaSArIDJdOw0KICAgICAgICBpZiAobVN0YXJ0ID09IG1FbmQgJiYgYmlhcyA9PSAobm9kZS5pbnNlcnRMZWZ0ID8gImxlZnQiIDogInJpZ2h0IikpDQogICAgICAgICAgeyBjb2xsYXBzZSA9IGJpYXM7IH0NCiAgICAgICAgaWYgKGJpYXMgPT0gImxlZnQiICYmIHN0YXJ0ID09IDApDQogICAgICAgICAgeyB3aGlsZSAoaSAmJiBtYXAkJDFbaSAtIDJdID09IG1hcCQkMVtpIC0gM10gJiYgbWFwJCQxW2kgLSAxXS5pbnNlcnRMZWZ0KSB7DQogICAgICAgICAgICBub2RlID0gbWFwJCQxWyhpIC09IDMpICsgMl07DQogICAgICAgICAgICBjb2xsYXBzZSA9ICJsZWZ0IjsNCiAgICAgICAgICB9IH0NCiAgICAgICAgaWYgKGJpYXMgPT0gInJpZ2h0IiAmJiBzdGFydCA9PSBtRW5kIC0gbVN0YXJ0KQ0KICAgICAgICAgIHsgd2hpbGUgKGkgPCBtYXAkJDEubGVuZ3RoIC0gMyAmJiBtYXAkJDFbaSArIDNdID09IG1hcCQkMVtpICsgNF0gJiYgIW1hcCQkMVtpICsgNV0uaW5zZXJ0TGVmdCkgew0KICAgICAgICAgICAgbm9kZSA9IG1hcCQkMVsoaSArPSAzKSArIDJdOw0KICAgICAgICAgICAgY29sbGFwc2UgPSAicmlnaHQiOw0KICAgICAgICAgIH0gfQ0KICAgICAgICBicmVhaw0KICAgICAgfQ0KICAgIH0NCiAgICByZXR1cm4ge25vZGU6IG5vZGUsIHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQsIGNvbGxhcHNlOiBjb2xsYXBzZSwgY292ZXJTdGFydDogbVN0YXJ0LCBjb3ZlckVuZDogbUVuZH0NCiAgfQ0KDQogIGZ1bmN0aW9uIGdldFVzZWZ1bFJlY3QocmVjdHMsIGJpYXMpIHsNCiAgICB2YXIgcmVjdCA9IG51bGxSZWN0Ow0KICAgIGlmIChiaWFzID09ICJsZWZ0IikgeyBmb3IgKHZhciBpID0gMDsgaSA8IHJlY3RzLmxlbmd0aDsgaSsrKSB7DQogICAgICBpZiAoKHJlY3QgPSByZWN0c1tpXSkubGVmdCAhPSByZWN0LnJpZ2h0KSB7IGJyZWFrIH0NCiAgICB9IH0gZWxzZSB7IGZvciAodmFyIGkkMSA9IHJlY3RzLmxlbmd0aCAtIDE7IGkkMSA+PSAwOyBpJDEtLSkgew0KICAgICAgaWYgKChyZWN0ID0gcmVjdHNbaSQxXSkubGVmdCAhPSByZWN0LnJpZ2h0KSB7IGJyZWFrIH0NCiAgICB9IH0NCiAgICByZXR1cm4gcmVjdA0KICB9DQoNCiAgZnVuY3Rpb24gbWVhc3VyZUNoYXJJbm5lcihjbSwgcHJlcGFyZWQsIGNoLCBiaWFzKSB7DQogICAgdmFyIHBsYWNlID0gbm9kZUFuZE9mZnNldEluTGluZU1hcChwcmVwYXJlZC5tYXAsIGNoLCBiaWFzKTsNCiAgICB2YXIgbm9kZSA9IHBsYWNlLm5vZGUsIHN0YXJ0ID0gcGxhY2Uuc3RhcnQsIGVuZCA9IHBsYWNlLmVuZCwgY29sbGFwc2UgPSBwbGFjZS5jb2xsYXBzZTsNCg0KICAgIHZhciByZWN0Ow0KICAgIGlmIChub2RlLm5vZGVUeXBlID09IDMpIHsgLy8gSWYgaXQgaXMgYSB0ZXh0IG5vZGUsIHVzZSBhIHJhbmdlIHRvIHJldHJpZXZlIHRoZSBjb29yZGluYXRlcy4NCiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IDQ7IGkkMSsrKSB7IC8vIFJldHJ5IGEgbWF4aW11bSBvZiA0IHRpbWVzIHdoZW4gbm9uc2Vuc2UgcmVjdGFuZ2xlcyBhcmUgcmV0dXJuZWQNCiAgICAgICAgd2hpbGUgKHN0YXJ0ICYmIGlzRXh0ZW5kaW5nQ2hhcihwcmVwYXJlZC5saW5lLnRleHQuY2hhckF0KHBsYWNlLmNvdmVyU3RhcnQgKyBzdGFydCkpKSB7IC0tc3RhcnQ7IH0NCiAgICAgICAgd2hpbGUgKHBsYWNlLmNvdmVyU3RhcnQgKyBlbmQgPCBwbGFjZS5jb3ZlckVuZCAmJiBpc0V4dGVuZGluZ0NoYXIocHJlcGFyZWQubGluZS50ZXh0LmNoYXJBdChwbGFjZS5jb3ZlclN0YXJ0ICsgZW5kKSkpIHsgKytlbmQ7IH0NCiAgICAgICAgaWYgKGllICYmIGllX3ZlcnNpb24gPCA5ICYmIHN0YXJ0ID09IDAgJiYgZW5kID09IHBsYWNlLmNvdmVyRW5kIC0gcGxhY2UuY292ZXJTdGFydCkNCiAgICAgICAgICB7IHJlY3QgPSBub2RlLnBhcmVudE5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IH0NCiAgICAgICAgZWxzZQ0KICAgICAgICAgIHsgcmVjdCA9IGdldFVzZWZ1bFJlY3QocmFuZ2Uobm9kZSwgc3RhcnQsIGVuZCkuZ2V0Q2xpZW50UmVjdHMoKSwgYmlhcyk7IH0NCiAgICAgICAgaWYgKHJlY3QubGVmdCB8fCByZWN0LnJpZ2h0IHx8IHN0YXJ0ID09IDApIHsgYnJlYWsgfQ0KICAgICAgICBlbmQgPSBzdGFydDsNCiAgICAgICAgc3RhcnQgPSBzdGFydCAtIDE7DQogICAgICAgIGNvbGxhcHNlID0gInJpZ2h0IjsNCiAgICAgIH0NCiAgICAgIGlmIChpZSAmJiBpZV92ZXJzaW9uIDwgMTEpIHsgcmVjdCA9IG1heWJlVXBkYXRlUmVjdEZvclpvb21pbmcoY20uZGlzcGxheS5tZWFzdXJlLCByZWN0KTsgfQ0KICAgIH0gZWxzZSB7IC8vIElmIGl0IGlzIGEgd2lkZ2V0LCBzaW1wbHkgZ2V0IHRoZSBib3ggZm9yIHRoZSB3aG9sZSB3aWRnZXQuDQogICAgICBpZiAoc3RhcnQgPiAwKSB7IGNvbGxhcHNlID0gYmlhcyA9ICJyaWdodCI7IH0NCiAgICAgIHZhciByZWN0czsNCiAgICAgIGlmIChjbS5vcHRpb25zLmxpbmVXcmFwcGluZyAmJiAocmVjdHMgPSBub2RlLmdldENsaWVudFJlY3RzKCkpLmxlbmd0aCA+IDEpDQogICAgICAgIHsgcmVjdCA9IHJlY3RzW2JpYXMgPT0gInJpZ2h0IiA/IHJlY3RzLmxlbmd0aCAtIDEgOiAwXTsgfQ0KICAgICAgZWxzZQ0KICAgICAgICB7IHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyB9DQogICAgfQ0KICAgIGlmIChpZSAmJiBpZV92ZXJzaW9uIDwgOSAmJiAhc3RhcnQgJiYgKCFyZWN0IHx8ICFyZWN0LmxlZnQgJiYgIXJlY3QucmlnaHQpKSB7DQogICAgICB2YXIgclNwYW4gPSBub2RlLnBhcmVudE5vZGUuZ2V0Q2xpZW50UmVjdHMoKVswXTsNCiAgICAgIGlmIChyU3BhbikNCiAgICAgICAgeyByZWN0ID0ge2xlZnQ6IHJTcGFuLmxlZnQsIHJpZ2h0OiByU3Bhbi5sZWZ0ICsgY2hhcldpZHRoKGNtLmRpc3BsYXkpLCB0b3A6IHJTcGFuLnRvcCwgYm90dG9tOiByU3Bhbi5ib3R0b219OyB9DQogICAgICBlbHNlDQogICAgICAgIHsgcmVjdCA9IG51bGxSZWN0OyB9DQogICAgfQ0KDQogICAgdmFyIHJ0b3AgPSByZWN0LnRvcCAtIHByZXBhcmVkLnJlY3QudG9wLCByYm90ID0gcmVjdC5ib3R0b20gLSBwcmVwYXJlZC5yZWN0LnRvcDsNCiAgICB2YXIgbWlkID0gKHJ0b3AgKyByYm90KSAvIDI7DQogICAgdmFyIGhlaWdodHMgPSBwcmVwYXJlZC52aWV3Lm1lYXN1cmUuaGVpZ2h0czsNCiAgICB2YXIgaSA9IDA7DQogICAgZm9yICg7IGkgPCBoZWlnaHRzLmxlbmd0aCAtIDE7IGkrKykNCiAgICAgIHsgaWYgKG1pZCA8IGhlaWdodHNbaV0pIHsgYnJlYWsgfSB9DQogICAgdmFyIHRvcCA9IGkgPyBoZWlnaHRzW2kgLSAxXSA6IDAsIGJvdCA9IGhlaWdodHNbaV07DQogICAgdmFyIHJlc3VsdCA9IHtsZWZ0OiAoY29sbGFwc2UgPT0gInJpZ2h0IiA/IHJlY3QucmlnaHQgOiByZWN0LmxlZnQpIC0gcHJlcGFyZWQucmVjdC5sZWZ0LA0KICAgICAgICAgICAgICAgICAgcmlnaHQ6IChjb2xsYXBzZSA9PSAibGVmdCIgPyByZWN0LmxlZnQgOiByZWN0LnJpZ2h0KSAtIHByZXBhcmVkLnJlY3QubGVmdCwNCiAgICAgICAgICAgICAgICAgIHRvcDogdG9wLCBib3R0b206IGJvdH07DQogICAgaWYgKCFyZWN0LmxlZnQgJiYgIXJlY3QucmlnaHQpIHsgcmVzdWx0LmJvZ3VzID0gdHJ1ZTsgfQ0KICAgIGlmICghY20ub3B0aW9ucy5zaW5nbGVDdXJzb3JIZWlnaHRQZXJMaW5lKSB7IHJlc3VsdC5ydG9wID0gcnRvcDsgcmVzdWx0LnJib3R0b20gPSByYm90OyB9DQoNCiAgICByZXR1cm4gcmVzdWx0DQogIH0NCg0KICAvLyBXb3JrIGFyb3VuZCBwcm9ibGVtIHdpdGggYm91bmRpbmcgY2xpZW50IHJlY3RzIG9uIHJhbmdlcyBiZWluZw0KICAvLyByZXR1cm5lZCBpbmNvcnJlY3RseSB3aGVuIHpvb21lZCBvbiBJRTEwIGFuZCBiZWxvdy4NCiAgZnVuY3Rpb24gbWF5YmVVcGRhdGVSZWN0Rm9yWm9vbWluZyhtZWFzdXJlLCByZWN0KSB7DQogICAgaWYgKCF3aW5kb3cuc2NyZWVuIHx8IHNjcmVlbi5sb2dpY2FsWERQSSA9PSBudWxsIHx8DQogICAgICAgIHNjcmVlbi5sb2dpY2FsWERQSSA9PSBzY3JlZW4uZGV2aWNlWERQSSB8fCAhaGFzQmFkWm9vbWVkUmVjdHMobWVhc3VyZSkpDQogICAgICB7IHJldHVybiByZWN0IH0NCiAgICB2YXIgc2NhbGVYID0gc2NyZWVuLmxvZ2ljYWxYRFBJIC8gc2NyZWVuLmRldmljZVhEUEk7DQogICAgdmFyIHNjYWxlWSA9IHNjcmVlbi5sb2dpY2FsWURQSSAvIHNjcmVlbi5kZXZpY2VZRFBJOw0KICAgIHJldHVybiB7bGVmdDogcmVjdC5sZWZ0ICogc2NhbGVYLCByaWdodDogcmVjdC5yaWdodCAqIHNjYWxlWCwNCiAgICAgICAgICAgIHRvcDogcmVjdC50b3AgKiBzY2FsZVksIGJvdHRvbTogcmVjdC5ib3R0b20gKiBzY2FsZVl9DQogIH0NCg0KICBmdW5jdGlvbiBjbGVhckxpbmVNZWFzdXJlbWVudENhY2hlRm9yKGxpbmVWaWV3KSB7DQogICAgaWYgKGxpbmVWaWV3Lm1lYXN1cmUpIHsNCiAgICAgIGxpbmVWaWV3Lm1lYXN1cmUuY2FjaGUgPSB7fTsNCiAgICAgIGxpbmVWaWV3Lm1lYXN1cmUuaGVpZ2h0cyA9IG51bGw7DQogICAgICBpZiAobGluZVZpZXcucmVzdCkgeyBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVWaWV3LnJlc3QubGVuZ3RoOyBpKyspDQogICAgICAgIHsgbGluZVZpZXcubWVhc3VyZS5jYWNoZXNbaV0gPSB7fTsgfSB9DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gY2xlYXJMaW5lTWVhc3VyZW1lbnRDYWNoZShjbSkgew0KICAgIGNtLmRpc3BsYXkuZXh0ZXJuYWxNZWFzdXJlID0gbnVsbDsNCiAgICByZW1vdmVDaGlsZHJlbihjbS5kaXNwbGF5LmxpbmVNZWFzdXJlKTsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNtLmRpc3BsYXkudmlldy5sZW5ndGg7IGkrKykNCiAgICAgIHsgY2xlYXJMaW5lTWVhc3VyZW1lbnRDYWNoZUZvcihjbS5kaXNwbGF5LnZpZXdbaV0pOyB9DQogIH0NCg0KICBmdW5jdGlvbiBjbGVhckNhY2hlcyhjbSkgew0KICAgIGNsZWFyTGluZU1lYXN1cmVtZW50Q2FjaGUoY20pOw0KICAgIGNtLmRpc3BsYXkuY2FjaGVkQ2hhcldpZHRoID0gY20uZGlzcGxheS5jYWNoZWRUZXh0SGVpZ2h0ID0gY20uZGlzcGxheS5jYWNoZWRQYWRkaW5nSCA9IG51bGw7DQogICAgaWYgKCFjbS5vcHRpb25zLmxpbmVXcmFwcGluZykgeyBjbS5kaXNwbGF5Lm1heExpbmVDaGFuZ2VkID0gdHJ1ZTsgfQ0KICAgIGNtLmRpc3BsYXkubGluZU51bUNoYXJzID0gbnVsbDsNCiAgfQ0KDQogIGZ1bmN0aW9uIHBhZ2VTY3JvbGxYKCkgew0KICAgIC8vIFdvcmsgYXJvdW5kIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ4OTIwNg0KICAgIC8vIHdoaWNoIGNhdXNlcyBwYWdlX09mZnNldCBhbmQgYm91bmRpbmcgY2xpZW50IHJlY3RzIHRvIHVzZQ0KICAgIC8vIGRpZmZlcmVudCByZWZlcmVuY2Ugdmlld3BvcnRzIGFuZCBpbnZhbGlkYXRlIG91ciBjYWxjdWxhdGlvbnMuDQogICAgaWYgKGNocm9tZSAmJiBhbmRyb2lkKSB7IHJldHVybiAtKGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtIHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuYm9keSkubWFyZ2luTGVmdCkpIH0NCiAgICByZXR1cm4gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keSkuc2Nyb2xsTGVmdA0KICB9DQogIGZ1bmN0aW9uIHBhZ2VTY3JvbGxZKCkgew0KICAgIGlmIChjaHJvbWUgJiYgYW5kcm9pZCkgeyByZXR1cm4gLShkb2N1bWVudC5ib2R5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtIHBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuYm9keSkubWFyZ2luVG9wKSkgfQ0KICAgIHJldHVybiB3aW5kb3cucGFnZVlPZmZzZXQgfHwgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBkb2N1bWVudC5ib2R5KS5zY3JvbGxUb3ANCiAgfQ0KDQogIGZ1bmN0aW9uIHdpZGdldFRvcEhlaWdodChsaW5lT2JqKSB7DQogICAgdmFyIGhlaWdodCA9IDA7DQogICAgaWYgKGxpbmVPYmoud2lkZ2V0cykgeyBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVPYmoud2lkZ2V0cy5sZW5ndGg7ICsraSkgeyBpZiAobGluZU9iai53aWRnZXRzW2ldLmFib3ZlKQ0KICAgICAgeyBoZWlnaHQgKz0gd2lkZ2V0SGVpZ2h0KGxpbmVPYmoud2lkZ2V0c1tpXSk7IH0gfSB9DQogICAgcmV0dXJuIGhlaWdodA0KICB9DQoNCiAgLy8gQ29udmVydHMgYSB7dG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0fSBib3ggZnJvbSBsaW5lLWxvY2FsDQogIC8vIGNvb3JkaW5hdGVzIGludG8gYW5vdGhlciBjb29yZGluYXRlIHN5c3RlbS4gQ29udGV4dCBtYXkgYmUgb25lIG9mDQogIC8vICJsaW5lIiwgImRpdiIgKGRpc3BsYXkubGluZURpdiksICJsb2NhbCIuL251bGwgKGVkaXRvciksICJ3aW5kb3ciLA0KICAvLyBvciAicGFnZSIuDQogIGZ1bmN0aW9uIGludG9Db29yZFN5c3RlbShjbSwgbGluZU9iaiwgcmVjdCwgY29udGV4dCwgaW5jbHVkZVdpZGdldHMpIHsNCiAgICBpZiAoIWluY2x1ZGVXaWRnZXRzKSB7DQogICAgICB2YXIgaGVpZ2h0ID0gd2lkZ2V0VG9wSGVpZ2h0KGxpbmVPYmopOw0KICAgICAgcmVjdC50b3AgKz0gaGVpZ2h0OyByZWN0LmJvdHRvbSArPSBoZWlnaHQ7DQogICAgfQ0KICAgIGlmIChjb250ZXh0ID09ICJsaW5lIikgeyByZXR1cm4gcmVjdCB9DQogICAgaWYgKCFjb250ZXh0KSB7IGNvbnRleHQgPSAibG9jYWwiOyB9DQogICAgdmFyIHlPZmYgPSBoZWlnaHRBdExpbmUobGluZU9iaik7DQogICAgaWYgKGNvbnRleHQgPT0gImxvY2FsIikgeyB5T2ZmICs9IHBhZGRpbmdUb3AoY20uZGlzcGxheSk7IH0NCiAgICBlbHNlIHsgeU9mZiAtPSBjbS5kaXNwbGF5LnZpZXdPZmZzZXQ7IH0NCiAgICBpZiAoY29udGV4dCA9PSAicGFnZSIgfHwgY29udGV4dCA9PSAid2luZG93Iikgew0KICAgICAgdmFyIGxPZmYgPSBjbS5kaXNwbGF5LmxpbmVTcGFjZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsNCiAgICAgIHlPZmYgKz0gbE9mZi50b3AgKyAoY29udGV4dCA9PSAid2luZG93IiA/IDAgOiBwYWdlU2Nyb2xsWSgpKTsNCiAgICAgIHZhciB4T2ZmID0gbE9mZi5sZWZ0ICsgKGNvbnRleHQgPT0gIndpbmRvdyIgPyAwIDogcGFnZVNjcm9sbFgoKSk7DQogICAgICByZWN0LmxlZnQgKz0geE9mZjsgcmVjdC5yaWdodCArPSB4T2ZmOw0KICAgIH0NCiAgICByZWN0LnRvcCArPSB5T2ZmOyByZWN0LmJvdHRvbSArPSB5T2ZmOw0KICAgIHJldHVybiByZWN0DQogIH0NCg0KICAvLyBDb3ZlcnRzIGEgYm94IGZyb20gImRpdiIgY29vcmRzIHRvIGFub3RoZXIgY29vcmRpbmF0ZSBzeXN0ZW0uDQogIC8vIENvbnRleHQgbWF5IGJlICJ3aW5kb3ciLCAicGFnZSIsICJkaXYiLCBvciAibG9jYWwiLi9udWxsLg0KICBmdW5jdGlvbiBmcm9tQ29vcmRTeXN0ZW0oY20sIGNvb3JkcywgY29udGV4dCkgew0KICAgIGlmIChjb250ZXh0ID09ICJkaXYiKSB7IHJldHVybiBjb29yZHMgfQ0KICAgIHZhciBsZWZ0ID0gY29vcmRzLmxlZnQsIHRvcCA9IGNvb3Jkcy50b3A7DQogICAgLy8gRmlyc3QgbW92ZSBpbnRvICJwYWdlIiBjb29yZGluYXRlIHN5c3RlbQ0KICAgIGlmIChjb250ZXh0ID09ICJwYWdlIikgew0KICAgICAgbGVmdCAtPSBwYWdlU2Nyb2xsWCgpOw0KICAgICAgdG9wIC09IHBhZ2VTY3JvbGxZKCk7DQogICAgfSBlbHNlIGlmIChjb250ZXh0ID09ICJsb2NhbCIgfHwgIWNvbnRleHQpIHsNCiAgICAgIHZhciBsb2NhbEJveCA9IGNtLmRpc3BsYXkuc2l6ZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7DQogICAgICBsZWZ0ICs9IGxvY2FsQm94LmxlZnQ7DQogICAgICB0b3AgKz0gbG9jYWxCb3gudG9wOw0KICAgIH0NCg0KICAgIHZhciBsaW5lU3BhY2VCb3ggPSBjbS5kaXNwbGF5LmxpbmVTcGFjZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsNCiAgICByZXR1cm4ge2xlZnQ6IGxlZnQgLSBsaW5lU3BhY2VCb3gubGVmdCwgdG9wOiB0b3AgLSBsaW5lU3BhY2VCb3gudG9wfQ0KICB9DQoNCiAgZnVuY3Rpb24gY2hhckNvb3JkcyhjbSwgcG9zLCBjb250ZXh0LCBsaW5lT2JqLCBiaWFzKSB7DQogICAgaWYgKCFsaW5lT2JqKSB7IGxpbmVPYmogPSBnZXRMaW5lKGNtLmRvYywgcG9zLmxpbmUpOyB9DQogICAgcmV0dXJuIGludG9Db29yZFN5c3RlbShjbSwgbGluZU9iaiwgbWVhc3VyZUNoYXIoY20sIGxpbmVPYmosIHBvcy5jaCwgYmlhcyksIGNvbnRleHQpDQogIH0NCg0KICAvLyBSZXR1cm5zIGEgYm94IGZvciBhIGdpdmVuIGN1cnNvciBwb3NpdGlvbiwgd2hpY2ggbWF5IGhhdmUgYW4NCiAgLy8gJ290aGVyJyBwcm9wZXJ0eSBjb250YWluaW5nIHRoZSBwb3NpdGlvbiBvZiB0aGUgc2Vjb25kYXJ5IGN1cnNvcg0KICAvLyBvbiBhIGJpZGkgYm91bmRhcnkuDQogIC8vIEEgY3Vyc29yIFBvcyhsaW5lLCBjaGFyLCAiYmVmb3JlIikgaXMgb24gdGhlIHNhbWUgdmlzdWFsIGxpbmUgYXMgYGNoYXIgLSAxYA0KICAvLyBhbmQgYWZ0ZXIgYGNoYXIgLSAxYCBpbiB3cml0aW5nIG9yZGVyIG9mIGBjaGFyIC0gMWANCiAgLy8gQSBjdXJzb3IgUG9zKGxpbmUsIGNoYXIsICJhZnRlciIpIGlzIG9uIHRoZSBzYW1lIHZpc3VhbCBsaW5lIGFzIGBjaGFyYA0KICAvLyBhbmQgYmVmb3JlIGBjaGFyYCBpbiB3cml0aW5nIG9yZGVyIG9mIGBjaGFyYA0KICAvLyBFeGFtcGxlcyAodXBwZXItY2FzZSBsZXR0ZXJzIGFyZSBSVEwsIGxvd2VyLWNhc2UgYXJlIExUUik6DQogIC8vICAgICBQb3MoMCwgMSwgLi4uKQ0KICAvLyAgICAgYmVmb3JlICAgYWZ0ZXINCiAgLy8gYWIgICAgIGF8YiAgICAgYXxiDQogIC8vIGFCICAgICBhfEIgICAgIGFCfA0KICAvLyBBYiAgICAgfEFiICAgICBBfGINCiAgLy8gQUIgICAgIEJ8QSAgICAgQnxBDQogIC8vIEV2ZXJ5IHBvc2l0aW9uIGFmdGVyIHRoZSBsYXN0IGNoYXJhY3RlciBvbiBhIGxpbmUgaXMgY29uc2lkZXJlZCB0byBzdGljaw0KICAvLyB0byB0aGUgbGFzdCBjaGFyYWN0ZXIgb24gdGhlIGxpbmUuDQogIGZ1bmN0aW9uIGN1cnNvckNvb3JkcyhjbSwgcG9zLCBjb250ZXh0LCBsaW5lT2JqLCBwcmVwYXJlZE1lYXN1cmUsIHZhckhlaWdodCkgew0KICAgIGxpbmVPYmogPSBsaW5lT2JqIHx8IGdldExpbmUoY20uZG9jLCBwb3MubGluZSk7DQogICAgaWYgKCFwcmVwYXJlZE1lYXN1cmUpIHsgcHJlcGFyZWRNZWFzdXJlID0gcHJlcGFyZU1lYXN1cmVGb3JMaW5lKGNtLCBsaW5lT2JqKTsgfQ0KICAgIGZ1bmN0aW9uIGdldChjaCwgcmlnaHQpIHsNCiAgICAgIHZhciBtID0gbWVhc3VyZUNoYXJQcmVwYXJlZChjbSwgcHJlcGFyZWRNZWFzdXJlLCBjaCwgcmlnaHQgPyAicmlnaHQiIDogImxlZnQiLCB2YXJIZWlnaHQpOw0KICAgICAgaWYgKHJpZ2h0KSB7IG0ubGVmdCA9IG0ucmlnaHQ7IH0gZWxzZSB7IG0ucmlnaHQgPSBtLmxlZnQ7IH0NCiAgICAgIHJldHVybiBpbnRvQ29vcmRTeXN0ZW0oY20sIGxpbmVPYmosIG0sIGNvbnRleHQpDQogICAgfQ0KICAgIHZhciBvcmRlciA9IGdldE9yZGVyKGxpbmVPYmosIGNtLmRvYy5kaXJlY3Rpb24pLCBjaCA9IHBvcy5jaCwgc3RpY2t5ID0gcG9zLnN0aWNreTsNCiAgICBpZiAoY2ggPj0gbGluZU9iai50ZXh0Lmxlbmd0aCkgew0KICAgICAgY2ggPSBsaW5lT2JqLnRleHQubGVuZ3RoOw0KICAgICAgc3RpY2t5ID0gImJlZm9yZSI7DQogICAgfSBlbHNlIGlmIChjaCA8PSAwKSB7DQogICAgICBjaCA9IDA7DQogICAgICBzdGlja3kgPSAiYWZ0ZXIiOw0KICAgIH0NCiAgICBpZiAoIW9yZGVyKSB7IHJldHVybiBnZXQoc3RpY2t5ID09ICJiZWZvcmUiID8gY2ggLSAxIDogY2gsIHN0aWNreSA9PSAiYmVmb3JlIikgfQ0KDQogICAgZnVuY3Rpb24gZ2V0QmlkaShjaCwgcGFydFBvcywgaW52ZXJ0KSB7DQogICAgICB2YXIgcGFydCA9IG9yZGVyW3BhcnRQb3NdLCByaWdodCA9IHBhcnQubGV2ZWwgPT0gMTsNCiAgICAgIHJldHVybiBnZXQoaW52ZXJ0ID8gY2ggLSAxIDogY2gsIHJpZ2h0ICE9IGludmVydCkNCiAgICB9DQogICAgdmFyIHBhcnRQb3MgPSBnZXRCaWRpUGFydEF0KG9yZGVyLCBjaCwgc3RpY2t5KTsNCiAgICB2YXIgb3RoZXIgPSBiaWRpT3RoZXI7DQogICAgdmFyIHZhbCA9IGdldEJpZGkoY2gsIHBhcnRQb3MsIHN0aWNreSA9PSAiYmVmb3JlIik7DQogICAgaWYgKG90aGVyICE9IG51bGwpIHsgdmFsLm90aGVyID0gZ2V0QmlkaShjaCwgb3RoZXIsIHN0aWNreSAhPSAiYmVmb3JlIik7IH0NCiAgICByZXR1cm4gdmFsDQogIH0NCg0KICAvLyBVc2VkIHRvIGNoZWFwbHkgZXN0aW1hdGUgdGhlIGNvb3JkaW5hdGVzIGZvciBhIHBvc2l0aW9uLiBVc2VkIGZvcg0KICAvLyBpbnRlcm1lZGlhdGUgc2Nyb2xsIHVwZGF0ZXMuDQogIGZ1bmN0aW9uIGVzdGltYXRlQ29vcmRzKGNtLCBwb3MpIHsNCiAgICB2YXIgbGVmdCA9IDA7DQogICAgcG9zID0gY2xpcFBvcyhjbS5kb2MsIHBvcyk7DQogICAgaWYgKCFjbS5vcHRpb25zLmxpbmVXcmFwcGluZykgeyBsZWZ0ID0gY2hhcldpZHRoKGNtLmRpc3BsYXkpICogcG9zLmNoOyB9DQogICAgdmFyIGxpbmVPYmogPSBnZXRMaW5lKGNtLmRvYywgcG9zLmxpbmUpOw0KICAgIHZhciB0b3AgPSBoZWlnaHRBdExpbmUobGluZU9iaikgKyBwYWRkaW5nVG9wKGNtLmRpc3BsYXkpOw0KICAgIHJldHVybiB7bGVmdDogbGVmdCwgcmlnaHQ6IGxlZnQsIHRvcDogdG9wLCBib3R0b206IHRvcCArIGxpbmVPYmouaGVpZ2h0fQ0KICB9DQoNCiAgLy8gUG9zaXRpb25zIHJldHVybmVkIGJ5IGNvb3Jkc0NoYXIgY29udGFpbiBzb21lIGV4dHJhIGluZm9ybWF0aW9uLg0KICAvLyB4UmVsIGlzIHRoZSByZWxhdGl2ZSB4IHBvc2l0aW9uIG9mIHRoZSBpbnB1dCBjb29yZGluYXRlcyBjb21wYXJlZA0KICAvLyB0byB0aGUgZm91bmQgcG9zaXRpb24gKHNvIHhSZWwgPiAwIG1lYW5zIHRoZSBjb29yZGluYXRlcyBhcmUgdG8NCiAgLy8gdGhlIHJpZ2h0IG9mIHRoZSBjaGFyYWN0ZXIgcG9zaXRpb24sIGZvciBleGFtcGxlKS4gV2hlbiBvdXRzaWRlDQogIC8vIGlzIHRydWUsIHRoYXQgbWVhbnMgdGhlIGNvb3JkaW5hdGVzIGxpZSBvdXRzaWRlIHRoZSBsaW5lJ3MNCiAgLy8gdmVydGljYWwgcmFuZ2UuDQogIGZ1bmN0aW9uIFBvc1dpdGhJbmZvKGxpbmUsIGNoLCBzdGlja3ksIG91dHNpZGUsIHhSZWwpIHsNCiAgICB2YXIgcG9zID0gUG9zKGxpbmUsIGNoLCBzdGlja3kpOw0KICAgIHBvcy54UmVsID0geFJlbDsNCiAgICBpZiAob3V0c2lkZSkgeyBwb3Mub3V0c2lkZSA9IG91dHNpZGU7IH0NCiAgICByZXR1cm4gcG9zDQogIH0NCg0KICAvLyBDb21wdXRlIHRoZSBjaGFyYWN0ZXIgcG9zaXRpb24gY2xvc2VzdCB0byB0aGUgZ2l2ZW4gY29vcmRpbmF0ZXMuDQogIC8vIElucHV0IG11c3QgYmUgbGluZVNwYWNlLWxvY2FsICgiZGl2IiBjb29yZGluYXRlIHN5c3RlbSkuDQogIGZ1bmN0aW9uIGNvb3Jkc0NoYXIoY20sIHgsIHkpIHsNCiAgICB2YXIgZG9jID0gY20uZG9jOw0KICAgIHkgKz0gY20uZGlzcGxheS52aWV3T2Zmc2V0Ow0KICAgIGlmICh5IDwgMCkgeyByZXR1cm4gUG9zV2l0aEluZm8oZG9jLmZpcnN0LCAwLCBudWxsLCAtMSwgLTEpIH0NCiAgICB2YXIgbGluZU4gPSBsaW5lQXRIZWlnaHQoZG9jLCB5KSwgbGFzdCA9IGRvYy5maXJzdCArIGRvYy5zaXplIC0gMTsNCiAgICBpZiAobGluZU4gPiBsYXN0KQ0KICAgICAgeyByZXR1cm4gUG9zV2l0aEluZm8oZG9jLmZpcnN0ICsgZG9jLnNpemUgLSAxLCBnZXRMaW5lKGRvYywgbGFzdCkudGV4dC5sZW5ndGgsIG51bGwsIDEsIDEpIH0NCiAgICBpZiAoeCA8IDApIHsgeCA9IDA7IH0NCg0KICAgIHZhciBsaW5lT2JqID0gZ2V0TGluZShkb2MsIGxpbmVOKTsNCiAgICBmb3IgKDs7KSB7DQogICAgICB2YXIgZm91bmQgPSBjb29yZHNDaGFySW5uZXIoY20sIGxpbmVPYmosIGxpbmVOLCB4LCB5KTsNCiAgICAgIHZhciBjb2xsYXBzZWQgPSBjb2xsYXBzZWRTcGFuQXJvdW5kKGxpbmVPYmosIGZvdW5kLmNoICsgKGZvdW5kLnhSZWwgPiAwIHx8IGZvdW5kLm91dHNpZGUgPiAwID8gMSA6IDApKTsNCiAgICAgIGlmICghY29sbGFwc2VkKSB7IHJldHVybiBmb3VuZCB9DQogICAgICB2YXIgcmFuZ2VFbmQgPSBjb2xsYXBzZWQuZmluZCgxKTsNCiAgICAgIGlmIChyYW5nZUVuZC5saW5lID09IGxpbmVOKSB7IHJldHVybiByYW5nZUVuZCB9DQogICAgICBsaW5lT2JqID0gZ2V0TGluZShkb2MsIGxpbmVOID0gcmFuZ2VFbmQubGluZSk7DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gd3JhcHBlZExpbmVFeHRlbnQoY20sIGxpbmVPYmosIHByZXBhcmVkTWVhc3VyZSwgeSkgew0KICAgIHkgLT0gd2lkZ2V0VG9wSGVpZ2h0KGxpbmVPYmopOw0KICAgIHZhciBlbmQgPSBsaW5lT2JqLnRleHQubGVuZ3RoOw0KICAgIHZhciBiZWdpbiA9IGZpbmRGaXJzdChmdW5jdGlvbiAoY2gpIHsgcmV0dXJuIG1lYXN1cmVDaGFyUHJlcGFyZWQoY20sIHByZXBhcmVkTWVhc3VyZSwgY2ggLSAxKS5ib3R0b20gPD0geTsgfSwgZW5kLCAwKTsNCiAgICBlbmQgPSBmaW5kRmlyc3QoZnVuY3Rpb24gKGNoKSB7IHJldHVybiBtZWFzdXJlQ2hhclByZXBhcmVkKGNtLCBwcmVwYXJlZE1lYXN1cmUsIGNoKS50b3AgPiB5OyB9LCBiZWdpbiwgZW5kKTsNCiAgICByZXR1cm4ge2JlZ2luOiBiZWdpbiwgZW5kOiBlbmR9DQogIH0NCg0KICBmdW5jdGlvbiB3cmFwcGVkTGluZUV4dGVudENoYXIoY20sIGxpbmVPYmosIHByZXBhcmVkTWVhc3VyZSwgdGFyZ2V0KSB7DQogICAgaWYgKCFwcmVwYXJlZE1lYXN1cmUpIHsgcHJlcGFyZWRNZWFzdXJlID0gcHJlcGFyZU1lYXN1cmVGb3JMaW5lKGNtLCBsaW5lT2JqKTsgfQ0KICAgIHZhciB0YXJnZXRUb3AgPSBpbnRvQ29vcmRTeXN0ZW0oY20sIGxpbmVPYmosIG1lYXN1cmVDaGFyUHJlcGFyZWQoY20sIHByZXBhcmVkTWVhc3VyZSwgdGFyZ2V0KSwgImxpbmUiKS50b3A7DQogICAgcmV0dXJuIHdyYXBwZWRMaW5lRXh0ZW50KGNtLCBsaW5lT2JqLCBwcmVwYXJlZE1lYXN1cmUsIHRhcmdldFRvcCkNCiAgfQ0KDQogIC8vIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gc2lkZSBvZiBhIGJveCBpcyBhZnRlciB0aGUgZ2l2ZW4NCiAgLy8gY29vcmRpbmF0ZXMsIGluIHRvcC10by1ib3R0b20sIGxlZnQtdG8tcmlnaHQgb3JkZXIuDQogIGZ1bmN0aW9uIGJveElzQWZ0ZXIoYm94LCB4LCB5LCBsZWZ0KSB7DQogICAgcmV0dXJuIGJveC5ib3R0b20gPD0geSA/IGZhbHNlIDogYm94LnRvcCA+IHkgPyB0cnVlIDogKGxlZnQgPyBib3gubGVmdCA6IGJveC5yaWdodCkgPiB4DQogIH0NCg0KICBmdW5jdGlvbiBjb29yZHNDaGFySW5uZXIoY20sIGxpbmVPYmosIGxpbmVObyQkMSwgeCwgeSkgew0KICAgIC8vIE1vdmUgeSBpbnRvIGxpbmUtbG9jYWwgY29vcmRpbmF0ZSBzcGFjZQ0KICAgIHkgLT0gaGVpZ2h0QXRMaW5lKGxpbmVPYmopOw0KICAgIHZhciBwcmVwYXJlZE1lYXN1cmUgPSBwcmVwYXJlTWVhc3VyZUZvckxpbmUoY20sIGxpbmVPYmopOw0KICAgIC8vIFdoZW4gZGlyZWN0bHkgY2FsbGluZyBgbWVhc3VyZUNoYXJQcmVwYXJlZGAsIHdlIGhhdmUgdG8gYWRqdXN0DQogICAgLy8gZm9yIHRoZSB3aWRnZXRzIGF0IHRoaXMgbGluZS4NCiAgICB2YXIgd2lkZ2V0SGVpZ2h0JCQxID0gd2lkZ2V0VG9wSGVpZ2h0KGxpbmVPYmopOw0KICAgIHZhciBiZWdpbiA9IDAsIGVuZCA9IGxpbmVPYmoudGV4dC5sZW5ndGgsIGx0ciA9IHRydWU7DQoNCiAgICB2YXIgb3JkZXIgPSBnZXRPcmRlcihsaW5lT2JqLCBjbS5kb2MuZGlyZWN0aW9uKTsNCiAgICAvLyBJZiB0aGUgbGluZSBpc24ndCBwbGFpbiBsZWZ0LXRvLXJpZ2h0IHRleHQsIGZpcnN0IGZpZ3VyZSBvdXQNCiAgICAvLyB3aGljaCBiaWRpIHNlY3Rpb24gdGhlIGNvb3JkaW5hdGVzIGZhbGwgaW50by4NCiAgICBpZiAob3JkZXIpIHsNCiAgICAgIHZhciBwYXJ0ID0gKGNtLm9wdGlvbnMubGluZVdyYXBwaW5nID8gY29vcmRzQmlkaVBhcnRXcmFwcGVkIDogY29vcmRzQmlkaVBhcnQpDQogICAgICAgICAgICAgICAgICAgKGNtLCBsaW5lT2JqLCBsaW5lTm8kJDEsIHByZXBhcmVkTWVhc3VyZSwgb3JkZXIsIHgsIHkpOw0KICAgICAgbHRyID0gcGFydC5sZXZlbCAhPSAxOw0KICAgICAgLy8gVGhlIGF3a3dhcmQgLTEgb2Zmc2V0cyBhcmUgbmVlZGVkIGJlY2F1c2UgZmluZEZpcnN0IChjYWxsZWQNCiAgICAgIC8vIG9uIHRoZXNlIGJlbG93KSB3aWxsIHRyZWF0IGl0cyBmaXJzdCBib3VuZCBhcyBpbmNsdXNpdmUsDQogICAgICAvLyBzZWNvbmQgYXMgZXhjbHVzaXZlLCBidXQgd2Ugd2FudCB0byBhY3R1YWxseSBhZGRyZXNzIHRoZQ0KICAgICAgLy8gY2hhcmFjdGVycyBpbiB0aGUgcGFydCdzIHJhbmdlDQogICAgICBiZWdpbiA9IGx0ciA/IHBhcnQuZnJvbSA6IHBhcnQudG8gLSAxOw0KICAgICAgZW5kID0gbHRyID8gcGFydC50byA6IHBhcnQuZnJvbSAtIDE7DQogICAgfQ0KDQogICAgLy8gQSBiaW5hcnkgc2VhcmNoIHRvIGZpbmQgdGhlIGZpcnN0IGNoYXJhY3RlciB3aG9zZSBib3VuZGluZyBib3gNCiAgICAvLyBzdGFydHMgYWZ0ZXIgdGhlIGNvb3JkaW5hdGVzLiBJZiB3ZSBydW4gYWNyb3NzIGFueSB3aG9zZSBib3ggd3JhcA0KICAgIC8vIHRoZSBjb29yZGluYXRlcywgc3RvcmUgdGhhdC4NCiAgICB2YXIgY2hBcm91bmQgPSBudWxsLCBib3hBcm91bmQgPSBudWxsOw0KICAgIHZhciBjaCA9IGZpbmRGaXJzdChmdW5jdGlvbiAoY2gpIHsNCiAgICAgIHZhciBib3ggPSBtZWFzdXJlQ2hhclByZXBhcmVkKGNtLCBwcmVwYXJlZE1lYXN1cmUsIGNoKTsNCiAgICAgIGJveC50b3AgKz0gd2lkZ2V0SGVpZ2h0JCQxOyBib3guYm90dG9tICs9IHdpZGdldEhlaWdodCQkMTsNCiAgICAgIGlmICghYm94SXNBZnRlcihib3gsIHgsIHksIGZhbHNlKSkgeyByZXR1cm4gZmFsc2UgfQ0KICAgICAgaWYgKGJveC50b3AgPD0geSAmJiBib3gubGVmdCA8PSB4KSB7DQogICAgICAgIGNoQXJvdW5kID0gY2g7DQogICAgICAgIGJveEFyb3VuZCA9IGJveDsNCiAgICAgIH0NCiAgICAgIHJldHVybiB0cnVlDQogICAgfSwgYmVnaW4sIGVuZCk7DQoNCiAgICB2YXIgYmFzZVgsIHN0aWNreSwgb3V0c2lkZSA9IGZhbHNlOw0KICAgIC8vIElmIGEgYm94IGFyb3VuZCB0aGUgY29vcmRpbmF0ZXMgd2FzIGZvdW5kLCB1c2UgdGhhdA0KICAgIGlmIChib3hBcm91bmQpIHsNCiAgICAgIC8vIERpc3Rpbmd1aXNoIGNvb3JkaW5hdGVzIG5lYXJlciB0byB0aGUgbGVmdCBvciByaWdodCBzaWRlIG9mIHRoZSBib3gNCiAgICAgIHZhciBhdExlZnQgPSB4IC0gYm94QXJvdW5kLmxlZnQgPCBib3hBcm91bmQucmlnaHQgLSB4LCBhdFN0YXJ0ID0gYXRMZWZ0ID09IGx0cjsNCiAgICAgIGNoID0gY2hBcm91bmQgKyAoYXRTdGFydCA/IDAgOiAxKTsNCiAgICAgIHN0aWNreSA9IGF0U3RhcnQgPyAiYWZ0ZXIiIDogImJlZm9yZSI7DQogICAgICBiYXNlWCA9IGF0TGVmdCA/IGJveEFyb3VuZC5sZWZ0IDogYm94QXJvdW5kLnJpZ2h0Ow0KICAgIH0gZWxzZSB7DQogICAgICAvLyAoQWRqdXN0IGZvciBleHRlbmRlZCBib3VuZCwgaWYgbmVjZXNzYXJ5LikNCiAgICAgIGlmICghbHRyICYmIChjaCA9PSBlbmQgfHwgY2ggPT0gYmVnaW4pKSB7IGNoKys7IH0NCiAgICAgIC8vIFRvIGRldGVybWluZSB3aGljaCBzaWRlIHRvIGFzc29jaWF0ZSB3aXRoLCBnZXQgdGhlIGJveCB0byB0aGUNCiAgICAgIC8vIGxlZnQgb2YgdGhlIGNoYXJhY3RlciBhbmQgY29tcGFyZSBpdCdzIHZlcnRpY2FsIHBvc2l0aW9uIHRvIHRoZQ0KICAgICAgLy8gY29vcmRpbmF0ZXMNCiAgICAgIHN0aWNreSA9IGNoID09IDAgPyAiYWZ0ZXIiIDogY2ggPT0gbGluZU9iai50ZXh0Lmxlbmd0aCA/ICJiZWZvcmUiIDoNCiAgICAgICAgKG1lYXN1cmVDaGFyUHJlcGFyZWQoY20sIHByZXBhcmVkTWVhc3VyZSwgY2ggLSAobHRyID8gMSA6IDApKS5ib3R0b20gKyB3aWRnZXRIZWlnaHQkJDEgPD0geSkgPT0gbHRyID8NCiAgICAgICAgImFmdGVyIiA6ICJiZWZvcmUiOw0KICAgICAgLy8gTm93IGdldCBhY2N1cmF0ZSBjb29yZGluYXRlcyBmb3IgdGhpcyBwbGFjZSwgaW4gb3JkZXIgdG8gZ2V0IGENCiAgICAgIC8vIGJhc2UgWCBwb3NpdGlvbg0KICAgICAgdmFyIGNvb3JkcyA9IGN1cnNvckNvb3JkcyhjbSwgUG9zKGxpbmVObyQkMSwgY2gsIHN0aWNreSksICJsaW5lIiwgbGluZU9iaiwgcHJlcGFyZWRNZWFzdXJlKTsNCiAgICAgIGJhc2VYID0gY29vcmRzLmxlZnQ7DQogICAgICBvdXRzaWRlID0geSA8IGNvb3Jkcy50b3AgPyAtMSA6IHkgPj0gY29vcmRzLmJvdHRvbSA/IDEgOiAwOw0KICAgIH0NCg0KICAgIGNoID0gc2tpcEV4dGVuZGluZ0NoYXJzKGxpbmVPYmoudGV4dCwgY2gsIDEpOw0KICAgIHJldHVybiBQb3NXaXRoSW5mbyhsaW5lTm8kJDEsIGNoLCBzdGlja3ksIG91dHNpZGUsIHggLSBiYXNlWCkNCiAgfQ0KDQogIGZ1bmN0aW9uIGNvb3Jkc0JpZGlQYXJ0KGNtLCBsaW5lT2JqLCBsaW5lTm8kJDEsIHByZXBhcmVkTWVhc3VyZSwgb3JkZXIsIHgsIHkpIHsNCiAgICAvLyBCaWRpIHBhcnRzIGFyZSBzb3J0ZWQgbGVmdC10by1yaWdodCwgYW5kIGluIGEgbm9uLWxpbmUtd3JhcHBpbmcNCiAgICAvLyBzaXR1YXRpb24sIHdlIGNhbiB0YWtlIHRoaXMgb3JkZXJpbmcgdG8gY29ycmVzcG9uZCB0byB0aGUgdmlzdWFsDQogICAgLy8gb3JkZXJpbmcuIFRoaXMgZmluZHMgdGhlIGZpcnN0IHBhcnQgd2hvc2UgZW5kIGlzIGFmdGVyIHRoZSBnaXZlbg0KICAgIC8vIGNvb3JkaW5hdGVzLg0KICAgIHZhciBpbmRleCA9IGZpbmRGaXJzdChmdW5jdGlvbiAoaSkgew0KICAgICAgdmFyIHBhcnQgPSBvcmRlcltpXSwgbHRyID0gcGFydC5sZXZlbCAhPSAxOw0KICAgICAgcmV0dXJuIGJveElzQWZ0ZXIoY3Vyc29yQ29vcmRzKGNtLCBQb3MobGluZU5vJCQxLCBsdHIgPyBwYXJ0LnRvIDogcGFydC5mcm9tLCBsdHIgPyAiYmVmb3JlIiA6ICJhZnRlciIpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsaW5lIiwgbGluZU9iaiwgcHJlcGFyZWRNZWFzdXJlKSwgeCwgeSwgdHJ1ZSkNCiAgICB9LCAwLCBvcmRlci5sZW5ndGggLSAxKTsNCiAgICB2YXIgcGFydCA9IG9yZGVyW2luZGV4XTsNCiAgICAvLyBJZiB0aGlzIGlzbid0IHRoZSBmaXJzdCBwYXJ0LCB0aGUgcGFydCdzIHN0YXJ0IGlzIGFsc28gYWZ0ZXINCiAgICAvLyB0aGUgY29vcmRpbmF0ZXMsIGFuZCB0aGUgY29vcmRpbmF0ZXMgYXJlbid0IG9uIHRoZSBzYW1lIGxpbmUgYXMNCiAgICAvLyB0aGF0IHN0YXJ0LCBtb3ZlIG9uZSBwYXJ0IGJhY2suDQogICAgaWYgKGluZGV4ID4gMCkgew0KICAgICAgdmFyIGx0ciA9IHBhcnQubGV2ZWwgIT0gMTsNCiAgICAgIHZhciBzdGFydCA9IGN1cnNvckNvb3JkcyhjbSwgUG9zKGxpbmVObyQkMSwgbHRyID8gcGFydC5mcm9tIDogcGFydC50bywgbHRyID8gImFmdGVyIiA6ICJiZWZvcmUiKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibGluZSIsIGxpbmVPYmosIHByZXBhcmVkTWVhc3VyZSk7DQogICAgICBpZiAoYm94SXNBZnRlcihzdGFydCwgeCwgeSwgdHJ1ZSkgJiYgc3RhcnQudG9wID4geSkNCiAgICAgICAgeyBwYXJ0ID0gb3JkZXJbaW5kZXggLSAxXTsgfQ0KICAgIH0NCiAgICByZXR1cm4gcGFydA0KICB9DQoNCiAgZnVuY3Rpb24gY29vcmRzQmlkaVBhcnRXcmFwcGVkKGNtLCBsaW5lT2JqLCBfbGluZU5vLCBwcmVwYXJlZE1lYXN1cmUsIG9yZGVyLCB4LCB5KSB7DQogICAgLy8gSW4gYSB3cmFwcGVkIGxpbmUsIHJ0bCB0ZXh0IG9uIHdyYXBwaW5nIGJvdW5kYXJpZXMgY2FuIGRvIHRoaW5ncw0KICAgIC8vIHRoYXQgZG9uJ3QgY29ycmVzcG9uZCB0byB0aGUgb3JkZXJpbmcgaW4gb3VyIGBvcmRlcmAgYXJyYXkgYXQNCiAgICAvLyBhbGwsIHNvIGEgYmluYXJ5IHNlYXJjaCBkb2Vzbid0IHdvcmssIGFuZCB3ZSB3YW50IHRvIHJldHVybiBhDQogICAgLy8gcGFydCB0aGF0IG9ubHkgc3BhbnMgb25lIGxpbmUgc28gdGhhdCB0aGUgYmluYXJ5IHNlYXJjaCBpbg0KICAgIC8vIGNvb3Jkc0NoYXJJbm5lciBpcyBzYWZlLiBBcyBzdWNoLCB3ZSBmaXJzdCBmaW5kIHRoZSBleHRlbnQgb2YgdGhlDQogICAgLy8gd3JhcHBlZCBsaW5lLCBhbmQgdGhlbiBkbyBhIGZsYXQgc2VhcmNoIGluIHdoaWNoIHdlIGRpc2NhcmQgYW55DQogICAgLy8gc3BhbnMgdGhhdCBhcmVuJ3Qgb24gdGhlIGxpbmUuDQogICAgdmFyIHJlZiA9IHdyYXBwZWRMaW5lRXh0ZW50KGNtLCBsaW5lT2JqLCBwcmVwYXJlZE1lYXN1cmUsIHkpOw0KICAgIHZhciBiZWdpbiA9IHJlZi5iZWdpbjsNCiAgICB2YXIgZW5kID0gcmVmLmVuZDsNCiAgICBpZiAoL1xzLy50ZXN0KGxpbmVPYmoudGV4dC5jaGFyQXQoZW5kIC0gMSkpKSB7IGVuZC0tOyB9DQogICAgdmFyIHBhcnQgPSBudWxsLCBjbG9zZXN0RGlzdCA9IG51bGw7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmRlci5sZW5ndGg7IGkrKykgew0KICAgICAgdmFyIHAgPSBvcmRlcltpXTsNCiAgICAgIGlmIChwLmZyb20gPj0gZW5kIHx8IHAudG8gPD0gYmVnaW4pIHsgY29udGludWUgfQ0KICAgICAgdmFyIGx0ciA9IHAubGV2ZWwgIT0gMTsNCiAgICAgIHZhciBlbmRYID0gbWVhc3VyZUNoYXJQcmVwYXJlZChjbSwgcHJlcGFyZWRNZWFzdXJlLCBsdHIgPyBNYXRoLm1pbihlbmQsIHAudG8pIC0gMSA6IE1hdGgubWF4KGJlZ2luLCBwLmZyb20pKS5yaWdodDsNCiAgICAgIC8vIFdlaWdoIGFnYWluc3Qgc3BhbnMgZW5kaW5nIGJlZm9yZSB0aGlzLCBzbyB0aGF0IHRoZXkgYXJlIG9ubHkNCiAgICAgIC8vIHBpY2tlZCBpZiBub3RoaW5nIGVuZHMgYWZ0ZXINCiAgICAgIHZhciBkaXN0ID0gZW5kWCA8IHggPyB4IC0gZW5kWCArIDFlOSA6IGVuZFggLSB4Ow0KICAgICAgaWYgKCFwYXJ0IHx8IGNsb3Nlc3REaXN0ID4gZGlzdCkgew0KICAgICAgICBwYXJ0ID0gcDsNCiAgICAgICAgY2xvc2VzdERpc3QgPSBkaXN0Ow0KICAgICAgfQ0KICAgIH0NCiAgICBpZiAoIXBhcnQpIHsgcGFydCA9IG9yZGVyW29yZGVyLmxlbmd0aCAtIDFdOyB9DQogICAgLy8gQ2xpcCB0aGUgcGFydCB0byB0aGUgd3JhcHBlZCBsaW5lLg0KICAgIGlmIChwYXJ0LmZyb20gPCBiZWdpbikgeyBwYXJ0ID0ge2Zyb206IGJlZ2luLCB0bzogcGFydC50bywgbGV2ZWw6IHBhcnQubGV2ZWx9OyB9DQogICAgaWYgKHBhcnQudG8gPiBlbmQpIHsgcGFydCA9IHtmcm9tOiBwYXJ0LmZyb20sIHRvOiBlbmQsIGxldmVsOiBwYXJ0LmxldmVsfTsgfQ0KICAgIHJldHVybiBwYXJ0DQogIH0NCg0KICB2YXIgbWVhc3VyZVRleHQ7DQogIC8vIENvbXB1dGUgdGhlIGRlZmF1bHQgdGV4dCBoZWlnaHQuDQogIGZ1bmN0aW9uIHRleHRIZWlnaHQoZGlzcGxheSkgew0KICAgIGlmIChkaXNwbGF5LmNhY2hlZFRleHRIZWlnaHQgIT0gbnVsbCkgeyByZXR1cm4gZGlzcGxheS5jYWNoZWRUZXh0SGVpZ2h0IH0NCiAgICBpZiAobWVhc3VyZVRleHQgPT0gbnVsbCkgew0KICAgICAgbWVhc3VyZVRleHQgPSBlbHQoInByZSIsIG51bGwsICJDb2RlTWlycm9yLWxpbmUtbGlrZSIpOw0KICAgICAgLy8gTWVhc3VyZSBhIGJ1bmNoIG9mIGxpbmVzLCBmb3IgYnJvd3NlcnMgdGhhdCBjb21wdXRlDQogICAgICAvLyBmcmFjdGlvbmFsIGhlaWdodHMuDQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ5OyArK2kpIHsNCiAgICAgICAgbWVhc3VyZVRleHQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIngiKSk7DQogICAgICAgIG1lYXN1cmVUZXh0LmFwcGVuZENoaWxkKGVsdCgiYnIiKSk7DQogICAgICB9DQogICAgICBtZWFzdXJlVGV4dC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgieCIpKTsNCiAgICB9DQogICAgcmVtb3ZlQ2hpbGRyZW5BbmRBZGQoZGlzcGxheS5tZWFzdXJlLCBtZWFzdXJlVGV4dCk7DQogICAgdmFyIGhlaWdodCA9IG1lYXN1cmVUZXh0Lm9mZnNldEhlaWdodCAvIDUwOw0KICAgIGlmIChoZWlnaHQgPiAzKSB7IGRpc3BsYXkuY2FjaGVkVGV4dEhlaWdodCA9IGhlaWdodDsgfQ0KICAgIHJlbW92ZUNoaWxkcmVuKGRpc3BsYXkubWVhc3VyZSk7DQogICAgcmV0dXJuIGhlaWdodCB8fCAxDQogIH0NCg0KICAvLyBDb21wdXRlIHRoZSBkZWZhdWx0IGNoYXJhY3RlciB3aWR0aC4NCiAgZnVuY3Rpb24gY2hhcldpZHRoKGRpc3BsYXkpIHsNCiAgICBpZiAoZGlzcGxheS5jYWNoZWRDaGFyV2lkdGggIT0gbnVsbCkgeyByZXR1cm4gZGlzcGxheS5jYWNoZWRDaGFyV2lkdGggfQ0KICAgIHZhciBhbmNob3IgPSBlbHQoInNwYW4iLCAieHh4eHh4eHh4eCIpOw0KICAgIHZhciBwcmUgPSBlbHQoInByZSIsIFthbmNob3JdLCAiQ29kZU1pcnJvci1saW5lLWxpa2UiKTsNCiAgICByZW1vdmVDaGlsZHJlbkFuZEFkZChkaXNwbGF5Lm1lYXN1cmUsIHByZSk7DQogICAgdmFyIHJlY3QgPSBhbmNob3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHdpZHRoID0gKHJlY3QucmlnaHQgLSByZWN0LmxlZnQpIC8gMTA7DQogICAgaWYgKHdpZHRoID4gMikgeyBkaXNwbGF5LmNhY2hlZENoYXJXaWR0aCA9IHdpZHRoOyB9DQogICAgcmV0dXJuIHdpZHRoIHx8IDEwDQogIH0NCg0KICAvLyBEbyBhIGJ1bGstcmVhZCBvZiB0aGUgRE9NIHBvc2l0aW9ucyBhbmQgc2l6ZXMgbmVlZGVkIHRvIGRyYXcgdGhlDQogIC8vIHZpZXcsIHNvIHRoYXQgd2UgZG9uJ3QgaW50ZXJsZWF2ZSByZWFkaW5nIGFuZCB3cml0aW5nIHRvIHRoZSBET00uDQogIGZ1bmN0aW9uIGdldERpbWVuc2lvbnMoY20pIHsNCiAgICB2YXIgZCA9IGNtLmRpc3BsYXksIGxlZnQgPSB7fSwgd2lkdGggPSB7fTsNCiAgICB2YXIgZ3V0dGVyTGVmdCA9IGQuZ3V0dGVycy5jbGllbnRMZWZ0Ow0KICAgIGZvciAodmFyIG4gPSBkLmd1dHRlcnMuZmlyc3RDaGlsZCwgaSA9IDA7IG47IG4gPSBuLm5leHRTaWJsaW5nLCArK2kpIHsNCiAgICAgIHZhciBpZCA9IGNtLmRpc3BsYXkuZ3V0dGVyU3BlY3NbaV0uY2xhc3NOYW1lOw0KICAgICAgbGVmdFtpZF0gPSBuLm9mZnNldExlZnQgKyBuLmNsaWVudExlZnQgKyBndXR0ZXJMZWZ0Ow0KICAgICAgd2lkdGhbaWRdID0gbi5jbGllbnRXaWR0aDsNCiAgICB9DQogICAgcmV0dXJuIHtmaXhlZFBvczogY29tcGVuc2F0ZUZvckhTY3JvbGwoZCksDQogICAgICAgICAgICBndXR0ZXJUb3RhbFdpZHRoOiBkLmd1dHRlcnMub2Zmc2V0V2lkdGgsDQogICAgICAgICAgICBndXR0ZXJMZWZ0OiBsZWZ0LA0KICAgICAgICAgICAgZ3V0dGVyV2lkdGg6IHdpZHRoLA0KICAgICAgICAgICAgd3JhcHBlcldpZHRoOiBkLndyYXBwZXIuY2xpZW50V2lkdGh9DQogIH0NCg0KICAvLyBDb21wdXRlcyBkaXNwbGF5LnNjcm9sbGVyLnNjcm9sbExlZnQgKyBkaXNwbGF5Lmd1dHRlcnMub2Zmc2V0V2lkdGgsDQogIC8vIGJ1dCB1c2luZyBnZXRCb3VuZGluZ0NsaWVudFJlY3QgdG8gZ2V0IGEgc3ViLXBpeGVsLWFjY3VyYXRlDQogIC8vIHJlc3VsdC4NCiAgZnVuY3Rpb24gY29tcGVuc2F0ZUZvckhTY3JvbGwoZGlzcGxheSkgew0KICAgIHJldHVybiBkaXNwbGF5LnNjcm9sbGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSBkaXNwbGF5LnNpemVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQNCiAgfQ0KDQogIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGVzdGltYXRlcyB0aGUgaGVpZ2h0IG9mIGEgbGluZSwgdG8gdXNlIGFzDQogIC8vIGZpcnN0IGFwcHJveGltYXRpb24gdW50aWwgdGhlIGxpbmUgYmVjb21lcyB2aXNpYmxlIChhbmQgaXMgdGh1cw0KICAvLyBwcm9wZXJseSBtZWFzdXJhYmxlKS4NCiAgZnVuY3Rpb24gZXN0aW1hdGVIZWlnaHQoY20pIHsNCiAgICB2YXIgdGggPSB0ZXh0SGVpZ2h0KGNtLmRpc3BsYXkpLCB3cmFwcGluZyA9IGNtLm9wdGlvbnMubGluZVdyYXBwaW5nOw0KICAgIHZhciBwZXJMaW5lID0gd3JhcHBpbmcgJiYgTWF0aC5tYXgoNSwgY20uZGlzcGxheS5zY3JvbGxlci5jbGllbnRXaWR0aCAvIGNoYXJXaWR0aChjbS5kaXNwbGF5KSAtIDMpOw0KICAgIHJldHVybiBmdW5jdGlvbiAobGluZSkgew0KICAgICAgaWYgKGxpbmVJc0hpZGRlbihjbS5kb2MsIGxpbmUpKSB7IHJldHVybiAwIH0NCg0KICAgICAgdmFyIHdpZGdldHNIZWlnaHQgPSAwOw0KICAgICAgaWYgKGxpbmUud2lkZ2V0cykgeyBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmUud2lkZ2V0cy5sZW5ndGg7IGkrKykgew0KICAgICAgICBpZiAobGluZS53aWRnZXRzW2ldLmhlaWdodCkgeyB3aWRnZXRzSGVpZ2h0ICs9IGxpbmUud2lkZ2V0c1tpXS5oZWlnaHQ7IH0NCiAgICAgIH0gfQ0KDQogICAgICBpZiAod3JhcHBpbmcpDQogICAgICAgIHsgcmV0dXJuIHdpZGdldHNIZWlnaHQgKyAoTWF0aC5jZWlsKGxpbmUudGV4dC5sZW5ndGggLyBwZXJMaW5lKSB8fCAxKSAqIHRoIH0NCiAgICAgIGVsc2UNCiAgICAgICAgeyByZXR1cm4gd2lkZ2V0c0hlaWdodCArIHRoIH0NCiAgICB9DQogIH0NCg0KICBmdW5jdGlvbiBlc3RpbWF0ZUxpbmVIZWlnaHRzKGNtKSB7DQogICAgdmFyIGRvYyA9IGNtLmRvYywgZXN0ID0gZXN0aW1hdGVIZWlnaHQoY20pOw0KICAgIGRvYy5pdGVyKGZ1bmN0aW9uIChsaW5lKSB7DQogICAgICB2YXIgZXN0SGVpZ2h0ID0gZXN0KGxpbmUpOw0KICAgICAgaWYgKGVzdEhlaWdodCAhPSBsaW5lLmhlaWdodCkgeyB1cGRhdGVMaW5lSGVpZ2h0KGxpbmUsIGVzdEhlaWdodCk7IH0NCiAgICB9KTsNCiAgfQ0KDQogIC8vIEdpdmVuIGEgbW91c2UgZXZlbnQsIGZpbmQgdGhlIGNvcnJlc3BvbmRpbmcgcG9zaXRpb24uIElmIGxpYmVyYWwNCiAgLy8gaXMgZmFsc2UsIGl0IGNoZWNrcyB3aGV0aGVyIGEgZ3V0dGVyIG9yIHNjcm9sbGJhciB3YXMgY2xpY2tlZCwNCiAgLy8gYW5kIHJldHVybnMgbnVsbCBpZiBpdCB3YXMuIGZvclJlY3QgaXMgdXNlZCBieSByZWN0YW5ndWxhcg0KICAvLyBzZWxlY3Rpb25zLCBhbmQgdHJpZXMgdG8gZXN0aW1hdGUgYSBjaGFyYWN0ZXIgcG9zaXRpb24gZXZlbiBmb3INCiAgLy8gY29vcmRpbmF0ZXMgYmV5b25kIHRoZSByaWdodCBvZiB0aGUgdGV4dC4NCiAgZnVuY3Rpb24gcG9zRnJvbU1vdXNlKGNtLCBlLCBsaWJlcmFsLCBmb3JSZWN0KSB7DQogICAgdmFyIGRpc3BsYXkgPSBjbS5kaXNwbGF5Ow0KICAgIGlmICghbGliZXJhbCAmJiBlX3RhcmdldChlKS5nZXRBdHRyaWJ1dGUoImNtLW5vdC1jb250ZW50IikgPT0gInRydWUiKSB7IHJldHVybiBudWxsIH0NCg0KICAgIHZhciB4LCB5LCBzcGFjZSA9IGRpc3BsYXkubGluZVNwYWNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOw0KICAgIC8vIEZhaWxzIHVucHJlZGljdGFibHkgb24gSUVbNjddIHdoZW4gbW91c2UgaXMgZHJhZ2dlZCBhcm91bmQgcXVpY2tseS4NCiAgICB0cnkgeyB4ID0gZS5jbGllbnRYIC0gc3BhY2UubGVmdDsgeSA9IGUuY2xpZW50WSAtIHNwYWNlLnRvcDsgfQ0KICAgIGNhdGNoIChlKSB7IHJldHVybiBudWxsIH0NCiAgICB2YXIgY29vcmRzID0gY29vcmRzQ2hhcihjbSwgeCwgeSksIGxpbmU7DQogICAgaWYgKGZvclJlY3QgJiYgY29vcmRzLnhSZWwgPiAwICYmIChsaW5lID0gZ2V0TGluZShjbS5kb2MsIGNvb3Jkcy5saW5lKS50ZXh0KS5sZW5ndGggPT0gY29vcmRzLmNoKSB7DQogICAgICB2YXIgY29sRGlmZiA9IGNvdW50Q29sdW1uKGxpbmUsIGxpbmUubGVuZ3RoLCBjbS5vcHRpb25zLnRhYlNpemUpIC0gbGluZS5sZW5ndGg7DQogICAgICBjb29yZHMgPSBQb3MoY29vcmRzLmxpbmUsIE1hdGgubWF4KDAsIE1hdGgucm91bmQoKHggLSBwYWRkaW5nSChjbS5kaXNwbGF5KS5sZWZ0KSAvIGNoYXJXaWR0aChjbS5kaXNwbGF5KSkgLSBjb2xEaWZmKSk7DQogICAgfQ0KICAgIHJldHVybiBjb29yZHMNCiAgfQ0KDQogIC8vIEZpbmQgdGhlIHZpZXcgZWxlbWVudCBjb3JyZXNwb25kaW5nIHRvIGEgZ2l2ZW4gbGluZS4gUmV0dXJuIG51bGwNCiAgLy8gd2hlbiB0aGUgbGluZSBpc24ndCB2aXNpYmxlLg0KICBmdW5jdGlvbiBmaW5kVmlld0luZGV4KGNtLCBuKSB7DQogICAgaWYgKG4gPj0gY20uZGlzcGxheS52aWV3VG8pIHsgcmV0dXJuIG51bGwgfQ0KICAgIG4gLT0gY20uZGlzcGxheS52aWV3RnJvbTsNCiAgICBpZiAobiA8IDApIHsgcmV0dXJuIG51bGwgfQ0KICAgIHZhciB2aWV3ID0gY20uZGlzcGxheS52aWV3Ow0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykgew0KICAgICAgbiAtPSB2aWV3W2ldLnNpemU7DQogICAgICBpZiAobiA8IDApIHsgcmV0dXJuIGkgfQ0KICAgIH0NCiAgfQ0KDQogIC8vIFVwZGF0ZXMgdGhlIGRpc3BsYXkudmlldyBkYXRhIHN0cnVjdHVyZSBmb3IgYSBnaXZlbiBjaGFuZ2UgdG8gdGhlDQogIC8vIGRvY3VtZW50LiBGcm9tIGFuZCB0byBhcmUgaW4gcHJlLWNoYW5nZSBjb29yZGluYXRlcy4gTGVuZGlmZiBpcw0KICAvLyB0aGUgYW1vdW50IG9mIGxpbmVzIGFkZGVkIG9yIHN1YnRyYWN0ZWQgYnkgdGhlIGNoYW5nZS4gVGhpcyBpcw0KICAvLyB1c2VkIGZvciBjaGFuZ2VzIHRoYXQgc3BhbiBtdWx0aXBsZSBsaW5lcywgb3IgY2hhbmdlIHRoZSB3YXkNCiAgLy8gbGluZXMgYXJlIGRpdmlkZWQgaW50byB2aXN1YWwgbGluZXMuIHJlZ0xpbmVDaGFuZ2UgKGJlbG93KQ0KICAvLyByZWdpc3RlcnMgc2luZ2xlLWxpbmUgY2hhbmdlcy4NCiAgZnVuY3Rpb24gcmVnQ2hhbmdlKGNtLCBmcm9tLCB0bywgbGVuZGlmZikgew0KICAgIGlmIChmcm9tID09IG51bGwpIHsgZnJvbSA9IGNtLmRvYy5maXJzdDsgfQ0KICAgIGlmICh0byA9PSBudWxsKSB7IHRvID0gY20uZG9jLmZpcnN0ICsgY20uZG9jLnNpemU7IH0NCiAgICBpZiAoIWxlbmRpZmYpIHsgbGVuZGlmZiA9IDA7IH0NCg0KICAgIHZhciBkaXNwbGF5ID0gY20uZGlzcGxheTsNCiAgICBpZiAobGVuZGlmZiAmJiB0byA8IGRpc3BsYXkudmlld1RvICYmDQogICAgICAgIChkaXNwbGF5LnVwZGF0ZUxpbmVOdW1iZXJzID09IG51bGwgfHwgZGlzcGxheS51cGRhdGVMaW5lTnVtYmVycyA+IGZyb20pKQ0KICAgICAgeyBkaXNwbGF5LnVwZGF0ZUxpbmVOdW1iZXJzID0gZnJvbTsgfQ0KDQogICAgY20uY3VyT3Audmlld0NoYW5nZWQgPSB0cnVlOw0KDQogICAgaWYgKGZyb20gPj0gZGlzcGxheS52aWV3VG8pIHsgLy8gQ2hhbmdlIGFmdGVyDQogICAgICBpZiAoc2F3Q29sbGFwc2VkU3BhbnMgJiYgdmlzdWFsTGluZU5vKGNtLmRvYywgZnJvbSkgPCBkaXNwbGF5LnZpZXdUbykNCiAgICAgICAgeyByZXNldFZpZXcoY20pOyB9DQogICAgfSBlbHNlIGlmICh0byA8PSBkaXNwbGF5LnZpZXdGcm9tKSB7IC8vIENoYW5nZSBiZWZvcmUNCiAgICAgIGlmIChzYXdDb2xsYXBzZWRTcGFucyAmJiB2aXN1YWxMaW5lRW5kTm8oY20uZG9jLCB0byArIGxlbmRpZmYpID4gZGlzcGxheS52aWV3RnJvbSkgew0KICAgICAgICByZXNldFZpZXcoY20pOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgZGlzcGxheS52aWV3RnJvbSArPSBsZW5kaWZmOw0KICAgICAgICBkaXNwbGF5LnZpZXdUbyArPSBsZW5kaWZmOw0KICAgICAgfQ0KICAgIH0gZWxzZSBpZiAoZnJvbSA8PSBkaXNwbGF5LnZpZXdGcm9tICYmIHRvID49IGRpc3BsYXkudmlld1RvKSB7IC8vIEZ1bGwgb3ZlcmxhcA0KICAgICAgcmVzZXRWaWV3KGNtKTsNCiAgICB9IGVsc2UgaWYgKGZyb20gPD0gZGlzcGxheS52aWV3RnJvbSkgeyAvLyBUb3Agb3ZlcmxhcA0KICAgICAgdmFyIGN1dCA9IHZpZXdDdXR0aW5nUG9pbnQoY20sIHRvLCB0byArIGxlbmRpZmYsIDEpOw0KICAgICAgaWYgKGN1dCkgew0KICAgICAgICBkaXNwbGF5LnZpZXcgPSBkaXNwbGF5LnZpZXcuc2xpY2UoY3V0LmluZGV4KTsNCiAgICAgICAgZGlzcGxheS52aWV3RnJvbSA9IGN1dC5saW5lTjsNCiAgICAgICAgZGlzcGxheS52aWV3VG8gKz0gbGVuZGlmZjsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHJlc2V0VmlldyhjbSk7DQogICAgICB9DQogICAgfSBlbHNlIGlmICh0byA+PSBkaXNwbGF5LnZpZXdUbykgeyAvLyBCb3R0b20gb3ZlcmxhcA0KICAgICAgdmFyIGN1dCQxID0gdmlld0N1dHRpbmdQb2ludChjbSwgZnJvbSwgZnJvbSwgLTEpOw0KICAgICAgaWYgKGN1dCQxKSB7DQogICAgICAgIGRpc3BsYXkudmlldyA9IGRpc3BsYXkudmlldy5zbGljZSgwLCBjdXQkMS5pbmRleCk7DQogICAgICAgIGRpc3BsYXkudmlld1RvID0gY3V0JDEubGluZU47DQogICAgICB9IGVsc2Ugew0KICAgICAgICByZXNldFZpZXcoY20pOw0KICAgICAgfQ0KICAgIH0gZWxzZSB7IC8vIEdhcCBpbiB0aGUgbWlkZGxlDQogICAgICB2YXIgY3V0VG9wID0gdmlld0N1dHRpbmdQb2ludChjbSwgZnJvbSwgZnJvbSwgLTEpOw0KICAgICAgdmFyIGN1dEJvdCA9IHZpZXdDdXR0aW5nUG9pbnQoY20sIHRvLCB0byArIGxlbmRpZmYsIDEpOw0KICAgICAgaWYgKGN1dFRvcCAmJiBjdXRCb3QpIHsNCiAgICAgICAgZGlzcGxheS52aWV3ID0gZGlzcGxheS52aWV3LnNsaWNlKDAsIGN1dFRvcC5pbmRleCkNCiAgICAgICAgICAuY29uY2F0KGJ1aWxkVmlld0FycmF5KGNtLCBjdXRUb3AubGluZU4sIGN1dEJvdC5saW5lTikpDQogICAgICAgICAgLmNvbmNhdChkaXNwbGF5LnZpZXcuc2xpY2UoY3V0Qm90LmluZGV4KSk7DQogICAgICAgIGRpc3BsYXkudmlld1RvICs9IGxlbmRpZmY7DQogICAgICB9IGVsc2Ugew0KICAgICAgICByZXNldFZpZXcoY20pOw0KICAgICAgfQ0KICAgIH0NCg0KICAgIHZhciBleHQgPSBkaXNwbGF5LmV4dGVybmFsTWVhc3VyZWQ7DQogICAgaWYgKGV4dCkgew0KICAgICAgaWYgKHRvIDwgZXh0LmxpbmVOKQ0KICAgICAgICB7IGV4dC5saW5lTiArPSBsZW5kaWZmOyB9DQogICAgICBlbHNlIGlmIChmcm9tIDwgZXh0LmxpbmVOICsgZXh0LnNpemUpDQogICAgICAgIHsgZGlzcGxheS5leHRlcm5hbE1lYXN1cmVkID0gbnVsbDsgfQ0KICAgIH0NCiAgfQ0KDQogIC8vIFJlZ2lzdGVyIGEgY2hhbmdlIHRvIGEgc2luZ2xlIGxpbmUuIFR5cGUgbXVzdCBiZSBvbmUgb2YgInRleHQiLA0KICAvLyAiZ3V0dGVyIiwgImNsYXNzIiwgIndpZGdldCINCiAgZnVuY3Rpb24gcmVnTGluZUNoYW5nZShjbSwgbGluZSwgdHlwZSkgew0KICAgIGNtLmN1ck9wLnZpZXdDaGFuZ2VkID0gdHJ1ZTsNCiAgICB2YXIgZGlzcGxheSA9IGNtLmRpc3BsYXksIGV4dCA9IGNtLmRpc3BsYXkuZXh0ZXJuYWxNZWFzdXJlZDsNCiAgICBpZiAoZXh0ICYmIGxpbmUgPj0gZXh0LmxpbmVOICYmIGxpbmUgPCBleHQubGluZU4gKyBleHQuc2l6ZSkNCiAgICAgIHsgZGlzcGxheS5leHRlcm5hbE1lYXN1cmVkID0gbnVsbDsgfQ0KDQogICAgaWYgKGxpbmUgPCBkaXNwbGF5LnZpZXdGcm9tIHx8IGxpbmUgPj0gZGlzcGxheS52aWV3VG8pIHsgcmV0dXJuIH0NCiAgICB2YXIgbGluZVZpZXcgPSBkaXNwbGF5LnZpZXdbZmluZFZpZXdJbmRleChjbSwgbGluZSldOw0KICAgIGlmIChsaW5lVmlldy5ub2RlID09IG51bGwpIHsgcmV0dXJuIH0NCiAgICB2YXIgYXJyID0gbGluZVZpZXcuY2hhbmdlcyB8fCAobGluZVZpZXcuY2hhbmdlcyA9IFtdKTsNCiAgICBpZiAoaW5kZXhPZihhcnIsIHR5cGUpID09IC0xKSB7IGFyci5wdXNoKHR5cGUpOyB9DQogIH0NCg0KICAvLyBDbGVhciB0aGUgdmlldy4NCiAgZnVuY3Rpb24gcmVzZXRWaWV3KGNtKSB7DQogICAgY20uZGlzcGxheS52aWV3RnJvbSA9IGNtLmRpc3BsYXkudmlld1RvID0gY20uZG9jLmZpcnN0Ow0KICAgIGNtLmRpc3BsYXkudmlldyA9IFtdOw0KICAgIGNtLmRpc3BsYXkudmlld09mZnNldCA9IDA7DQogIH0NCg0KICBmdW5jdGlvbiB2aWV3Q3V0dGluZ1BvaW50KGNtLCBvbGROLCBuZXdOLCBkaXIpIHsNCiAgICB2YXIgaW5kZXggPSBmaW5kVmlld0luZGV4KGNtLCBvbGROKSwgZGlmZiwgdmlldyA9IGNtLmRpc3BsYXkudmlldzsNCiAgICBpZiAoIXNhd0NvbGxhcHNlZFNwYW5zIHx8IG5ld04gPT0gY20uZG9jLmZpcnN0ICsgY20uZG9jLnNpemUpDQogICAgICB7IHJldHVybiB7aW5kZXg6IGluZGV4LCBsaW5lTjogbmV3Tn0gfQ0KICAgIHZhciBuID0gY20uZGlzcGxheS52aWV3RnJvbTsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluZGV4OyBpKyspDQogICAgICB7IG4gKz0gdmlld1tpXS5zaXplOyB9DQogICAgaWYgKG4gIT0gb2xkTikgew0KICAgICAgaWYgKGRpciA+IDApIHsNCiAgICAgICAgaWYgKGluZGV4ID09IHZpZXcubGVuZ3RoIC0gMSkgeyByZXR1cm4gbnVsbCB9DQogICAgICAgIGRpZmYgPSAobiArIHZpZXdbaW5kZXhdLnNpemUpIC0gb2xkTjsNCiAgICAgICAgaW5kZXgrKzsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIGRpZmYgPSBuIC0gb2xkTjsNCiAgICAgIH0NCiAgICAgIG9sZE4gKz0gZGlmZjsgbmV3TiArPSBkaWZmOw0KICAgIH0NCiAgICB3aGlsZSAodmlzdWFsTGluZU5vKGNtLmRvYywgbmV3TikgIT0gbmV3Tikgew0KICAgICAgaWYgKGluZGV4ID09IChkaXIgPCAwID8gMCA6IHZpZXcubGVuZ3RoIC0gMSkpIHsgcmV0dXJuIG51bGwgfQ0KICAgICAgbmV3TiArPSBkaXIgKiB2aWV3W2luZGV4IC0gKGRpciA8IDAgPyAxIDogMCldLnNpemU7DQogICAgICBpbmRleCArPSBkaXI7DQogICAgfQ0KICAgIHJldHVybiB7aW5kZXg6IGluZGV4LCBsaW5lTjogbmV3Tn0NCiAgfQ0KDQogIC8vIEZvcmNlIHRoZSB2aWV3IHRvIGNvdmVyIGEgZ2l2ZW4gcmFuZ2UsIGFkZGluZyBlbXB0eSB2aWV3IGVsZW1lbnQNCiAgLy8gb3IgY2xpcHBpbmcgb2ZmIGV4aXN0aW5nIG9uZXMgYXMgbmVlZGVkLg0KICBmdW5jdGlvbiBhZGp1c3RWaWV3KGNtLCBmcm9tLCB0bykgew0KICAgIHZhciBkaXNwbGF5ID0gY20uZGlzcGxheSwgdmlldyA9IGRpc3BsYXkudmlldzsNCiAgICBpZiAodmlldy5sZW5ndGggPT0gMCB8fCBmcm9tID49IGRpc3BsYXkudmlld1RvIHx8IHRvIDw9IGRpc3BsYXkudmlld0Zyb20pIHsNCiAgICAgIGRpc3BsYXkudmlldyA9IGJ1aWxkVmlld0FycmF5KGNtLCBmcm9tLCB0byk7DQogICAgICBkaXNwbGF5LnZpZXdGcm9tID0gZnJvbTsNCiAgICB9IGVsc2Ugew0KICAgICAgaWYgKGRpc3BsYXkudmlld0Zyb20gPiBmcm9tKQ0KICAgICAgICB7IGRpc3BsYXkudmlldyA9IGJ1aWxkVmlld0FycmF5KGNtLCBmcm9tLCBkaXNwbGF5LnZpZXdGcm9tKS5jb25jYXQoZGlzcGxheS52aWV3KTsgfQ0KICAgICAgZWxzZSBpZiAoZGlzcGxheS52aWV3RnJvbSA8IGZyb20pDQogICAgICAgIHsgZGlzcGxheS52aWV3ID0gZGlzcGxheS52aWV3LnNsaWNlKGZpbmRWaWV3SW5kZXgoY20sIGZyb20pKTsgfQ0KICAgICAgZGlzcGxheS52aWV3RnJvbSA9IGZyb207DQogICAgICBpZiAoZGlzcGxheS52aWV3VG8gPCB0bykNCiAgICAgICAgeyBkaXNwbGF5LnZpZXcgPSBkaXNwbGF5LnZpZXcuY29uY2F0KGJ1aWxkVmlld0FycmF5KGNtLCBkaXNwbGF5LnZpZXdUbywgdG8pKTsgfQ0KICAgICAgZWxzZSBpZiAoZGlzcGxheS52aWV3VG8gPiB0bykNCiAgICAgICAgeyBkaXNwbGF5LnZpZXcgPSBkaXNwbGF5LnZpZXcuc2xpY2UoMCwgZmluZFZpZXdJbmRleChjbSwgdG8pKTsgfQ0KICAgIH0NCiAgICBkaXNwbGF5LnZpZXdUbyA9IHRvOw0KICB9DQoNCiAgLy8gQ291bnQgdGhlIG51bWJlciBvZiBsaW5lcyBpbiB0aGUgdmlldyB3aG9zZSBET00gcmVwcmVzZW50YXRpb24gaXMNCiAgLy8gb3V0IG9mIGRhdGUgKG9yIG5vbmV4aXN0ZW50KS4NCiAgZnVuY3Rpb24gY291bnREaXJ0eVZpZXcoY20pIHsNCiAgICB2YXIgdmlldyA9IGNtLmRpc3BsYXkudmlldywgZGlydHkgPSAwOw0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykgew0KICAgICAgdmFyIGxpbmVWaWV3ID0gdmlld1tpXTsNCiAgICAgIGlmICghbGluZVZpZXcuaGlkZGVuICYmICghbGluZVZpZXcubm9kZSB8fCBsaW5lVmlldy5jaGFuZ2VzKSkgeyArK2RpcnR5OyB9DQogICAgfQ0KICAgIHJldHVybiBkaXJ0eQ0KICB9DQoNCiAgZnVuY3Rpb24gdXBkYXRlU2VsZWN0aW9uKGNtKSB7DQogICAgY20uZGlzcGxheS5pbnB1dC5zaG93U2VsZWN0aW9uKGNtLmRpc3BsYXkuaW5wdXQucHJlcGFyZVNlbGVjdGlvbigpKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHByZXBhcmVTZWxlY3Rpb24oY20sIHByaW1hcnkpIHsNCiAgICBpZiAoIHByaW1hcnkgPT09IHZvaWQgMCApIHByaW1hcnkgPSB0cnVlOw0KDQogICAgdmFyIGRvYyA9IGNtLmRvYywgcmVzdWx0ID0ge307DQogICAgdmFyIGN1ckZyYWdtZW50ID0gcmVzdWx0LmN1cnNvcnMgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7DQogICAgdmFyIHNlbEZyYWdtZW50ID0gcmVzdWx0LnNlbGVjdGlvbiA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsNCg0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jLnNlbC5yYW5nZXMubGVuZ3RoOyBpKyspIHsNCiAgICAgIGlmICghcHJpbWFyeSAmJiBpID09IGRvYy5zZWwucHJpbUluZGV4KSB7IGNvbnRpbnVlIH0NCiAgICAgIHZhciByYW5nZSQkMSA9IGRvYy5zZWwucmFuZ2VzW2ldOw0KICAgICAgaWYgKHJhbmdlJCQxLmZyb20oKS5saW5lID49IGNtLmRpc3BsYXkudmlld1RvIHx8IHJhbmdlJCQxLnRvKCkubGluZSA8IGNtLmRpc3BsYXkudmlld0Zyb20pIHsgY29udGludWUgfQ0KICAgICAgdmFyIGNvbGxhcHNlZCA9IHJhbmdlJCQxLmVtcHR5KCk7DQogICAgICBpZiAoY29sbGFwc2VkIHx8IGNtLm9wdGlvbnMuc2hvd0N1cnNvcldoZW5TZWxlY3RpbmcpDQogICAgICAgIHsgZHJhd1NlbGVjdGlvbkN1cnNvcihjbSwgcmFuZ2UkJDEuaGVhZCwgY3VyRnJhZ21lbnQpOyB9DQogICAgICBpZiAoIWNvbGxhcHNlZCkNCiAgICAgICAgeyBkcmF3U2VsZWN0aW9uUmFuZ2UoY20sIHJhbmdlJCQxLCBzZWxGcmFnbWVudCk7IH0NCiAgICB9DQogICAgcmV0dXJuIHJlc3VsdA0KICB9DQoNCiAgLy8gRHJhd3MgYSBjdXJzb3IgZm9yIHRoZSBnaXZlbiByYW5nZQ0KICBmdW5jdGlvbiBkcmF3U2VsZWN0aW9uQ3Vyc29yKGNtLCBoZWFkLCBvdXRwdXQpIHsNCiAgICB2YXIgcG9zID0gY3Vyc29yQ29vcmRzKGNtLCBoZWFkLCAiZGl2IiwgbnVsbCwgbnVsbCwgIWNtLm9wdGlvbnMuc2luZ2xlQ3Vyc29ySGVpZ2h0UGVyTGluZSk7DQoNCiAgICB2YXIgY3Vyc29yID0gb3V0cHV0LmFwcGVuZENoaWxkKGVsdCgiZGl2IiwgIlx1MDBhMCIsICJDb2RlTWlycm9yLWN1cnNvciIpKTsNCiAgICBjdXJzb3Iuc3R5bGUubGVmdCA9IHBvcy5sZWZ0ICsgInB4IjsNCiAgICBjdXJzb3Iuc3R5bGUudG9wID0gcG9zLnRvcCArICJweCI7DQogICAgY3Vyc29yLnN0eWxlLmhlaWdodCA9IE1hdGgubWF4KDAsIHBvcy5ib3R0b20gLSBwb3MudG9wKSAqIGNtLm9wdGlvbnMuY3Vyc29ySGVpZ2h0ICsgInB4IjsNCg0KICAgIGlmIChwb3Mub3RoZXIpIHsNCiAgICAgIC8vIFNlY29uZGFyeSBjdXJzb3IsIHNob3duIHdoZW4gb24gYSAnanVtcCcgaW4gYmktZGlyZWN0aW9uYWwgdGV4dA0KICAgICAgdmFyIG90aGVyQ3Vyc29yID0gb3V0cHV0LmFwcGVuZENoaWxkKGVsdCgiZGl2IiwgIlx1MDBhMCIsICJDb2RlTWlycm9yLWN1cnNvciBDb2RlTWlycm9yLXNlY29uZGFyeWN1cnNvciIpKTsNCiAgICAgIG90aGVyQ3Vyc29yLnN0eWxlLmRpc3BsYXkgPSAiIjsNCiAgICAgIG90aGVyQ3Vyc29yLnN0eWxlLmxlZnQgPSBwb3Mub3RoZXIubGVmdCArICJweCI7DQogICAgICBvdGhlckN1cnNvci5zdHlsZS50b3AgPSBwb3Mub3RoZXIudG9wICsgInB4IjsNCiAgICAgIG90aGVyQ3Vyc29yLnN0eWxlLmhlaWdodCA9IChwb3Mub3RoZXIuYm90dG9tIC0gcG9zLm90aGVyLnRvcCkgKiAuODUgKyAicHgiOw0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIGNtcENvb3JkcyhhLCBiKSB7IHJldHVybiBhLnRvcCAtIGIudG9wIHx8IGEubGVmdCAtIGIubGVmdCB9DQoNCiAgLy8gRHJhd3MgdGhlIGdpdmVuIHJhbmdlIGFzIGEgaGlnaGxpZ2h0ZWQgc2VsZWN0aW9uDQogIGZ1bmN0aW9uIGRyYXdTZWxlY3Rpb25SYW5nZShjbSwgcmFuZ2UkJDEsIG91dHB1dCkgew0KICAgIHZhciBkaXNwbGF5ID0gY20uZGlzcGxheSwgZG9jID0gY20uZG9jOw0KICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsNCiAgICB2YXIgcGFkZGluZyA9IHBhZGRpbmdIKGNtLmRpc3BsYXkpLCBsZWZ0U2lkZSA9IHBhZGRpbmcubGVmdDsNCiAgICB2YXIgcmlnaHRTaWRlID0gTWF0aC5tYXgoZGlzcGxheS5zaXplcldpZHRoLCBkaXNwbGF5V2lkdGgoY20pIC0gZGlzcGxheS5zaXplci5vZmZzZXRMZWZ0KSAtIHBhZGRpbmcucmlnaHQ7DQogICAgdmFyIGRvY0xUUiA9IGRvYy5kaXJlY3Rpb24gPT0gImx0ciI7DQoNCiAgICBmdW5jdGlvbiBhZGQobGVmdCwgdG9wLCB3aWR0aCwgYm90dG9tKSB7DQogICAgICBpZiAodG9wIDwgMCkgeyB0b3AgPSAwOyB9DQogICAgICB0b3AgPSBNYXRoLnJvdW5kKHRvcCk7DQogICAgICBib3R0b20gPSBNYXRoLnJvdW5kKGJvdHRvbSk7DQogICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChlbHQoImRpdiIsIG51bGwsICJDb2RlTWlycm9yLXNlbGVjdGVkIiwgKCJwb3NpdGlvbjogYWJzb2x1dGU7IGxlZnQ6ICIgKyBsZWZ0ICsgInB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICIgKyB0b3AgKyAicHg7IHdpZHRoOiAiICsgKHdpZHRoID09IG51bGwgPyByaWdodFNpZGUgLSBsZWZ0IDogd2lkdGgpICsgInB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIgKyAoYm90dG9tIC0gdG9wKSArICJweCIpKSk7DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZHJhd0ZvckxpbmUobGluZSwgZnJvbUFyZywgdG9BcmcpIHsNCiAgICAgIHZhciBsaW5lT2JqID0gZ2V0TGluZShkb2MsIGxpbmUpOw0KICAgICAgdmFyIGxpbmVMZW4gPSBsaW5lT2JqLnRleHQubGVuZ3RoOw0KICAgICAgdmFyIHN0YXJ0LCBlbmQ7DQogICAgICBmdW5jdGlvbiBjb29yZHMoY2gsIGJpYXMpIHsNCiAgICAgICAgcmV0dXJuIGNoYXJDb29yZHMoY20sIFBvcyhsaW5lLCBjaCksICJkaXYiLCBsaW5lT2JqLCBiaWFzKQ0KICAgICAgfQ0KDQogICAgICBmdW5jdGlvbiB3cmFwWChwb3MsIGRpciwgc2lkZSkgew0KICAgICAgICB2YXIgZXh0ZW50ID0gd3JhcHBlZExpbmVFeHRlbnRDaGFyKGNtLCBsaW5lT2JqLCBudWxsLCBwb3MpOw0KICAgICAgICB2YXIgcHJvcCA9IChkaXIgPT0gImx0ciIpID09IChzaWRlID09ICJhZnRlciIpID8gImxlZnQiIDogInJpZ2h0IjsNCiAgICAgICAgdmFyIGNoID0gc2lkZSA9PSAiYWZ0ZXIiID8gZXh0ZW50LmJlZ2luIDogZXh0ZW50LmVuZCAtICgvXHMvLnRlc3QobGluZU9iai50ZXh0LmNoYXJBdChleHRlbnQuZW5kIC0gMSkpID8gMiA6IDEpOw0KICAgICAgICByZXR1cm4gY29vcmRzKGNoLCBwcm9wKVtwcm9wXQ0KICAgICAgfQ0KDQogICAgICB2YXIgb3JkZXIgPSBnZXRPcmRlcihsaW5lT2JqLCBkb2MuZGlyZWN0aW9uKTsNCiAgICAgIGl0ZXJhdGVCaWRpU2VjdGlvbnMob3JkZXIsIGZyb21BcmcgfHwgMCwgdG9BcmcgPT0gbnVsbCA/IGxpbmVMZW4gOiB0b0FyZywgZnVuY3Rpb24gKGZyb20sIHRvLCBkaXIsIGkpIHsNCiAgICAgICAgdmFyIGx0ciA9IGRpciA9PSAibHRyIjsNCiAgICAgICAgdmFyIGZyb21Qb3MgPSBjb29yZHMoZnJvbSwgbHRyID8gImxlZnQiIDogInJpZ2h0Iik7DQogICAgICAgIHZhciB0b1BvcyA9IGNvb3Jkcyh0byAtIDEsIGx0ciA/ICJyaWdodCIgOiAibGVmdCIpOw0KDQogICAgICAgIHZhciBvcGVuU3RhcnQgPSBmcm9tQXJnID09IG51bGwgJiYgZnJvbSA9PSAwLCBvcGVuRW5kID0gdG9BcmcgPT0gbnVsbCAmJiB0byA9PSBsaW5lTGVuOw0KICAgICAgICB2YXIgZmlyc3QgPSBpID09IDAsIGxhc3QgPSAhb3JkZXIgfHwgaSA9PSBvcmRlci5sZW5ndGggLSAxOw0KICAgICAgICBpZiAodG9Qb3MudG9wIC0gZnJvbVBvcy50b3AgPD0gMykgeyAvLyBTaW5nbGUgbGluZQ0KICAgICAgICAgIHZhciBvcGVuTGVmdCA9IChkb2NMVFIgPyBvcGVuU3RhcnQgOiBvcGVuRW5kKSAmJiBmaXJzdDsNCiAgICAgICAgICB2YXIgb3BlblJpZ2h0ID0gKGRvY0xUUiA/IG9wZW5FbmQgOiBvcGVuU3RhcnQpICYmIGxhc3Q7DQogICAgICAgICAgdmFyIGxlZnQgPSBvcGVuTGVmdCA/IGxlZnRTaWRlIDogKGx0ciA/IGZyb21Qb3MgOiB0b1BvcykubGVmdDsNCiAgICAgICAgICB2YXIgcmlnaHQgPSBvcGVuUmlnaHQgPyByaWdodFNpZGUgOiAobHRyID8gdG9Qb3MgOiBmcm9tUG9zKS5yaWdodDsNCiAgICAgICAgICBhZGQobGVmdCwgZnJvbVBvcy50b3AsIHJpZ2h0IC0gbGVmdCwgZnJvbVBvcy5ib3R0b20pOw0KICAgICAgICB9IGVsc2UgeyAvLyBNdWx0aXBsZSBsaW5lcw0KICAgICAgICAgIHZhciB0b3BMZWZ0LCB0b3BSaWdodCwgYm90TGVmdCwgYm90UmlnaHQ7DQogICAgICAgICAgaWYgKGx0cikgew0KICAgICAgICAgICAgdG9wTGVmdCA9IGRvY0xUUiAmJiBvcGVuU3RhcnQgJiYgZmlyc3QgPyBsZWZ0U2lkZSA6IGZyb21Qb3MubGVmdDsNCiAgICAgICAgICAgIHRvcFJpZ2h0ID0gZG9jTFRSID8gcmlnaHRTaWRlIDogd3JhcFgoZnJvbSwgZGlyLCAiYmVmb3JlIik7DQogICAgICAgICAgICBib3RMZWZ0ID0gZG9jTFRSID8gbGVmdFNpZGUgOiB3cmFwWCh0bywgZGlyLCAiYWZ0ZXIiKTsNCiAgICAgICAgICAgIGJvdFJpZ2h0ID0gZG9jTFRSICYmIG9wZW5FbmQgJiYgbGFzdCA/IHJpZ2h0U2lkZSA6IHRvUG9zLnJpZ2h0Ow0KICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICB0b3BMZWZ0ID0gIWRvY0xUUiA/IGxlZnRTaWRlIDogd3JhcFgoZnJvbSwgZGlyLCAiYmVmb3JlIik7DQogICAgICAgICAgICB0b3BSaWdodCA9ICFkb2NMVFIgJiYgb3BlblN0YXJ0ICYmIGZpcnN0ID8gcmlnaHRTaWRlIDogZnJvbVBvcy5yaWdodDsNCiAgICAgICAgICAgIGJvdExlZnQgPSAhZG9jTFRSICYmIG9wZW5FbmQgJiYgbGFzdCA/IGxlZnRTaWRlIDogdG9Qb3MubGVmdDsNCiAgICAgICAgICAgIGJvdFJpZ2h0ID0gIWRvY0xUUiA/IHJpZ2h0U2lkZSA6IHdyYXBYKHRvLCBkaXIsICJhZnRlciIpOw0KICAgICAgICAgIH0NCiAgICAgICAgICBhZGQodG9wTGVmdCwgZnJvbVBvcy50b3AsIHRvcFJpZ2h0IC0gdG9wTGVmdCwgZnJvbVBvcy5ib3R0b20pOw0KICAgICAgICAgIGlmIChmcm9tUG9zLmJvdHRvbSA8IHRvUG9zLnRvcCkgeyBhZGQobGVmdFNpZGUsIGZyb21Qb3MuYm90dG9tLCBudWxsLCB0b1Bvcy50b3ApOyB9DQogICAgICAgICAgYWRkKGJvdExlZnQsIHRvUG9zLnRvcCwgYm90UmlnaHQgLSBib3RMZWZ0LCB0b1Bvcy5ib3R0b20pOw0KICAgICAgICB9DQoNCiAgICAgICAgaWYgKCFzdGFydCB8fCBjbXBDb29yZHMoZnJvbVBvcywgc3RhcnQpIDwgMCkgeyBzdGFydCA9IGZyb21Qb3M7IH0NCiAgICAgICAgaWYgKGNtcENvb3Jkcyh0b1Bvcywgc3RhcnQpIDwgMCkgeyBzdGFydCA9IHRvUG9zOyB9DQogICAgICAgIGlmICghZW5kIHx8IGNtcENvb3Jkcyhmcm9tUG9zLCBlbmQpIDwgMCkgeyBlbmQgPSBmcm9tUG9zOyB9DQogICAgICAgIGlmIChjbXBDb29yZHModG9Qb3MsIGVuZCkgPCAwKSB7IGVuZCA9IHRvUG9zOyB9DQogICAgICB9KTsNCiAgICAgIHJldHVybiB7c3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZH0NCiAgICB9DQoNCiAgICB2YXIgc0Zyb20gPSByYW5nZSQkMS5mcm9tKCksIHNUbyA9IHJhbmdlJCQxLnRvKCk7DQogICAgaWYgKHNGcm9tLmxpbmUgPT0gc1RvLmxpbmUpIHsNCiAgICAgIGRyYXdGb3JMaW5lKHNGcm9tLmxpbmUsIHNGcm9tLmNoLCBzVG8uY2gpOw0KICAgIH0gZWxzZSB7DQogICAgICB2YXIgZnJvbUxpbmUgPSBnZXRMaW5lKGRvYywgc0Zyb20ubGluZSksIHRvTGluZSA9IGdldExpbmUoZG9jLCBzVG8ubGluZSk7DQogICAgICB2YXIgc2luZ2xlVkxpbmUgPSB2aXN1YWxMaW5lKGZyb21MaW5lKSA9PSB2aXN1YWxMaW5lKHRvTGluZSk7DQogICAgICB2YXIgbGVmdEVuZCA9IGRyYXdGb3JMaW5lKHNGcm9tLmxpbmUsIHNGcm9tLmNoLCBzaW5nbGVWTGluZSA/IGZyb21MaW5lLnRleHQubGVuZ3RoICsgMSA6IG51bGwpLmVuZDsNCiAgICAgIHZhciByaWdodFN0YXJ0ID0gZHJhd0ZvckxpbmUoc1RvLmxpbmUsIHNpbmdsZVZMaW5lID8gMCA6IG51bGwsIHNUby5jaCkuc3RhcnQ7DQogICAgICBpZiAoc2luZ2xlVkxpbmUpIHsNCiAgICAgICAgaWYgKGxlZnRFbmQudG9wIDwgcmlnaHRTdGFydC50b3AgLSAyKSB7DQogICAgICAgICAgYWRkKGxlZnRFbmQucmlnaHQsIGxlZnRFbmQudG9wLCBudWxsLCBsZWZ0RW5kLmJvdHRvbSk7DQogICAgICAgICAgYWRkKGxlZnRTaWRlLCByaWdodFN0YXJ0LnRvcCwgcmlnaHRTdGFydC5sZWZ0LCByaWdodFN0YXJ0LmJvdHRvbSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgYWRkKGxlZnRFbmQucmlnaHQsIGxlZnRFbmQudG9wLCByaWdodFN0YXJ0LmxlZnQgLSBsZWZ0RW5kLnJpZ2h0LCBsZWZ0RW5kLmJvdHRvbSk7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICAgIGlmIChsZWZ0RW5kLmJvdHRvbSA8IHJpZ2h0U3RhcnQudG9wKQ0KICAgICAgICB7IGFkZChsZWZ0U2lkZSwgbGVmdEVuZC5ib3R0b20sIG51bGwsIHJpZ2h0U3RhcnQudG9wKTsgfQ0KICAgIH0NCg0KICAgIG91dHB1dC5hcHBlbmRDaGlsZChmcmFnbWVudCk7DQogIH0NCg0KICAvLyBDdXJzb3ItYmxpbmtpbmcNCiAgZnVuY3Rpb24gcmVzdGFydEJsaW5rKGNtKSB7DQogICAgaWYgKCFjbS5zdGF0ZS5mb2N1c2VkKSB7IHJldHVybiB9DQogICAgdmFyIGRpc3BsYXkgPSBjbS5kaXNwbGF5Ow0KICAgIGNsZWFySW50ZXJ2YWwoZGlzcGxheS5ibGlua2VyKTsNCiAgICB2YXIgb24gPSB0cnVlOw0KICAgIGRpc3BsYXkuY3Vyc29yRGl2LnN0eWxlLnZpc2liaWxpdHkgPSAiIjsNCiAgICBpZiAoY20ub3B0aW9ucy5jdXJzb3JCbGlua1JhdGUgPiAwKQ0KICAgICAgeyBkaXNwbGF5LmJsaW5rZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7IHJldHVybiBkaXNwbGF5LmN1cnNvckRpdi5zdHlsZS52aXNpYmlsaXR5ID0gKG9uID0gIW9uKSA/ICIiIDogImhpZGRlbiI7IH0sDQogICAgICAgIGNtLm9wdGlvbnMuY3Vyc29yQmxpbmtSYXRlKTsgfQ0KICAgIGVsc2UgaWYgKGNtLm9wdGlvbnMuY3Vyc29yQmxpbmtSYXRlIDwgMCkNCiAgICAgIHsgZGlzcGxheS5jdXJzb3JEaXYuc3R5bGUudmlzaWJpbGl0eSA9ICJoaWRkZW4iOyB9DQogIH0NCg0KICBmdW5jdGlvbiBlbnN1cmVGb2N1cyhjbSkgew0KICAgIGlmICghY20uc3RhdGUuZm9jdXNlZCkgeyBjbS5kaXNwbGF5LmlucHV0LmZvY3VzKCk7IG9uRm9jdXMoY20pOyB9DQogIH0NCg0KICBmdW5jdGlvbiBkZWxheUJsdXJFdmVudChjbSkgew0KICAgIGNtLnN0YXRlLmRlbGF5aW5nQmx1ckV2ZW50ID0gdHJ1ZTsNCiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgaWYgKGNtLnN0YXRlLmRlbGF5aW5nQmx1ckV2ZW50KSB7DQogICAgICBjbS5zdGF0ZS5kZWxheWluZ0JsdXJFdmVudCA9IGZhbHNlOw0KICAgICAgb25CbHVyKGNtKTsNCiAgICB9IH0sIDEwMCk7DQogIH0NCg0KICBmdW5jdGlvbiBvbkZvY3VzKGNtLCBlKSB7DQogICAgaWYgKGNtLnN0YXRlLmRlbGF5aW5nQmx1ckV2ZW50KSB7IGNtLnN0YXRlLmRlbGF5aW5nQmx1ckV2ZW50ID0gZmFsc2U7IH0NCg0KICAgIGlmIChjbS5vcHRpb25zLnJlYWRPbmx5ID09ICJub2N1cnNvciIpIHsgcmV0dXJuIH0NCiAgICBpZiAoIWNtLnN0YXRlLmZvY3VzZWQpIHsNCiAgICAgIHNpZ25hbChjbSwgImZvY3VzIiwgY20sIGUpOw0KICAgICAgY20uc3RhdGUuZm9jdXNlZCA9IHRydWU7DQogICAgICBhZGRDbGFzcyhjbS5kaXNwbGF5LndyYXBwZXIsICJDb2RlTWlycm9yLWZvY3VzZWQiKTsNCiAgICAgIC8vIFRoaXMgdGVzdCBwcmV2ZW50cyB0aGlzIGZyb20gZmlyaW5nIHdoZW4gYSBjb250ZXh0DQogICAgICAvLyBtZW51IGlzIGNsb3NlZCAoc2luY2UgdGhlIGlucHV0IHJlc2V0IHdvdWxkIGtpbGwgdGhlDQogICAgICAvLyBzZWxlY3QtYWxsIGRldGVjdGlvbiBoYWNrKQ0KICAgICAgaWYgKCFjbS5jdXJPcCAmJiBjbS5kaXNwbGF5LnNlbEZvckNvbnRleHRNZW51ICE9IGNtLmRvYy5zZWwpIHsNCiAgICAgICAgY20uZGlzcGxheS5pbnB1dC5yZXNldCgpOw0KICAgICAgICBpZiAod2Via2l0KSB7IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gY20uZGlzcGxheS5pbnB1dC5yZXNldCh0cnVlKTsgfSwgMjApOyB9IC8vIElzc3VlICMxNzMwDQogICAgICB9DQogICAgICBjbS5kaXNwbGF5LmlucHV0LnJlY2VpdmVkRm9jdXMoKTsNCiAgICB9DQogICAgcmVzdGFydEJsaW5rKGNtKTsNCiAgfQ0KICBmdW5jdGlvbiBvbkJsdXIoY20sIGUpIHsNCiAgICBpZiAoY20uc3RhdGUuZGVsYXlpbmdCbHVyRXZlbnQpIHsgcmV0dXJuIH0NCg0KICAgIGlmIChjbS5zdGF0ZS5mb2N1c2VkKSB7DQogICAgICBzaWduYWwoY20sICJibHVyIiwgY20sIGUpOw0KICAgICAgY20uc3RhdGUuZm9jdXNlZCA9IGZhbHNlOw0KICAgICAgcm1DbGFzcyhjbS5kaXNwbGF5LndyYXBwZXIsICJDb2RlTWlycm9yLWZvY3VzZWQiKTsNCiAgICB9DQogICAgY2xlYXJJbnRlcnZhbChjbS5kaXNwbGF5LmJsaW5rZXIpOw0KICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBpZiAoIWNtLnN0YXRlLmZvY3VzZWQpIHsgY20uZGlzcGxheS5zaGlmdCA9IGZhbHNlOyB9IH0sIDE1MCk7DQogIH0NCg0KICAvLyBSZWFkIHRoZSBhY3R1YWwgaGVpZ2h0cyBvZiB0aGUgcmVuZGVyZWQgbGluZXMsIGFuZCB1cGRhdGUgdGhlaXINCiAgLy8gc3RvcmVkIGhlaWdodHMgdG8gbWF0Y2guDQogIGZ1bmN0aW9uIHVwZGF0ZUhlaWdodHNJblZpZXdwb3J0KGNtKSB7DQogICAgdmFyIGRpc3BsYXkgPSBjbS5kaXNwbGF5Ow0KICAgIHZhciBwcmV2Qm90dG9tID0gZGlzcGxheS5saW5lRGl2Lm9mZnNldFRvcDsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BsYXkudmlldy5sZW5ndGg7IGkrKykgew0KICAgICAgdmFyIGN1ciA9IGRpc3BsYXkudmlld1tpXSwgd3JhcHBpbmcgPSBjbS5vcHRpb25zLmxpbmVXcmFwcGluZzsNCiAgICAgIHZhciBoZWlnaHQgPSAodm9pZCAwKSwgd2lkdGggPSAwOw0KICAgICAgaWYgKGN1ci5oaWRkZW4pIHsgY29udGludWUgfQ0KICAgICAgaWYgKGllICYmIGllX3ZlcnNpb24gPCA4KSB7DQogICAgICAgIHZhciBib3QgPSBjdXIubm9kZS5vZmZzZXRUb3AgKyBjdXIubm9kZS5vZmZzZXRIZWlnaHQ7DQogICAgICAgIGhlaWdodCA9IGJvdCAtIHByZXZCb3R0b207DQogICAgICAgIHByZXZCb3R0b20gPSBib3Q7DQogICAgICB9IGVsc2Ugew0KICAgICAgICB2YXIgYm94ID0gY3VyLm5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7DQogICAgICAgIGhlaWdodCA9IGJveC5ib3R0b20gLSBib3gudG9wOw0KICAgICAgICAvLyBDaGVjayB0aGF0IGxpbmVzIGRvbid0IGV4dGVuZCBwYXN0IHRoZSByaWdodCBvZiB0aGUgY3VycmVudA0KICAgICAgICAvLyBlZGl0b3Igd2lkdGgNCiAgICAgICAgaWYgKCF3cmFwcGluZyAmJiBjdXIudGV4dC5maXJzdENoaWxkKQ0KICAgICAgICAgIHsgd2lkdGggPSBjdXIudGV4dC5maXJzdENoaWxkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0IC0gYm94LmxlZnQgLSAxOyB9DQogICAgICB9DQogICAgICB2YXIgZGlmZiA9IGN1ci5saW5lLmhlaWdodCAtIGhlaWdodDsNCiAgICAgIGlmIChkaWZmID4gLjAwNSB8fCBkaWZmIDwgLS4wMDUpIHsNCiAgICAgICAgdXBkYXRlTGluZUhlaWdodChjdXIubGluZSwgaGVpZ2h0KTsNCiAgICAgICAgdXBkYXRlV2lkZ2V0SGVpZ2h0KGN1ci5saW5lKTsNCiAgICAgICAgaWYgKGN1ci5yZXN0KSB7IGZvciAodmFyIGogPSAwOyBqIDwgY3VyLnJlc3QubGVuZ3RoOyBqKyspDQogICAgICAgICAgeyB1cGRhdGVXaWRnZXRIZWlnaHQoY3VyLnJlc3Rbal0pOyB9IH0NCiAgICAgIH0NCiAgICAgIGlmICh3aWR0aCA+IGNtLmRpc3BsYXkuc2l6ZXJXaWR0aCkgew0KICAgICAgICB2YXIgY2hXaWR0aCA9IE1hdGguY2VpbCh3aWR0aCAvIGNoYXJXaWR0aChjbS5kaXNwbGF5KSk7DQogICAgICAgIGlmIChjaFdpZHRoID4gY20uZGlzcGxheS5tYXhMaW5lTGVuZ3RoKSB7DQogICAgICAgICAgY20uZGlzcGxheS5tYXhMaW5lTGVuZ3RoID0gY2hXaWR0aDsNCiAgICAgICAgICBjbS5kaXNwbGF5Lm1heExpbmUgPSBjdXIubGluZTsNCiAgICAgICAgICBjbS5kaXNwbGF5Lm1heExpbmVDaGFuZ2VkID0gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCiAgfQ0KDQogIC8vIFJlYWQgYW5kIHN0b3JlIHRoZSBoZWlnaHQgb2YgbGluZSB3aWRnZXRzIGFzc29jaWF0ZWQgd2l0aCB0aGUNCiAgLy8gZ2l2ZW4gbGluZS4NCiAgZnVuY3Rpb24gdXBkYXRlV2lkZ2V0SGVpZ2h0KGxpbmUpIHsNCiAgICBpZiAobGluZS53aWRnZXRzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgbGluZS53aWRnZXRzLmxlbmd0aDsgKytpKSB7DQogICAgICB2YXIgdyA9IGxpbmUud2lkZ2V0c1tpXSwgcGFyZW50ID0gdy5ub2RlLnBhcmVudE5vZGU7DQogICAgICBpZiAocGFyZW50KSB7IHcuaGVpZ2h0ID0gcGFyZW50Lm9mZnNldEhlaWdodDsgfQ0KICAgIH0gfQ0KICB9DQoNCiAgLy8gQ29tcHV0ZSB0aGUgbGluZXMgdGhhdCBhcmUgdmlzaWJsZSBpbiBhIGdpdmVuIHZpZXdwb3J0IChkZWZhdWx0cw0KICAvLyB0aGUgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uKS4gdmlld3BvcnQgbWF5IGNvbnRhaW4gdG9wLA0KICAvLyBoZWlnaHQsIGFuZCBlbnN1cmUgKHNlZSBvcC5zY3JvbGxUb1BvcykgcHJvcGVydGllcy4NCiAgZnVuY3Rpb24gdmlzaWJsZUxpbmVzKGRpc3BsYXksIGRvYywgdmlld3BvcnQpIHsNCiAgICB2YXIgdG9wID0gdmlld3BvcnQgJiYgdmlld3BvcnQudG9wICE9IG51bGwgPyBNYXRoLm1heCgwLCB2aWV3cG9ydC50b3ApIDogZGlzcGxheS5zY3JvbGxlci5zY3JvbGxUb3A7DQogICAgdG9wID0gTWF0aC5mbG9vcih0b3AgLSBwYWRkaW5nVG9wKGRpc3BsYXkpKTsNCiAgICB2YXIgYm90dG9tID0gdmlld3BvcnQgJiYgdmlld3BvcnQuYm90dG9tICE9IG51bGwgPyB2aWV3cG9ydC5ib3R0b20gOiB0b3AgKyBkaXNwbGF5LndyYXBwZXIuY2xpZW50SGVpZ2h0Ow0KDQogICAgdmFyIGZyb20gPSBsaW5lQXRIZWlnaHQoZG9jLCB0b3ApLCB0byA9IGxpbmVBdEhlaWdodChkb2MsIGJvdHRvbSk7DQogICAgLy8gRW5zdXJlIGlzIGEge2Zyb206IHtsaW5lLCBjaH0sIHRvOiB7bGluZSwgY2h9fSBvYmplY3QsIGFuZA0KICAgIC8vIGZvcmNlcyB0aG9zZSBsaW5lcyBpbnRvIHRoZSB2aWV3cG9ydCAoaWYgcG9zc2libGUpLg0KICAgIGlmICh2aWV3cG9ydCAmJiB2aWV3cG9ydC5lbnN1cmUpIHsNCiAgICAgIHZhciBlbnN1cmVGcm9tID0gdmlld3BvcnQuZW5zdXJlLmZyb20ubGluZSwgZW5zdXJlVG8gPSB2aWV3cG9ydC5lbnN1cmUudG8ubGluZTsNCiAgICAgIGlmIChlbnN1cmVGcm9tIDwgZnJvbSkgew0KICAgICAgICBmcm9tID0gZW5zdXJlRnJvbTsNCiAgICAgICAgdG8gPSBsaW5lQXRIZWlnaHQoZG9jLCBoZWlnaHRBdExpbmUoZ2V0TGluZShkb2MsIGVuc3VyZUZyb20pKSArIGRpc3BsYXkud3JhcHBlci5jbGllbnRIZWlnaHQpOw0KICAgICAgfSBlbHNlIGlmIChNYXRoLm1pbihlbnN1cmVUbywgZG9jLmxhc3RMaW5lKCkpID49IHRvKSB7DQogICAgICAgIGZyb20gPSBsaW5lQXRIZWlnaHQoZG9jLCBoZWlnaHRBdExpbmUoZ2V0TGluZShkb2MsIGVuc3VyZVRvKSkgLSBkaXNwbGF5LndyYXBwZXIuY2xpZW50SGVpZ2h0KTsNCiAgICAgICAgdG8gPSBlbnN1cmVUbzsNCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIHtmcm9tOiBmcm9tLCB0bzogTWF0aC5tYXgodG8sIGZyb20gKyAxKX0NCiAgfQ0KDQogIC8vIFNDUk9MTElORyBUSElOR1MgSU5UTyBWSUVXDQoNCiAgLy8gSWYgYW4gZWRpdG9yIHNpdHMgb24gdGhlIHRvcCBvciBib3R0b20gb2YgdGhlIHdpbmRvdywgcGFydGlhbGx5DQogIC8vIHNjcm9sbGVkIG91dCBvZiB2aWV3LCB0aGlzIGVuc3VyZXMgdGhhdCB0aGUgY3Vyc29yIGlzIHZpc2libGUuDQogIGZ1bmN0aW9uIG1heWJlU2Nyb2xsV2luZG93KGNtLCByZWN0KSB7DQogICAgaWYgKHNpZ25hbERPTUV2ZW50KGNtLCAic2Nyb2xsQ3Vyc29ySW50b1ZpZXciKSkgeyByZXR1cm4gfQ0KDQogICAgdmFyIGRpc3BsYXkgPSBjbS5kaXNwbGF5LCBib3ggPSBkaXNwbGF5LnNpemVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBkb1Njcm9sbCA9IG51bGw7DQogICAgaWYgKHJlY3QudG9wICsgYm94LnRvcCA8IDApIHsgZG9TY3JvbGwgPSB0cnVlOyB9DQogICAgZWxzZSBpZiAocmVjdC5ib3R0b20gKyBib3gudG9wID4gKHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSkgeyBkb1Njcm9sbCA9IGZhbHNlOyB9DQogICAgaWYgKGRvU2Nyb2xsICE9IG51bGwgJiYgIXBoYW50b20pIHsNCiAgICAgIHZhciBzY3JvbGxOb2RlID0gZWx0KCJkaXYiLCAiXHUyMDBiIiwgbnVsbCwgKCJwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAiICsgKHJlY3QudG9wIC0gZGlzcGxheS52aWV3T2Zmc2V0IC0gcGFkZGluZ1RvcChjbS5kaXNwbGF5KSkgKyAicHg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiICsgKHJlY3QuYm90dG9tIC0gcmVjdC50b3AgKyBzY3JvbGxHYXAoY20pICsgZGlzcGxheS5iYXJIZWlnaHQpICsgInB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICIgKyAocmVjdC5sZWZ0KSArICJweDsgd2lkdGg6ICIgKyAoTWF0aC5tYXgoMiwgcmVjdC5yaWdodCAtIHJlY3QubGVmdCkpICsgInB4OyIpKTsNCiAgICAgIGNtLmRpc3BsYXkubGluZVNwYWNlLmFwcGVuZENoaWxkKHNjcm9sbE5vZGUpOw0KICAgICAgc2Nyb2xsTm9kZS5zY3JvbGxJbnRvVmlldyhkb1Njcm9sbCk7DQogICAgICBjbS5kaXNwbGF5LmxpbmVTcGFjZS5yZW1vdmVDaGlsZChzY3JvbGxOb2RlKTsNCiAgICB9DQogIH0NCg0KICAvLyBTY3JvbGwgYSBnaXZlbiBwb3NpdGlvbiBpbnRvIHZpZXcgKGltbWVkaWF0ZWx5KSwgdmVyaWZ5aW5nIHRoYXQNCiAgLy8gaXQgYWN0dWFsbHkgYmVjYW1lIHZpc2libGUgKGFzIGxpbmUgaGVpZ2h0cyBhcmUgYWNjdXJhdGVseQ0KICAvLyBtZWFzdXJlZCwgdGhlIHBvc2l0aW9uIG9mIHNvbWV0aGluZyBtYXkgJ2RyaWZ0JyBkdXJpbmcgZHJhd2luZykuDQogIGZ1bmN0aW9uIHNjcm9sbFBvc0ludG9WaWV3KGNtLCBwb3MsIGVuZCwgbWFyZ2luKSB7DQogICAgaWYgKG1hcmdpbiA9PSBudWxsKSB7IG1hcmdpbiA9IDA7IH0NCiAgICB2YXIgcmVjdDsNCiAgICBpZiAoIWNtLm9wdGlvbnMubGluZVdyYXBwaW5nICYmIHBvcyA9PSBlbmQpIHsNCiAgICAgIC8vIFNldCBwb3MgYW5kIGVuZCB0byB0aGUgY3Vyc29yIHBvc2l0aW9ucyBhcm91bmQgdGhlIGNoYXJhY3RlciBwb3Mgc3RpY2tzIHRvDQogICAgICAvLyBJZiBwb3Muc3RpY2t5ID09ICJiZWZvcmUiLCB0aGF0IGlzIGFyb3VuZCBwb3MuY2ggLSAxLCBvdGhlcndpc2UgYXJvdW5kIHBvcy5jaA0KICAgICAgLy8gSWYgcG9zID09IFBvcyhfLCAwLCAiYmVmb3JlIiksIHBvcyBhbmQgZW5kIGFyZSB1bmNoYW5nZWQNCiAgICAgIHBvcyA9IHBvcy5jaCA/IFBvcyhwb3MubGluZSwgcG9zLnN0aWNreSA9PSAiYmVmb3JlIiA/IHBvcy5jaCAtIDEgOiBwb3MuY2gsICJhZnRlciIpIDogcG9zOw0KICAgICAgZW5kID0gcG9zLnN0aWNreSA9PSAiYmVmb3JlIiA/IFBvcyhwb3MubGluZSwgcG9zLmNoICsgMSwgImJlZm9yZSIpIDogcG9zOw0KICAgIH0NCiAgICBmb3IgKHZhciBsaW1pdCA9IDA7IGxpbWl0IDwgNTsgbGltaXQrKykgew0KICAgICAgdmFyIGNoYW5nZWQgPSBmYWxzZTsNCiAgICAgIHZhciBjb29yZHMgPSBjdXJzb3JDb29yZHMoY20sIHBvcyk7DQogICAgICB2YXIgZW5kQ29vcmRzID0gIWVuZCB8fCBlbmQgPT0gcG9zID8gY29vcmRzIDogY3Vyc29yQ29vcmRzKGNtLCBlbmQpOw0KICAgICAgcmVjdCA9IHtsZWZ0OiBNYXRoLm1pbihjb29yZHMubGVmdCwgZW5kQ29vcmRzLmxlZnQpLA0KICAgICAgICAgICAgICB0b3A6IE1hdGgubWluKGNvb3Jkcy50b3AsIGVuZENvb3Jkcy50b3ApIC0gbWFyZ2luLA0KICAgICAgICAgICAgICByaWdodDogTWF0aC5tYXgoY29vcmRzLmxlZnQsIGVuZENvb3Jkcy5sZWZ0KSwNCiAgICAgICAgICAgICAgYm90dG9tOiBNYXRoLm1heChjb29yZHMuYm90dG9tLCBlbmRDb29yZHMuYm90dG9tKSArIG1hcmdpbn07DQogICAgICB2YXIgc2Nyb2xsUG9zID0gY2FsY3VsYXRlU2Nyb2xsUG9zKGNtLCByZWN0KTsNCiAgICAgIHZhciBzdGFydFRvcCA9IGNtLmRvYy5zY3JvbGxUb3AsIHN0YXJ0TGVmdCA9IGNtLmRvYy5zY3JvbGxMZWZ0Ow0KICAgICAgaWYgKHNjcm9sbFBvcy5zY3JvbGxUb3AgIT0gbnVsbCkgew0KICAgICAgICB1cGRhdGVTY3JvbGxUb3AoY20sIHNjcm9sbFBvcy5zY3JvbGxUb3ApOw0KICAgICAgICBpZiAoTWF0aC5hYnMoY20uZG9jLnNjcm9sbFRvcCAtIHN0YXJ0VG9wKSA+IDEpIHsgY2hhbmdlZCA9IHRydWU7IH0NCiAgICAgIH0NCiAgICAgIGlmIChzY3JvbGxQb3Muc2Nyb2xsTGVmdCAhPSBudWxsKSB7DQogICAgICAgIHNldFNjcm9sbExlZnQoY20sIHNjcm9sbFBvcy5zY3JvbGxMZWZ0KTsNCiAgICAgICAgaWYgKE1hdGguYWJzKGNtLmRvYy5zY3JvbGxMZWZ0IC0gc3RhcnRMZWZ0KSA+IDEpIHsgY2hhbmdlZCA9IHRydWU7IH0NCiAgICAgIH0NCiAgICAgIGlmICghY2hhbmdlZCkgeyBicmVhayB9DQogICAgfQ0KICAgIHJldHVybiByZWN0DQogIH0NCg0KICAvLyBTY3JvbGwgYSBnaXZlbiBzZXQgb2YgY29vcmRpbmF0ZXMgaW50byB2aWV3IChpbW1lZGlhdGVseSkuDQogIGZ1bmN0aW9uIHNjcm9sbEludG9WaWV3KGNtLCByZWN0KSB7DQogICAgdmFyIHNjcm9sbFBvcyA9IGNhbGN1bGF0ZVNjcm9sbFBvcyhjbSwgcmVjdCk7DQogICAgaWYgKHNjcm9sbFBvcy5zY3JvbGxUb3AgIT0gbnVsbCkgeyB1cGRhdGVTY3JvbGxUb3AoY20sIHNjcm9sbFBvcy5zY3JvbGxUb3ApOyB9DQogICAgaWYgKHNjcm9sbFBvcy5zY3JvbGxMZWZ0ICE9IG51bGwpIHsgc2V0U2Nyb2xsTGVmdChjbSwgc2Nyb2xsUG9zLnNjcm9sbExlZnQpOyB9DQogIH0NCg0KICAvLyBDYWxjdWxhdGUgYSBuZXcgc2Nyb2xsIHBvc2l0aW9uIG5lZWRlZCB0byBzY3JvbGwgdGhlIGdpdmVuDQogIC8vIHJlY3RhbmdsZSBpbnRvIHZpZXcuIFJldHVybnMgYW4gb2JqZWN0IHdpdGggc2Nyb2xsVG9wIGFuZA0KICAvLyBzY3JvbGxMZWZ0IHByb3BlcnRpZXMuIFdoZW4gdGhlc2UgYXJlIHVuZGVmaW5lZCwgdGhlDQogIC8vIHZlcnRpY2FsL2hvcml6b250YWwgcG9zaXRpb24gZG9lcyBub3QgbmVlZCB0byBiZSBhZGp1c3RlZC4NCiAgZnVuY3Rpb24gY2FsY3VsYXRlU2Nyb2xsUG9zKGNtLCByZWN0KSB7DQogICAgdmFyIGRpc3BsYXkgPSBjbS5kaXNwbGF5LCBzbmFwTWFyZ2luID0gdGV4dEhlaWdodChjbS5kaXNwbGF5KTsNCiAgICBpZiAocmVjdC50b3AgPCAwKSB7IHJlY3QudG9wID0gMDsgfQ0KICAgIHZhciBzY3JlZW50b3AgPSBjbS5jdXJPcCAmJiBjbS5jdXJPcC5zY3JvbGxUb3AgIT0gbnVsbCA/IGNtLmN1ck9wLnNjcm9sbFRvcCA6IGRpc3BsYXkuc2Nyb2xsZXIuc2Nyb2xsVG9wOw0KICAgIHZhciBzY3JlZW4gPSBkaXNwbGF5SGVpZ2h0KGNtKSwgcmVzdWx0ID0ge307DQogICAgaWYgKHJlY3QuYm90dG9tIC0gcmVjdC50b3AgPiBzY3JlZW4pIHsgcmVjdC5ib3R0b20gPSByZWN0LnRvcCArIHNjcmVlbjsgfQ0KICAgIHZhciBkb2NCb3R0b20gPSBjbS5kb2MuaGVpZ2h0ICsgcGFkZGluZ1ZlcnQoZGlzcGxheSk7DQogICAgdmFyIGF0VG9wID0gcmVjdC50b3AgPCBzbmFwTWFyZ2luLCBhdEJvdHRvbSA9IHJlY3QuYm90dG9tID4gZG9jQm90dG9tIC0gc25hcE1hcmdpbjsNCiAgICBpZiAocmVjdC50b3AgPCBzY3JlZW50b3ApIHsNCiAgICAgIHJlc3VsdC5zY3JvbGxUb3AgPSBhdFRvcCA/IDAgOiByZWN0LnRvcDsNCiAgICB9IGVsc2UgaWYgKHJlY3QuYm90dG9tID4gc2NyZWVudG9wICsgc2NyZWVuKSB7DQogICAgICB2YXIgbmV3VG9wID0gTWF0aC5taW4ocmVjdC50b3AsIChhdEJvdHRvbSA/IGRvY0JvdHRvbSA6IHJlY3QuYm90dG9tKSAtIHNjcmVlbik7DQogICAgICBpZiAobmV3VG9wICE9IHNjcmVlbnRvcCkgeyByZXN1bHQuc2Nyb2xsVG9wID0gbmV3VG9wOyB9DQogICAgfQ0KDQogICAgdmFyIHNjcmVlbmxlZnQgPSBjbS5jdXJPcCAmJiBjbS5jdXJPcC5zY3JvbGxMZWZ0ICE9IG51bGwgPyBjbS5jdXJPcC5zY3JvbGxMZWZ0IDogZGlzcGxheS5zY3JvbGxlci5zY3JvbGxMZWZ0Ow0KICAgIHZhciBzY3JlZW53ID0gZGlzcGxheVdpZHRoKGNtKSAtIChjbS5vcHRpb25zLmZpeGVkR3V0dGVyID8gZGlzcGxheS5ndXR0ZXJzLm9mZnNldFdpZHRoIDogMCk7DQogICAgdmFyIHRvb1dpZGUgPSByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0ID4gc2NyZWVudzsNCiAgICBpZiAodG9vV2lkZSkgeyByZWN0LnJpZ2h0ID0gcmVjdC5sZWZ0ICsgc2NyZWVudzsgfQ0KICAgIGlmIChyZWN0LmxlZnQgPCAxMCkNCiAgICAgIHsgcmVzdWx0LnNjcm9sbExlZnQgPSAwOyB9DQogICAgZWxzZSBpZiAocmVjdC5sZWZ0IDwgc2NyZWVubGVmdCkNCiAgICAgIHsgcmVzdWx0LnNjcm9sbExlZnQgPSBNYXRoLm1heCgwLCByZWN0LmxlZnQgLSAodG9vV2lkZSA/IDAgOiAxMCkpOyB9DQogICAgZWxzZSBpZiAocmVjdC5yaWdodCA+IHNjcmVlbncgKyBzY3JlZW5sZWZ0IC0gMykNCiAgICAgIHsgcmVzdWx0LnNjcm9sbExlZnQgPSByZWN0LnJpZ2h0ICsgKHRvb1dpZGUgPyAwIDogMTApIC0gc2NyZWVudzsgfQ0KICAgIHJldHVybiByZXN1bHQNCiAgfQ0KDQogIC8vIFN0b3JlIGEgcmVsYXRpdmUgYWRqdXN0bWVudCB0byB0aGUgc2Nyb2xsIHBvc2l0aW9uIGluIHRoZSBjdXJyZW50DQogIC8vIG9wZXJhdGlvbiAodG8gYmUgYXBwbGllZCB3aGVuIHRoZSBvcGVyYXRpb24gZmluaXNoZXMpLg0KICBmdW5jdGlvbiBhZGRUb1Njcm9sbFRvcChjbSwgdG9wKSB7DQogICAgaWYgKHRvcCA9PSBudWxsKSB7IHJldHVybiB9DQogICAgcmVzb2x2ZVNjcm9sbFRvUG9zKGNtKTsNCiAgICBjbS5jdXJPcC5zY3JvbGxUb3AgPSAoY20uY3VyT3Auc2Nyb2xsVG9wID09IG51bGwgPyBjbS5kb2Muc2Nyb2xsVG9wIDogY20uY3VyT3Auc2Nyb2xsVG9wKSArIHRvcDsNCiAgfQ0KDQogIC8vIE1ha2Ugc3VyZSB0aGF0IGF0IHRoZSBlbmQgb2YgdGhlIG9wZXJhdGlvbiB0aGUgY3VycmVudCBjdXJzb3IgaXMNCiAgLy8gc2hvd24uDQogIGZ1bmN0aW9uIGVuc3VyZUN1cnNvclZpc2libGUoY20pIHsNCiAgICByZXNvbHZlU2Nyb2xsVG9Qb3MoY20pOw0KICAgIHZhciBjdXIgPSBjbS5nZXRDdXJzb3IoKTsNCiAgICBjbS5jdXJPcC5zY3JvbGxUb1BvcyA9IHtmcm9tOiBjdXIsIHRvOiBjdXIsIG1hcmdpbjogY20ub3B0aW9ucy5jdXJzb3JTY3JvbGxNYXJnaW59Ow0KICB9DQoNCiAgZnVuY3Rpb24gc2Nyb2xsVG9Db29yZHMoY20sIHgsIHkpIHsNCiAgICBpZiAoeCAhPSBudWxsIHx8IHkgIT0gbnVsbCkgeyByZXNvbHZlU2Nyb2xsVG9Qb3MoY20pOyB9DQogICAgaWYgKHggIT0gbnVsbCkgeyBjbS5jdXJPcC5zY3JvbGxMZWZ0ID0geDsgfQ0KICAgIGlmICh5ICE9IG51bGwpIHsgY20uY3VyT3Auc2Nyb2xsVG9wID0geTsgfQ0KICB9DQoNCiAgZnVuY3Rpb24gc2Nyb2xsVG9SYW5nZShjbSwgcmFuZ2UkJDEpIHsNCiAgICByZXNvbHZlU2Nyb2xsVG9Qb3MoY20pOw0KICAgIGNtLmN1ck9wLnNjcm9sbFRvUG9zID0gcmFuZ2UkJDE7DQogIH0NCg0KICAvLyBXaGVuIGFuIG9wZXJhdGlvbiBoYXMgaXRzIHNjcm9sbFRvUG9zIHByb3BlcnR5IHNldCwgYW5kIGFub3RoZXINCiAgLy8gc2Nyb2xsIGFjdGlvbiBpcyBhcHBsaWVkIGJlZm9yZSB0aGUgZW5kIG9mIHRoZSBvcGVyYXRpb24sIHRoaXMNCiAgLy8gJ3NpbXVsYXRlcycgc2Nyb2xsaW5nIHRoYXQgcG9zaXRpb24gaW50byB2aWV3IGluIGEgY2hlYXAgd2F5LCBzbw0KICAvLyB0aGF0IHRoZSBlZmZlY3Qgb2YgaW50ZXJtZWRpYXRlIHNjcm9sbCBjb21tYW5kcyBpcyBub3QgaWdub3JlZC4NCiAgZnVuY3Rpb24gcmVzb2x2ZVNjcm9sbFRvUG9zKGNtKSB7DQogICAgdmFyIHJhbmdlJCQxID0gY20uY3VyT3Auc2Nyb2xsVG9Qb3M7DQogICAgaWYgKHJhbmdlJCQxKSB7DQogICAgICBjbS5jdXJPcC5zY3JvbGxUb1BvcyA9IG51bGw7DQogICAgICB2YXIgZnJvbSA9IGVzdGltYXRlQ29vcmRzKGNtLCByYW5nZSQkMS5mcm9tKSwgdG8gPSBlc3RpbWF0ZUNvb3JkcyhjbSwgcmFuZ2UkJDEudG8pOw0KICAgICAgc2Nyb2xsVG9Db29yZHNSYW5nZShjbSwgZnJvbSwgdG8sIHJhbmdlJCQxLm1hcmdpbik7DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gc2Nyb2xsVG9Db29yZHNSYW5nZShjbSwgZnJvbSwgdG8sIG1hcmdpbikgew0KICAgIHZhciBzUG9zID0gY2FsY3VsYXRlU2Nyb2xsUG9zKGNtLCB7DQogICAgICBsZWZ0OiBNYXRoLm1pbihmcm9tLmxlZnQsIHRvLmxlZnQpLA0KICAgICAgdG9wOiBNYXRoLm1pbihmcm9tLnRvcCwgdG8udG9wKSAtIG1hcmdpbiwNCiAgICAgIHJpZ2h0OiBNYXRoLm1heChmcm9tLnJpZ2h0LCB0by5yaWdodCksDQogICAgICBib3R0b206IE1hdGgubWF4KGZyb20uYm90dG9tLCB0by5ib3R0b20pICsgbWFyZ2luDQogICAgfSk7DQogICAgc2Nyb2xsVG9Db29yZHMoY20sIHNQb3Muc2Nyb2xsTGVmdCwgc1Bvcy5zY3JvbGxUb3ApOw0KICB9DQoNCiAgLy8gU3luYyB0aGUgc2Nyb2xsYWJsZSBhcmVhIGFuZCBzY3JvbGxiYXJzLCBlbnN1cmUgdGhlIHZpZXdwb3J0DQogIC8vIGNvdmVycyB0aGUgdmlzaWJsZSBhcmVhLg0KICBmdW5jdGlvbiB1cGRhdGVTY3JvbGxUb3AoY20sIHZhbCkgew0KICAgIGlmIChNYXRoLmFicyhjbS5kb2Muc2Nyb2xsVG9wIC0gdmFsKSA8IDIpIHsgcmV0dXJuIH0NCiAgICBpZiAoIWdlY2tvKSB7IHVwZGF0ZURpc3BsYXlTaW1wbGUoY20sIHt0b3A6IHZhbH0pOyB9DQogICAgc2V0U2Nyb2xsVG9wKGNtLCB2YWwsIHRydWUpOw0KICAgIGlmIChnZWNrbykgeyB1cGRhdGVEaXNwbGF5U2ltcGxlKGNtKTsgfQ0KICAgIHN0YXJ0V29ya2VyKGNtLCAxMDApOw0KICB9DQoNCiAgZnVuY3Rpb24gc2V0U2Nyb2xsVG9wKGNtLCB2YWwsIGZvcmNlU2Nyb2xsKSB7DQogICAgdmFsID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oY20uZGlzcGxheS5zY3JvbGxlci5zY3JvbGxIZWlnaHQgLSBjbS5kaXNwbGF5LnNjcm9sbGVyLmNsaWVudEhlaWdodCwgdmFsKSk7DQogICAgaWYgKGNtLmRpc3BsYXkuc2Nyb2xsZXIuc2Nyb2xsVG9wID09IHZhbCAmJiAhZm9yY2VTY3JvbGwpIHsgcmV0dXJuIH0NCiAgICBjbS5kb2Muc2Nyb2xsVG9wID0gdmFsOw0KICAgIGNtLmRpc3BsYXkuc2Nyb2xsYmFycy5zZXRTY3JvbGxUb3AodmFsKTsNCiAgICBpZiAoY20uZGlzcGxheS5zY3JvbGxlci5zY3JvbGxUb3AgIT0gdmFsKSB7IGNtLmRpc3BsYXkuc2Nyb2xsZXIuc2Nyb2xsVG9wID0gdmFsOyB9DQogIH0NCg0KICAvLyBTeW5jIHNjcm9sbGVyIGFuZCBzY3JvbGxiYXIsIGVuc3VyZSB0aGUgZ3V0dGVyIGVsZW1lbnRzIGFyZQ0KICAvLyBhbGlnbmVkLg0KICBmdW5jdGlvbiBzZXRTY3JvbGxMZWZ0KGNtLCB2YWwsIGlzU2Nyb2xsZXIsIGZvcmNlU2Nyb2xsKSB7DQogICAgdmFsID0gTWF0aC5tYXgoMCwgTWF0aC5taW4odmFsLCBjbS5kaXNwbGF5LnNjcm9sbGVyLnNjcm9sbFdpZHRoIC0gY20uZGlzcGxheS5zY3JvbGxlci5jbGllbnRXaWR0aCkpOw0KICAgIGlmICgoaXNTY3JvbGxlciA/IHZhbCA9PSBjbS5kb2Muc2Nyb2xsTGVmdCA6IE1hdGguYWJzKGNtLmRvYy5zY3JvbGxMZWZ0IC0gdmFsKSA8IDIpICYmICFmb3JjZVNjcm9sbCkgeyByZXR1cm4gfQ0KICAgIGNtLmRvYy5zY3JvbGxMZWZ0ID0gdmFsOw0KICAgIGFsaWduSG9yaXpvbnRhbGx5KGNtKTsNCiAgICBpZiAoY20uZGlzcGxheS5zY3JvbGxlci5zY3JvbGxMZWZ0ICE9IHZhbCkgeyBjbS5kaXNwbGF5LnNjcm9sbGVyLnNjcm9sbExlZnQgPSB2YWw7IH0NCiAgICBjbS5kaXNwbGF5LnNjcm9sbGJhcnMuc2V0U2Nyb2xsTGVmdCh2YWwpOw0KICB9DQoNCiAgLy8gU0NST0xMQkFSUw0KDQogIC8vIFByZXBhcmUgRE9NIHJlYWRzIG5lZWRlZCB0byB1cGRhdGUgdGhlIHNjcm9sbGJhcnMuIERvbmUgaW4gb25lDQogIC8vIHNob3QgdG8gbWluaW1pemUgdXBkYXRlL21lYXN1cmUgcm91bmR0cmlwcy4NCiAgZnVuY3Rpb24gbWVhc3VyZUZvclNjcm9sbGJhcnMoY20pIHsNCiAgICB2YXIgZCA9IGNtLmRpc3BsYXksIGd1dHRlclcgPSBkLmd1dHRlcnMub2Zmc2V0V2lkdGg7DQogICAgdmFyIGRvY0ggPSBNYXRoLnJvdW5kKGNtLmRvYy5oZWlnaHQgKyBwYWRkaW5nVmVydChjbS5kaXNwbGF5KSk7DQogICAgcmV0dXJuIHsNCiAgICAgIGNsaWVudEhlaWdodDogZC5zY3JvbGxlci5jbGllbnRIZWlnaHQsDQogICAgICB2aWV3SGVpZ2h0OiBkLndyYXBwZXIuY2xpZW50SGVpZ2h0LA0KICAgICAgc2Nyb2xsV2lkdGg6IGQuc2Nyb2xsZXIuc2Nyb2xsV2lkdGgsIGNsaWVudFdpZHRoOiBkLnNjcm9sbGVyLmNsaWVudFdpZHRoLA0KICAgICAgdmlld1dpZHRoOiBkLndyYXBwZXIuY2xpZW50V2lkdGgsDQogICAgICBiYXJMZWZ0OiBjbS5vcHRpb25zLmZpeGVkR3V0dGVyID8gZ3V0dGVyVyA6IDAsDQogICAgICBkb2NIZWlnaHQ6IGRvY0gsDQogICAgICBzY3JvbGxIZWlnaHQ6IGRvY0ggKyBzY3JvbGxHYXAoY20pICsgZC5iYXJIZWlnaHQsDQogICAgICBuYXRpdmVCYXJXaWR0aDogZC5uYXRpdmVCYXJXaWR0aCwNCiAgICAgIGd1dHRlcldpZHRoOiBndXR0ZXJXDQogICAgfQ0KICB9DQoNCiAgdmFyIE5hdGl2ZVNjcm9sbGJhcnMgPSBmdW5jdGlvbihwbGFjZSwgc2Nyb2xsLCBjbSkgew0KICAgIHRoaXMuY20gPSBjbTsNCiAgICB2YXIgdmVydCA9IHRoaXMudmVydCA9IGVsdCgiZGl2IiwgW2VsdCgiZGl2IiwgbnVsbCwgbnVsbCwgIm1pbi13aWR0aDogMXB4IildLCAiQ29kZU1pcnJvci12c2Nyb2xsYmFyIik7DQogICAgdmFyIGhvcml6ID0gdGhpcy5ob3JpeiA9IGVsdCgiZGl2IiwgW2VsdCgiZGl2IiwgbnVsbCwgbnVsbCwgImhlaWdodDogMTAwJTsgbWluLWhlaWdodDogMXB4IildLCAiQ29kZU1pcnJvci1oc2Nyb2xsYmFyIik7DQogICAgdmVydC50YWJJbmRleCA9IGhvcml6LnRhYkluZGV4ID0gLTE7DQogICAgcGxhY2UodmVydCk7IHBsYWNlKGhvcml6KTsNCg0KICAgIG9uKHZlcnQsICJzY3JvbGwiLCBmdW5jdGlvbiAoKSB7DQogICAgICBpZiAodmVydC5jbGllbnRIZWlnaHQpIHsgc2Nyb2xsKHZlcnQuc2Nyb2xsVG9wLCAidmVydGljYWwiKTsgfQ0KICAgIH0pOw0KICAgIG9uKGhvcml6LCAic2Nyb2xsIiwgZnVuY3Rpb24gKCkgew0KICAgICAgaWYgKGhvcml6LmNsaWVudFdpZHRoKSB7IHNjcm9sbChob3Jpei5zY3JvbGxMZWZ0LCAiaG9yaXpvbnRhbCIpOyB9DQogICAgfSk7DQoNCiAgICB0aGlzLmNoZWNrZWRaZXJvV2lkdGggPSBmYWxzZTsNCiAgICAvLyBOZWVkIHRvIHNldCBhIG1pbmltdW0gd2lkdGggdG8gc2VlIHRoZSBzY3JvbGxiYXIgb24gSUU3IChidXQgbXVzdCBub3Qgc2V0IGl0IG9uIElFOCkuDQogICAgaWYgKGllICYmIGllX3ZlcnNpb24gPCA4KSB7IHRoaXMuaG9yaXouc3R5bGUubWluSGVpZ2h0ID0gdGhpcy52ZXJ0LnN0eWxlLm1pbldpZHRoID0gIjE4cHgiOyB9DQogIH07DQoNCiAgTmF0aXZlU2Nyb2xsYmFycy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG1lYXN1cmUpIHsNCiAgICB2YXIgbmVlZHNIID0gbWVhc3VyZS5zY3JvbGxXaWR0aCA+IG1lYXN1cmUuY2xpZW50V2lkdGggKyAxOw0KICAgIHZhciBuZWVkc1YgPSBtZWFzdXJlLnNjcm9sbEhlaWdodCA+IG1lYXN1cmUuY2xpZW50SGVpZ2h0ICsgMTsNCiAgICB2YXIgc1dpZHRoID0gbWVhc3VyZS5uYXRpdmVCYXJXaWR0aDsNCg0KICAgIGlmIChuZWVkc1YpIHsNCiAgICAgIHRoaXMudmVydC5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsNCiAgICAgIHRoaXMudmVydC5zdHlsZS5ib3R0b20gPSBuZWVkc0ggPyBzV2lkdGggKyAicHgiIDogIjAiOw0KICAgICAgdmFyIHRvdGFsSGVpZ2h0ID0gbWVhc3VyZS52aWV3SGVpZ2h0IC0gKG5lZWRzSCA/IHNXaWR0aCA6IDApOw0KICAgICAgLy8gQSBidWcgaW4gSUU4IGNhbiBjYXVzZSB0aGlzIHZhbHVlIHRvIGJlIG5lZ2F0aXZlLCBzbyBndWFyZCBpdC4NCiAgICAgIHRoaXMudmVydC5maXJzdENoaWxkLnN0eWxlLmhlaWdodCA9DQogICAgICAgIE1hdGgubWF4KDAsIG1lYXN1cmUuc2Nyb2xsSGVpZ2h0IC0gbWVhc3VyZS5jbGllbnRIZWlnaHQgKyB0b3RhbEhlaWdodCkgKyAicHgiOw0KICAgIH0gZWxzZSB7DQogICAgICB0aGlzLnZlcnQuc3R5bGUuZGlzcGxheSA9ICIiOw0KICAgICAgdGhpcy52ZXJ0LmZpcnN0Q2hpbGQuc3R5bGUuaGVpZ2h0ID0gIjAiOw0KICAgIH0NCg0KICAgIGlmIChuZWVkc0gpIHsNCiAgICAgIHRoaXMuaG9yaXouc3R5bGUuZGlzcGxheSA9ICJibG9jayI7DQogICAgICB0aGlzLmhvcml6LnN0eWxlLnJpZ2h0ID0gbmVlZHNWID8gc1dpZHRoICsgInB4IiA6ICIwIjsNCiAgICAgIHRoaXMuaG9yaXouc3R5bGUubGVmdCA9IG1lYXN1cmUuYmFyTGVmdCArICJweCI7DQogICAgICB2YXIgdG90YWxXaWR0aCA9IG1lYXN1cmUudmlld1dpZHRoIC0gbWVhc3VyZS5iYXJMZWZ0IC0gKG5lZWRzViA/IHNXaWR0aCA6IDApOw0KICAgICAgdGhpcy5ob3Jpei5maXJzdENoaWxkLnN0eWxlLndpZHRoID0NCiAgICAgICAgTWF0aC5tYXgoMCwgbWVhc3VyZS5zY3JvbGxXaWR0aCAtIG1lYXN1cmUuY2xpZW50V2lkdGggKyB0b3RhbFdpZHRoKSArICJweCI7DQogICAgfSBlbHNlIHsNCiAgICAgIHRoaXMuaG9yaXouc3R5bGUuZGlzcGxheSA9ICIiOw0KICAgICAgdGhpcy5ob3Jpei5maXJzdENoaWxkLnN0eWxlLndpZHRoID0gIjAiOw0KICAgIH0NCg0KICAgIGlmICghdGhpcy5jaGVja2VkWmVyb1dpZHRoICYmIG1lYXN1cmUuY2xpZW50SGVpZ2h0ID4gMCkgew0KICAgICAgaWYgKHNXaWR0aCA9PSAwKSB7IHRoaXMuemVyb1dpZHRoSGFjaygpOyB9DQogICAgICB0aGlzLmNoZWNrZWRaZXJvV2lkdGggPSB0cnVlOw0KICAgIH0NCg0KICAgIHJldHVybiB7cmlnaHQ6IG5lZWRzViA/IHNXaWR0aCA6IDAsIGJvdHRvbTogbmVlZHNIID8gc1dpZHRoIDogMH0NCiAgfTsNCg0KICBOYXRpdmVTY3JvbGxiYXJzLnByb3RvdHlwZS5zZXRTY3JvbGxMZWZ0ID0gZnVuY3Rpb24gKHBvcykgew0KICAgIGlmICh0aGlzLmhvcml6LnNjcm9sbExlZnQgIT0gcG9zKSB7IHRoaXMuaG9yaXouc2Nyb2xsTGVmdCA9IHBvczsgfQ0KICAgIGlmICh0aGlzLmRpc2FibGVIb3JpeikgeyB0aGlzLmVuYWJsZVplcm9XaWR0aEJhcih0aGlzLmhvcml6LCB0aGlzLmRpc2FibGVIb3JpeiwgImhvcml6Iik7IH0NCiAgfTsNCg0KICBOYXRpdmVTY3JvbGxiYXJzLnByb3RvdHlwZS5zZXRTY3JvbGxUb3AgPSBmdW5jdGlvbiAocG9zKSB7DQogICAgaWYgKHRoaXMudmVydC5zY3JvbGxUb3AgIT0gcG9zKSB7IHRoaXMudmVydC5zY3JvbGxUb3AgPSBwb3M7IH0NCiAgICBpZiAodGhpcy5kaXNhYmxlVmVydCkgeyB0aGlzLmVuYWJsZVplcm9XaWR0aEJhcih0aGlzLnZlcnQsIHRoaXMuZGlzYWJsZVZlcnQsICJ2ZXJ0Iik7IH0NCiAgfTsNCg0KICBOYXRpdmVTY3JvbGxiYXJzLnByb3RvdHlwZS56ZXJvV2lkdGhIYWNrID0gZnVuY3Rpb24gKCkgew0KICAgIHZhciB3ID0gbWFjICYmICFtYWNfZ2VNb3VudGFpbkxpb24gPyAiMTJweCIgOiAiMThweCI7DQogICAgdGhpcy5ob3Jpei5zdHlsZS5oZWlnaHQgPSB0aGlzLnZlcnQuc3R5bGUud2lkdGggPSB3Ow0KICAgIHRoaXMuaG9yaXouc3R5bGUucG9pbnRlckV2ZW50cyA9IHRoaXMudmVydC5zdHlsZS5wb2ludGVyRXZlbnRzID0gIm5vbmUiOw0KICAgIHRoaXMuZGlzYWJsZUhvcml6ID0gbmV3IERlbGF5ZWQ7DQogICAgdGhpcy5kaXNhYmxlVmVydCA9IG5ldyBEZWxheWVkOw0KICB9Ow0KDQogIE5hdGl2ZVNjcm9sbGJhcnMucHJvdG90eXBlLmVuYWJsZVplcm9XaWR0aEJhciA9IGZ1bmN0aW9uIChiYXIsIGRlbGF5LCB0eXBlKSB7DQogICAgYmFyLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAiYXV0byI7DQogICAgZnVuY3Rpb24gbWF5YmVEaXNhYmxlKCkgew0KICAgICAgLy8gVG8gZmluZCBvdXQgd2hldGhlciB0aGUgc2Nyb2xsYmFyIGlzIHN0aWxsIHZpc2libGUsIHdlDQogICAgICAvLyBjaGVjayB3aGV0aGVyIHRoZSBlbGVtZW50IHVuZGVyIHRoZSBwaXhlbCBpbiB0aGUgYm90dG9tDQogICAgICAvLyByaWdodCBjb3JuZXIgb2YgdGhlIHNjcm9sbGJhciBib3ggaXMgdGhlIHNjcm9sbGJhciBib3gNCiAgICAgIC8vIGl0c2VsZiAod2hlbiB0aGUgYmFyIGlzIHN0aWxsIHZpc2libGUpIG9yIGl0cyBmaWxsZXIgY2hpbGQNCiAgICAgIC8vICh3aGVuIHRoZSBiYXIgaXMgaGlkZGVuKS4gSWYgaXQgaXMgc3RpbGwgdmlzaWJsZSwgd2Uga2VlcA0KICAgICAgLy8gaXQgZW5hYmxlZCwgaWYgaXQncyBoaWRkZW4sIHdlIGRpc2FibGUgcG9pbnRlciBldmVudHMuDQogICAgICB2YXIgYm94ID0gYmFyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOw0KICAgICAgdmFyIGVsdCQkMSA9IHR5cGUgPT0gInZlcnQiID8gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChib3gucmlnaHQgLSAxLCAoYm94LnRvcCArIGJveC5ib3R0b20pIC8gMikNCiAgICAgICAgICA6IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoKGJveC5yaWdodCArIGJveC5sZWZ0KSAvIDIsIGJveC5ib3R0b20gLSAxKTsNCiAgICAgIGlmIChlbHQkJDEgIT0gYmFyKSB7IGJhci5zdHlsZS5wb2ludGVyRXZlbnRzID0gIm5vbmUiOyB9DQogICAgICBlbHNlIHsgZGVsYXkuc2V0KDEwMDAsIG1heWJlRGlzYWJsZSk7IH0NCiAgICB9DQogICAgZGVsYXkuc2V0KDEwMDAsIG1heWJlRGlzYWJsZSk7DQogIH07DQoNCiAgTmF0aXZlU2Nyb2xsYmFycy5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7DQogICAgdmFyIHBhcmVudCA9IHRoaXMuaG9yaXoucGFyZW50Tm9kZTsNCiAgICBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcy5ob3Jpeik7DQogICAgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMudmVydCk7DQogIH07DQoNCiAgdmFyIE51bGxTY3JvbGxiYXJzID0gZnVuY3Rpb24gKCkge307DQoNCiAgTnVsbFNjcm9sbGJhcnMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHtib3R0b206IDAsIHJpZ2h0OiAwfSB9Ow0KICBOdWxsU2Nyb2xsYmFycy5wcm90b3R5cGUuc2V0U2Nyb2xsTGVmdCA9IGZ1bmN0aW9uICgpIHt9Ow0KICBOdWxsU2Nyb2xsYmFycy5wcm90b3R5cGUuc2V0U2Nyb2xsVG9wID0gZnVuY3Rpb24gKCkge307DQogIE51bGxTY3JvbGxiYXJzLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHt9Ow0KDQogIGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbGJhcnMoY20sIG1lYXN1cmUpIHsNCiAgICBpZiAoIW1lYXN1cmUpIHsgbWVhc3VyZSA9IG1lYXN1cmVGb3JTY3JvbGxiYXJzKGNtKTsgfQ0KICAgIHZhciBzdGFydFdpZHRoID0gY20uZGlzcGxheS5iYXJXaWR0aCwgc3RhcnRIZWlnaHQgPSBjbS5kaXNwbGF5LmJhckhlaWdodDsNCiAgICB1cGRhdGVTY3JvbGxiYXJzSW5uZXIoY20sIG1lYXN1cmUpOw0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNCAmJiBzdGFydFdpZHRoICE9IGNtLmRpc3BsYXkuYmFyV2lkdGggfHwgc3RhcnRIZWlnaHQgIT0gY20uZGlzcGxheS5iYXJIZWlnaHQ7IGkrKykgew0KICAgICAgaWYgKHN0YXJ0V2lkdGggIT0gY20uZGlzcGxheS5iYXJXaWR0aCAmJiBjbS5vcHRpb25zLmxpbmVXcmFwcGluZykNCiAgICAgICAgeyB1cGRhdGVIZWlnaHRzSW5WaWV3cG9ydChjbSk7IH0NCiAgICAgIHVwZGF0ZVNjcm9sbGJhcnNJbm5lcihjbSwgbWVhc3VyZUZvclNjcm9sbGJhcnMoY20pKTsNCiAgICAgIHN0YXJ0V2lkdGggPSBjbS5kaXNwbGF5LmJhcldpZHRoOyBzdGFydEhlaWdodCA9IGNtLmRpc3BsYXkuYmFySGVpZ2h0Ow0KICAgIH0NCiAgfQ0KDQogIC8vIFJlLXN5bmNocm9uaXplIHRoZSBmYWtlIHNjcm9sbGJhcnMgd2l0aCB0aGUgYWN0dWFsIHNpemUgb2YgdGhlDQogIC8vIGNvbnRlbnQuDQogIGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbGJhcnNJbm5lcihjbSwgbWVhc3VyZSkgew0KICAgIHZhciBkID0gY20uZGlzcGxheTsNCiAgICB2YXIgc2l6ZXMgPSBkLnNjcm9sbGJhcnMudXBkYXRlKG1lYXN1cmUpOw0KDQogICAgZC5zaXplci5zdHlsZS5wYWRkaW5nUmlnaHQgPSAoZC5iYXJXaWR0aCA9IHNpemVzLnJpZ2h0KSArICJweCI7DQogICAgZC5zaXplci5zdHlsZS5wYWRkaW5nQm90dG9tID0gKGQuYmFySGVpZ2h0ID0gc2l6ZXMuYm90dG9tKSArICJweCI7DQogICAgZC5oZWlnaHRGb3JjZXIuc3R5bGUuYm9yZGVyQm90dG9tID0gc2l6ZXMuYm90dG9tICsgInB4IHNvbGlkIHRyYW5zcGFyZW50IjsNCg0KICAgIGlmIChzaXplcy5yaWdodCAmJiBzaXplcy5ib3R0b20pIHsNCiAgICAgIGQuc2Nyb2xsYmFyRmlsbGVyLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOw0KICAgICAgZC5zY3JvbGxiYXJGaWxsZXIuc3R5bGUuaGVpZ2h0ID0gc2l6ZXMuYm90dG9tICsgInB4IjsNCiAgICAgIGQuc2Nyb2xsYmFyRmlsbGVyLnN0eWxlLndpZHRoID0gc2l6ZXMucmlnaHQgKyAicHgiOw0KICAgIH0gZWxzZSB7IGQuc2Nyb2xsYmFyRmlsbGVyLnN0eWxlLmRpc3BsYXkgPSAiIjsgfQ0KICAgIGlmIChzaXplcy5ib3R0b20gJiYgY20ub3B0aW9ucy5jb3Zlckd1dHRlck5leHRUb1Njcm9sbGJhciAmJiBjbS5vcHRpb25zLmZpeGVkR3V0dGVyKSB7DQogICAgICBkLmd1dHRlckZpbGxlci5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsNCiAgICAgIGQuZ3V0dGVyRmlsbGVyLnN0eWxlLmhlaWdodCA9IHNpemVzLmJvdHRvbSArICJweCI7DQogICAgICBkLmd1dHRlckZpbGxlci5zdHlsZS53aWR0aCA9IG1lYXN1cmUuZ3V0dGVyV2lkdGggKyAicHgiOw0KICAgIH0gZWxzZSB7IGQuZ3V0dGVyRmlsbGVyLnN0eWxlLmRpc3BsYXkgPSAiIjsgfQ0KICB9DQoNCiAgdmFyIHNjcm9sbGJhck1vZGVsID0geyJuYXRpdmUiOiBOYXRpdmVTY3JvbGxiYXJzLCAibnVsbCI6IE51bGxTY3JvbGxiYXJzfTsNCg0KICBmdW5jdGlvbiBpbml0U2Nyb2xsYmFycyhjbSkgew0KICAgIGlmIChjbS5kaXNwbGF5LnNjcm9sbGJhcnMpIHsNCiAgICAgIGNtLmRpc3BsYXkuc2Nyb2xsYmFycy5jbGVhcigpOw0KICAgICAgaWYgKGNtLmRpc3BsYXkuc2Nyb2xsYmFycy5hZGRDbGFzcykNCiAgICAgICAgeyBybUNsYXNzKGNtLmRpc3BsYXkud3JhcHBlciwgY20uZGlzcGxheS5zY3JvbGxiYXJzLmFkZENsYXNzKTsgfQ0KICAgIH0NCg0KICAgIGNtLmRpc3BsYXkuc2Nyb2xsYmFycyA9IG5ldyBzY3JvbGxiYXJNb2RlbFtjbS5vcHRpb25zLnNjcm9sbGJhclN0eWxlXShmdW5jdGlvbiAobm9kZSkgew0KICAgICAgY20uZGlzcGxheS53cmFwcGVyLmluc2VydEJlZm9yZShub2RlLCBjbS5kaXNwbGF5LnNjcm9sbGJhckZpbGxlcik7DQogICAgICAvLyBQcmV2ZW50IGNsaWNrcyBpbiB0aGUgc2Nyb2xsYmFycyBmcm9tIGtpbGxpbmcgZm9jdXMNCiAgICAgIG9uKG5vZGUsICJtb3VzZWRvd24iLCBmdW5jdGlvbiAoKSB7DQogICAgICAgIGlmIChjbS5zdGF0ZS5mb2N1c2VkKSB7IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gY20uZGlzcGxheS5pbnB1dC5mb2N1cygpOyB9LCAwKTsgfQ0KICAgICAgfSk7DQogICAgICBub2RlLnNldEF0dHJpYnV0ZSgiY20tbm90LWNvbnRlbnQiLCAidHJ1ZSIpOw0KICAgIH0sIGZ1bmN0aW9uIChwb3MsIGF4aXMpIHsNCiAgICAgIGlmIChheGlzID09ICJob3Jpem9udGFsIikgeyBzZXRTY3JvbGxMZWZ0KGNtLCBwb3MpOyB9DQogICAgICBlbHNlIHsgdXBkYXRlU2Nyb2xsVG9wKGNtLCBwb3MpOyB9DQogICAgfSwgY20pOw0KICAgIGlmIChjbS5kaXNwbGF5LnNjcm9sbGJhcnMuYWRkQ2xhc3MpDQogICAgICB7IGFkZENsYXNzKGNtLmRpc3BsYXkud3JhcHBlciwgY20uZGlzcGxheS5zY3JvbGxiYXJzLmFkZENsYXNzKTsgfQ0KICB9DQoNCiAgLy8gT3BlcmF0aW9ucyBhcmUgdXNlZCB0byB3cmFwIGEgc2VyaWVzIG9mIGNoYW5nZXMgdG8gdGhlIGVkaXRvcg0KICAvLyBzdGF0ZSBpbiBzdWNoIGEgd2F5IHRoYXQgZWFjaCBjaGFuZ2Ugd29uJ3QgaGF2ZSB0byB1cGRhdGUgdGhlDQogIC8vIGN1cnNvciBhbmQgZGlzcGxheSAod2hpY2ggd291bGQgYmUgYXdrd2FyZCwgc2xvdywgYW5kDQogIC8vIGVycm9yLXByb25lKS4gSW5zdGVhZCwgZGlzcGxheSB1cGRhdGVzIGFyZSBiYXRjaGVkIGFuZCB0aGVuIGFsbA0KICAvLyBjb21iaW5lZCBhbmQgZXhlY3V0ZWQgYXQgb25jZS4NCg0KICB2YXIgbmV4dE9wSWQgPSAwOw0KICAvLyBTdGFydCBhIG5ldyBvcGVyYXRpb24uDQogIGZ1bmN0aW9uIHN0YXJ0T3BlcmF0aW9uKGNtKSB7DQogICAgY20uY3VyT3AgPSB7DQogICAgICBjbTogY20sDQogICAgICB2aWV3Q2hhbmdlZDogZmFsc2UsICAgICAgLy8gRmxhZyB0aGF0IGluZGljYXRlcyB0aGF0IGxpbmVzIG1pZ2h0IG5lZWQgdG8gYmUgcmVkcmF3bg0KICAgICAgc3RhcnRIZWlnaHQ6IGNtLmRvYy5oZWlnaHQsIC8vIFVzZWQgdG8gZGV0ZWN0IG5lZWQgdG8gdXBkYXRlIHNjcm9sbGJhcg0KICAgICAgZm9yY2VVcGRhdGU6IGZhbHNlLCAgICAgIC8vIFVzZWQgdG8gZm9yY2UgYSByZWRyYXcNCiAgICAgIHVwZGF0ZUlucHV0OiAwLCAgICAgICAvLyBXaGV0aGVyIHRvIHJlc2V0IHRoZSBpbnB1dCB0ZXh0YXJlYQ0KICAgICAgdHlwaW5nOiBmYWxzZSwgICAgICAgICAgIC8vIFdoZXRoZXIgdGhpcyByZXNldCBzaG91bGQgYmUgY2FyZWZ1bCB0byBsZWF2ZSBleGlzdGluZyB0ZXh0IChmb3IgY29tcG9zaXRpbmcpDQogICAgICBjaGFuZ2VPYmpzOiBudWxsLCAgICAgICAgLy8gQWNjdW11bGF0ZWQgY2hhbmdlcywgZm9yIGZpcmluZyBjaGFuZ2UgZXZlbnRzDQogICAgICBjdXJzb3JBY3Rpdml0eUhhbmRsZXJzOiBudWxsLCAvLyBTZXQgb2YgaGFuZGxlcnMgdG8gZmlyZSBjdXJzb3JBY3Rpdml0eSBvbg0KICAgICAgY3Vyc29yQWN0aXZpdHlDYWxsZWQ6IDAsIC8vIFRyYWNrcyB3aGljaCBjdXJzb3JBY3Rpdml0eSBoYW5kbGVycyBoYXZlIGJlZW4gY2FsbGVkIGFscmVhZHkNCiAgICAgIHNlbGVjdGlvbkNoYW5nZWQ6IGZhbHNlLCAvLyBXaGV0aGVyIHRoZSBzZWxlY3Rpb24gbmVlZHMgdG8gYmUgcmVkcmF3bg0KICAgICAgdXBkYXRlTWF4TGluZTogZmFsc2UsICAgIC8vIFNldCB3aGVuIHRoZSB3aWRlc3QgbGluZSBuZWVkcyB0byBiZSBkZXRlcm1pbmVkIGFuZXcNCiAgICAgIHNjcm9sbExlZnQ6IG51bGwsIHNjcm9sbFRvcDogbnVsbCwgLy8gSW50ZXJtZWRpYXRlIHNjcm9sbCBwb3NpdGlvbiwgbm90IHB1c2hlZCB0byBET00geWV0DQogICAgICBzY3JvbGxUb1BvczogbnVsbCwgICAgICAgLy8gVXNlZCB0byBzY3JvbGwgdG8gYSBzcGVjaWZpYyBwb3NpdGlvbg0KICAgICAgZm9jdXM6IGZhbHNlLA0KICAgICAgaWQ6ICsrbmV4dE9wSWQgICAgICAgICAgIC8vIFVuaXF1ZSBJRA0KICAgIH07DQogICAgcHVzaE9wZXJhdGlvbihjbS5jdXJPcCk7DQogIH0NCg0KICAvLyBGaW5pc2ggYW4gb3BlcmF0aW9uLCB1cGRhdGluZyB0aGUgZGlzcGxheSBhbmQgc2lnbmFsbGluZyBkZWxheWVkIGV2ZW50cw0KICBmdW5jdGlvbiBlbmRPcGVyYXRpb24oY20pIHsNCiAgICB2YXIgb3AgPSBjbS5jdXJPcDsNCiAgICBpZiAob3ApIHsgZmluaXNoT3BlcmF0aW9uKG9wLCBmdW5jdGlvbiAoZ3JvdXApIHsNCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXAub3BzLmxlbmd0aDsgaSsrKQ0KICAgICAgICB7IGdyb3VwLm9wc1tpXS5jbS5jdXJPcCA9IG51bGw7IH0NCiAgICAgIGVuZE9wZXJhdGlvbnMoZ3JvdXApOw0KICAgIH0pOyB9DQogIH0NCg0KICAvLyBUaGUgRE9NIHVwZGF0ZXMgZG9uZSB3aGVuIGFuIG9wZXJhdGlvbiBmaW5pc2hlcyBhcmUgYmF0Y2hlZCBzbw0KICAvLyB0aGF0IHRoZSBtaW5pbXVtIG51bWJlciBvZiByZWxheW91dHMgYXJlIHJlcXVpcmVkLg0KICBmdW5jdGlvbiBlbmRPcGVyYXRpb25zKGdyb3VwKSB7DQogICAgdmFyIG9wcyA9IGdyb3VwLm9wczsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wcy5sZW5ndGg7IGkrKykgLy8gUmVhZCBET00NCiAgICAgIHsgZW5kT3BlcmF0aW9uX1IxKG9wc1tpXSk7IH0NCiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBvcHMubGVuZ3RoOyBpJDErKykgLy8gV3JpdGUgRE9NIChtYXliZSkNCiAgICAgIHsgZW5kT3BlcmF0aW9uX1cxKG9wc1tpJDFdKTsgfQ0KICAgIGZvciAodmFyIGkkMiA9IDA7IGkkMiA8IG9wcy5sZW5ndGg7IGkkMisrKSAvLyBSZWFkIERPTQ0KICAgICAgeyBlbmRPcGVyYXRpb25fUjIob3BzW2kkMl0pOyB9DQogICAgZm9yICh2YXIgaSQzID0gMDsgaSQzIDwgb3BzLmxlbmd0aDsgaSQzKyspIC8vIFdyaXRlIERPTSAobWF5YmUpDQogICAgICB7IGVuZE9wZXJhdGlvbl9XMihvcHNbaSQzXSk7IH0NCiAgICBmb3IgKHZhciBpJDQgPSAwOyBpJDQgPCBvcHMubGVuZ3RoOyBpJDQrKykgLy8gUmVhZCBET00NCiAgICAgIHsgZW5kT3BlcmF0aW9uX2ZpbmlzaChvcHNbaSQ0XSk7IH0NCiAgfQ0KDQogIGZ1bmN0aW9uIGVuZE9wZXJhdGlvbl9SMShvcCkgew0KICAgIHZhciBjbSA9IG9wLmNtLCBkaXNwbGF5ID0gY20uZGlzcGxheTsNCiAgICBtYXliZUNsaXBTY3JvbGxiYXJzKGNtKTsNCiAgICBpZiAob3AudXBkYXRlTWF4TGluZSkgeyBmaW5kTWF4TGluZShjbSk7IH0NCg0KICAgIG9wLm11c3RVcGRhdGUgPSBvcC52aWV3Q2hhbmdlZCB8fCBvcC5mb3JjZVVwZGF0ZSB8fCBvcC5zY3JvbGxUb3AgIT0gbnVsbCB8fA0KICAgICAgb3Auc2Nyb2xsVG9Qb3MgJiYgKG9wLnNjcm9sbFRvUG9zLmZyb20ubGluZSA8IGRpc3BsYXkudmlld0Zyb20gfHwNCiAgICAgICAgICAgICAgICAgICAgICAgICBvcC5zY3JvbGxUb1Bvcy50by5saW5lID49IGRpc3BsYXkudmlld1RvKSB8fA0KICAgICAgZGlzcGxheS5tYXhMaW5lQ2hhbmdlZCAmJiBjbS5vcHRpb25zLmxpbmVXcmFwcGluZzsNCiAgICBvcC51cGRhdGUgPSBvcC5tdXN0VXBkYXRlICYmDQogICAgICBuZXcgRGlzcGxheVVwZGF0ZShjbSwgb3AubXVzdFVwZGF0ZSAmJiB7dG9wOiBvcC5zY3JvbGxUb3AsIGVuc3VyZTogb3Auc2Nyb2xsVG9Qb3N9LCBvcC5mb3JjZVVwZGF0ZSk7DQogIH0NCg0KICBmdW5jdGlvbiBlbmRPcGVyYXRpb25fVzEob3ApIHsNCiAgICBvcC51cGRhdGVkRGlzcGxheSA9IG9wLm11c3RVcGRhdGUgJiYgdXBkYXRlRGlzcGxheUlmTmVlZGVkKG9wLmNtLCBvcC51cGRhdGUpOw0KICB9DQoNCiAgZnVuY3Rpb24gZW5kT3BlcmF0aW9uX1IyKG9wKSB7DQogICAgdmFyIGNtID0gb3AuY20sIGRpc3BsYXkgPSBjbS5kaXNwbGF5Ow0KICAgIGlmIChvcC51cGRhdGVkRGlzcGxheSkgeyB1cGRhdGVIZWlnaHRzSW5WaWV3cG9ydChjbSk7IH0NCg0KICAgIG9wLmJhck1lYXN1cmUgPSBtZWFzdXJlRm9yU2Nyb2xsYmFycyhjbSk7DQoNCiAgICAvLyBJZiB0aGUgbWF4IGxpbmUgY2hhbmdlZCBzaW5jZSBpdCB3YXMgbGFzdCBtZWFzdXJlZCwgbWVhc3VyZSBpdCwNCiAgICAvLyBhbmQgZW5zdXJlIHRoZSBkb2N1bWVudCdzIHdpZHRoIG1hdGNoZXMgaXQuDQogICAgLy8gdXBkYXRlRGlzcGxheV9XMiB3aWxsIHVzZSB0aGVzZSBwcm9wZXJ0aWVzIHRvIGRvIHRoZSBhY3R1YWwgcmVzaXppbmcNCiAgICBpZiAoZGlzcGxheS5tYXhMaW5lQ2hhbmdlZCAmJiAhY20ub3B0aW9ucy5saW5lV3JhcHBpbmcpIHsNCiAgICAgIG9wLmFkanVzdFdpZHRoVG8gPSBtZWFzdXJlQ2hhcihjbSwgZGlzcGxheS5tYXhMaW5lLCBkaXNwbGF5Lm1heExpbmUudGV4dC5sZW5ndGgpLmxlZnQgKyAzOw0KICAgICAgY20uZGlzcGxheS5zaXplcldpZHRoID0gb3AuYWRqdXN0V2lkdGhUbzsNCiAgICAgIG9wLmJhck1lYXN1cmUuc2Nyb2xsV2lkdGggPQ0KICAgICAgICBNYXRoLm1heChkaXNwbGF5LnNjcm9sbGVyLmNsaWVudFdpZHRoLCBkaXNwbGF5LnNpemVyLm9mZnNldExlZnQgKyBvcC5hZGp1c3RXaWR0aFRvICsgc2Nyb2xsR2FwKGNtKSArIGNtLmRpc3BsYXkuYmFyV2lkdGgpOw0KICAgICAgb3AubWF4U2Nyb2xsTGVmdCA9IE1hdGgubWF4KDAsIGRpc3BsYXkuc2l6ZXIub2Zmc2V0TGVmdCArIG9wLmFkanVzdFdpZHRoVG8gLSBkaXNwbGF5V2lkdGgoY20pKTsNCiAgICB9DQoNCiAgICBpZiAob3AudXBkYXRlZERpc3BsYXkgfHwgb3Auc2VsZWN0aW9uQ2hhbmdlZCkNCiAgICAgIHsgb3AucHJlcGFyZWRTZWxlY3Rpb24gPSBkaXNwbGF5LmlucHV0LnByZXBhcmVTZWxlY3Rpb24oKTsgfQ0KICB9DQoNCiAgZnVuY3Rpb24gZW5kT3BlcmF0aW9uX1cyKG9wKSB7DQogICAgdmFyIGNtID0gb3AuY207DQoNCiAgICBpZiAob3AuYWRqdXN0V2lkdGhUbyAhPSBudWxsKSB7DQogICAgICBjbS5kaXNwbGF5LnNpemVyLnN0eWxlLm1pbldpZHRoID0gb3AuYWRqdXN0V2lkdGhUbyArICJweCI7DQogICAgICBpZiAob3AubWF4U2Nyb2xsTGVmdCA8IGNtLmRvYy5zY3JvbGxMZWZ0KQ0KICAgICAgICB7IHNldFNjcm9sbExlZnQoY20sIE1hdGgubWluKGNtLmRpc3BsYXkuc2Nyb2xsZXIuc2Nyb2xsTGVmdCwgb3AubWF4U2Nyb2xsTGVmdCksIHRydWUpOyB9DQogICAgICBjbS5kaXNwbGF5Lm1heExpbmVDaGFuZ2VkID0gZmFsc2U7DQogICAgfQ0KDQogICAgdmFyIHRha2VGb2N1cyA9IG9wLmZvY3VzICYmIG9wLmZvY3VzID09IGFjdGl2ZUVsdCgpOw0KICAgIGlmIChvcC5wcmVwYXJlZFNlbGVjdGlvbikNCiAgICAgIHsgY20uZGlzcGxheS5pbnB1dC5zaG93U2VsZWN0aW9uKG9wLnByZXBhcmVkU2VsZWN0aW9uLCB0YWtlRm9jdXMpOyB9DQogICAgaWYgKG9wLnVwZGF0ZWREaXNwbGF5IHx8IG9wLnN0YXJ0SGVpZ2h0ICE9IGNtLmRvYy5oZWlnaHQpDQogICAgICB7IHVwZGF0ZVNjcm9sbGJhcnMoY20sIG9wLmJhck1lYXN1cmUpOyB9DQogICAgaWYgKG9wLnVwZGF0ZWREaXNwbGF5KQ0KICAgICAgeyBzZXREb2N1bWVudEhlaWdodChjbSwgb3AuYmFyTWVhc3VyZSk7IH0NCg0KICAgIGlmIChvcC5zZWxlY3Rpb25DaGFuZ2VkKSB7IHJlc3RhcnRCbGluayhjbSk7IH0NCg0KICAgIGlmIChjbS5zdGF0ZS5mb2N1c2VkICYmIG9wLnVwZGF0ZUlucHV0KQ0KICAgICAgeyBjbS5kaXNwbGF5LmlucHV0LnJlc2V0KG9wLnR5cGluZyk7IH0NCiAgICBpZiAodGFrZUZvY3VzKSB7IGVuc3VyZUZvY3VzKG9wLmNtKTsgfQ0KICB9DQoNCiAgZnVuY3Rpb24gZW5kT3BlcmF0aW9uX2ZpbmlzaChvcCkgew0KICAgIHZhciBjbSA9IG9wLmNtLCBkaXNwbGF5ID0gY20uZGlzcGxheSwgZG9jID0gY20uZG9jOw0KDQogICAgaWYgKG9wLnVwZGF0ZWREaXNwbGF5KSB7IHBvc3RVcGRhdGVEaXNwbGF5KGNtLCBvcC51cGRhdGUpOyB9DQoNCiAgICAvLyBBYm9ydCBtb3VzZSB3aGVlbCBkZWx0YSBtZWFzdXJlbWVudCwgd2hlbiBzY3JvbGxpbmcgZXhwbGljaXRseQ0KICAgIGlmIChkaXNwbGF5LndoZWVsU3RhcnRYICE9IG51bGwgJiYgKG9wLnNjcm9sbFRvcCAhPSBudWxsIHx8IG9wLnNjcm9sbExlZnQgIT0gbnVsbCB8fCBvcC5zY3JvbGxUb1BvcykpDQogICAgICB7IGRpc3BsYXkud2hlZWxTdGFydFggPSBkaXNwbGF5LndoZWVsU3RhcnRZID0gbnVsbDsgfQ0KDQogICAgLy8gUHJvcGFnYXRlIHRoZSBzY3JvbGwgcG9zaXRpb24gdG8gdGhlIGFjdHVhbCBET00gc2Nyb2xsZXINCiAgICBpZiAob3Auc2Nyb2xsVG9wICE9IG51bGwpIHsgc2V0U2Nyb2xsVG9wKGNtLCBvcC5zY3JvbGxUb3AsIG9wLmZvcmNlU2Nyb2xsKTsgfQ0KDQogICAgaWYgKG9wLnNjcm9sbExlZnQgIT0gbnVsbCkgeyBzZXRTY3JvbGxMZWZ0KGNtLCBvcC5zY3JvbGxMZWZ0LCB0cnVlLCB0cnVlKTsgfQ0KICAgIC8vIElmIHdlIG5lZWQgdG8gc2Nyb2xsIGEgc3BlY2lmaWMgcG9zaXRpb24gaW50byB2aWV3LCBkbyBzby4NCiAgICBpZiAob3Auc2Nyb2xsVG9Qb3MpIHsNCiAgICAgIHZhciByZWN0ID0gc2Nyb2xsUG9zSW50b1ZpZXcoY20sIGNsaXBQb3MoZG9jLCBvcC5zY3JvbGxUb1Bvcy5mcm9tKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcFBvcyhkb2MsIG9wLnNjcm9sbFRvUG9zLnRvKSwgb3Auc2Nyb2xsVG9Qb3MubWFyZ2luKTsNCiAgICAgIG1heWJlU2Nyb2xsV2luZG93KGNtLCByZWN0KTsNCiAgICB9DQoNCiAgICAvLyBGaXJlIGV2ZW50cyBmb3IgbWFya2VycyB0aGF0IGFyZSBoaWRkZW4vdW5pZGRlbiBieSBlZGl0aW5nIG9yDQogICAgLy8gdW5kb2luZw0KICAgIHZhciBoaWRkZW4gPSBvcC5tYXliZUhpZGRlbk1hcmtlcnMsIHVuaGlkZGVuID0gb3AubWF5YmVVbmhpZGRlbk1hcmtlcnM7DQogICAgaWYgKGhpZGRlbikgeyBmb3IgKHZhciBpID0gMDsgaSA8IGhpZGRlbi5sZW5ndGg7ICsraSkNCiAgICAgIHsgaWYgKCFoaWRkZW5baV0ubGluZXMubGVuZ3RoKSB7IHNpZ25hbChoaWRkZW5baV0sICJoaWRlIik7IH0gfSB9DQogICAgaWYgKHVuaGlkZGVuKSB7IGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHVuaGlkZGVuLmxlbmd0aDsgKytpJDEpDQogICAgICB7IGlmICh1bmhpZGRlbltpJDFdLmxpbmVzLmxlbmd0aCkgeyBzaWduYWwodW5oaWRkZW5baSQxXSwgInVuaGlkZSIpOyB9IH0gfQ0KDQogICAgaWYgKGRpc3BsYXkud3JhcHBlci5vZmZzZXRIZWlnaHQpDQogICAgICB7IGRvYy5zY3JvbGxUb3AgPSBjbS5kaXNwbGF5LnNjcm9sbGVyLnNjcm9sbFRvcDsgfQ0KDQogICAgLy8gRmlyZSBjaGFuZ2UgZXZlbnRzLCBhbmQgZGVsYXllZCBldmVudCBoYW5kbGVycw0KICAgIGlmIChvcC5jaGFuZ2VPYmpzKQ0KICAgICAgeyBzaWduYWwoY20sICJjaGFuZ2VzIiwgY20sIG9wLmNoYW5nZU9ianMpOyB9DQogICAgaWYgKG9wLnVwZGF0ZSkNCiAgICAgIHsgb3AudXBkYXRlLmZpbmlzaCgpOyB9DQogIH0NCg0KICAvLyBSdW4gdGhlIGdpdmVuIGZ1bmN0aW9uIGluIGFuIG9wZXJhdGlvbg0KICBmdW5jdGlvbiBydW5Jbk9wKGNtLCBmKSB7DQogICAgaWYgKGNtLmN1ck9wKSB7IHJldHVybiBmKCkgfQ0KICAgIHN0YXJ0T3BlcmF0aW9uKGNtKTsNCiAgICB0cnkgeyByZXR1cm4gZigpIH0NCiAgICBmaW5hbGx5IHsgZW5kT3BlcmF0aW9uKGNtKTsgfQ0KICB9DQogIC8vIFdyYXBzIGEgZnVuY3Rpb24gaW4gYW4gb3BlcmF0aW9uLiBSZXR1cm5zIHRoZSB3cmFwcGVkIGZ1bmN0aW9uLg0KICBmdW5jdGlvbiBvcGVyYXRpb24oY20sIGYpIHsNCiAgICByZXR1cm4gZnVuY3Rpb24oKSB7DQogICAgICBpZiAoY20uY3VyT3ApIHsgcmV0dXJuIGYuYXBwbHkoY20sIGFyZ3VtZW50cykgfQ0KICAgICAgc3RhcnRPcGVyYXRpb24oY20pOw0KICAgICAgdHJ5IHsgcmV0dXJuIGYuYXBwbHkoY20sIGFyZ3VtZW50cykgfQ0KICAgICAgZmluYWxseSB7IGVuZE9wZXJhdGlvbihjbSk7IH0NCiAgICB9DQogIH0NCiAgLy8gVXNlZCB0byBhZGQgbWV0aG9kcyB0byBlZGl0b3IgYW5kIGRvYyBpbnN0YW5jZXMsIHdyYXBwaW5nIHRoZW0gaW4NCiAgLy8gb3BlcmF0aW9ucy4NCiAgZnVuY3Rpb24gbWV0aG9kT3AoZikgew0KICAgIHJldHVybiBmdW5jdGlvbigpIHsNCiAgICAgIGlmICh0aGlzLmN1ck9wKSB7IHJldHVybiBmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfQ0KICAgICAgc3RhcnRPcGVyYXRpb24odGhpcyk7DQogICAgICB0cnkgeyByZXR1cm4gZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIH0NCiAgICAgIGZpbmFsbHkgeyBlbmRPcGVyYXRpb24odGhpcyk7IH0NCiAgICB9DQogIH0NCiAgZnVuY3Rpb24gZG9jTWV0aG9kT3AoZikgew0KICAgIHJldHVybiBmdW5jdGlvbigpIHsNCiAgICAgIHZhciBjbSA9IHRoaXMuY207DQogICAgICBpZiAoIWNtIHx8IGNtLmN1ck9wKSB7IHJldHVybiBmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfQ0KICAgICAgc3RhcnRPcGVyYXRpb24oY20pOw0KICAgICAgdHJ5IHsgcmV0dXJuIGYuYXBwbHkodGhpcywgYXJndW1lbnRzKSB9DQogICAgICBmaW5hbGx5IHsgZW5kT3BlcmF0aW9uKGNtKTsgfQ0KICAgIH0NCiAgfQ0KDQogIC8vIEhJR0hMSUdIVCBXT1JLRVINCg0KICBmdW5jdGlvbiBzdGFydFdvcmtlcihjbSwgdGltZSkgew0KICAgIGlmIChjbS5kb2MuaGlnaGxpZ2h0RnJvbnRpZXIgPCBjbS5kaXNwbGF5LnZpZXdUbykNCiAgICAgIHsgY20uc3RhdGUuaGlnaGxpZ2h0LnNldCh0aW1lLCBiaW5kKGhpZ2hsaWdodFdvcmtlciwgY20pKTsgfQ0KICB9DQoNCiAgZnVuY3Rpb24gaGlnaGxpZ2h0V29ya2VyKGNtKSB7DQogICAgdmFyIGRvYyA9IGNtLmRvYzsNCiAgICBpZiAoZG9jLmhpZ2hsaWdodEZyb250aWVyID49IGNtLmRpc3BsYXkudmlld1RvKSB7IHJldHVybiB9DQogICAgdmFyIGVuZCA9ICtuZXcgRGF0ZSArIGNtLm9wdGlvbnMud29ya1RpbWU7DQogICAgdmFyIGNvbnRleHQgPSBnZXRDb250ZXh0QmVmb3JlKGNtLCBkb2MuaGlnaGxpZ2h0RnJvbnRpZXIpOw0KICAgIHZhciBjaGFuZ2VkTGluZXMgPSBbXTsNCg0KICAgIGRvYy5pdGVyKGNvbnRleHQubGluZSwgTWF0aC5taW4oZG9jLmZpcnN0ICsgZG9jLnNpemUsIGNtLmRpc3BsYXkudmlld1RvICsgNTAwKSwgZnVuY3Rpb24gKGxpbmUpIHsNCiAgICAgIGlmIChjb250ZXh0LmxpbmUgPj0gY20uZGlzcGxheS52aWV3RnJvbSkgeyAvLyBWaXNpYmxlDQogICAgICAgIHZhciBvbGRTdHlsZXMgPSBsaW5lLnN0eWxlczsNCiAgICAgICAgdmFyIHJlc2V0U3RhdGUgPSBsaW5lLnRleHQubGVuZ3RoID4gY20ub3B0aW9ucy5tYXhIaWdobGlnaHRMZW5ndGggPyBjb3B5U3RhdGUoZG9jLm1vZGUsIGNvbnRleHQuc3RhdGUpIDogbnVsbDsNCiAgICAgICAgdmFyIGhpZ2hsaWdodGVkID0gaGlnaGxpZ2h0TGluZShjbSwgbGluZSwgY29udGV4dCwgdHJ1ZSk7DQogICAgICAgIGlmIChyZXNldFN0YXRlKSB7IGNvbnRleHQuc3RhdGUgPSByZXNldFN0YXRlOyB9DQogICAgICAgIGxpbmUuc3R5bGVzID0gaGlnaGxpZ2h0ZWQuc3R5bGVzOw0KICAgICAgICB2YXIgb2xkQ2xzID0gbGluZS5zdHlsZUNsYXNzZXMsIG5ld0NscyA9IGhpZ2hsaWdodGVkLmNsYXNzZXM7DQogICAgICAgIGlmIChuZXdDbHMpIHsgbGluZS5zdHlsZUNsYXNzZXMgPSBuZXdDbHM7IH0NCiAgICAgICAgZWxzZSBpZiAob2xkQ2xzKSB7IGxpbmUuc3R5bGVDbGFzc2VzID0gbnVsbDsgfQ0KICAgICAgICB2YXIgaXNjaGFuZ2UgPSAhb2xkU3R5bGVzIHx8IG9sZFN0eWxlcy5sZW5ndGggIT0gbGluZS5zdHlsZXMubGVuZ3RoIHx8DQogICAgICAgICAgb2xkQ2xzICE9IG5ld0NscyAmJiAoIW9sZENscyB8fCAhbmV3Q2xzIHx8IG9sZENscy5iZ0NsYXNzICE9IG5ld0Nscy5iZ0NsYXNzIHx8IG9sZENscy50ZXh0Q2xhc3MgIT0gbmV3Q2xzLnRleHRDbGFzcyk7DQogICAgICAgIGZvciAodmFyIGkgPSAwOyAhaXNjaGFuZ2UgJiYgaSA8IG9sZFN0eWxlcy5sZW5ndGg7ICsraSkgeyBpc2NoYW5nZSA9IG9sZFN0eWxlc1tpXSAhPSBsaW5lLnN0eWxlc1tpXTsgfQ0KICAgICAgICBpZiAoaXNjaGFuZ2UpIHsgY2hhbmdlZExpbmVzLnB1c2goY29udGV4dC5saW5lKTsgfQ0KICAgICAgICBsaW5lLnN0YXRlQWZ0ZXIgPSBjb250ZXh0LnNhdmUoKTsNCiAgICAgICAgY29udGV4dC5uZXh0TGluZSgpOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgaWYgKGxpbmUudGV4dC5sZW5ndGggPD0gY20ub3B0aW9ucy5tYXhIaWdobGlnaHRMZW5ndGgpDQogICAgICAgICAgeyBwcm9jZXNzTGluZShjbSwgbGluZS50ZXh0LCBjb250ZXh0KTsgfQ0KICAgICAgICBsaW5lLnN0YXRlQWZ0ZXIgPSBjb250ZXh0LmxpbmUgJSA1ID09IDAgPyBjb250ZXh0LnNhdmUoKSA6IG51bGw7DQogICAgICAgIGNvbnRleHQubmV4dExpbmUoKTsNCiAgICAgIH0NCiAgICAgIGlmICgrbmV3IERhdGUgPiBlbmQpIHsNCiAgICAgICAgc3RhcnRXb3JrZXIoY20sIGNtLm9wdGlvbnMud29ya0RlbGF5KTsNCiAgICAgICAgcmV0dXJuIHRydWUNCiAgICAgIH0NCiAgICB9KTsNCiAgICBkb2MuaGlnaGxpZ2h0RnJvbnRpZXIgPSBjb250ZXh0LmxpbmU7DQogICAgZG9jLm1vZGVGcm9udGllciA9IE1hdGgubWF4KGRvYy5tb2RlRnJvbnRpZXIsIGNvbnRleHQubGluZSk7DQogICAgaWYgKGNoYW5nZWRMaW5lcy5sZW5ndGgpIHsgcnVuSW5PcChjbSwgZnVuY3Rpb24gKCkgew0KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFuZ2VkTGluZXMubGVuZ3RoOyBpKyspDQogICAgICAgIHsgcmVnTGluZUNoYW5nZShjbSwgY2hhbmdlZExpbmVzW2ldLCAidGV4dCIpOyB9DQogICAgfSk7IH0NCiAgfQ0KDQogIC8vIERJU1BMQVkgRFJBV0lORw0KDQogIHZhciBEaXNwbGF5VXBkYXRlID0gZnVuY3Rpb24oY20sIHZpZXdwb3J0LCBmb3JjZSkgew0KICAgIHZhciBkaXNwbGF5ID0gY20uZGlzcGxheTsNCg0KICAgIHRoaXMudmlld3BvcnQgPSB2aWV3cG9ydDsNCiAgICAvLyBTdG9yZSBzb21lIHZhbHVlcyB0aGF0IHdlJ2xsIG5lZWQgbGF0ZXIgKGJ1dCBkb24ndCB3YW50IHRvIGZvcmNlIGEgcmVsYXlvdXQgZm9yKQ0KICAgIHRoaXMudmlzaWJsZSA9IHZpc2libGVMaW5lcyhkaXNwbGF5LCBjbS5kb2MsIHZpZXdwb3J0KTsNCiAgICB0aGlzLmVkaXRvcklzSGlkZGVuID0gIWRpc3BsYXkud3JhcHBlci5vZmZzZXRXaWR0aDsNCiAgICB0aGlzLndyYXBwZXJIZWlnaHQgPSBkaXNwbGF5LndyYXBwZXIuY2xpZW50SGVpZ2h0Ow0KICAgIHRoaXMud3JhcHBlcldpZHRoID0gZGlzcGxheS53cmFwcGVyLmNsaWVudFdpZHRoOw0KICAgIHRoaXMub2xkRGlzcGxheVdpZHRoID0gZGlzcGxheVdpZHRoKGNtKTsNCiAgICB0aGlzLmZvcmNlID0gZm9yY2U7DQogICAgdGhpcy5kaW1zID0gZ2V0RGltZW5zaW9ucyhjbSk7DQogICAgdGhpcy5ldmVudHMgPSBbXTsNCiAgfTsNCg0KICBEaXNwbGF5VXBkYXRlLnByb3RvdHlwZS5zaWduYWwgPSBmdW5jdGlvbiAoZW1pdHRlciwgdHlwZSkgew0KICAgIGlmIChoYXNIYW5kbGVyKGVtaXR0ZXIsIHR5cGUpKQ0KICAgICAgeyB0aGlzLmV2ZW50cy5wdXNoKGFyZ3VtZW50cyk7IH0NCiAgfTsNCiAgRGlzcGxheVVwZGF0ZS5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24gKCkgew0KICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZXZlbnRzLmxlbmd0aDsgaSsrKQ0KICAgICAgeyBzaWduYWwuYXBwbHkobnVsbCwgdGhpcyQxLmV2ZW50c1tpXSk7IH0NCiAgfTsNCg0KICBmdW5jdGlvbiBtYXliZUNsaXBTY3JvbGxiYXJzKGNtKSB7DQogICAgdmFyIGRpc3BsYXkgPSBjbS5kaXNwbGF5Ow0KICAgIGlmICghZGlzcGxheS5zY3JvbGxiYXJzQ2xpcHBlZCAmJiBkaXNwbGF5LnNjcm9sbGVyLm9mZnNldFdpZHRoKSB7DQogICAgICBkaXNwbGF5Lm5hdGl2ZUJhcldpZHRoID0gZGlzcGxheS5zY3JvbGxlci5vZmZzZXRXaWR0aCAtIGRpc3BsYXkuc2Nyb2xsZXIuY2xpZW50V2lkdGg7DQogICAgICBkaXNwbGF5LmhlaWdodEZvcmNlci5zdHlsZS5oZWlnaHQgPSBzY3JvbGxHYXAoY20pICsgInB4IjsNCiAgICAgIGRpc3BsYXkuc2l6ZXIuc3R5bGUubWFyZ2luQm90dG9tID0gLWRpc3BsYXkubmF0aXZlQmFyV2lkdGggKyAicHgiOw0KICAgICAgZGlzcGxheS5zaXplci5zdHlsZS5ib3JkZXJSaWdodFdpZHRoID0gc2Nyb2xsR2FwKGNtKSArICJweCI7DQogICAgICBkaXNwbGF5LnNjcm9sbGJhcnNDbGlwcGVkID0gdHJ1ZTsNCiAgICB9DQogIH0NCg0KICBmdW5jdGlvbiBzZWxlY3Rpb25TbmFwc2hvdChjbSkgew0KICAgIGlmIChjbS5oYXNGb2N1cygpKSB7IHJldHVybiBudWxsIH0NCiAgICB2YXIgYWN0aXZlID0gYWN0aXZlRWx0KCk7DQogICAgaWYgKCFhY3RpdmUgfHwgIWNvbnRhaW5zKGNtLmRpc3BsYXkubGluZURpdiwgYWN0aXZlKSkgeyByZXR1cm4gbnVsbCB9DQogICAgdmFyIHJlc3VsdCA9IHthY3RpdmVFbHQ6IGFjdGl2ZX07DQogICAgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHsNCiAgICAgIHZhciBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7DQogICAgICBpZiAoc2VsLmFuY2hvck5vZGUgJiYgc2VsLmV4dGVuZCAmJiBjb250YWlucyhjbS5kaXNwbGF5LmxpbmVEaXYsIHNlbC5hbmNob3JOb2RlKSkgew0KICAgICAgICByZXN1bHQuYW5jaG9yTm9kZSA9IHNlbC5hbmNob3JOb2RlOw0KICAgICAgICByZXN1bHQuYW5jaG9yT2Zmc2V0ID0gc2VsLmFuY2hvck9mZnNldDsNCiAgICAgICAgcmVzdWx0LmZvY3VzTm9kZSA9IHNlbC5mb2N1c05vZGU7DQogICAgICAgIHJlc3VsdC5mb2N1c09mZnNldCA9IHNlbC5mb2N1c09mZnNldDsNCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIHJlc3VsdA0KICB9DQoNCiAgZnVuY3Rpb24gcmVzdG9yZVNlbGVjdGlvbihzbmFwc2hvdCkgew0KICAgIGlmICghc25hcHNob3QgfHwgIXNuYXBzaG90LmFjdGl2ZUVsdCB8fCBzbmFwc2hvdC5hY3RpdmVFbHQgPT0gYWN0aXZlRWx0KCkpIHsgcmV0dXJuIH0NCiAgICBzbmFwc2hvdC5hY3RpdmVFbHQuZm9jdXMoKTsNCiAgICBpZiAoc25hcHNob3QuYW5jaG9yTm9kZSAmJiBjb250YWlucyhkb2N1bWVudC5ib2R5LCBzbmFwc2hvdC5hbmNob3JOb2RlKSAmJiBjb250YWlucyhkb2N1bWVudC5ib2R5LCBzbmFwc2hvdC5mb2N1c05vZGUpKSB7DQogICAgICB2YXIgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpLCByYW5nZSQkMSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7DQogICAgICByYW5nZSQkMS5zZXRFbmQoc25hcHNob3QuYW5jaG9yTm9kZSwgc25hcHNob3QuYW5jaG9yT2Zmc2V0KTsNCiAgICAgIHJhbmdlJCQxLmNvbGxhcHNlKGZhbHNlKTsNCiAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTsNCiAgICAgIHNlbC5hZGRSYW5nZShyYW5nZSQkMSk7DQogICAgICBzZWwuZXh0ZW5kKHNuYXBzaG90LmZvY3VzTm9kZSwgc25hcHNob3QuZm9jdXNPZmZzZXQpOw0KICAgIH0NCiAgfQ0KDQogIC8vIERvZXMgdGhlIGFjdHVhbCB1cGRhdGluZyBvZiB0aGUgbGluZSBkaXNwbGF5LiBCYWlscyBvdXQNCiAgLy8gKHJldHVybmluZyBmYWxzZSkgd2hlbiB0aGVyZSBpcyBub3RoaW5nIHRvIGJlIGRvbmUgYW5kIGZvcmNlZCBpcw0KICAvLyBmYWxzZS4NCiAgZnVuY3Rpb24gdXBkYXRlRGlzcGxheUlmTmVlZGVkKGNtLCB1cGRhdGUpIHsNCiAgICB2YXIgZGlzcGxheSA9IGNtLmRpc3BsYXksIGRvYyA9IGNtLmRvYzsNCg0KICAgIGlmICh1cGRhdGUuZWRpdG9ySXNIaWRkZW4pIHsNCiAgICAgIHJlc2V0VmlldyhjbSk7DQogICAgICByZXR1cm4gZmFsc2UNCiAgICB9DQoNCiAgICAvLyBCYWlsIG91dCBpZiB0aGUgdmlzaWJsZSBhcmVhIGlzIGFscmVhZHkgcmVuZGVyZWQgYW5kIG5vdGhpbmcgY2hhbmdlZC4NCiAgICBpZiAoIXVwZGF0ZS5mb3JjZSAmJg0KICAgICAgICB1cGRhdGUudmlzaWJsZS5mcm9tID49IGRpc3BsYXkudmlld0Zyb20gJiYgdXBkYXRlLnZpc2libGUudG8gPD0gZGlzcGxheS52aWV3VG8gJiYNCiAgICAgICAgKGRpc3BsYXkudXBkYXRlTGluZU51bWJlcnMgPT0gbnVsbCB8fCBkaXNwbGF5LnVwZGF0ZUxpbmVOdW1iZXJzID49IGRpc3BsYXkudmlld1RvKSAmJg0KICAgICAgICBkaXNwbGF5LnJlbmRlcmVkVmlldyA9PSBkaXNwbGF5LnZpZXcgJiYgY291bnREaXJ0eVZpZXcoY20pID09IDApDQogICAgICB7IHJldHVybiBmYWxzZSB9DQoNCiAgICBpZiAobWF5YmVVcGRhdGVMaW5lTnVtYmVyV2lkdGgoY20pKSB7DQogICAgICByZXNldFZpZXcoY20pOw0KICAgICAgdXBkYXRlLmRpbXMgPSBnZXREaW1lbnNpb25zKGNtKTsNCiAgICB9DQoNCiAgICAvLyBDb21wdXRlIGEgc3VpdGFibGUgbmV3IHZpZXdwb3J0IChmcm9tICYgdG8pDQogICAgdmFyIGVuZCA9IGRvYy5maXJzdCArIGRvYy5zaXplOw0KICAgIHZhciBmcm9tID0gTWF0aC5tYXgodXBkYXRlLnZpc2libGUuZnJvbSAtIGNtLm9wdGlvbnMudmlld3BvcnRNYXJnaW4sIGRvYy5maXJzdCk7DQogICAgdmFyIHRvID0gTWF0aC5taW4oZW5kLCB1cGRhdGUudmlzaWJsZS50byArIGNtLm9wdGlvbnMudmlld3BvcnRNYXJnaW4pOw0KICAgIGlmIChkaXNwbGF5LnZpZXdGcm9tIDwgZnJvbSAmJiBmcm9tIC0gZGlzcGxheS52aWV3RnJvbSA8IDIwKSB7IGZyb20gPSBNYXRoLm1heChkb2MuZmlyc3QsIGRpc3BsYXkudmlld0Zyb20pOyB9DQogICAgaWYgKGRpc3BsYXkudmlld1RvID4gdG8gJiYgZGlzcGxheS52aWV3VG8gLSB0byA8IDIwKSB7IHRvID0gTWF0aC5taW4oZW5kLCBkaXNwbGF5LnZpZXdUbyk7IH0NCiAgICBpZiAoc2F3Q29sbGFwc2VkU3BhbnMpIHsNCiAgICAgIGZyb20gPSB2aXN1YWxMaW5lTm8oY20uZG9jLCBmcm9tKTsNCiAgICAgIHRvID0gdmlzdWFsTGluZUVuZE5vKGNtLmRvYywgdG8pOw0KICAgIH0NCg0KICAgIHZhciBkaWZmZXJlbnQgPSBmcm9tICE9IGRpc3BsYXkudmlld0Zyb20gfHwgdG8gIT0gZGlzcGxheS52aWV3VG8gfHwNCiAgICAgIGRpc3BsYXkubGFzdFdyYXBIZWlnaHQgIT0gdXBkYXRlLndyYXBwZXJIZWlnaHQgfHwgZGlzcGxheS5sYXN0V3JhcFdpZHRoICE9IHVwZGF0ZS53cmFwcGVyV2lkdGg7DQogICAgYWRqdXN0VmlldyhjbSwgZnJvbSwgdG8pOw0KDQogICAgZGlzcGxheS52aWV3T2Zmc2V0ID0gaGVpZ2h0QXRMaW5lKGdldExpbmUoY20uZG9jLCBkaXNwbGF5LnZpZXdGcm9tKSk7DQogICAgLy8gUG9zaXRpb24gdGhlIG1vdmVyIGRpdiB0byBhbGlnbiB3aXRoIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbg0KICAgIGNtLmRpc3BsYXkubW92ZXIuc3R5bGUudG9wID0gZGlzcGxheS52aWV3T2Zmc2V0ICsgInB4IjsNCg0KICAgIHZhciB0b1VwZGF0ZSA9IGNvdW50RGlydHlWaWV3KGNtKTsNCiAgICBpZiAoIWRpZmZlcmVudCAmJiB0b1VwZGF0ZSA9PSAwICYmICF1cGRhdGUuZm9yY2UgJiYgZGlzcGxheS5yZW5kZXJlZFZpZXcgPT0gZGlzcGxheS52aWV3ICYmDQogICAgICAgIChkaXNwbGF5LnVwZGF0ZUxpbmVOdW1iZXJzID09IG51bGwgfHwgZGlzcGxheS51cGRhdGVMaW5lTnVtYmVycyA+PSBkaXNwbGF5LnZpZXdUbykpDQogICAgICB7IHJldHVybiBmYWxzZSB9DQoNCiAgICAvLyBGb3IgYmlnIGNoYW5nZXMsIHdlIGhpZGUgdGhlIGVuY2xvc2luZyBlbGVtZW50IGR1cmluZyB0aGUNCiAgICAvLyB1cGRhdGUsIHNpbmNlIHRoYXQgc3BlZWRzIHVwIHRoZSBvcGVyYXRpb25zIG9uIG1vc3QgYnJvd3NlcnMuDQogICAgdmFyIHNlbFNuYXBzaG90ID0gc2VsZWN0aW9uU25hcHNob3QoY20pOw0KICAgIGlmICh0b1VwZGF0ZSA+IDQpIHsgZGlzcGxheS5saW5lRGl2LnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7IH0NCiAgICBwYXRjaERpc3BsYXkoY20sIGRpc3BsYXkudXBkYXRlTGluZU51bWJlcnMsIHVwZGF0ZS5kaW1zKTsNCiAgICBpZiAodG9VcGRhdGUgPiA0KSB7IGRpc3BsYXkubGluZURpdi5zdHlsZS5kaXNwbGF5ID0gIiI7IH0NCiAgICBkaXNwbGF5LnJlbmRlcmVkVmlldyA9IGRpc3BsYXkudmlldzsNCiAgICAvLyBUaGVyZSBtaWdodCBoYXZlIGJlZW4gYSB3aWRnZXQgd2l0aCBhIGZvY3VzZWQgZWxlbWVudCB0aGF0IGdvdA0KICAgIC8vIGhpZGRlbiBvciB1cGRhdGVkLCBpZiBzbyByZS1mb2N1cyBpdC4NCiAgICByZXN0b3JlU2VsZWN0aW9uKHNlbFNuYXBzaG90KTsNCg0KICAgIC8vIFByZXZlbnQgc2VsZWN0aW9uIGFuZCBjdXJzb3JzIGZyb20gaW50ZXJmZXJpbmcgd2l0aCB0aGUgc2Nyb2xsDQogICAgLy8gd2lkdGggYW5kIGhlaWdodC4NCiAgICByZW1vdmVDaGlsZHJlbihkaXNwbGF5LmN1cnNvckRpdik7DQogICAgcmVtb3ZlQ2hpbGRyZW4oZGlzcGxheS5zZWxlY3Rpb25EaXYpOw0KICAgIGRpc3BsYXkuZ3V0dGVycy5zdHlsZS5oZWlnaHQgPSBkaXNwbGF5LnNpemVyLnN0eWxlLm1pbkhlaWdodCA9IDA7DQoNCiAgICBpZiAoZGlmZmVyZW50KSB7DQogICAgICBkaXNwbGF5Lmxhc3RXcmFwSGVpZ2h0ID0gdXBkYXRlLndyYXBwZXJIZWlnaHQ7DQogICAgICBkaXNwbGF5Lmxhc3RXcmFwV2lkdGggPSB1cGRhdGUud3JhcHBlcldpZHRoOw0KICAgICAgc3RhcnRXb3JrZXIoY20sIDQwMCk7DQogICAgfQ0KDQogICAgZGlzcGxheS51cGRhdGVMaW5lTnVtYmVycyA9IG51bGw7DQoNCiAgICByZXR1cm4gdHJ1ZQ0KICB9DQoNCiAgZnVuY3Rpb24gcG9zdFVwZGF0ZURpc3BsYXkoY20sIHVwZGF0ZSkgew0KICAgIHZhciB2aWV3cG9ydCA9IHVwZGF0ZS52aWV3cG9ydDsNCg0KICAgIGZvciAodmFyIGZpcnN0ID0gdHJ1ZTs7IGZpcnN0ID0gZmFsc2UpIHsNCiAgICAgIGlmICghZmlyc3QgfHwgIWNtLm9wdGlvbnMubGluZVdyYXBwaW5nIHx8IHVwZGF0ZS5vbGREaXNwbGF5V2lkdGggPT0gZGlzcGxheVdpZHRoKGNtKSkgew0KICAgICAgICAvLyBDbGlwIGZvcmNlZCB2aWV3cG9ydCB0byBhY3R1YWwgc2Nyb2xsYWJsZSBhcmVhLg0KICAgICAgICBpZiAodmlld3BvcnQgJiYgdmlld3BvcnQudG9wICE9IG51bGwpDQogICAgICAgICAgeyB2aWV3cG9ydCA9IHt0b3A6IE1hdGgubWluKGNtLmRvYy5oZWlnaHQgKyBwYWRkaW5nVmVydChjbS5kaXNwbGF5KSAtIGRpc3BsYXlIZWlnaHQoY20pLCB2aWV3cG9ydC50b3ApfTsgfQ0KICAgICAgICAvLyBVcGRhdGVkIGxpbmUgaGVpZ2h0cyBtaWdodCByZXN1bHQgaW4gdGhlIGRyYXduIGFyZWEgbm90DQogICAgICAgIC8vIGFjdHVhbGx5IGNvdmVyaW5nIHRoZSB2aWV3cG9ydC4gS2VlcCBsb29waW5nIHVudGlsIGl0IGRvZXMuDQogICAgICAgIHVwZGF0ZS52aXNpYmxlID0gdmlzaWJsZUxpbmVzKGNtLmRpc3BsYXksIGNtLmRvYywgdmlld3BvcnQpOw0KICAgICAgICBpZiAodXBkYXRlLnZpc2libGUuZnJvbSA+PSBjbS5kaXNwbGF5LnZpZXdGcm9tICYmIHVwZGF0ZS52aXNpYmxlLnRvIDw9IGNtLmRpc3BsYXkudmlld1RvKQ0KICAgICAgICAgIHsgYnJlYWsgfQ0KICAgICAgfSBlbHNlIGlmIChmaXJzdCkgew0KICAgICAgICB1cGRhdGUudmlzaWJsZSA9IHZpc2libGVMaW5lcyhjbS5kaXNwbGF5LCBjbS5kb2MsIHZpZXdwb3J0KTsNCiAgICAgIH0NCiAgICAgIGlmICghdXBkYXRlRGlzcGxheUlmTmVlZGVkKGNtLCB1cGRhdGUpKSB7IGJyZWFrIH0NCiAgICAgIHVwZGF0ZUhlaWdodHNJblZpZXdwb3J0KGNtKTsNCiAgICAgIHZhciBiYXJNZWFzdXJlID0gbWVhc3VyZUZvclNjcm9sbGJhcnMoY20pOw0KICAgICAgdXBkYXRlU2VsZWN0aW9uKGNtKTsNCiAgICAgIHVwZGF0ZVNjcm9sbGJhcnMoY20sIGJhck1lYXN1cmUpOw0KICAgICAgc2V0RG9jdW1lbnRIZWlnaHQoY20sIGJhck1lYXN1cmUpOw0KICAgICAgdXBkYXRlLmZvcmNlID0gZmFsc2U7DQogICAgfQ0KDQogICAgdXBkYXRlLnNpZ25hbChjbSwgInVwZGF0ZSIsIGNtKTsNCiAgICBpZiAoY20uZGlzcGxheS52aWV3RnJvbSAhPSBjbS5kaXNwbGF5LnJlcG9ydGVkVmlld0Zyb20gfHwgY20uZGlzcGxheS52aWV3VG8gIT0gY20uZGlzcGxheS5yZXBvcnRlZFZpZXdUbykgew0KICAgICAgdXBkYXRlLnNpZ25hbChjbSwgInZpZXdwb3J0Q2hhbmdlIiwgY20sIGNtLmRpc3BsYXkudmlld0Zyb20sIGNtLmRpc3BsYXkudmlld1RvKTsNCiAgICAgIGNtLmRpc3BsYXkucmVwb3J0ZWRWaWV3RnJvbSA9IGNtLmRpc3BsYXkudmlld0Zyb207IGNtLmRpc3BsYXkucmVwb3J0ZWRWaWV3VG8gPSBjbS5kaXNwbGF5LnZpZXdUbzsNCiAgICB9DQogIH0NCg0KICBmdW5jdGlvbiB1cGRhdGVEaXNwbGF5U2ltcGxlKGNtLCB2aWV3cG9ydCkgew0KICAgIHZhciB1cGRhdGUgPSBuZXcgRGlzcGxheVVwZGF0ZShjbSwgdmlld3BvcnQpOw0KICAgIGlmICh1cGRhdGVEaXNwbGF5SWZOZWVkZWQoY20sIHVwZGF0ZSkpIHsNCiAgICAgIHVwZGF0ZUhlaWdodHNJblZpZXdwb3J0KGNtKTsNCiAgICAgIHBvc3RVcGRhdGVEaXNwbGF5KGNtLCB1cGRhdGUpOw0KICAgICAgdmFyIGJhck1lYXN1cmUgPSBtZWFzdXJlRm9yU2Nyb2xsYmFycyhjbSk7DQogICAgICB1cGRhdGVTZWxlY3Rpb24oY20pOw0KICAgICAgdXBkYXRlU2Nyb2xsYmFycyhjbSwgYmFyTWVhc3VyZSk7DQogICAgICBzZXREb2N1bWVudEhlaWdodChjbSwgYmFyTWVhc3VyZSk7DQogICAgICB1cGRhdGUuZmluaXNoKCk7DQogICAgfQ0KICB9DQoNCiAgLy8gU3luYyB0aGUgYWN0dWFsIGRpc3BsYXkgRE9NIHN0cnVjdHVyZSB3aXRoIGRpc3BsYXkudmlldywgcmVtb3ZpbmcNCiAgLy8gbm9kZXMgZm9yIGxpbmVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB2aWV3LCBhbmQgY3JlYXRpbmcgdGhlIG9uZXMNCiAgLy8gdGhhdCBhcmUgbm90IHRoZXJlIHlldCwgYW5kIHVwZGF0aW5nIHRoZSBvbmVzIHRoYXQgYXJlIG91dCBvZg0KICAvLyBkYXRlLg0KICBmdW5jdGlvbiBwYXRjaERpc3BsYXkoY20sIHVwZGF0ZU51bWJlcnNGcm9tLCBkaW1zKSB7DQogICAgdmFyIGRpc3BsYXkgPSBjbS5kaXNwbGF5LCBsaW5lTnVtYmVycyA9IGNtLm9wdGlvbnMubGluZU51bWJlcnM7DQogICAgdmFyIGNvbnRhaW5lciA9IGRpc3BsYXkubGluZURpdiwgY3VyID0gY29udGFpbmVyLmZpcnN0Q2hpbGQ7DQoNCiAgICBmdW5jdGlvbiBybShub2RlKSB7DQogICAgICB2YXIgbmV4dCA9IG5vZGUubmV4dFNpYmxpbmc7DQogICAgICAvLyBXb3JrcyBhcm91bmQgYSB0aHJvdy1zY3JvbGwgYnVnIGluIE9TIFggV2Via2l0DQogICAgICBpZiAod2Via2l0ICYmIG1hYyAmJiBjbS5kaXNwbGF5LmN1cnJlbnRXaGVlbFRhcmdldCA9PSBub2RlKQ0KICAgICAgICB7IG5vZGUuc3R5bGUuZGlzcGxheSA9ICJub25lIjsgfQ0KICAgICAgZWxzZQ0KICAgICAgICB7IG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTsgfQ0KICAgICAgcmV0dXJuIG5leHQNCiAgICB9DQoNCiAgICB2YXIgdmlldyA9IGRpc3BsYXkudmlldywgbGluZU4gPSBkaXNwbGF5LnZpZXdGcm9tOw0KICAgIC8vIExvb3Agb3ZlciB0aGUgZWxlbWVudHMgaW4gdGhlIHZpZXcsIHN5bmNpbmcgY3VyICh0aGUgRE9NIG5vZGVzDQogICAgLy8gaW4gZGlzcGxheS5saW5lRGl2KSB3aXRoIHRoZSB2aWV3IGFzIHdlIGdvLg0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykgew0KICAgICAgdmFyIGxpbmVWaWV3ID0gdmlld1tpXTsNCiAgICAgIGlmIChsaW5lVmlldy5oaWRkZW4pIDsgZWxzZSBpZiAoIWxpbmVWaWV3Lm5vZGUgfHwgbGluZVZpZXcubm9kZS5wYXJlbnROb2RlICE9IGNvbnRhaW5lcikgeyAvLyBOb3QgZHJhd24geWV0DQogICAgICAgIHZhciBub2RlID0gYnVpbGRMaW5lRWxlbWVudChjbSwgbGluZVZpZXcsIGxpbmVOLCBkaW1zKTsNCiAgICAgICAgY29udGFpbmVyLmluc2VydEJlZm9yZShub2RlLCBjdXIpOw0KICAgICAgfSBlbHNlIHsgLy8gQWxyZWFkeSBkcmF3bg0KICAgICAgICB3aGlsZSAoY3VyICE9IGxpbmVWaWV3Lm5vZGUpIHsgY3VyID0gcm0oY3VyKTsgfQ0KICAgICAgICB2YXIgdXBkYXRlTnVtYmVyID0gbGluZU51bWJlcnMgJiYgdXBkYXRlTnVtYmVyc0Zyb20gIT0gbnVsbCAmJg0KICAgICAgICAgIHVwZGF0ZU51bWJlcnNGcm9tIDw9IGxpbmVOICYmIGxpbmVWaWV3LmxpbmVOdW1iZXI7DQogICAgICAgIGlmIChsaW5lVmlldy5jaGFuZ2VzKSB7DQogICAgICAgICAgaWYgKGluZGV4T2YobGluZVZpZXcuY2hhbmdlcywgImd1dHRlciIpID4gLTEpIHsgdXBkYXRlTnVtYmVyID0gZmFsc2U7IH0NCiAgICAgICAgICB1cGRhdGVMaW5lRm9yQ2hhbmdlcyhjbSwgbGluZVZpZXcsIGxpbmVOLCBkaW1zKTsNCiAgICAgICAgfQ0KICAgICAgICBpZiAodXBkYXRlTnVtYmVyKSB7DQogICAgICAgICAgcmVtb3ZlQ2hpbGRyZW4obGluZVZpZXcubGluZU51bWJlcik7DQogICAgICAgICAgbGluZVZpZXcubGluZU51bWJlci5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShsaW5lTnVtYmVyRm9yKGNtLm9wdGlvbnMsIGxpbmVOKSkpOw0KICAgICAgICB9DQogICAgICAgIGN1ciA9IGxpbmVWaWV3Lm5vZGUubmV4dFNpYmxpbmc7DQogICAgICB9DQogICAgICBsaW5lTiArPSBsaW5lVmlldy5zaXplOw0KICAgIH0NCiAgICB3aGlsZSAoY3VyKSB7IGN1ciA9IHJtKGN1cik7IH0NCiAgfQ0KDQogIGZ1bmN0aW9uIHVwZGF0ZUd1dHRlclNwYWNlKGRpc3BsYXkpIHsNCiAgICB2YXIgd2lkdGggPSBkaXNwbGF5Lmd1dHRlcnMub2Zmc2V0V2lkdGg7DQogICAgZGlzcGxheS5zaXplci5zdHlsZS5tYXJnaW5MZWZ0ID0gd2lkdGggKyAicHgiOw0KICB9DQoNCiAgZnVuY3Rpb24gc2V0RG9jdW1lbnRIZWlnaHQoY20sIG1lYXN1cmUpIHsNCiAgICBjbS5kaXNwbGF5LnNpemVyLnN0eWxlLm1pbkhlaWdodCA9IG1lYXN1cmUuZG9jSGVpZ2h0ICsgInB4IjsNCiAgICBjbS5kaXNwbGF5LmhlaWdodEZvcmNlci5zdHlsZS50b3AgPSBtZWFzdXJlLmRvY0hlaWdodCArICJweCI7DQogICAgY20uZGlzcGxheS5ndXR0ZXJzLnN0eWxlLmhlaWdodCA9IChtZWFzdXJlLmRvY0hlaWdodCArIGNtLmRpc3BsYXkuYmFySGVpZ2h0ICsgc2Nyb2xsR2FwKGNtKSkgKyAicHgiOw0KICB9DQoNCiAgLy8gUmUtYWxpZ24gbGluZSBudW1iZXJzIGFuZCBndXR0ZXIgbWFya3MgdG8gY29tcGVuc2F0ZSBmb3INCiAgLy8gaG9yaXpvbnRhbCBzY3JvbGxpbmcuDQogIGZ1bmN0aW9uIGFsaWduSG9yaXpvbnRhbGx5KGNtKSB7DQogICAgdmFyIGRpc3BsYXkgPSBjbS5kaXNwbGF5LCB2aWV3ID0gZGlzcGxheS52aWV3Ow0KICAgIGlmICghZGlzcGxheS5hbGlnbldpZGdldHMgJiYgKCFkaXNwbGF5Lmd1dHRlcnMuZmlyc3RDaGlsZCB8fCAhY20ub3B0aW9ucy5maXhlZEd1dHRlcikpIHsgcmV0dXJuIH0NCiAgICB2YXIgY29tcCA9IGNvbXBlbnNhdGVGb3JIU2Nyb2xsKGRpc3BsYXkpIC0gZGlzcGxheS5zY3JvbGxlci5zY3JvbGxMZWZ0ICsgY20uZG9jLnNjcm9sbExlZnQ7DQogICAgdmFyIGd1dHRlclcgPSBkaXNwbGF5Lmd1dHRlcnMub2Zmc2V0V2lkdGgsIGxlZnQgPSBjb21wICsgInB4IjsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHsgaWYgKCF2aWV3W2ldLmhpZGRlbikgew0KICAgICAgaWYgKGNtLm9wdGlvbnMuZml4ZWRHdXR0ZXIpIHsNCiAgICAgICAgaWYgKHZpZXdbaV0uZ3V0dGVyKQ0KICAgICAgICAgIHsgdmlld1tpXS5ndXR0ZXIuc3R5bGUubGVmdCA9IGxlZnQ7IH0NCiAgICAgICAgaWYgKHZpZXdbaV0uZ3V0dGVyQmFja2dyb3VuZCkNCiAgICAgICAgICB7IHZpZXdbaV0uZ3V0dGVyQmFja2dyb3VuZC5zdHlsZS5sZWZ0ID0gbGVmdDsgfQ0KICAgICAgfQ0KICAgICAgdmFyIGFsaWduID0gdmlld1tpXS5hbGlnbmFibGU7DQogICAgICBpZiAoYWxpZ24pIHsgZm9yICh2YXIgaiA9IDA7IGogPCBhbGlnbi5sZW5ndGg7IGorKykNCiAgICAgICAgeyBhbGlnbltqXS5zdHlsZS5sZWZ0ID0gbGVmdDsgfSB9DQogICAgfSB9DQogICAgaWYgKGNtLm9wdGlvbnMuZml4ZWRHdXR0ZXIpDQogICAgICB7IGRpc3BsYXkuZ3V0dGVycy5zdHlsZS5sZWZ0ID0gKGNvbXAgKyBndXR0ZXJXKSArICJweCI7IH0NCiAgfQ0KDQogIC8vIFVzZWQgdG8gZW5zdXJlIHRoYXQgdGhlIGxpbmUgbnVtYmVyIGd1dHRlciBpcyBzdGlsbCB0aGUgcmlnaHQNCiAgLy8gc2l6ZSBmb3IgdGhlIGN1cnJlbnQgZG9jdW1lbnQgc2l6ZS4gUmV0dXJucyB0cnVlIHdoZW4gYW4gdXBkYXRlDQogIC8vIGlzIG5lZWRlZC4NCiAgZnVuY3Rpb24gbWF5YmVVcGRhdGVMaW5lTnVtYmVyV2lkdGgoY20pIHsNCiAgICBpZiAoIWNtLm9wdGlvbnMubGluZU51bWJlcnMpIHsgcmV0dXJuIGZhbHNlIH0NCiAgICB2YXIgZG9jID0gY20uZG9jLCBsYXN0ID0gbGluZU51bWJlckZvcihjbS5vcHRpb25zLCBkb2MuZmlyc3QgKyBkb2Muc2l6ZSAtIDEpLCBkaXNwbGF5ID0gY20uZGlzcGxheTsNCiAgICBpZiAobGFzdC5sZW5ndGggIT0gZGlzcGxheS5saW5lTnVtQ2hhcnMpIHsNCiAgICAgIHZhciB0ZXN0ID0gZGlzcGxheS5tZWFzdXJlLmFwcGVuZENoaWxkKGVsdCgiZGl2IiwgW2VsdCgiZGl2IiwgbGFzdCldLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJDb2RlTWlycm9yLWxpbmVudW1iZXIgQ29kZU1pcnJvci1ndXR0ZXItZWx0IikpOw0KICAgICAgdmFyIGlubmVyVyA9IHRlc3QuZmlyc3RDaGlsZC5vZmZzZXRXaWR0aCwgcGFkZGluZyA9IHRlc3Qub2Zmc2V0V2lkdGggLSBpbm5lclc7DQogICAgICBkaXNwbGF5LmxpbmVHdXR0ZXIuc3R5bGUud2lkdGggPSAiIjsNCiAgICAgIGRpc3BsYXkubGluZU51bUlubmVyV2lkdGggPSBNYXRoLm1heChpbm5lclcsIGRpc3BsYXkubGluZUd1dHRlci5vZmZzZXRXaWR0aCAtIHBhZGRpbmcpICsgMTsNCiAgICAgIGRpc3BsYXkubGluZU51bVdpZHRoID0gZGlzcGxheS5saW5lTnVtSW5uZXJXaWR0aCArIHBhZGRpbmc7DQogICAgICBkaXNwbGF5LmxpbmVOdW1DaGFycyA9IGRpc3BsYXkubGluZU51bUlubmVyV2lkdGggPyBsYXN0Lmxlbmd0aCA6IC0xOw0KICAgICAgZGlzcGxheS5saW5lR3V0dGVyLnN0eWxlLndpZHRoID0gZGlzcGxheS5saW5lTnVtV2lkdGggKyAicHgiOw0KICAgICAgdXBkYXRlR3V0dGVyU3BhY2UoY20uZGlzcGxheSk7DQogICAgICByZXR1cm4gdHJ1ZQ0KICAgIH0NCiAgICByZXR1cm4gZmFsc2UNCiAgfQ0KDQogIGZ1bmN0aW9uIGdldEd1dHRlcnMoZ3V0dGVycywgbGluZU51bWJlcnMpIHsNCiAgICB2YXIgcmVzdWx0ID0gW10sIHNhd0xpbmVOdW1iZXJzID0gZmFsc2U7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBndXR0ZXJzLmxlbmd0aDsgaSsrKSB7DQogICAgICB2YXIgbmFtZSA9IGd1dHRlcnNbaV0sIHN0eWxlID0gbnVsbDsNCiAgICAgIGlmICh0eXBlb2YgbmFtZSAhPSAic3RyaW5nIikgeyBzdHlsZSA9IG5hbWUuc3R5bGU7IG5hbWUgPSBuYW1lLmNsYXNzTmFtZTsgfQ0KICAgICAgaWYgKG5hbWUgPT0gIkNvZGVNaXJyb3ItbGluZW51bWJlcnMiKSB7DQogICAgICAgIGlmICghbGluZU51bWJlcnMpIHsgY29udGludWUgfQ0KICAgICAgICBlbHNlIHsgc2F3TGluZU51bWJlcnMgPSB0cnVlOyB9DQogICAgICB9DQogICAgICByZXN1bHQucHVzaCh7Y2xhc3NOYW1lOiBuYW1lLCBzdHlsZTogc3R5bGV9KTsNCiAgICB9DQogICAgaWYgKGxpbmVOdW1iZXJzICYmICFzYXdMaW5lTnVtYmVycykgeyByZXN1bHQucHVzaCh7Y2xhc3NOYW1lOiAiQ29kZU1pcnJvci1saW5lbnVtYmVycyIsIHN0eWxlOiBudWxsfSk7IH0NCiAgICByZXR1cm4gcmVzdWx0DQogIH0NCg0KICAvLyBSZWJ1aWxkIHRoZSBndXR0ZXIgZWxlbWVudHMsIGVuc3VyZSB0aGUgbWFyZ2luIHRvIHRoZSBsZWZ0IG9mIHRoZQ0KICAvLyBjb2RlIG1hdGNoZXMgdGhlaXIgd2lkdGguDQogIGZ1bmN0aW9uIHJlbmRlckd1dHRlcnMoZGlzcGxheSkgew0KICAgIHZhciBndXR0ZXJzID0gZGlzcGxheS5ndXR0ZXJzLCBzcGVjcyA9IGRpc3BsYXkuZ3V0dGVyU3BlY3M7DQogICAgcmVtb3ZlQ2hpbGRyZW4oZ3V0dGVycyk7DQogICAgZGlzcGxheS5saW5lR3V0dGVyID0gbnVsbDsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNwZWNzLmxlbmd0aDsgKytpKSB7DQogICAgICB2YXIgcmVmID0gc3BlY3NbaV07DQogICAgICB2YXIgY2xhc3NOYW1lID0gcmVmLmNsYXNzTmFtZTsNCiAgICAgIHZhciBzdHlsZSA9IHJlZi5zdHlsZTsNCiAgICAgIHZhciBnRWx0ID0gZ3V0dGVycy5hcHBlbmRDaGlsZChlbHQoImRpdiIsIG51bGwsICJDb2RlTWlycm9yLWd1dHRlciAiICsgY2xhc3NOYW1lKSk7DQogICAgICBpZiAoc3R5bGUpIHsgZ0VsdC5zdHlsZS5jc3NUZXh0ID0gc3R5bGU7IH0NCiAgICAgIGlmIChjbGFzc05hbWUgPT0gIkNvZGVNaXJyb3ItbGluZW51bWJlcnMiKSB7DQogICAgICAgIGRpc3BsYXkubGluZUd1dHRlciA9IGdFbHQ7DQogICAgICAgIGdFbHQuc3R5bGUud2lkdGggPSAoZGlzcGxheS5saW5lTnVtV2lkdGggfHwgMSkgKyAicHgiOw0KICAgICAgfQ0KICAgIH0NCiAgICBndXR0ZXJzLnN0eWxlLmRpc3BsYXkgPSBzcGVjcy5sZW5ndGggPyAiIiA6ICJub25lIjsNCiAgICB1cGRhdGVHdXR0ZXJTcGFjZShkaXNwbGF5KTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHVwZGF0ZUd1dHRlcnMoY20pIHsNCiAgICByZW5kZXJHdXR0ZXJzKGNtLmRpc3BsYXkpOw0KICAgIHJlZ0NoYW5nZShjbSk7DQogICAgYWxpZ25Ib3Jpem9udGFsbHkoY20pOw0KICB9DQoNCiAgLy8gVGhlIGRpc3BsYXkgaGFuZGxlcyB0aGUgRE9NIGludGVncmF0aW9uLCBib3RoIGZvciBpbnB1dCByZWFkaW5nDQogIC8vIGFuZCBjb250ZW50IGRyYXdpbmcuIEl0IGhvbGRzIHJlZmVyZW5jZXMgdG8gRE9NIG5vZGVzIGFuZA0KICAvLyBkaXNwbGF5LXJlbGF0ZWQgc3RhdGUuDQoNCiAgZnVuY3Rpb24gRGlzcGxheShwbGFjZSwgZG9jLCBpbnB1dCwgb3B0aW9ucykgew0KICAgIHZhciBkID0gdGhpczsNCiAgICB0aGlzLmlucHV0ID0gaW5wdXQ7DQoNCiAgICAvLyBDb3ZlcnMgYm90dG9tLXJpZ2h0IHNxdWFyZSB3aGVuIGJvdGggc2Nyb2xsYmFycyBhcmUgcHJlc2VudC4NCiAgICBkLnNjcm9sbGJhckZpbGxlciA9IGVsdCgiZGl2IiwgbnVsbCwgIkNvZGVNaXJyb3Itc2Nyb2xsYmFyLWZpbGxlciIpOw0KICAgIGQuc2Nyb2xsYmFyRmlsbGVyLnNldEF0dHJpYnV0ZSgiY20tbm90LWNvbnRlbnQiLCAidHJ1ZSIpOw0KICAgIC8vIENvdmVycyBib3R0b20gb2YgZ3V0dGVyIHdoZW4gY292ZXJHdXR0ZXJOZXh0VG9TY3JvbGxiYXIgaXMgb24NCiAgICAvLyBhbmQgaCBzY3JvbGxiYXIgaXMgcHJlc2VudC4NCiAgICBkLmd1dHRlckZpbGxlciA9IGVsdCgiZGl2IiwgbnVsbCwgIkNvZGVNaXJyb3ItZ3V0dGVyLWZpbGxlciIpOw0KICAgIGQuZ3V0dGVyRmlsbGVyLnNldEF0dHJpYnV0ZSgiY20tbm90LWNvbnRlbnQiLCAidHJ1ZSIpOw0KICAgIC8vIFdpbGwgY29udGFpbiB0aGUgYWN0dWFsIGNvZGUsIHBvc2l0aW9uZWQgdG8gY292ZXIgdGhlIHZpZXdwb3J0Lg0KICAgIGQubGluZURpdiA9IGVsdFAoImRpdiIsIG51bGwsICJDb2RlTWlycm9yLWNvZGUiKTsNCiAgICAvLyBFbGVtZW50cyBhcmUgYWRkZWQgdG8gdGhlc2UgdG8gcmVwcmVzZW50IHNlbGVjdGlvbiBhbmQgY3Vyc29ycy4NCiAgICBkLnNlbGVjdGlvbkRpdiA9IGVsdCgiZGl2IiwgbnVsbCwgbnVsbCwgInBvc2l0aW9uOiByZWxhdGl2ZTsgei1pbmRleDogMSIpOw0KICAgIGQuY3Vyc29yRGl2ID0gZWx0KCJkaXYiLCBudWxsLCAiQ29kZU1pcnJvci1jdXJzb3JzIik7DQogICAgLy8gQSB2aXNpYmlsaXR5OiBoaWRkZW4gZWxlbWVudCB1c2VkIHRvIGZpbmQgdGhlIHNpemUgb2YgdGhpbmdzLg0KICAgIGQubWVhc3VyZSA9IGVsdCgiZGl2IiwgbnVsbCwgIkNvZGVNaXJyb3ItbWVhc3VyZSIpOw0KICAgIC8vIFdoZW4gbGluZXMgb3V0c2lkZSBvZiB0aGUgdmlld3BvcnQgYXJlIG1lYXN1cmVkLCB0aGV5IGFyZSBkcmF3biBpbiB0aGlzLg0KICAgIGQubGluZU1lYXN1cmUgPSBlbHQoImRpdiIsIG51bGwsICJDb2RlTWlycm9yLW1lYXN1cmUiKTsNCiAgICAvLyBXcmFwcyBldmVyeXRoaW5nIHRoYXQgbmVlZHMgdG8gZXhpc3QgaW5zaWRlIHRoZSB2ZXJ0aWNhbGx5LXBhZGRlZCBjb29yZGluYXRlIHN5c3RlbQ0KICAgIGQubGluZVNwYWNlID0gZWx0UCgiZGl2IiwgW2QubWVhc3VyZSwgZC5saW5lTWVhc3VyZSwgZC5zZWxlY3Rpb25EaXYsIGQuY3Vyc29yRGl2LCBkLmxpbmVEaXZdLA0KICAgICAgICAgICAgICAgICAgICAgIG51bGwsICJwb3NpdGlvbjogcmVsYXRpdmU7IG91dGxpbmU6IG5vbmUiKTsNCiAgICB2YXIgbGluZXMgPSBlbHRQKCJkaXYiLCBbZC5saW5lU3BhY2VdLCAiQ29kZU1pcnJvci1saW5lcyIpOw0KICAgIC8vIE1vdmVkIGFyb3VuZCBpdHMgcGFyZW50IHRvIGNvdmVyIHZpc2libGUgdmlldy4NCiAgICBkLm1vdmVyID0gZWx0KCJkaXYiLCBbbGluZXNdLCBudWxsLCAicG9zaXRpb246IHJlbGF0aXZlIik7DQogICAgLy8gU2V0IHRvIHRoZSBoZWlnaHQgb2YgdGhlIGRvY3VtZW50LCBhbGxvd2luZyBzY3JvbGxpbmcuDQogICAgZC5zaXplciA9IGVsdCgiZGl2IiwgW2QubW92ZXJdLCAiQ29kZU1pcnJvci1zaXplciIpOw0KICAgIGQuc2l6ZXJXaWR0aCA9IG51bGw7DQogICAgLy8gQmVoYXZpb3Igb2YgZWx0cyB3aXRoIG92ZXJmbG93OiBhdXRvIGFuZCBwYWRkaW5nIGlzDQogICAgLy8gaW5jb25zaXN0ZW50IGFjcm9zcyBicm93c2Vycy4gVGhpcyBpcyB1c2VkIHRvIGVuc3VyZSB0aGUNCiAgICAvLyBzY3JvbGxhYmxlIGFyZWEgaXMgYmlnIGVub3VnaC4NCiAgICBkLmhlaWdodEZvcmNlciA9IGVsdCgiZGl2IiwgbnVsbCwgbnVsbCwgInBvc2l0aW9uOiBhYnNvbHV0ZTsgaGVpZ2h0OiAiICsgc2Nyb2xsZXJHYXAgKyAicHg7IHdpZHRoOiAxcHg7Iik7DQogICAgLy8gV2lsbCBjb250YWluIHRoZSBndXR0ZXJzLCBpZiBhbnkuDQogICAgZC5ndXR0ZXJzID0gZWx0KCJkaXYiLCBudWxsLCAiQ29kZU1pcnJvci1ndXR0ZXJzIik7DQogICAgZC5saW5lR3V0dGVyID0gbnVsbDsNCiAgICAvLyBBY3R1YWwgc2Nyb2xsYWJsZSBlbGVtZW50Lg0KICAgIGQuc2Nyb2xsZXIgPSBlbHQoImRpdiIsIFtkLnNpemVyLCBkLmhlaWdodEZvcmNlciwgZC5ndXR0ZXJzXSwgIkNvZGVNaXJyb3Itc2Nyb2xsIik7DQogICAgZC5zY3JvbGxlci5zZXRBdHRyaWJ1dGUoInRhYkluZGV4IiwgIi0xIik7DQogICAgLy8gVGhlIGVsZW1lbnQgaW4gd2hpY2ggdGhlIGVkaXRvciBsaXZlcy4NCiAgICBkLndyYXBwZXIgPSBlbHQoImRpdiIsIFtkLnNjcm9sbGJhckZpbGxlciwgZC5ndXR0ZXJGaWxsZXIsIGQuc2Nyb2xsZXJdLCAiQ29kZU1pcnJvciIpOw0KDQogICAgLy8gV29yayBhcm91bmQgSUU3IHotaW5kZXggYnVnIChub3QgcGVyZmVjdCwgaGVuY2UgSUU3IG5vdCByZWFsbHkgYmVpbmcgc3VwcG9ydGVkKQ0KICAgIGlmIChpZSAmJiBpZV92ZXJzaW9uIDwgOCkgeyBkLmd1dHRlcnMuc3R5bGUuekluZGV4ID0gLTE7IGQuc2Nyb2xsZXIuc3R5bGUucGFkZGluZ1JpZ2h0ID0gMDsgfQ0KICAgIGlmICghd2Via2l0ICYmICEoZ2Vja28gJiYgbW9iaWxlKSkgeyBkLnNjcm9sbGVyLmRyYWdnYWJsZSA9IHRydWU7IH0NCg0KICAgIGlmIChwbGFjZSkgew0KICAgICAgaWYgKHBsYWNlLmFwcGVuZENoaWxkKSB7IHBsYWNlLmFwcGVuZENoaWxkKGQud3JhcHBlcik7IH0NCiAgICAgIGVsc2UgeyBwbGFjZShkLndyYXBwZXIpOyB9DQogICAgfQ0KDQogICAgLy8gQ3VycmVudCByZW5kZXJlZCByYW5nZSAobWF5IGJlIGJpZ2dlciB0aGFuIHRoZSB2aWV3IHdpbmRvdykuDQogICAgZC52aWV3RnJvbSA9IGQudmlld1RvID0gZG9jLmZpcnN0Ow0KICAgIGQucmVwb3J0ZWRWaWV3RnJvbSA9IGQucmVwb3J0ZWRWaWV3VG8gPSBkb2MuZmlyc3Q7DQogICAgLy8gSW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlbmRlcmVkIGxpbmVzLg0KICAgIGQudmlldyA9IFtdOw0KICAgIGQucmVuZGVyZWRWaWV3ID0gbnVsbDsNCiAgICAvLyBIb2xkcyBpbmZvIGFib3V0IGEgc2luZ2xlIHJlbmRlcmVkIGxpbmUgd2hlbiBpdCB3YXMgcmVuZGVyZWQNCiAgICAvLyBmb3IgbWVhc3VyZW1lbnQsIHdoaWxlIG5vdCBpbiB2aWV3Lg0KICAgIGQuZXh0ZXJuYWxNZWFzdXJlZCA9IG51bGw7DQogICAgLy8gRW1wdHkgc3BhY2UgKGluIHBpeGVscykgYWJvdmUgdGhlIHZpZXcNCiAgICBkLnZpZXdPZmZzZXQgPSAwOw0KICAgIGQubGFzdFdyYXBIZWlnaHQgPSBkLmxhc3RXcmFwV2lkdGggPSAwOw0KICAgIGQudXBkYXRlTGluZU51bWJlcnMgPSBudWxsOw0KDQogICAgZC5uYXRpdmVCYXJXaWR0aCA9IGQuYmFySGVpZ2h0ID0gZC5iYXJXaWR0aCA9IDA7DQogICAgZC5zY3JvbGxiYXJzQ2xpcHBlZCA9IGZhbHNlOw0KDQogICAgLy8gVXNlZCB0byBvbmx5IHJlc2l6ZSB0aGUgbGluZSBudW1iZXIgZ3V0dGVyIHdoZW4gbmVjZXNzYXJ5ICh3aGVuDQogICAgLy8gdGhlIGFtb3VudCBvZiBsaW5lcyBjcm9zc2VzIGEgYm91bmRhcnkgdGhhdCBtYWtlcyBpdHMgd2lkdGggY2hhbmdlKQ0KICAgIGQubGluZU51bVdpZHRoID0gZC5saW5lTnVtSW5uZXJXaWR0aCA9IGQubGluZU51bUNoYXJzID0gbnVsbDsNCiAgICAvLyBTZXQgdG8gdHJ1ZSB3aGVuIGEgbm9uLWhvcml6b250YWwtc2Nyb2xsaW5nIGxpbmUgd2lkZ2V0IGlzDQogICAgLy8gYWRkZWQuIEFzIGFuIG9wdGltaXphdGlvbiwgbGluZSB3aWRnZXQgYWxpZ25pbmcgaXMgc2tpcHBlZCB3aGVuDQogICAgLy8gdGhpcyBpcyBmYWxzZS4NCiAgICBkLmFsaWduV2lkZ2V0cyA9IGZhbHNlOw0KDQogICAgZC5jYWNoZWRDaGFyV2lkdGggPSBkLmNhY2hlZFRleHRIZWlnaHQgPSBkLmNhY2hlZFBhZGRpbmdIID0gbnVsbDsNCg0KICAgIC8vIFRyYWNrcyB0aGUgbWF4aW11bSBsaW5lIGxlbmd0aCBzbyB0aGF0IHRoZSBob3Jpem9udGFsIHNjcm9sbGJhcg0KICAgIC8vIGNhbiBiZSBrZXB0IHN0YXRpYyB3aGVuIHNjcm9sbGluZy4NCiAgICBkLm1heExpbmUgPSBudWxsOw0KICAgIGQubWF4TGluZUxlbmd0aCA9IDA7DQogICAgZC5tYXhMaW5lQ2hhbmdlZCA9IGZhbHNlOw0KDQogICAgLy8gVXNlZCBmb3IgbWVhc3VyaW5nIHdoZWVsIHNjcm9sbGluZyBncmFudWxhcml0eQ0KICAgIGQud2hlZWxEWCA9IGQud2hlZWxEWSA9IGQud2hlZWxTdGFydFggPSBkLndoZWVsU3RhcnRZID0gbnVsbDsNCg0KICAgIC8vIFRydWUgd2hlbiBzaGlmdCBpcyBoZWxkIGRvd24uDQogICAgZC5zaGlmdCA9IGZhbHNlOw0KDQogICAgLy8gVXNlZCB0byB0cmFjayB3aGV0aGVyIGFueXRoaW5nIGhhcHBlbmVkIHNpbmNlIHRoZSBjb250ZXh0IG1lbnUNCiAgICAvLyB3YXMgb3BlbmVkLg0KICAgIGQuc2VsRm9yQ29udGV4dE1lbnUgPSBudWxsOw0KDQogICAgZC5hY3RpdmVUb3VjaCA9IG51bGw7DQoNCiAgICBkLmd1dHRlclNwZWNzID0gZ2V0R3V0dGVycyhvcHRpb25zLmd1dHRlcnMsIG9wdGlvbnMubGluZU51bWJlcnMpOw0KICAgIHJlbmRlckd1dHRlcnMoZCk7DQoNCiAgICBpbnB1dC5pbml0KGQpOw0KICB9DQoNCiAgLy8gU2luY2UgdGhlIGRlbHRhIHZhbHVlcyByZXBvcnRlZCBvbiBtb3VzZSB3aGVlbCBldmVudHMgYXJlDQogIC8vIHVuc3RhbmRhcmRpemVkIGJldHdlZW4gYnJvd3NlcnMgYW5kIGV2ZW4gYnJvd3NlciB2ZXJzaW9ucywgYW5kDQogIC8vIGdlbmVyYWxseSBob3JyaWJseSB1bnByZWRpY3RhYmxlLCB0aGlzIGNvZGUgc3RhcnRzIGJ5IG1lYXN1cmluZw0KICAvLyB0aGUgc2Nyb2xsIGVmZmVjdCB0aGF0IHRoZSBmaXJzdCBmZXcgbW91c2Ugd2hlZWwgZXZlbnRzIGhhdmUsDQogIC8vIGFuZCwgZnJvbSB0aGF0LCBkZXRlY3RzIHRoZSB3YXkgaXQgY2FuIGNvbnZlcnQgZGVsdGFzIHRvIHBpeGVsDQogIC8vIG9mZnNldHMgYWZ0ZXJ3YXJkcy4NCiAgLy8NCiAgLy8gVGhlIHJlYXNvbiB3ZSB3YW50IHRvIGtub3cgdGhlIGFtb3VudCBhIHdoZWVsIGV2ZW50IHdpbGwgc2Nyb2xsDQogIC8vIGlzIHRoYXQgaXQgZ2l2ZXMgdXMgYSBjaGFuY2UgdG8gdXBkYXRlIHRoZSBkaXNwbGF5IGJlZm9yZSB0aGUNCiAgLy8gYWN0dWFsIHNjcm9sbGluZyBoYXBwZW5zLCByZWR1Y2luZyBmbGlja2VyaW5nLg0KDQogIHZhciB3aGVlbFNhbXBsZXMgPSAwLCB3aGVlbFBpeGVsc1BlclVuaXQgPSBudWxsOw0KICAvLyBGaWxsIGluIGEgYnJvd3Nlci1kZXRlY3RlZCBzdGFydGluZyB2YWx1ZSBvbiBicm93c2VycyB3aGVyZSB3ZQ0KICAvLyBrbm93IG9uZS4gVGhlc2UgZG9uJ3QgaGF2ZSB0byBiZSBhY2N1cmF0ZSAtLSB0aGUgcmVzdWx0IG9mIHRoZW0NCiAgLy8gYmVpbmcgd3Jvbmcgd291bGQganVzdCBiZSBhIHNsaWdodCBmbGlja2VyIG9uIHRoZSBmaXJzdCB3aGVlbA0KICAvLyBzY3JvbGwgKGlmIGl0IGlzIGxhcmdlIGVub3VnaCkuDQogIGlmIChpZSkgeyB3aGVlbFBpeGVsc1BlclVuaXQgPSAtLjUzOyB9DQogIGVsc2UgaWYgKGdlY2tvKSB7IHdoZWVsUGl4ZWxzUGVyVW5pdCA9IDE1OyB9DQogIGVsc2UgaWYgKGNocm9tZSkgeyB3aGVlbFBpeGVsc1BlclVuaXQgPSAtLjc7IH0NCiAgZWxzZSBpZiAoc2FmYXJpKSB7IHdoZWVsUGl4ZWxzUGVyVW5pdCA9IC0xLzM7IH0NCg0KICBmdW5jdGlvbiB3aGVlbEV2ZW50RGVsdGEoZSkgew0KICAgIHZhciBkeCA9IGUud2hlZWxEZWx0YVgsIGR5ID0gZS53aGVlbERlbHRhWTsNCiAgICBpZiAoZHggPT0gbnVsbCAmJiBlLmRldGFpbCAmJiBlLmF4aXMgPT0gZS5IT1JJWk9OVEFMX0FYSVMpIHsgZHggPSBlLmRldGFpbDsgfQ0KICAgIGlmIChkeSA9PSBudWxsICYmIGUuZGV0YWlsICYmIGUuYXhpcyA9PSBlLlZFUlRJQ0FMX0FYSVMpIHsgZHkgPSBlLmRldGFpbDsgfQ0KICAgIGVsc2UgaWYgKGR5ID09IG51bGwpIHsgZHkgPSBlLndoZWVsRGVsdGE7IH0NCiAgICByZXR1cm4ge3g6IGR4LCB5OiBkeX0NCiAgfQ0KICBmdW5jdGlvbiB3aGVlbEV2ZW50UGl4ZWxzKGUpIHsNCiAgICB2YXIgZGVsdGEgPSB3aGVlbEV2ZW50RGVsdGEoZSk7DQogICAgZGVsdGEueCAqPSB3aGVlbFBpeGVsc1BlclVuaXQ7DQogICAgZGVsdGEueSAqPSB3aGVlbFBpeGVsc1BlclVuaXQ7DQogICAgcmV0dXJuIGRlbHRhDQogIH0NCg0KICBmdW5jdGlvbiBvblNjcm9sbFdoZWVsKGNtLCBlKSB7DQogICAgdmFyIGRlbHRhID0gd2hlZWxFdmVudERlbHRhKGUpLCBkeCA9IGRlbHRhLngsIGR5ID0gZGVsdGEueTsNCg0KICAgIHZhciBkaXNwbGF5ID0gY20uZGlzcGxheSwgc2Nyb2xsID0gZGlzcGxheS5zY3JvbGxlcjsNCiAgICAvLyBRdWl0IGlmIHRoZXJlJ3Mgbm90aGluZyB0byBzY3JvbGwgaGVyZQ0KICAgIHZhciBjYW5TY3JvbGxYID0gc2Nyb2xsLnNjcm9sbFdpZHRoID4gc2Nyb2xsLmNsaWVudFdpZHRoOw0KICAgIHZhciBjYW5TY3JvbGxZID0gc2Nyb2xsLnNjcm9sbEhlaWdodCA+IHNjcm9sbC5jbGllbnRIZWlnaHQ7DQogICAgaWYgKCEoZHggJiYgY2FuU2Nyb2xsWCB8fCBkeSAmJiBjYW5TY3JvbGxZKSkgeyByZXR1cm4gfQ0KDQogICAgLy8gV2Via2l0IGJyb3dzZXJzIG9uIE9TIFggYWJvcnQgbW9tZW50dW0gc2Nyb2xscyB3aGVuIHRoZSB0YXJnZXQNCiAgICAvLyBvZiB0aGUgc2Nyb2xsIGV2ZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgc2Nyb2xsYWJsZSBlbGVtZW50Lg0KICAgIC8vIFRoaXMgaGFjayAoc2VlIHJlbGF0ZWQgY29kZSBpbiBwYXRjaERpc3BsYXkpIG1ha2VzIHN1cmUgdGhlDQogICAgLy8gZWxlbWVudCBpcyBrZXB0IGFyb3VuZC4NCiAgICBpZiAoZHkgJiYgbWFjICYmIHdlYmtpdCkgew0KICAgICAgb3V0ZXI6IGZvciAodmFyIGN1ciA9IGUudGFyZ2V0LCB2aWV3ID0gZGlzcGxheS52aWV3OyBjdXIgIT0gc2Nyb2xsOyBjdXIgPSBjdXIucGFyZW50Tm9kZSkgew0KICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICBpZiAodmlld1tpXS5ub2RlID09IGN1cikgew0KICAgICAgICAgICAgY20uZGlzcGxheS5jdXJyZW50V2hlZWxUYXJnZXQgPSBjdXI7DQogICAgICAgICAgICBicmVhayBvdXRlcg0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCg0KICAgIC8vIE9uIHNvbWUgYnJvd3NlcnMsIGhvcml6b250YWwgc2Nyb2xsaW5nIHdpbGwgY2F1c2UgcmVkcmF3cyB0bw0KICAgIC8vIGhhcHBlbiBiZWZvcmUgdGhlIGd1dHRlciBoYXMgYmVlbiByZWFsaWduZWQsIGNhdXNpbmcgaXQgdG8NCiAgICAvLyB3cmlnZ2xlIGFyb3VuZCBpbiBhIG1vc3QgdW5zZWVtbHkgd2F5LiBXaGVuIHdlIGhhdmUgYW4NCiAgICAvLyBlc3RpbWF0ZWQgcGl4ZWxzL2RlbHRhIHZhbHVlLCB3ZSBqdXN0IGhhbmRsZSBob3Jpem9udGFsDQogICAgLy8gc2Nyb2xsaW5nIGVudGlyZWx5IGhlcmUuIEl0J2xsIGJlIHNsaWdodGx5IG9mZiBmcm9tIG5hdGl2ZSwgYnV0DQogICAgLy8gYmV0dGVyIHRoYW4gZ2xpdGNoaW5nIG91dC4NCiAgICBpZiAoZHggJiYgIWdlY2tvICYmICFwcmVzdG8gJiYgd2hlZWxQaXhlbHNQZXJVbml0ICE9IG51bGwpIHsNCiAgICAgIGlmIChkeSAmJiBjYW5TY3JvbGxZKQ0KICAgICAgICB7IHVwZGF0ZVNjcm9sbFRvcChjbSwgTWF0aC5tYXgoMCwgc2Nyb2xsLnNjcm9sbFRvcCArIGR5ICogd2hlZWxQaXhlbHNQZXJVbml0KSk7IH0NCiAgICAgIHNldFNjcm9sbExlZnQoY20sIE1hdGgubWF4KDAsIHNjcm9sbC5zY3JvbGxMZWZ0ICsgZHggKiB3aGVlbFBpeGVsc1BlclVuaXQpKTsNCiAgICAgIC8vIE9ubHkgcHJldmVudCBkZWZhdWx0IHNjcm9sbGluZyBpZiB2ZXJ0aWNhbCBzY3JvbGxpbmcgaXMNCiAgICAgIC8vIGFjdHVhbGx5IHBvc3NpYmxlLiBPdGhlcndpc2UsIGl0IGNhdXNlcyB2ZXJ0aWNhbCBzY3JvbGwNCiAgICAgIC8vIGppdHRlciBvbiBPU1ggdHJhY2twYWRzIHdoZW4gZGVsdGFYIGlzIHNtYWxsIGFuZCBkZWx0YVkNCiAgICAgIC8vIGlzIGxhcmdlIChpc3N1ZSAjMzU3OSkNCiAgICAgIGlmICghZHkgfHwgKGR5ICYmIGNhblNjcm9sbFkpKQ0KICAgICAgICB7IGVfcHJldmVudERlZmF1bHQoZSk7IH0NCiAgICAgIGRpc3BsYXkud2hlZWxTdGFydFggPSBudWxsOyAvLyBBYm9ydCBtZWFzdXJlbWVudCwgaWYgaW4gcHJvZ3Jlc3MNCiAgICAgIHJldHVybg0KICAgIH0NCg0KICAgIC8vICdQcm9qZWN0JyB0aGUgdmlzaWJsZSB2aWV3cG9ydCB0byBjb3ZlciB0aGUgYXJlYSB0aGF0IGlzIGJlaW5nDQogICAgLy8gc2Nyb2xsZWQgaW50byB2aWV3IChpZiB3ZSBrbm93IGVub3VnaCB0byBlc3RpbWF0ZSBpdCkuDQogICAgaWYgKGR5ICYmIHdoZWVsUGl4ZWxzUGVyVW5pdCAhPSBudWxsKSB7DQogICAgICB2YXIgcGl4ZWxzID0gZHkgKiB3aGVlbFBpeGVsc1BlclVuaXQ7DQogICAgICB2YXIgdG9wID0gY20uZG9jLnNjcm9sbFRvcCwgYm90ID0gdG9wICsgZGlzcGxheS53cmFwcGVyLmNsaWVudEhlaWdodDsNCiAgICAgIGlmIChwaXhlbHMgPCAwKSB7IHRvcCA9IE1hdGgubWF4KDAsIHRvcCArIHBpeGVscyAtIDUwKTsgfQ0KICAgICAgZWxzZSB7IGJvdCA9IE1hdGgubWluKGNtLmRvYy5oZWlnaHQsIGJvdCArIHBpeGVscyArIDUwKTsgfQ0KICAgICAgdXBkYXRlRGlzcGxheVNpbXBsZShjbSwge3RvcDogdG9wLCBib3R0b206IGJvdH0pOw0KICAgIH0NCg0KICAgIGlmICh3aGVlbFNhbXBsZXMgPCAyMCkgew0KICAgICAgaWYgKGRpc3BsYXkud2hlZWxTdGFydFggPT0gbnVsbCkgew0KICAgICAgICBkaXNwbGF5LndoZWVsU3RhcnRYID0gc2Nyb2xsLnNjcm9sbExlZnQ7IGRpc3BsYXkud2hlZWxTdGFydFkgPSBzY3JvbGwuc2Nyb2xsVG9wOw0KICAgICAgICBkaXNwbGF5LndoZWVsRFggPSBkeDsgZGlzcGxheS53aGVlbERZID0gZHk7DQogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgICAgIGlmIChkaXNwbGF5LndoZWVsU3RhcnRYID09IG51bGwpIHsgcmV0dXJuIH0NCiAgICAgICAgICB2YXIgbW92ZWRYID0gc2Nyb2xsLnNjcm9sbExlZnQgLSBkaXNwbGF5LndoZWVsU3RhcnRYOw0KICAgICAgICAgIHZhciBtb3ZlZFkgPSBzY3JvbGwuc2Nyb2xsVG9wIC0gZGlzcGxheS53aGVlbFN0YXJ0WTsNCiAgICAgICAgICB2YXIgc2FtcGxlID0gKG1vdmVkWSAmJiBkaXNwbGF5LndoZWVsRFkgJiYgbW92ZWRZIC8gZGlzcGxheS53aGVlbERZKSB8fA0KICAgICAgICAgICAgKG1vdmVkWCAmJiBkaXNwbGF5LndoZWVsRFggJiYgbW92ZWRYIC8gZGlzcGxheS53aGVlbERYKTsNCiAgICAgICAgICBkaXNwbGF5LndoZWVsU3RhcnRYID0gZGlzcGxheS53aGVlbFN0YXJ0WSA9IG51bGw7DQogICAgICAgICAgaWYgKCFzYW1wbGUpIHsgcmV0dXJuIH0NCiAgICAgICAgICB3aGVlbFBpeGVsc1BlclVuaXQgPSAod2hlZWxQaXhlbHNQZXJVbml0ICogd2hlZWxTYW1wbGVzICsgc2FtcGxlKSAvICh3aGVlbFNhbXBsZXMgKyAxKTsNCiAgICAgICAgICArK3doZWVsU2FtcGxlczsNCiAgICAgICAgfSwgMjAwKTsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIGRpc3BsYXkud2hlZWxEWCArPSBkeDsgZGlzcGxheS53aGVlbERZICs9IGR5Ow0KICAgICAgfQ0KICAgIH0NCiAgfQ0KDQogIC8vIFNlbGVjdGlvbiBvYmplY3RzIGFyZSBpbW11dGFibGUuIEEgbmV3IG9uZSBpcyBjcmVhdGVkIGV2ZXJ5IHRpbWUNCiAgLy8gdGhlIHNlbGVjdGlvbiBjaGFuZ2VzLiBBIHNlbGVjdGlvbiBpcyBvbmUgb3IgbW9yZSBub24tb3ZlcmxhcHBpbmcNCiAgLy8gKGFuZCBub24tdG91Y2hpbmcpIHJhbmdlcywgc29ydGVkLCBhbmQgYW4gaW50ZWdlciB0aGF0IGluZGljYXRlcw0KICAvLyB3aGljaCBvbmUgaXMgdGhlIHByaW1hcnkgc2VsZWN0aW9uICh0aGUgb25lIHRoYXQncyBzY3JvbGxlZCBpbnRvDQogIC8vIHZpZXcsIHRoYXQgZ2V0Q3Vyc29yIHJldHVybnMsIGV0YykuDQogIHZhciBTZWxlY3Rpb24gPSBmdW5jdGlvbihyYW5nZXMsIHByaW1JbmRleCkgew0KICAgIHRoaXMucmFuZ2VzID0gcmFuZ2VzOw0KICAgIHRoaXMucHJpbUluZGV4ID0gcHJpbUluZGV4Ow0KICB9Ow0KDQogIFNlbGVjdGlvbi5wcm90b3R5cGUucHJpbWFyeSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMucmFuZ2VzW3RoaXMucHJpbUluZGV4XSB9Ow0KDQogIFNlbGVjdGlvbi5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7DQogICAgICB2YXIgdGhpcyQxID0gdGhpczsNCg0KICAgIGlmIChvdGhlciA9PSB0aGlzKSB7IHJldHVybiB0cnVlIH0NCiAgICBpZiAob3RoZXIucHJpbUluZGV4ICE9IHRoaXMucHJpbUluZGV4IHx8IG90aGVyLnJhbmdlcy5sZW5ndGggIT0gdGhpcy5yYW5nZXMubGVuZ3RoKSB7IHJldHVybiBmYWxzZSB9DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJhbmdlcy5sZW5ndGg7IGkrKykgew0KICAgICAgdmFyIGhlcmUgPSB0aGlzJDEucmFuZ2VzW2ldLCB0aGVyZSA9IG90aGVyLnJhbmdlc1tpXTsNCiAgICAgIGlmICghZXF1YWxDdXJzb3JQb3MoaGVyZS5hbmNob3IsIHRoZXJlLmFuY2hvcikgfHwgIWVxdWFsQ3Vyc29yUG9zKGhlcmUuaGVhZCwgdGhlcmUuaGVhZCkpIHsgcmV0dXJuIGZhbHNlIH0NCiAgICB9DQogICAgcmV0dXJuIHRydWUNCiAgfTsNCg0KICBTZWxlY3Rpb24ucHJvdG90eXBlLmRlZXBDb3B5ID0gZnVuY3Rpb24gKCkgew0KICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICB2YXIgb3V0ID0gW107DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJhbmdlcy5sZW5ndGg7IGkrKykNCiAgICAgIHsgb3V0W2ldID0gbmV3IFJhbmdlKGNvcHlQb3ModGhpcyQxLnJhbmdlc1tpXS5hbmNob3IpLCBjb3B5UG9zKHRoaXMkMS5yYW5nZXNbaV0uaGVhZCkpOyB9DQogICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24ob3V0LCB0aGlzLnByaW1JbmRleCkNCiAgfTsNCg0KICBTZWxlY3Rpb24ucHJvdG90eXBlLnNvbWV0aGluZ1NlbGVjdGVkID0gZnVuY3Rpb24gKCkgew0KICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmFuZ2VzLmxlbmd0aDsgaSsrKQ0KICAgICAgeyBpZiAoIXRoaXMkMS5yYW5nZXNbaV0uZW1wdHkoKSkgeyByZXR1cm4gdHJ1ZSB9IH0NCiAgICByZXR1cm4gZmFsc2UNCiAgfTsNCg0KICBTZWxlY3Rpb24ucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKHBvcywgZW5kKSB7DQogICAgICB2YXIgdGhpcyQxID0gdGhpczsNCg0KICAgIGlmICghZW5kKSB7IGVuZCA9IHBvczsgfQ0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yYW5nZXMubGVuZ3RoOyBpKyspIHsNCiAgICAgIHZhciByYW5nZSA9IHRoaXMkMS5yYW5nZXNbaV07DQogICAgICBpZiAoY21wKGVuZCwgcmFuZ2UuZnJvbSgpKSA+PSAwICYmIGNtcChwb3MsIHJhbmdlLnRvKCkpIDw9IDApDQogICAgICAgIHsgcmV0dXJuIGkgfQ0KICAgIH0NCiAgICByZXR1cm4gLTENCiAgfTsNCg0KICB2YXIgUmFuZ2UgPSBmdW5jdGlvbihhbmNob3IsIGhlYWQpIHsNCiAgICB0aGlzLmFuY2hvciA9IGFuY2hvcjsgdGhpcy5oZWFkID0gaGVhZDsNCiAgfTsNCg0KICBSYW5nZS5wcm90b3R5cGUuZnJvbSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1pblBvcyh0aGlzLmFuY2hvciwgdGhpcy5oZWFkKSB9Ow0KICBSYW5nZS5wcm90b3R5cGUudG8gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtYXhQb3ModGhpcy5hbmNob3IsIHRoaXMuaGVhZCkgfTsNCiAgUmFuZ2UucHJvdG90eXBlLmVtcHR5ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5oZWFkLmxpbmUgPT0gdGhpcy5hbmNob3IubGluZSAmJiB0aGlzLmhlYWQuY2ggPT0gdGhpcy5hbmNob3IuY2ggfTsNCg0KICAvLyBUYWtlIGFuIHVuc29ydGVkLCBwb3RlbnRpYWxseSBvdmVybGFwcGluZyBzZXQgb2YgcmFuZ2VzLCBhbmQNCiAgLy8gYnVpbGQgYSBzZWxlY3Rpb24gb3V0IG9mIGl0LiAnQ29uc3VtZXMnIHJhbmdlcyBhcnJheSAobW9kaWZ5aW5nDQogIC8vIGl0KS4NCiAgZnVuY3Rpb24gbm9ybWFsaXplU2VsZWN0aW9uKGNtLCByYW5nZXMsIHByaW1JbmRleCkgew0KICAgIHZhciBtYXlUb3VjaCA9IGNtICYmIGNtLm9wdGlvbnMuc2VsZWN0aW9uc01heVRvdWNoOw0KICAgIHZhciBwcmltID0gcmFuZ2VzW3ByaW1JbmRleF07DQogICAgcmFuZ2VzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGNtcChhLmZyb20oKSwgYi5mcm9tKCkpOyB9KTsNCiAgICBwcmltSW5kZXggPSBpbmRleE9mKHJhbmdlcywgcHJpbSk7DQogICAgZm9yICh2YXIgaSA9IDE7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHsNCiAgICAgIHZhciBjdXIgPSByYW5nZXNbaV0sIHByZXYgPSByYW5nZXNbaSAtIDFdOw0KICAgICAgdmFyIGRpZmYgPSBjbXAocHJldi50bygpLCBjdXIuZnJvbSgpKTsNCiAgICAgIGlmIChtYXlUb3VjaCAmJiAhY3VyLmVtcHR5KCkgPyBkaWZmID4gMCA6IGRpZmYgPj0gMCkgew0KICAgICAgICB2YXIgZnJvbSA9IG1pblBvcyhwcmV2LmZyb20oKSwgY3VyLmZyb20oKSksIHRvID0gbWF4UG9zKHByZXYudG8oKSwgY3VyLnRvKCkpOw0KICAgICAgICB2YXIgaW52ID0gcHJldi5lbXB0eSgpID8gY3VyLmZyb20oKSA9PSBjdXIuaGVhZCA6IHByZXYuZnJvbSgpID09IHByZXYuaGVhZDsNCiAgICAgICAgaWYgKGkgPD0gcHJpbUluZGV4KSB7IC0tcHJpbUluZGV4OyB9DQogICAgICAgIHJhbmdlcy5zcGxpY2UoLS1pLCAyLCBuZXcgUmFuZ2UoaW52ID8gdG8gOiBmcm9tLCBpbnYgPyBmcm9tIDogdG8pKTsNCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24ocmFuZ2VzLCBwcmltSW5kZXgpDQogIH0NCg0KICBmdW5jdGlvbiBzaW1wbGVTZWxlY3Rpb24oYW5jaG9yLCBoZWFkKSB7DQogICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oW25ldyBSYW5nZShhbmNob3IsIGhlYWQgfHwgYW5jaG9yKV0sIDApDQogIH0NCg0KICAvLyBDb21wdXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZW5kIG9mIGEgY2hhbmdlIChpdHMgJ3RvJyBwcm9wZXJ0eQ0KICAvLyByZWZlcnMgdG8gdGhlIHByZS1jaGFuZ2UgZW5kKS4NCiAgZnVuY3Rpb24gY2hhbmdlRW5kKGNoYW5nZSkgew0KICAgIGlmICghY2hhbmdlLnRleHQpIHsgcmV0dXJuIGNoYW5nZS50byB9DQogICAgcmV0dXJuIFBvcyhjaGFuZ2UuZnJvbS5saW5lICsgY2hhbmdlLnRleHQubGVuZ3RoIC0gMSwNCiAgICAgICAgICAgICAgIGxzdChjaGFuZ2UudGV4dCkubGVuZ3RoICsgKGNoYW5nZS50ZXh0Lmxlbmd0aCA9PSAxID8gY2hhbmdlLmZyb20uY2ggOiAwKSkNCiAgfQ0KDQogIC8vIEFkanVzdCBhIHBvc2l0aW9uIHRvIHJlZmVyIHRvIHRoZSBwb3N0LWNoYW5nZSBwb3NpdGlvbiBvZiB0aGUNCiAgLy8gc2FtZSB0ZXh0LCBvciB0aGUgZW5kIG9mIHRoZSBjaGFuZ2UgaWYgdGhlIGNoYW5nZSBjb3ZlcnMgaXQuDQogIGZ1bmN0aW9uIGFkanVzdEZvckNoYW5nZShwb3MsIGNoYW5nZSkgew0KICAgIGlmIChjbXAocG9zLCBjaGFuZ2UuZnJvbSkgPCAwKSB7IHJldHVybiBwb3MgfQ0KICAgIGlmIChjbXAocG9zLCBjaGFuZ2UudG8pIDw9IDApIHsgcmV0dXJuIGNoYW5nZUVuZChjaGFuZ2UpIH0NCg0KICAgIHZhciBsaW5lID0gcG9zLmxpbmUgKyBjaGFuZ2UudGV4dC5sZW5ndGggLSAoY2hhbmdlLnRvLmxpbmUgLSBjaGFuZ2UuZnJvbS5saW5lKSAtIDEsIGNoID0gcG9zLmNoOw0KICAgIGlmIChwb3MubGluZSA9PSBjaGFuZ2UudG8ubGluZSkgeyBjaCArPSBjaGFuZ2VFbmQoY2hhbmdlKS5jaCAtIGNoYW5nZS50by5jaDsgfQ0KICAgIHJldHVybiBQb3MobGluZSwgY2gpDQogIH0NCg0KICBmdW5jdGlvbiBjb21wdXRlU2VsQWZ0ZXJDaGFuZ2UoZG9jLCBjaGFuZ2UpIHsNCiAgICB2YXIgb3V0ID0gW107DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2Muc2VsLnJhbmdlcy5sZW5ndGg7IGkrKykgew0KICAgICAgdmFyIHJhbmdlID0gZG9jLnNlbC5yYW5nZXNbaV07DQogICAgICBvdXQucHVzaChuZXcgUmFuZ2UoYWRqdXN0Rm9yQ2hhbmdlKHJhbmdlLmFuY2hvciwgY2hhbmdlKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICBhZGp1c3RGb3JDaGFuZ2UocmFuZ2UuaGVhZCwgY2hhbmdlKSkpOw0KICAgIH0NCiAgICByZXR1cm4gbm9ybWFsaXplU2VsZWN0aW9uKGRvYy5jbSwgb3V0LCBkb2Muc2VsLnByaW1JbmRleCkNCiAgfQ0KDQogIGZ1bmN0aW9uIG9mZnNldFBvcyhwb3MsIG9sZCwgbncpIHsNCiAgICBpZiAocG9zLmxpbmUgPT0gb2xkLmxpbmUpDQogICAgICB7IHJldHVybiBQb3MobncubGluZSwgcG9zLmNoIC0gb2xkLmNoICsgbncuY2gpIH0NCiAgICBlbHNlDQogICAgICB7IHJldHVybiBQb3MobncubGluZSArIChwb3MubGluZSAtIG9sZC5saW5lKSwgcG9zLmNoKSB9DQogIH0NCg0KICAvLyBVc2VkIGJ5IHJlcGxhY2VTZWxlY3Rpb25zIHRvIGFsbG93IG1vdmluZyB0aGUgc2VsZWN0aW9uIHRvIHRoZQ0KICAvLyBzdGFydCBvciBhcm91bmQgdGhlIHJlcGxhY2VkIHRlc3QuIEhpbnQgbWF5IGJlICJzdGFydCIgb3IgImFyb3VuZCIuDQogIGZ1bmN0aW9uIGNvbXB1dGVSZXBsYWNlZFNlbChkb2MsIGNoYW5nZXMsIGhpbnQpIHsNCiAgICB2YXIgb3V0ID0gW107DQogICAgdmFyIG9sZFByZXYgPSBQb3MoZG9jLmZpcnN0LCAwKSwgbmV3UHJldiA9IG9sZFByZXY7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFuZ2VzLmxlbmd0aDsgaSsrKSB7DQogICAgICB2YXIgY2hhbmdlID0gY2hhbmdlc1tpXTsNCiAgICAgIHZhciBmcm9tID0gb2Zmc2V0UG9zKGNoYW5nZS5mcm9tLCBvbGRQcmV2LCBuZXdQcmV2KTsNCiAgICAgIHZhciB0byA9IG9mZnNldFBvcyhjaGFuZ2VFbmQoY2hhbmdlKSwgb2xkUHJldiwgbmV3UHJldik7DQogICAgICBvbGRQcmV2ID0gY2hhbmdlLnRvOw0KICAgICAgbmV3UHJldiA9IHRvOw0KICAgICAgaWYgKGhpbnQgPT0gImFyb3VuZCIpIHsNCiAgICAgICAgdmFyIHJhbmdlID0gZG9jLnNlbC5yYW5nZXNbaV0sIGludiA9IGNtcChyYW5nZS5oZWFkLCByYW5nZS5hbmNob3IpIDwgMDsNCiAgICAgICAgb3V0W2ldID0gbmV3IFJhbmdlKGludiA/IHRvIDogZnJvbSwgaW52ID8gZnJvbSA6IHRvKTsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIG91dFtpXSA9IG5ldyBSYW5nZShmcm9tLCBmcm9tKTsNCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIG5ldyBTZWxlY3Rpb24ob3V0LCBkb2Muc2VsLnByaW1JbmRleCkNCiAgfQ0KDQogIC8vIFVzZWQgdG8gZ2V0IHRoZSBlZGl0b3IgaW50byBhIGNvbnNpc3RlbnQgc3RhdGUgYWdhaW4gd2hlbiBvcHRpb25zIGNoYW5nZS4NCg0KICBmdW5jdGlvbiBsb2FkTW9kZShjbSkgew0KICAgIGNtLmRvYy5tb2RlID0gZ2V0TW9kZShjbS5vcHRpb25zLCBjbS5kb2MubW9kZU9wdGlvbik7DQogICAgcmVzZXRNb2RlU3RhdGUoY20pOw0KICB9DQoNCiAgZnVuY3Rpb24gcmVzZXRNb2RlU3RhdGUoY20pIHsNCiAgICBjbS5kb2MuaXRlcihmdW5jdGlvbiAobGluZSkgew0KICAgICAgaWYgKGxpbmUuc3RhdGVBZnRlcikgeyBsaW5lLnN0YXRlQWZ0ZXIgPSBudWxsOyB9DQogICAgICBpZiAobGluZS5zdHlsZXMpIHsgbGluZS5zdHlsZXMgPSBudWxsOyB9DQogICAgfSk7DQogICAgY20uZG9jLm1vZGVGcm9udGllciA9IGNtLmRvYy5oaWdobGlnaHRGcm9udGllciA9IGNtLmRvYy5maXJzdDsNCiAgICBzdGFydFdvcmtlcihjbSwgMTAwKTsNCiAgICBjbS5zdGF0ZS5tb2RlR2VuKys7DQogICAgaWYgKGNtLmN1ck9wKSB7IHJlZ0NoYW5nZShjbSk7IH0NCiAgfQ0KDQogIC8vIERPQ1VNRU5UIERBVEEgU1RSVUNUVVJFDQoNCiAgLy8gQnkgZGVmYXVsdCwgdXBkYXRlcyB0aGF0IHN0YXJ0IGFuZCBlbmQgYXQgdGhlIGJlZ2lubmluZyBvZiBhIGxpbmUNCiAgLy8gYXJlIHRyZWF0ZWQgc3BlY2lhbGx5LCBpbiBvcmRlciB0byBtYWtlIHRoZSBhc3NvY2lhdGlvbiBvZiBsaW5lDQogIC8vIHdpZGdldHMgYW5kIG1hcmtlciBlbGVtZW50cyB3aXRoIHRoZSB0ZXh0IGJlaGF2ZSBtb3JlIGludHVpdGl2ZS4NCiAgZnVuY3Rpb24gaXNXaG9sZUxpbmVVcGRhdGUoZG9jLCBjaGFuZ2UpIHsNCiAgICByZXR1cm4gY2hhbmdlLmZyb20uY2ggPT0gMCAmJiBjaGFuZ2UudG8uY2ggPT0gMCAmJiBsc3QoY2hhbmdlLnRleHQpID09ICIiICYmDQogICAgICAoIWRvYy5jbSB8fCBkb2MuY20ub3B0aW9ucy53aG9sZUxpbmVVcGRhdGVCZWZvcmUpDQogIH0NCg0KICAvLyBQZXJmb3JtIGEgY2hhbmdlIG9uIHRoZSBkb2N1bWVudCBkYXRhIHN0cnVjdHVyZS4NCiAgZnVuY3Rpb24gdXBkYXRlRG9jKGRvYywgY2hhbmdlLCBtYXJrZWRTcGFucywgZXN0aW1hdGVIZWlnaHQkJDEpIHsNCiAgICBmdW5jdGlvbiBzcGFuc0ZvcihuKSB7cmV0dXJuIG1hcmtlZFNwYW5zID8gbWFya2VkU3BhbnNbbl0gOiBudWxsfQ0KICAgIGZ1bmN0aW9uIHVwZGF0ZShsaW5lLCB0ZXh0LCBzcGFucykgew0KICAgICAgdXBkYXRlTGluZShsaW5lLCB0ZXh0LCBzcGFucywgZXN0aW1hdGVIZWlnaHQkJDEpOw0KICAgICAgc2lnbmFsTGF0ZXIobGluZSwgImNoYW5nZSIsIGxpbmUsIGNoYW5nZSk7DQogICAgfQ0KICAgIGZ1bmN0aW9uIGxpbmVzRm9yKHN0YXJ0LCBlbmQpIHsNCiAgICAgIHZhciByZXN1bHQgPSBbXTsNCiAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKQ0KICAgICAgICB7IHJlc3VsdC5wdXNoKG5ldyBMaW5lKHRleHRbaV0sIHNwYW5zRm9yKGkpLCBlc3RpbWF0ZUhlaWdodCQkMSkpOyB9DQogICAgICByZXR1cm4gcmVzdWx0DQogICAgfQ0KDQogICAgdmFyIGZyb20gPSBjaGFuZ2UuZnJvbSwgdG8gPSBjaGFuZ2UudG8sIHRleHQgPSBjaGFuZ2UudGV4dDsNCiAgICB2YXIgZmlyc3RMaW5lID0gZ2V0TGluZShkb2MsIGZyb20ubGluZSksIGxhc3RMaW5lID0gZ2V0TGluZShkb2MsIHRvLmxpbmUpOw0KICAgIHZhciBsYXN0VGV4dCA9IGxzdCh0ZXh0KSwgbGFzdFNwYW5zID0gc3BhbnNGb3IodGV4dC5sZW5ndGggLSAxKSwgbmxpbmVzID0gdG8ubGluZSAtIGZyb20ubGluZTsNCg0KICAgIC8vIEFkanVzdCB0aGUgbGluZSBzdHJ1Y3R1cmUNCiAgICBpZiAoY2hhbmdlLmZ1bGwpIHsNCiAgICAgIGRvYy5pbnNlcnQoMCwgbGluZXNGb3IoMCwgdGV4dC5sZW5ndGgpKTsNCiAgICAgIGRvYy5yZW1vdmUodGV4dC5sZW5ndGgsIGRvYy5zaXplIC0gdGV4dC5sZW5ndGgpOw0KICAgIH0gZWxzZSBpZiAoaXNXaG9sZUxpbmVVcGRhdGUoZG9jLCBjaGFuZ2UpKSB7DQogICAgICAvLyBUaGlzIGlzIGEgd2hvbGUtbGluZSByZXBsYWNlLiBUcmVhdGVkIHNwZWNpYWxseSB0byBtYWtlDQogICAgICAvLyBzdXJlIGxpbmUgb2JqZWN0cyBtb3ZlIHRoZSB3YXkgdGhleSBhcmUgc3VwcG9zZWQgdG8uDQogICAgICB2YXIgYWRkZWQgPSBsaW5lc0ZvcigwLCB0ZXh0Lmxlbmd0aCAtIDEpOw0KICAgICAgdXBkYXRlKGxhc3RMaW5lLCBsYXN0TGluZS50ZXh0LCBsYXN0U3BhbnMpOw0KICAgICAgaWYgKG5saW5lcykgeyBkb2MucmVtb3ZlKGZyb20ubGluZSwgbmxpbmVzKTsgfQ0KICAgICAgaWYgKGFkZGVkLmxlbmd0aCkgeyBkb2MuaW5zZXJ0KGZyb20ubGluZSwgYWRkZWQpOyB9DQogICAgfSBlbHNlIGlmIChmaXJzdExpbmUgPT0gbGFzdExpbmUpIHsNCiAgICAgIGlmICh0ZXh0Lmxlbmd0aCA9PSAxKSB7DQogICAgICAgIHVwZGF0ZShmaXJzdExpbmUsIGZpcnN0TGluZS50ZXh0LnNsaWNlKDAsIGZyb20uY2gpICsgbGFzdFRleHQgKyBmaXJzdExpbmUudGV4dC5zbGljZSh0by5jaCksIGxhc3RTcGFucyk7DQogICAgICB9IGVsc2Ugew0KICAgICAgICB2YXIgYWRkZWQkMSA9IGxpbmVzRm9yKDEsIHRleHQubGVuZ3RoIC0gMSk7DQogICAgICAgIGFkZGVkJDEucHVzaChuZXcgTGluZShsYXN0VGV4dCArIGZpcnN0TGluZS50ZXh0LnNsaWNlKHRvLmNoKSwgbGFzdFNwYW5zLCBlc3RpbWF0ZUhlaWdodCQkMSkpOw0KICAgICAgICB1cGRhdGUoZmlyc3RMaW5lLCBmaXJzdExpbmUudGV4dC5zbGljZSgwLCBmcm9tLmNoKSArIHRleHRbMF0sIHNwYW5zRm9yKDApKTsNCiAgICAgICAgZG9jLmluc2VydChmcm9tLmxpbmUgKyAxLCBhZGRlZCQxKTsNCiAgICAgIH0NCiAgICB9IGVsc2UgaWYgKHRleHQubGVuZ3RoID09IDEpIHsNCiAgICAgIHVwZGF0ZShmaXJzdExpbmUsIGZpcnN0TGluZS50ZXh0LnNsaWNlKDAsIGZyb20uY2gpICsgdGV4dFswXSArIGxhc3RMaW5lLnRleHQuc2xpY2UodG8uY2gpLCBzcGFuc0ZvcigwKSk7DQogICAgICBkb2MucmVtb3ZlKGZyb20ubGluZSArIDEsIG5saW5lcyk7DQogICAgfSBlbHNlIHsNCiAgICAgIHVwZGF0ZShmaXJzdExpbmUsIGZpcnN0TGluZS50ZXh0LnNsaWNlKDAsIGZyb20uY2gpICsgdGV4dFswXSwgc3BhbnNGb3IoMCkpOw0KICAgICAgdXBkYXRlKGxhc3RMaW5lLCBsYXN0VGV4dCArIGxhc3RMaW5lLnRleHQuc2xpY2UodG8uY2gpLCBsYXN0U3BhbnMpOw0KICAgICAgdmFyIGFkZGVkJDIgPSBsaW5lc0ZvcigxLCB0ZXh0Lmxlbmd0aCAtIDEpOw0KICAgICAgaWYgKG5saW5lcyA+IDEpIHsgZG9jLnJlbW92ZShmcm9tLmxpbmUgKyAxLCBubGluZXMgLSAxKTsgfQ0KICAgICAgZG9jLmluc2VydChmcm9tLmxpbmUgKyAxLCBhZGRlZCQyKTsNCiAgICB9DQoNCiAgICBzaWduYWxMYXRlcihkb2MsICJjaGFuZ2UiLCBkb2MsIGNoYW5nZSk7DQogIH0NCg0KICAvLyBDYWxsIGYgZm9yIGFsbCBsaW5rZWQgZG9jdW1lbnRzLg0KICBmdW5jdGlvbiBsaW5rZWREb2NzKGRvYywgZiwgc2hhcmVkSGlzdE9ubHkpIHsNCiAgICBmdW5jdGlvbiBwcm9wYWdhdGUoZG9jLCBza2lwLCBzaGFyZWRIaXN0KSB7DQogICAgICBpZiAoZG9jLmxpbmtlZCkgeyBmb3IgKHZhciBpID0gMDsgaSA8IGRvYy5saW5rZWQubGVuZ3RoOyArK2kpIHsNCiAgICAgICAgdmFyIHJlbCA9IGRvYy5saW5rZWRbaV07DQogICAgICAgIGlmIChyZWwuZG9jID09IHNraXApIHsgY29udGludWUgfQ0KICAgICAgICB2YXIgc2hhcmVkID0gc2hhcmVkSGlzdCAmJiByZWwuc2hhcmVkSGlzdDsNCiAgICAgICAgaWYgKHNoYXJlZEhpc3RPbmx5ICYmICFzaGFyZWQpIHsgY29udGludWUgfQ0KICAgICAgICBmKHJlbC5kb2MsIHNoYXJlZCk7DQogICAgICAgIHByb3BhZ2F0ZShyZWwuZG9jLCBkb2MsIHNoYXJlZCk7DQogICAgICB9IH0NCiAgICB9DQogICAgcHJvcGFnYXRlKGRvYywgbnVsbCwgdHJ1ZSk7DQogIH0NCg0KICAvLyBBdHRhY2ggYSBkb2N1bWVudCB0byBhbiBlZGl0b3IuDQogIGZ1bmN0aW9uIGF0dGFjaERvYyhjbSwgZG9jKSB7DQogICAgaWYgKGRvYy5jbSkgeyB0aHJvdyBuZXcgRXJyb3IoIlRoaXMgZG9jdW1lbnQgaXMgYWxyZWFkeSBpbiB1c2UuIikgfQ0KICAgIGNtLmRvYyA9IGRvYzsNCiAgICBkb2MuY20gPSBjbTsNCiAgICBlc3RpbWF0ZUxpbmVIZWlnaHRzKGNtKTsNCiAgICBsb2FkTW9kZShjbSk7DQogICAgc2V0RGlyZWN0aW9uQ2xhc3MoY20pOw0KICAgIGlmICghY20ub3B0aW9ucy5saW5lV3JhcHBpbmcpIHsgZmluZE1heExpbmUoY20pOyB9DQogICAgY20ub3B0aW9ucy5tb2RlID0gZG9jLm1vZGVPcHRpb247DQogICAgcmVnQ2hhbmdlKGNtKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHNldERpcmVjdGlvbkNsYXNzKGNtKSB7DQogIChjbS5kb2MuZGlyZWN0aW9uID09ICJydGwiID8gYWRkQ2xhc3MgOiBybUNsYXNzKShjbS5kaXNwbGF5LmxpbmVEaXYsICJDb2RlTWlycm9yLXJ0bCIpOw0KICB9DQoNCiAgZnVuY3Rpb24gZGlyZWN0aW9uQ2hhbmdlZChjbSkgew0KICAgIHJ1bkluT3AoY20sIGZ1bmN0aW9uICgpIHsNCiAgICAgIHNldERpcmVjdGlvbkNsYXNzKGNtKTsNCiAgICAgIHJlZ0NoYW5nZShjbSk7DQogICAgfSk7DQogIH0NCg0KICBmdW5jdGlvbiBIaXN0b3J5KHN0YXJ0R2VuKSB7DQogICAgLy8gQXJyYXlzIG9mIGNoYW5nZSBldmVudHMgYW5kIHNlbGVjdGlvbnMuIERvaW5nIHNvbWV0aGluZyBhZGRzIGFuDQogICAgLy8gZXZlbnQgdG8gZG9uZSBhbmQgY2xlYXJzIHVuZG8uIFVuZG9pbmcgbW92ZXMgZXZlbnRzIGZyb20gZG9uZQ0KICAgIC8vIHRvIHVuZG9uZSwgcmVkb2luZyBtb3ZlcyB0aGVtIGluIHRoZSBvdGhlciBkaXJlY3Rpb24uDQogICAgdGhpcy5kb25lID0gW107IHRoaXMudW5kb25lID0gW107DQogICAgdGhpcy51bmRvRGVwdGggPSBJbmZpbml0eTsNCiAgICAvLyBVc2VkIHRvIHRyYWNrIHdoZW4gY2hhbmdlcyBjYW4gYmUgbWVyZ2VkIGludG8gYSBzaW5nbGUgdW5kbw0KICAgIC8vIGV2ZW50DQogICAgdGhpcy5sYXN0TW9kVGltZSA9IHRoaXMubGFzdFNlbFRpbWUgPSAwOw0KICAgIHRoaXMubGFzdE9wID0gdGhpcy5sYXN0U2VsT3AgPSBudWxsOw0KICAgIHRoaXMubGFzdE9yaWdpbiA9IHRoaXMubGFzdFNlbE9yaWdpbiA9IG51bGw7DQogICAgLy8gVXNlZCBieSB0aGUgaXNDbGVhbigpIG1ldGhvZA0KICAgIHRoaXMuZ2VuZXJhdGlvbiA9IHRoaXMubWF4R2VuZXJhdGlvbiA9IHN0YXJ0R2VuIHx8IDE7DQogIH0NCg0KICAvLyBDcmVhdGUgYSBoaXN0b3J5IGNoYW5nZSBldmVudCBmcm9tIGFuIHVwZGF0ZURvYy1zdHlsZSBjaGFuZ2UNCiAgLy8gb2JqZWN0Lg0KICBmdW5jdGlvbiBoaXN0b3J5Q2hhbmdlRnJvbUNoYW5nZShkb2MsIGNoYW5nZSkgew0KICAgIHZhciBoaXN0Q2hhbmdlID0ge2Zyb206IGNvcHlQb3MoY2hhbmdlLmZyb20pLCB0bzogY2hhbmdlRW5kKGNoYW5nZSksIHRleHQ6IGdldEJldHdlZW4oZG9jLCBjaGFuZ2UuZnJvbSwgY2hhbmdlLnRvKX07DQogICAgYXR0YWNoTG9jYWxTcGFucyhkb2MsIGhpc3RDaGFuZ2UsIGNoYW5nZS5mcm9tLmxpbmUsIGNoYW5nZS50by5saW5lICsgMSk7DQogICAgbGlua2VkRG9jcyhkb2MsIGZ1bmN0aW9uIChkb2MpIHsgcmV0dXJuIGF0dGFjaExvY2FsU3BhbnMoZG9jLCBoaXN0Q2hhbmdlLCBjaGFuZ2UuZnJvbS5saW5lLCBjaGFuZ2UudG8ubGluZSArIDEpOyB9LCB0cnVlKTsNCiAgICByZXR1cm4gaGlzdENoYW5nZQ0KICB9DQoNCiAgLy8gUG9wIGFsbCBzZWxlY3Rpb24gZXZlbnRzIG9mZiB0aGUgZW5kIG9mIGEgaGlzdG9yeSBhcnJheS4gU3RvcCBhdA0KICAvLyBhIGNoYW5nZSBldmVudC4NCiAgZnVuY3Rpb24gY2xlYXJTZWxlY3Rpb25FdmVudHMoYXJyYXkpIHsNCiAgICB3aGlsZSAoYXJyYXkubGVuZ3RoKSB7DQogICAgICB2YXIgbGFzdCA9IGxzdChhcnJheSk7DQogICAgICBpZiAobGFzdC5yYW5nZXMpIHsgYXJyYXkucG9wKCk7IH0NCiAgICAgIGVsc2UgeyBicmVhayB9DQogICAgfQ0KICB9DQoNCiAgLy8gRmluZCB0aGUgdG9wIGNoYW5nZSBldmVudCBpbiB0aGUgaGlzdG9yeS4gUG9wIG9mZiBzZWxlY3Rpb24NCiAgLy8gZXZlbnRzIHRoYXQgYXJlIGluIHRoZSB3YXkuDQogIGZ1bmN0aW9uIGxhc3RDaGFuZ2VFdmVudChoaXN0LCBmb3JjZSkgew0KICAgIGlmIChmb3JjZSkgew0KICAgICAgY2xlYXJTZWxlY3Rpb25FdmVudHMoaGlzdC5kb25lKTsNCiAgICAgIHJldHVybiBsc3QoaGlzdC5kb25lKQ0KICAgIH0gZWxzZSBpZiAoaGlzdC5kb25lLmxlbmd0aCAmJiAhbHN0KGhpc3QuZG9uZSkucmFuZ2VzKSB7DQogICAgICByZXR1cm4gbHN0KGhpc3QuZG9uZSkNCiAgICB9IGVsc2UgaWYgKGhpc3QuZG9uZS5sZW5ndGggPiAxICYmICFoaXN0LmRvbmVbaGlzdC5kb25lLmxlbmd0aCAtIDJdLnJhbmdlcykgew0KICAgICAgaGlzdC5kb25lLnBvcCgpOw0KICAgICAgcmV0dXJuIGxzdChoaXN0LmRvbmUpDQogICAgfQ0KICB9DQoNCiAgLy8gUmVnaXN0ZXIgYSBjaGFuZ2UgaW4gdGhlIGhpc3RvcnkuIE1lcmdlcyBjaGFuZ2VzIHRoYXQgYXJlIHdpdGhpbg0KICAvLyBhIHNpbmdsZSBvcGVyYXRpb24sIG9yIGFyZSBjbG9zZSB0b2dldGhlciB3aXRoIGFuIG9yaWdpbiB0aGF0DQogIC8vIGFsbG93cyBtZXJnaW5nIChzdGFydGluZyB3aXRoICIrIikgaW50byBhIHNpbmdsZSBldmVudC4NCiAgZnVuY3Rpb24gYWRkQ2hhbmdlVG9IaXN0b3J5KGRvYywgY2hhbmdlLCBzZWxBZnRlciwgb3BJZCkgew0KICAgIHZhciBoaXN0ID0gZG9jLmhpc3Rvcnk7DQogICAgaGlzdC51bmRvbmUubGVuZ3RoID0gMDsNCiAgICB2YXIgdGltZSA9ICtuZXcgRGF0ZSwgY3VyOw0KICAgIHZhciBsYXN0Ow0KDQogICAgaWYgKChoaXN0Lmxhc3RPcCA9PSBvcElkIHx8DQogICAgICAgICBoaXN0Lmxhc3RPcmlnaW4gPT0gY2hhbmdlLm9yaWdpbiAmJiBjaGFuZ2Uub3JpZ2luICYmDQogICAgICAgICAoKGNoYW5nZS5vcmlnaW4uY2hhckF0KDApID09ICIrIiAmJiBoaXN0Lmxhc3RNb2RUaW1lID4gdGltZSAtIChkb2MuY20gPyBkb2MuY20ub3B0aW9ucy5oaXN0b3J5RXZlbnREZWxheSA6IDUwMCkpIHx8DQogICAgICAgICAgY2hhbmdlLm9yaWdpbi5jaGFyQXQoMCkgPT0gIioiKSkgJiYNCiAgICAgICAgKGN1ciA9IGxhc3RDaGFuZ2VFdmVudChoaXN0LCBoaXN0Lmxhc3RPcCA9PSBvcElkKSkpIHsNCiAgICAgIC8vIE1lcmdlIHRoaXMgY2hhbmdlIGludG8gdGhlIGxhc3QgZXZlbnQNCiAgICAgIGxhc3QgPSBsc3QoY3VyLmNoYW5nZXMpOw0KICAgICAgaWYgKGNtcChjaGFuZ2UuZnJvbSwgY2hhbmdlLnRvKSA9PSAwICYmIGNtcChjaGFuZ2UuZnJvbSwgbGFzdC50bykgPT0gMCkgew0KICAgICAgICAvLyBPcHRpbWl6ZWQgY2FzZSBmb3Igc2ltcGxlIGluc2VydGlvbiAtLSBkb24ndCB3YW50IHRvIGFkZA0KICAgICAgICAvLyBuZXcgY2hhbmdlc2V0cyBmb3IgZXZlcnkgY2hhcmFjdGVyIHR5cGVkDQogICAgICAgIGxhc3QudG8gPSBjaGFuZ2VFbmQoY2hhbmdlKTsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIC8vIEFkZCBuZXcgc3ViLWV2ZW50DQogICAgICAgIGN1ci5jaGFuZ2VzLnB1c2goaGlzdG9yeUNoYW5nZUZyb21DaGFuZ2UoZG9jLCBjaGFuZ2UpKTsNCiAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgLy8gQ2FuIG5vdCBiZSBtZXJnZWQsIHN0YXJ0IGEgbmV3IGV2ZW50Lg0KICAgICAgdmFyIGJlZm9yZSA9IGxzdChoaXN0LmRvbmUpOw0KICAgICAgaWYgKCFiZWZvcmUgfHwgIWJlZm9yZS5yYW5nZXMpDQogICAgICAgIHsgcHVzaFNlbGVjdGlvblRvSGlzdG9yeShkb2Muc2VsLCBoaXN0LmRvbmUpOyB9DQogICAgICBjdXIgPSB7Y2hhbmdlczogW2hpc3RvcnlDaGFuZ2VGcm9tQ2hhbmdlKGRvYywgY2hhbmdlKV0sDQogICAgICAgICAgICAgZ2VuZXJhdGlvbjogaGlzdC5nZW5lcmF0aW9ufTsNCiAgICAgIGhpc3QuZG9uZS5wdXNoKGN1cik7DQogICAgICB3aGlsZSAoaGlzdC5kb25lLmxlbmd0aCA+IGhpc3QudW5kb0RlcHRoKSB7DQogICAgICAgIGhpc3QuZG9uZS5zaGlmdCgpOw0KICAgICAgICBpZiAoIWhpc3QuZG9uZVswXS5yYW5nZXMpIHsgaGlzdC5kb25lLnNoaWZ0KCk7IH0NCiAgICAgIH0NCiAgICB9DQogICAgaGlzdC5kb25lLnB1c2goc2VsQWZ0ZXIpOw0KICAgIGhpc3QuZ2VuZXJhdGlvbiA9ICsraGlzdC5tYXhHZW5lcmF0aW9uOw0KICAgIGhpc3QubGFzdE1vZFRpbWUgPSBoaXN0Lmxhc3RTZWxUaW1lID0gdGltZTsNCiAgICBoaXN0Lmxhc3RPcCA9IGhpc3QubGFzdFNlbE9wID0gb3BJZDsNCiAgICBoaXN0Lmxhc3RPcmlnaW4gPSBoaXN0Lmxhc3RTZWxPcmlnaW4gPSBjaGFuZ2Uub3JpZ2luOw0KDQogICAgaWYgKCFsYXN0KSB7IHNpZ25hbChkb2MsICJoaXN0b3J5QWRkZWQiKTsgfQ0KICB9DQoNCiAgZnVuY3Rpb24gc2VsZWN0aW9uRXZlbnRDYW5CZU1lcmdlZChkb2MsIG9yaWdpbiwgcHJldiwgc2VsKSB7DQogICAgdmFyIGNoID0gb3JpZ2luLmNoYXJBdCgwKTsNCiAgICByZXR1cm4gY2ggPT0gIioiIHx8DQogICAgICBjaCA9PSAiKyIgJiYNCiAgICAgIHByZXYucmFuZ2VzLmxlbmd0aCA9PSBzZWwucmFuZ2VzLmxlbmd0aCAmJg0KICAgICAgcHJldi5zb21ldGhpbmdTZWxlY3RlZCgpID09IHNlbC5zb21ldGhpbmdTZWxlY3RlZCgpICYmDQogICAgICBuZXcgRGF0ZSAtIGRvYy5oaXN0b3J5Lmxhc3RTZWxUaW1lIDw9IChkb2MuY20gPyBkb2MuY20ub3B0aW9ucy5oaXN0b3J5RXZlbnREZWxheSA6IDUwMCkNCiAgfQ0KDQogIC8vIENhbGxlZCB3aGVuZXZlciB0aGUgc2VsZWN0aW9uIGNoYW5nZXMsIHNldHMgdGhlIG5ldyBzZWxlY3Rpb24gYXMNCiAgLy8gdGhlIHBlbmRpbmcgc2VsZWN0aW9uIGluIHRoZSBoaXN0b3J5LCBhbmQgcHVzaGVzIHRoZSBvbGQgcGVuZGluZw0KICAvLyBzZWxlY3Rpb24gaW50byB0aGUgJ2RvbmUnIGFycmF5IHdoZW4gaXQgd2FzIHNpZ25pZmljYW50bHkNCiAgLy8gZGlmZmVyZW50IChpbiBudW1iZXIgb2Ygc2VsZWN0ZWQgcmFuZ2VzLCBlbXB0aW5lc3MsIG9yIHRpbWUpLg0KICBmdW5jdGlvbiBhZGRTZWxlY3Rpb25Ub0hpc3RvcnkoZG9jLCBzZWwsIG9wSWQsIG9wdGlvbnMpIHsNCiAgICB2YXIgaGlzdCA9IGRvYy5oaXN0b3J5LCBvcmlnaW4gPSBvcHRpb25zICYmIG9wdGlvbnMub3JpZ2luOw0KDQogICAgLy8gQSBuZXcgZXZlbnQgaXMgc3RhcnRlZCB3aGVuIHRoZSBwcmV2aW91cyBvcmlnaW4gZG9lcyBub3QgbWF0Y2gNCiAgICAvLyB0aGUgY3VycmVudCwgb3IgdGhlIG9yaWdpbnMgZG9uJ3QgYWxsb3cgbWF0Y2hpbmcuIE9yaWdpbnMNCiAgICAvLyBzdGFydGluZyB3aXRoICogYXJlIGFsd2F5cyBtZXJnZWQsIHRob3NlIHN0YXJ0aW5nIHdpdGggKyBhcmUNCiAgICAvLyBtZXJnZWQgd2hlbiBzaW1pbGFyIGFuZCBjbG9zZSB0b2dldGhlciBpbiB0aW1lLg0KICAgIGlmIChvcElkID09IGhpc3QubGFzdFNlbE9wIHx8DQogICAgICAgIChvcmlnaW4gJiYgaGlzdC5sYXN0U2VsT3JpZ2luID09IG9yaWdpbiAmJg0KICAgICAgICAgKGhpc3QubGFzdE1vZFRpbWUgPT0gaGlzdC5sYXN0U2VsVGltZSAmJiBoaXN0Lmxhc3RPcmlnaW4gPT0gb3JpZ2luIHx8DQogICAgICAgICAgc2VsZWN0aW9uRXZlbnRDYW5CZU1lcmdlZChkb2MsIG9yaWdpbiwgbHN0KGhpc3QuZG9uZSksIHNlbCkpKSkNCiAgICAgIHsgaGlzdC5kb25lW2hpc3QuZG9uZS5sZW5ndGggLSAxXSA9IHNlbDsgfQ0KICAgIGVsc2UNCiAgICAgIHsgcHVzaFNlbGVjdGlvblRvSGlzdG9yeShzZWwsIGhpc3QuZG9uZSk7IH0NCg0KICAgIGhpc3QubGFzdFNlbFRpbWUgPSArbmV3IERhdGU7DQogICAgaGlzdC5sYXN0U2VsT3JpZ2luID0gb3JpZ2luOw0KICAgIGhpc3QubGFzdFNlbE9wID0gb3BJZDsNCiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmNsZWFyUmVkbyAhPT0gZmFsc2UpDQogICAgICB7IGNsZWFyU2VsZWN0aW9uRXZlbnRzKGhpc3QudW5kb25lKTsgfQ0KICB9DQoNCiAgZnVuY3Rpb24gcHVzaFNlbGVjdGlvblRvSGlzdG9yeShzZWwsIGRlc3QpIHsNCiAgICB2YXIgdG9wID0gbHN0KGRlc3QpOw0KICAgIGlmICghKHRvcCAmJiB0b3AucmFuZ2VzICYmIHRvcC5lcXVhbHMoc2VsKSkpDQogICAgICB7IGRlc3QucHVzaChzZWwpOyB9DQogIH0NCg0KICAvLyBVc2VkIHRvIHN0b3JlIG1hcmtlZCBzcGFuIGluZm9ybWF0aW9uIGluIHRoZSBoaXN0b3J5Lg0KICBmdW5jdGlvbiBhdHRhY2hMb2NhbFNwYW5zKGRvYywgY2hhbmdlLCBmcm9tLCB0bykgew0KICAgIHZhciBleGlzdGluZyA9IGNoYW5nZVsic3BhbnNfIiArIGRvYy5pZF0sIG4gPSAwOw0KICAgIGRvYy5pdGVyKE1hdGgubWF4KGRvYy5maXJzdCwgZnJvbSksIE1hdGgubWluKGRvYy5maXJzdCArIGRvYy5zaXplLCB0byksIGZ1bmN0aW9uIChsaW5lKSB7DQogICAgICBpZiAobGluZS5tYXJrZWRTcGFucykNCiAgICAgICAgeyAoZXhpc3RpbmcgfHwgKGV4aXN0aW5nID0gY2hhbmdlWyJzcGFuc18iICsgZG9jLmlkXSA9IHt9KSlbbl0gPSBsaW5lLm1hcmtlZFNwYW5zOyB9DQogICAgICArK247DQogICAgfSk7DQogIH0NCg0KICAvLyBXaGVuIHVuL3JlLWRvaW5nIHJlc3RvcmVzIHRleHQgY29udGFpbmluZyBtYXJrZWQgc3BhbnMsIHRob3NlDQogIC8vIHRoYXQgaGF2ZSBiZWVuIGV4cGxpY2l0bHkgY2xlYXJlZCBzaG91bGQgbm90IGJlIHJlc3RvcmVkLg0KICBmdW5jdGlvbiByZW1vdmVDbGVhcmVkU3BhbnMoc3BhbnMpIHsNCiAgICBpZiAoIXNwYW5zKSB7IHJldHVybiBudWxsIH0NCiAgICB2YXIgb3V0Ow0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3BhbnMubGVuZ3RoOyArK2kpIHsNCiAgICAgIGlmIChzcGFuc1tpXS5tYXJrZXIuZXhwbGljaXRseUNsZWFyZWQpIHsgaWYgKCFvdXQpIHsgb3V0ID0gc3BhbnMuc2xpY2UoMCwgaSk7IH0gfQ0KICAgICAgZWxzZSBpZiAob3V0KSB7IG91dC5wdXNoKHNwYW5zW2ldKTsgfQ0KICAgIH0NCiAgICByZXR1cm4gIW91dCA/IHNwYW5zIDogb3V0Lmxlbmd0aCA/IG91dCA6IG51bGwNCiAgfQ0KDQogIC8vIFJldHJpZXZlIGFuZCBmaWx0ZXIgdGhlIG9sZCBtYXJrZWQgc3BhbnMgc3RvcmVkIGluIGEgY2hhbmdlIGV2ZW50Lg0KICBmdW5jdGlvbiBnZXRPbGRTcGFucyhkb2MsIGNoYW5nZSkgew0KICAgIHZhciBmb3VuZCA9IGNoYW5nZVsic3BhbnNfIiArIGRvYy5pZF07DQogICAgaWYgKCFmb3VuZCkgeyByZXR1cm4gbnVsbCB9DQogICAgdmFyIG53ID0gW107DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFuZ2UudGV4dC5sZW5ndGg7ICsraSkNCiAgICAgIHsgbncucHVzaChyZW1vdmVDbGVhcmVkU3BhbnMoZm91bmRbaV0pKTsgfQ0KICAgIHJldHVybiBudw0KICB9DQoNCiAgLy8gVXNlZCBmb3IgdW4vcmUtZG9pbmcgY2hhbmdlcyBmcm9tIHRoZSBoaXN0b3J5LiBDb21iaW5lcyB0aGUNCiAgLy8gcmVzdWx0IG9mIGNvbXB1dGluZyB0aGUgZXhpc3Rpbmcgc3BhbnMgd2l0aCB0aGUgc2V0IG9mIHNwYW5zIHRoYXQNCiAgLy8gZXhpc3RlZCBpbiB0aGUgaGlzdG9yeSAoc28gdGhhdCBkZWxldGluZyBhcm91bmQgYSBzcGFuIGFuZCB0aGVuDQogIC8vIHVuZG9pbmcgYnJpbmdzIGJhY2sgdGhlIHNwYW4pLg0KICBmdW5jdGlvbiBtZXJnZU9sZFNwYW5zKGRvYywgY2hhbmdlKSB7DQogICAgdmFyIG9sZCA9IGdldE9sZFNwYW5zKGRvYywgY2hhbmdlKTsNCiAgICB2YXIgc3RyZXRjaGVkID0gc3RyZXRjaFNwYW5zT3ZlckNoYW5nZShkb2MsIGNoYW5nZSk7DQogICAgaWYgKCFvbGQpIHsgcmV0dXJuIHN0cmV0Y2hlZCB9DQogICAgaWYgKCFzdHJldGNoZWQpIHsgcmV0dXJuIG9sZCB9DQoNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9sZC5sZW5ndGg7ICsraSkgew0KICAgICAgdmFyIG9sZEN1ciA9IG9sZFtpXSwgc3RyZXRjaEN1ciA9IHN0cmV0Y2hlZFtpXTsNCiAgICAgIGlmIChvbGRDdXIgJiYgc3RyZXRjaEN1cikgew0KICAgICAgICBzcGFuczogZm9yICh2YXIgaiA9IDA7IGogPCBzdHJldGNoQ3VyLmxlbmd0aDsgKytqKSB7DQogICAgICAgICAgdmFyIHNwYW4gPSBzdHJldGNoQ3VyW2pdOw0KICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb2xkQ3VyLmxlbmd0aDsgKytrKQ0KICAgICAgICAgICAgeyBpZiAob2xkQ3VyW2tdLm1hcmtlciA9PSBzcGFuLm1hcmtlcikgeyBjb250aW51ZSBzcGFucyB9IH0NCiAgICAgICAgICBvbGRDdXIucHVzaChzcGFuKTsNCiAgICAgICAgfQ0KICAgICAgfSBlbHNlIGlmIChzdHJldGNoQ3VyKSB7DQogICAgICAgIG9sZFtpXSA9IHN0cmV0Y2hDdXI7DQogICAgICB9DQogICAgfQ0KICAgIHJldHVybiBvbGQNCiAgfQ0KDQogIC8vIFVzZWQgYm90aCB0byBwcm92aWRlIGEgSlNPTi1zYWZlIG9iamVjdCBpbiAuZ2V0SGlzdG9yeSwgYW5kLCB3aGVuDQogIC8vIGRldGFjaGluZyBhIGRvY3VtZW50LCB0byBzcGxpdCB0aGUgaGlzdG9yeSBpbiB0d28NCiAgZnVuY3Rpb24gY29weUhpc3RvcnlBcnJheShldmVudHMsIG5ld0dyb3VwLCBpbnN0YW50aWF0ZVNlbCkgew0KICAgIHZhciBjb3B5ID0gW107DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyArK2kpIHsNCiAgICAgIHZhciBldmVudCA9IGV2ZW50c1tpXTsNCiAgICAgIGlmIChldmVudC5yYW5nZXMpIHsNCiAgICAgICAgY29weS5wdXNoKGluc3RhbnRpYXRlU2VsID8gU2VsZWN0aW9uLnByb3RvdHlwZS5kZWVwQ29weS5jYWxsKGV2ZW50KSA6IGV2ZW50KTsNCiAgICAgICAgY29udGludWUNCiAgICAgIH0NCiAgICAgIHZhciBjaGFuZ2VzID0gZXZlbnQuY2hhbmdlcywgbmV3Q2hhbmdlcyA9IFtdOw0KICAgICAgY29weS5wdXNoKHtjaGFuZ2VzOiBuZXdDaGFuZ2VzfSk7DQogICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNoYW5nZXMubGVuZ3RoOyArK2opIHsNCiAgICAgICAgdmFyIGNoYW5nZSA9IGNoYW5nZXNbal0sIG0gPSAodm9pZCAwKTsNCiAgICAgICAgbmV3Q2hhbmdlcy5wdXNoKHtmcm9tOiBjaGFuZ2UuZnJvbSwgdG86IGNoYW5nZS50bywgdGV4dDogY2hhbmdlLnRleHR9KTsNCiAgICAgICAgaWYgKG5ld0dyb3VwKSB7IGZvciAodmFyIHByb3AgaW4gY2hhbmdlKSB7IGlmIChtID0gcHJvcC5tYXRjaCgvXnNwYW5zXyhcZCspJC8pKSB7DQogICAgICAgICAgaWYgKGluZGV4T2YobmV3R3JvdXAsIE51bWJlcihtWzFdKSkgPiAtMSkgew0KICAgICAgICAgICAgbHN0KG5ld0NoYW5nZXMpW3Byb3BdID0gY2hhbmdlW3Byb3BdOw0KICAgICAgICAgICAgZGVsZXRlIGNoYW5nZVtwcm9wXTsNCiAgICAgICAgICB9DQogICAgICAgIH0gfSB9DQogICAgICB9DQogICAgfQ0KICAgIHJldHVybiBjb3B5DQogIH0NCg0KICAvLyBUaGUgJ3Njcm9sbCcgcGFyYW1ldGVyIGdpdmVuIHRvIG1hbnkgb2YgdGhlc2UgaW5kaWNhdGVkIHdoZXRoZXINCiAgLy8gdGhlIG5ldyBjdXJzb3IgcG9zaXRpb24gc2hvdWxkIGJlIHNjcm9sbGVkIGludG8gdmlldyBhZnRlcg0KICAvLyBtb2RpZnlpbmcgdGhlIHNlbGVjdGlvbi4NCg0KICAvLyBJZiBzaGlmdCBpcyBoZWxkIG9yIHRoZSBleHRlbmQgZmxhZyBpcyBzZXQsIGV4dGVuZHMgYSByYW5nZSB0bw0KICAvLyBpbmNsdWRlIGEgZ2l2ZW4gcG9zaXRpb24gKGFuZCBvcHRpb25hbGx5IGEgc2Vjb25kIHBvc2l0aW9uKS4NCiAgLy8gT3RoZXJ3aXNlLCBzaW1wbHkgcmV0dXJucyB0aGUgcmFuZ2UgYmV0d2VlbiB0aGUgZ2l2ZW4gcG9zaXRpb25zLg0KICAvLyBVc2VkIGZvciBjdXJzb3IgbW90aW9uIGFuZCBzdWNoLg0KICBmdW5jdGlvbiBleHRlbmRSYW5nZShyYW5nZSwgaGVhZCwgb3RoZXIsIGV4dGVuZCkgew0KICAgIGlmIChleHRlbmQpIHsNCiAgICAgIHZhciBhbmNob3IgPSByYW5nZS5hbmNob3I7DQogICAgICBpZiAob3RoZXIpIHsNCiAgICAgICAgdmFyIHBvc0JlZm9yZSA9IGNtcChoZWFkLCBhbmNob3IpIDwgMDsNCiAgICAgICAgaWYgKHBvc0JlZm9yZSAhPSAoY21wKG90aGVyLCBhbmNob3IpIDwgMCkpIHsNCiAgICAgICAgICBhbmNob3IgPSBoZWFkOw0KICAgICAgICAgIGhlYWQgPSBvdGhlcjsNCiAgICAgICAgfSBlbHNlIGlmIChwb3NCZWZvcmUgIT0gKGNtcChoZWFkLCBvdGhlcikgPCAwKSkgew0KICAgICAgICAgIGhlYWQgPSBvdGhlcjsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgICAgcmV0dXJuIG5ldyBSYW5nZShhbmNob3IsIGhlYWQpDQogICAgfSBlbHNlIHsNCiAgICAgIHJldHVybiBuZXcgUmFuZ2Uob3RoZXIgfHwgaGVhZCwgaGVhZCkNCiAgICB9DQogIH0NCg0KICAvLyBFeHRlbmQgdGhlIHByaW1hcnkgc2VsZWN0aW9uIHJhbmdlLCBkaXNjYXJkIHRoZSByZXN0Lg0KICBmdW5jdGlvbiBleHRlbmRTZWxlY3Rpb24oZG9jLCBoZWFkLCBvdGhlciwgb3B0aW9ucywgZXh0ZW5kKSB7DQogICAgaWYgKGV4dGVuZCA9PSBudWxsKSB7IGV4dGVuZCA9IGRvYy5jbSAmJiAoZG9jLmNtLmRpc3BsYXkuc2hpZnQgfHwgZG9jLmV4dGVuZCk7IH0NCiAgICBzZXRTZWxlY3Rpb24oZG9jLCBuZXcgU2VsZWN0aW9uKFtleHRlbmRSYW5nZShkb2Muc2VsLnByaW1hcnkoKSwgaGVhZCwgb3RoZXIsIGV4dGVuZCldLCAwKSwgb3B0aW9ucyk7DQogIH0NCg0KICAvLyBFeHRlbmQgYWxsIHNlbGVjdGlvbnMgKHBvcyBpcyBhbiBhcnJheSBvZiBzZWxlY3Rpb25zIHdpdGggbGVuZ3RoDQogIC8vIGVxdWFsIHRoZSBudW1iZXIgb2Ygc2VsZWN0aW9ucykNCiAgZnVuY3Rpb24gZXh0ZW5kU2VsZWN0aW9ucyhkb2MsIGhlYWRzLCBvcHRpb25zKSB7DQogICAgdmFyIG91dCA9IFtdOw0KICAgIHZhciBleHRlbmQgPSBkb2MuY20gJiYgKGRvYy5jbS5kaXNwbGF5LnNoaWZ0IHx8IGRvYy5leHRlbmQpOw0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZG9jLnNlbC5yYW5nZXMubGVuZ3RoOyBpKyspDQogICAgICB7IG91dFtpXSA9IGV4dGVuZFJhbmdlKGRvYy5zZWwucmFuZ2VzW2ldLCBoZWFkc1tpXSwgbnVsbCwgZXh0ZW5kKTsgfQ0KICAgIHZhciBuZXdTZWwgPSBub3JtYWxpemVTZWxlY3Rpb24oZG9jLmNtLCBvdXQsIGRvYy5zZWwucHJpbUluZGV4KTsNCiAgICBzZXRTZWxlY3Rpb24oZG9jLCBuZXdTZWwsIG9wdGlvbnMpOw0KICB9DQoNCiAgLy8gVXBkYXRlcyBhIHNpbmdsZSByYW5nZSBpbiB0aGUgc2VsZWN0aW9uLg0KICBmdW5jdGlvbiByZXBsYWNlT25lU2VsZWN0aW9uKGRvYywgaSwgcmFuZ2UsIG9wdGlvbnMpIHsNCiAgICB2YXIgcmFuZ2VzID0gZG9jLnNlbC5yYW5nZXMuc2xpY2UoMCk7DQogICAgcmFuZ2VzW2ldID0gcmFuZ2U7DQogICAgc2V0U2VsZWN0aW9uKGRvYywgbm9ybWFsaXplU2VsZWN0aW9uKGRvYy5jbSwgcmFuZ2VzLCBkb2Muc2VsLnByaW1JbmRleCksIG9wdGlvbnMpOw0KICB9DQoNCiAgLy8gUmVzZXQgdGhlIHNlbGVjdGlvbiB0byBhIHNpbmdsZSByYW5nZS4NCiAgZnVuY3Rpb24gc2V0U2ltcGxlU2VsZWN0aW9uKGRvYywgYW5jaG9yLCBoZWFkLCBvcHRpb25zKSB7DQogICAgc2V0U2VsZWN0aW9uKGRvYywgc2ltcGxlU2VsZWN0aW9uKGFuY2hvciwgaGVhZCksIG9wdGlvbnMpOw0KICB9DQoNCiAgLy8gR2l2ZSBiZWZvcmVTZWxlY3Rpb25DaGFuZ2UgaGFuZGxlcnMgYSBjaGFuZ2UgdG8gaW5mbHVlbmNlIGENCiAgLy8gc2VsZWN0aW9uIHVwZGF0ZS4NCiAgZnVuY3Rpb24gZmlsdGVyU2VsZWN0aW9uQ2hhbmdlKGRvYywgc2VsLCBvcHRpb25zKSB7DQogICAgdmFyIG9iaiA9IHsNCiAgICAgIHJhbmdlczogc2VsLnJhbmdlcywNCiAgICAgIHVwZGF0ZTogZnVuY3Rpb24ocmFuZ2VzKSB7DQogICAgICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgICAgIHRoaXMucmFuZ2VzID0gW107DQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKQ0KICAgICAgICAgIHsgdGhpcyQxLnJhbmdlc1tpXSA9IG5ldyBSYW5nZShjbGlwUG9zKGRvYywgcmFuZ2VzW2ldLmFuY2hvciksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcFBvcyhkb2MsIHJhbmdlc1tpXS5oZWFkKSk7IH0NCiAgICAgIH0sDQogICAgICBvcmlnaW46IG9wdGlvbnMgJiYgb3B0aW9ucy5vcmlnaW4NCiAgICB9Ow0KICAgIHNpZ25hbChkb2MsICJiZWZvcmVTZWxlY3Rpb25DaGFuZ2UiLCBkb2MsIG9iaik7DQogICAgaWYgKGRvYy5jbSkgeyBzaWduYWwoZG9jLmNtLCAiYmVmb3JlU2VsZWN0aW9uQ2hhbmdlIiwgZG9jLmNtLCBvYmopOyB9DQogICAgaWYgKG9iai5yYW5nZXMgIT0gc2VsLnJhbmdlcykgeyByZXR1cm4gbm9ybWFsaXplU2VsZWN0aW9uKGRvYy5jbSwgb2JqLnJhbmdlcywgb2JqLnJhbmdlcy5sZW5ndGggLSAxKSB9DQogICAgZWxzZSB7IHJldHVybiBzZWwgfQ0KICB9DQoNCiAgZnVuY3Rpb24gc2V0U2VsZWN0aW9uUmVwbGFjZUhpc3RvcnkoZG9jLCBzZWwsIG9wdGlvbnMpIHsNCiAgICB2YXIgZG9uZSA9IGRvYy5oaXN0b3J5LmRvbmUsIGxhc3QgPSBsc3QoZG9uZSk7DQogICAgaWYgKGxhc3QgJiYgbGFzdC5yYW5nZXMpIHsNCiAgICAgIGRvbmVbZG9uZS5sZW5ndGggLSAxXSA9IHNlbDsNCiAgICAgIHNldFNlbGVjdGlvbk5vVW5kbyhkb2MsIHNlbCwgb3B0aW9ucyk7DQogICAgfSBlbHNlIHsNCiAgICAgIHNldFNlbGVjdGlvbihkb2MsIHNlbCwgb3B0aW9ucyk7DQogICAgfQ0KICB9DQoNCiAgLy8gU2V0IGEgbmV3IHNlbGVjdGlvbi4NCiAgZnVuY3Rpb24gc2V0U2VsZWN0aW9uKGRvYywgc2VsLCBvcHRpb25zKSB7DQogICAgc2V0U2VsZWN0aW9uTm9VbmRvKGRvYywgc2VsLCBvcHRpb25zKTsNCiAgICBhZGRTZWxlY3Rpb25Ub0hpc3RvcnkoZG9jLCBkb2Muc2VsLCBkb2MuY20gPyBkb2MuY20uY3VyT3AuaWQgOiBOYU4sIG9wdGlvbnMpOw0KICB9DQoNCiAgZnVuY3Rpb24gc2V0U2VsZWN0aW9uTm9VbmRvKGRvYywgc2VsLCBvcHRpb25zKSB7DQogICAgaWYgKGhhc0hhbmRsZXIoZG9jLCAiYmVmb3JlU2VsZWN0aW9uQ2hhbmdlIikgfHwgZG9jLmNtICYmIGhhc0hhbmRsZXIoZG9jLmNtLCAiYmVmb3JlU2VsZWN0aW9uQ2hhbmdlIikpDQogICAgICB7IHNlbCA9IGZpbHRlclNlbGVjdGlvbkNoYW5nZShkb2MsIHNlbCwgb3B0aW9ucyk7IH0NCg0KICAgIHZhciBiaWFzID0gb3B0aW9ucyAmJiBvcHRpb25zLmJpYXMgfHwNCiAgICAgIChjbXAoc2VsLnByaW1hcnkoKS5oZWFkLCBkb2Muc2VsLnByaW1hcnkoKS5oZWFkKSA8IDAgPyAtMSA6IDEpOw0KICAgIHNldFNlbGVjdGlvbklubmVyKGRvYywgc2tpcEF0b21pY0luU2VsZWN0aW9uKGRvYywgc2VsLCBiaWFzLCB0cnVlKSk7DQoNCiAgICBpZiAoIShvcHRpb25zICYmIG9wdGlvbnMuc2Nyb2xsID09PSBmYWxzZSkgJiYgZG9jLmNtKQ0KICAgICAgeyBlbnN1cmVDdXJzb3JWaXNpYmxlKGRvYy5jbSk7IH0NCiAgfQ0KDQogIGZ1bmN0aW9uIHNldFNlbGVjdGlvbklubmVyKGRvYywgc2VsKSB7DQogICAgaWYgKHNlbC5lcXVhbHMoZG9jLnNlbCkpIHsgcmV0dXJuIH0NCg0KICAgIGRvYy5zZWwgPSBzZWw7DQoNCiAgICBpZiAoZG9jLmNtKSB7DQogICAgICBkb2MuY20uY3VyT3AudXBkYXRlSW5wdXQgPSAxOw0KICAgICAgZG9jLmNtLmN1ck9wLnNlbGVjdGlvbkNoYW5nZWQgPSB0cnVlOw0KICAgICAgc2lnbmFsQ3Vyc29yQWN0aXZpdHkoZG9jLmNtKTsNCiAgICB9DQogICAgc2lnbmFsTGF0ZXIoZG9jLCAiY3Vyc29yQWN0aXZpdHkiLCBkb2MpOw0KICB9DQoNCiAgLy8gVmVyaWZ5IHRoYXQgdGhlIHNlbGVjdGlvbiBkb2VzIG5vdCBwYXJ0aWFsbHkgc2VsZWN0IGFueSBhdG9taWMNCiAgLy8gbWFya2VkIHJhbmdlcy4NCiAgZnVuY3Rpb24gcmVDaGVja1NlbGVjdGlvbihkb2MpIHsNCiAgICBzZXRTZWxlY3Rpb25Jbm5lcihkb2MsIHNraXBBdG9taWNJblNlbGVjdGlvbihkb2MsIGRvYy5zZWwsIG51bGwsIGZhbHNlKSk7DQogIH0NCg0KICAvLyBSZXR1cm4gYSBzZWxlY3Rpb24gdGhhdCBkb2VzIG5vdCBwYXJ0aWFsbHkgc2VsZWN0IGFueSBhdG9taWMNCiAgLy8gcmFuZ2VzLg0KICBmdW5jdGlvbiBza2lwQXRvbWljSW5TZWxlY3Rpb24oZG9jLCBzZWwsIGJpYXMsIG1heUNsZWFyKSB7DQogICAgdmFyIG91dDsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbC5yYW5nZXMubGVuZ3RoOyBpKyspIHsNCiAgICAgIHZhciByYW5nZSA9IHNlbC5yYW5nZXNbaV07DQogICAgICB2YXIgb2xkID0gc2VsLnJhbmdlcy5sZW5ndGggPT0gZG9jLnNlbC5yYW5nZXMubGVuZ3RoICYmIGRvYy5zZWwucmFuZ2VzW2ldOw0KICAgICAgdmFyIG5ld0FuY2hvciA9IHNraXBBdG9taWMoZG9jLCByYW5nZS5hbmNob3IsIG9sZCAmJiBvbGQuYW5jaG9yLCBiaWFzLCBtYXlDbGVhcik7DQogICAgICB2YXIgbmV3SGVhZCA9IHNraXBBdG9taWMoZG9jLCByYW5nZS5oZWFkLCBvbGQgJiYgb2xkLmhlYWQsIGJpYXMsIG1heUNsZWFyKTsNCiAgICAgIGlmIChvdXQgfHwgbmV3QW5jaG9yICE9IHJhbmdlLmFuY2hvciB8fCBuZXdIZWFkICE9IHJhbmdlLmhlYWQpIHsNCiAgICAgICAgaWYgKCFvdXQpIHsgb3V0ID0gc2VsLnJhbmdlcy5zbGljZSgwLCBpKTsgfQ0KICAgICAgICBvdXRbaV0gPSBuZXcgUmFuZ2UobmV3QW5jaG9yLCBuZXdIZWFkKTsNCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIG91dCA/IG5vcm1hbGl6ZVNlbGVjdGlvbihkb2MuY20sIG91dCwgc2VsLnByaW1JbmRleCkgOiBzZWwNCiAgfQ0KDQogIGZ1bmN0aW9uIHNraXBBdG9taWNJbm5lcihkb2MsIHBvcywgb2xkUG9zLCBkaXIsIG1heUNsZWFyKSB7DQogICAgdmFyIGxpbmUgPSBnZXRMaW5lKGRvYywgcG9zLmxpbmUpOw0KICAgIGlmIChsaW5lLm1hcmtlZFNwYW5zKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgbGluZS5tYXJrZWRTcGFucy5sZW5ndGg7ICsraSkgew0KICAgICAgdmFyIHNwID0gbGluZS5tYXJrZWRTcGFuc1tpXSwgbSA9IHNwLm1hcmtlcjsNCg0KICAgICAgLy8gRGV0ZXJtaW5lIGlmIHdlIHNob3VsZCBwcmV2ZW50IHRoZSBjdXJzb3IgYmVpbmcgcGxhY2VkIHRvIHRoZSBsZWZ0L3JpZ2h0IG9mIGFuIGF0b21pYyBtYXJrZXINCiAgICAgIC8vIEhpc3RvcmljYWxseSB0aGlzIHdhcyBkZXRlcm1pbmVkIHVzaW5nIHRoZSBpbmNsdXNpdmVMZWZ0L1JpZ2h0IG9wdGlvbiwgYnV0IHRoZSBuZXcgd2F5IHRvIGNvbnRyb2wgaXQNCiAgICAgIC8vIGlzIHdpdGggc2VsZWN0TGVmdC9SaWdodA0KICAgICAgdmFyIHByZXZlbnRDdXJzb3JMZWZ0ID0gKCJzZWxlY3RMZWZ0IiBpbiBtKSA/ICFtLnNlbGVjdExlZnQgOiBtLmluY2x1c2l2ZUxlZnQ7DQogICAgICB2YXIgcHJldmVudEN1cnNvclJpZ2h0ID0gKCJzZWxlY3RSaWdodCIgaW4gbSkgPyAhbS5zZWxlY3RSaWdodCA6IG0uaW5jbHVzaXZlUmlnaHQ7DQoNCiAgICAgIGlmICgoc3AuZnJvbSA9PSBudWxsIHx8IChwcmV2ZW50Q3Vyc29yTGVmdCA/IHNwLmZyb20gPD0gcG9zLmNoIDogc3AuZnJvbSA8IHBvcy5jaCkpICYmDQogICAgICAgICAgKHNwLnRvID09IG51bGwgfHwgKHByZXZlbnRDdXJzb3JSaWdodCA/IHNwLnRvID49IHBvcy5jaCA6IHNwLnRvID4gcG9zLmNoKSkpIHsNCiAgICAgICAgaWYgKG1heUNsZWFyKSB7DQogICAgICAgICAgc2lnbmFsKG0sICJiZWZvcmVDdXJzb3JFbnRlciIpOw0KICAgICAgICAgIGlmIChtLmV4cGxpY2l0bHlDbGVhcmVkKSB7DQogICAgICAgICAgICBpZiAoIWxpbmUubWFya2VkU3BhbnMpIHsgYnJlYWsgfQ0KICAgICAgICAgICAgZWxzZSB7LS1pOyBjb250aW51ZX0NCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgaWYgKCFtLmF0b21pYykgeyBjb250aW51ZSB9DQoNCiAgICAgICAgaWYgKG9sZFBvcykgew0KICAgICAgICAgIHZhciBuZWFyID0gbS5maW5kKGRpciA8IDAgPyAxIDogLTEpLCBkaWZmID0gKHZvaWQgMCk7DQogICAgICAgICAgaWYgKGRpciA8IDAgPyBwcmV2ZW50Q3Vyc29yUmlnaHQgOiBwcmV2ZW50Q3Vyc29yTGVmdCkNCiAgICAgICAgICAgIHsgbmVhciA9IG1vdmVQb3MoZG9jLCBuZWFyLCAtZGlyLCBuZWFyICYmIG5lYXIubGluZSA9PSBwb3MubGluZSA/IGxpbmUgOiBudWxsKTsgfQ0KICAgICAgICAgIGlmIChuZWFyICYmIG5lYXIubGluZSA9PSBwb3MubGluZSAmJiAoZGlmZiA9IGNtcChuZWFyLCBvbGRQb3MpKSAmJiAoZGlyIDwgMCA/IGRpZmYgPCAwIDogZGlmZiA+IDApKQ0KICAgICAgICAgICAgeyByZXR1cm4gc2tpcEF0b21pY0lubmVyKGRvYywgbmVhciwgcG9zLCBkaXIsIG1heUNsZWFyKSB9DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgZmFyID0gbS5maW5kKGRpciA8IDAgPyAtMSA6IDEpOw0KICAgICAgICBpZiAoZGlyIDwgMCA/IHByZXZlbnRDdXJzb3JMZWZ0IDogcHJldmVudEN1cnNvclJpZ2h0KQ0KICAgICAgICAgIHsgZmFyID0gbW92ZVBvcyhkb2MsIGZhciwgZGlyLCBmYXIubGluZSA9PSBwb3MubGluZSA/IGxpbmUgOiBudWxsKTsgfQ0KICAgICAgICByZXR1cm4gZmFyID8gc2tpcEF0b21pY0lubmVyKGRvYywgZmFyLCBwb3MsIGRpciwgbWF5Q2xlYXIpIDogbnVsbA0KICAgICAgfQ0KICAgIH0gfQ0KICAgIHJldHVybiBwb3MNCiAgfQ0KDQogIC8vIEVuc3VyZSBhIGdpdmVuIHBvc2l0aW9uIGlzIG5vdCBpbnNpZGUgYW4gYXRvbWljIHJhbmdlLg0KICBmdW5jdGlvbiBza2lwQXRvbWljKGRvYywgcG9zLCBvbGRQb3MsIGJpYXMsIG1heUNsZWFyKSB7DQogICAgdmFyIGRpciA9IGJpYXMgfHwgMTsNCiAgICB2YXIgZm91bmQgPSBza2lwQXRvbWljSW5uZXIoZG9jLCBwb3MsIG9sZFBvcywgZGlyLCBtYXlDbGVhcikgfHwNCiAgICAgICAgKCFtYXlDbGVhciAmJiBza2lwQXRvbWljSW5uZXIoZG9jLCBwb3MsIG9sZFBvcywgZGlyLCB0cnVlKSkgfHwNCiAgICAgICAgc2tpcEF0b21pY0lubmVyKGRvYywgcG9zLCBvbGRQb3MsIC1kaXIsIG1heUNsZWFyKSB8fA0KICAgICAgICAoIW1heUNsZWFyICYmIHNraXBBdG9taWNJbm5lcihkb2MsIHBvcywgb2xkUG9zLCAtZGlyLCB0cnVlKSk7DQogICAgaWYgKCFmb3VuZCkgew0KICAgICAgZG9jLmNhbnRFZGl0ID0gdHJ1ZTsNCiAgICAgIHJldHVybiBQb3MoZG9jLmZpcnN0LCAwKQ0KICAgIH0NCiAgICByZXR1cm4gZm91bmQNCiAgfQ0KDQogIGZ1bmN0aW9uIG1vdmVQb3MoZG9jLCBwb3MsIGRpciwgbGluZSkgew0KICAgIGlmIChkaXIgPCAwICYmIHBvcy5jaCA9PSAwKSB7DQogICAgICBpZiAocG9zLmxpbmUgPiBkb2MuZmlyc3QpIHsgcmV0dXJuIGNsaXBQb3MoZG9jLCBQb3MocG9zLmxpbmUgLSAxKSkgfQ0KICAgICAgZWxzZSB7IHJldHVybiBudWxsIH0NCiAgICB9IGVsc2UgaWYgKGRpciA+IDAgJiYgcG9zLmNoID09IChsaW5lIHx8IGdldExpbmUoZG9jLCBwb3MubGluZSkpLnRleHQubGVuZ3RoKSB7DQogICAgICBpZiAocG9zLmxpbmUgPCBkb2MuZmlyc3QgKyBkb2Muc2l6ZSAtIDEpIHsgcmV0dXJuIFBvcyhwb3MubGluZSArIDEsIDApIH0NCiAgICAgIGVsc2UgeyByZXR1cm4gbnVsbCB9DQogICAgfSBlbHNlIHsNCiAgICAgIHJldHVybiBuZXcgUG9zKHBvcy5saW5lLCBwb3MuY2ggKyBkaXIpDQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gc2VsZWN0QWxsKGNtKSB7DQogICAgY20uc2V0U2VsZWN0aW9uKFBvcyhjbS5maXJzdExpbmUoKSwgMCksIFBvcyhjbS5sYXN0TGluZSgpKSwgc2VsX2RvbnRTY3JvbGwpOw0KICB9DQoNCiAgLy8gVVBEQVRJTkcNCg0KICAvLyBBbGxvdyAiYmVmb3JlQ2hhbmdlIiBldmVudCBoYW5kbGVycyB0byBpbmZsdWVuY2UgYSBjaGFuZ2UNCiAgZnVuY3Rpb24gZmlsdGVyQ2hhbmdlKGRvYywgY2hhbmdlLCB1cGRhdGUpIHsNCiAgICB2YXIgb2JqID0gew0KICAgICAgY2FuY2VsZWQ6IGZhbHNlLA0KICAgICAgZnJvbTogY2hhbmdlLmZyb20sDQogICAgICB0bzogY2hhbmdlLnRvLA0KICAgICAgdGV4dDogY2hhbmdlLnRleHQsDQogICAgICBvcmlnaW46IGNoYW5nZS5vcmlnaW4sDQogICAgICBjYW5jZWw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9iai5jYW5jZWxlZCA9IHRydWU7IH0NCiAgICB9Ow0KICAgIGlmICh1cGRhdGUpIHsgb2JqLnVwZGF0ZSA9IGZ1bmN0aW9uIChmcm9tLCB0bywgdGV4dCwgb3JpZ2luKSB7DQogICAgICBpZiAoZnJvbSkgeyBvYmouZnJvbSA9IGNsaXBQb3MoZG9jLCBmcm9tKTsgfQ0KICAgICAgaWYgKHRvKSB7IG9iai50byA9IGNsaXBQb3MoZG9jLCB0byk7IH0NCiAgICAgIGlmICh0ZXh0KSB7IG9iai50ZXh0ID0gdGV4dDsgfQ0KICAgICAgaWYgKG9yaWdpbiAhPT0gdW5kZWZpbmVkKSB7IG9iai5vcmlnaW4gPSBvcmlnaW47IH0NCiAgICB9OyB9DQogICAgc2lnbmFsKGRvYywgImJlZm9yZUNoYW5nZSIsIGRvYywgb2JqKTsNCiAgICBpZiAoZG9jLmNtKSB7IHNpZ25hbChkb2MuY20sICJiZWZvcmVDaGFuZ2UiLCBkb2MuY20sIG9iaik7IH0NCg0KICAgIGlmIChvYmouY2FuY2VsZWQpIHsNCiAgICAgIGlmIChkb2MuY20pIHsgZG9jLmNtLmN1ck9wLnVwZGF0ZUlucHV0ID0gMjsgfQ0KICAgICAgcmV0dXJuIG51bGwNCiAgICB9DQogICAgcmV0dXJuIHtmcm9tOiBvYmouZnJvbSwgdG86IG9iai50bywgdGV4dDogb2JqLnRleHQsIG9yaWdpbjogb2JqLm9yaWdpbn0NCiAgfQ0KDQogIC8vIEFwcGx5IGEgY2hhbmdlIHRvIGEgZG9jdW1lbnQsIGFuZCBhZGQgaXQgdG8gdGhlIGRvY3VtZW50J3MNCiAgLy8gaGlzdG9yeSwgYW5kIHByb3BhZ2F0aW5nIGl0IHRvIGFsbCBsaW5rZWQgZG9jdW1lbnRzLg0KICBmdW5jdGlvbiBtYWtlQ2hhbmdlKGRvYywgY2hhbmdlLCBpZ25vcmVSZWFkT25seSkgew0KICAgIGlmIChkb2MuY20pIHsNCiAgICAgIGlmICghZG9jLmNtLmN1ck9wKSB7IHJldHVybiBvcGVyYXRpb24oZG9jLmNtLCBtYWtlQ2hhbmdlKShkb2MsIGNoYW5nZSwgaWdub3JlUmVhZE9ubHkpIH0NCiAgICAgIGlmIChkb2MuY20uc3RhdGUuc3VwcHJlc3NFZGl0cykgeyByZXR1cm4gfQ0KICAgIH0NCg0KICAgIGlmIChoYXNIYW5kbGVyKGRvYywgImJlZm9yZUNoYW5nZSIpIHx8IGRvYy5jbSAmJiBoYXNIYW5kbGVyKGRvYy5jbSwgImJlZm9yZUNoYW5nZSIpKSB7DQogICAgICBjaGFuZ2UgPSBmaWx0ZXJDaGFuZ2UoZG9jLCBjaGFuZ2UsIHRydWUpOw0KICAgICAgaWYgKCFjaGFuZ2UpIHsgcmV0dXJuIH0NCiAgICB9DQoNCiAgICAvLyBQb3NzaWJseSBzcGxpdCBvciBzdXBwcmVzcyB0aGUgdXBkYXRlIGJhc2VkIG9uIHRoZSBwcmVzZW5jZQ0KICAgIC8vIG9mIHJlYWQtb25seSBzcGFucyBpbiBpdHMgcmFuZ2UuDQogICAgdmFyIHNwbGl0ID0gc2F3UmVhZE9ubHlTcGFucyAmJiAhaWdub3JlUmVhZE9ubHkgJiYgcmVtb3ZlUmVhZE9ubHlSYW5nZXMoZG9jLCBjaGFuZ2UuZnJvbSwgY2hhbmdlLnRvKTsNCiAgICBpZiAoc3BsaXQpIHsNCiAgICAgIGZvciAodmFyIGkgPSBzcGxpdC5sZW5ndGggLSAxOyBpID49IDA7IC0taSkNCiAgICAgICAgeyBtYWtlQ2hhbmdlSW5uZXIoZG9jLCB7ZnJvbTogc3BsaXRbaV0uZnJvbSwgdG86IHNwbGl0W2ldLnRvLCB0ZXh0OiBpID8gWyIiXSA6IGNoYW5nZS50ZXh0LCBvcmlnaW46IGNoYW5nZS5vcmlnaW59KTsgfQ0KICAgIH0gZWxzZSB7DQogICAgICBtYWtlQ2hhbmdlSW5uZXIoZG9jLCBjaGFuZ2UpOw0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIG1ha2VDaGFuZ2VJbm5lcihkb2MsIGNoYW5nZSkgew0KICAgIGlmIChjaGFuZ2UudGV4dC5sZW5ndGggPT0gMSAmJiBjaGFuZ2UudGV4dFswXSA9PSAiIiAmJiBjbXAoY2hhbmdlLmZyb20sIGNoYW5nZS50bykgPT0gMCkgeyByZXR1cm4gfQ0KICAgIHZhciBzZWxBZnRlciA9IGNvbXB1dGVTZWxBZnRlckNoYW5nZShkb2MsIGNoYW5nZSk7DQogICAgYWRkQ2hhbmdlVG9IaXN0b3J5KGRvYywgY2hhbmdlLCBzZWxBZnRlciwgZG9jLmNtID8gZG9jLmNtLmN1ck9wLmlkIDogTmFOKTsNCg0KICAgIG1ha2VDaGFuZ2VTaW5nbGVEb2MoZG9jLCBjaGFuZ2UsIHNlbEFmdGVyLCBzdHJldGNoU3BhbnNPdmVyQ2hhbmdlKGRvYywgY2hhbmdlKSk7DQogICAgdmFyIHJlYmFzZWQgPSBbXTsNCg0KICAgIGxpbmtlZERvY3MoZG9jLCBmdW5jdGlvbiAoZG9jLCBzaGFyZWRIaXN0KSB7DQogICAgICBpZiAoIXNoYXJlZEhpc3QgJiYgaW5kZXhPZihyZWJhc2VkLCBkb2MuaGlzdG9yeSkgPT0gLTEpIHsNCiAgICAgICAgcmViYXNlSGlzdChkb2MuaGlzdG9yeSwgY2hhbmdlKTsNCiAgICAgICAgcmViYXNlZC5wdXNoKGRvYy5oaXN0b3J5KTsNCiAgICAgIH0NCiAgICAgIG1ha2VDaGFuZ2VTaW5nbGVEb2MoZG9jLCBjaGFuZ2UsIG51bGwsIHN0cmV0Y2hTcGFuc092ZXJDaGFuZ2UoZG9jLCBjaGFuZ2UpKTsNCiAgICB9KTsNCiAgfQ0KDQogIC8vIFJldmVydCBhIGNoYW5nZSBzdG9yZWQgaW4gYSBkb2N1bWVudCdzIGhpc3RvcnkuDQogIGZ1bmN0aW9uIG1ha2VDaGFuZ2VGcm9tSGlzdG9yeShkb2MsIHR5cGUsIGFsbG93U2VsZWN0aW9uT25seSkgew0KICAgIHZhciBzdXBwcmVzcyA9IGRvYy5jbSAmJiBkb2MuY20uc3RhdGUuc3VwcHJlc3NFZGl0czsNCiAgICBpZiAoc3VwcHJlc3MgJiYgIWFsbG93U2VsZWN0aW9uT25seSkgeyByZXR1cm4gfQ0KDQogICAgdmFyIGhpc3QgPSBkb2MuaGlzdG9yeSwgZXZlbnQsIHNlbEFmdGVyID0gZG9jLnNlbDsNCiAgICB2YXIgc291cmNlID0gdHlwZSA9PSAidW5kbyIgPyBoaXN0LmRvbmUgOiBoaXN0LnVuZG9uZSwgZGVzdCA9IHR5cGUgPT0gInVuZG8iID8gaGlzdC51bmRvbmUgOiBoaXN0LmRvbmU7DQoNCiAgICAvLyBWZXJpZnkgdGhhdCB0aGVyZSBpcyBhIHVzZWFibGUgZXZlbnQgKHNvIHRoYXQgY3RybC16IHdvbid0DQogICAgLy8gbmVlZGxlc3NseSBjbGVhciBzZWxlY3Rpb24gZXZlbnRzKQ0KICAgIHZhciBpID0gMDsNCiAgICBmb3IgKDsgaSA8IHNvdXJjZS5sZW5ndGg7IGkrKykgew0KICAgICAgZXZlbnQgPSBzb3VyY2VbaV07DQogICAgICBpZiAoYWxsb3dTZWxlY3Rpb25Pbmx5ID8gZXZlbnQucmFuZ2VzICYmICFldmVudC5lcXVhbHMoZG9jLnNlbCkgOiAhZXZlbnQucmFuZ2VzKQ0KICAgICAgICB7IGJyZWFrIH0NCiAgICB9DQogICAgaWYgKGkgPT0gc291cmNlLmxlbmd0aCkgeyByZXR1cm4gfQ0KICAgIGhpc3QubGFzdE9yaWdpbiA9IGhpc3QubGFzdFNlbE9yaWdpbiA9IG51bGw7DQoNCiAgICBmb3IgKDs7KSB7DQogICAgICBldmVudCA9IHNvdXJjZS5wb3AoKTsNCiAgICAgIGlmIChldmVudC5yYW5nZXMpIHsNCiAgICAgICAgcHVzaFNlbGVjdGlvblRvSGlzdG9yeShldmVudCwgZGVzdCk7DQogICAgICAgIGlmIChhbGxvd1NlbGVjdGlvbk9ubHkgJiYgIWV2ZW50LmVxdWFscyhkb2Muc2VsKSkgew0KICAgICAgICAgIHNldFNlbGVjdGlvbihkb2MsIGV2ZW50LCB7Y2xlYXJSZWRvOiBmYWxzZX0pOw0KICAgICAgICAgIHJldHVybg0KICAgICAgICB9DQogICAgICAgIHNlbEFmdGVyID0gZXZlbnQ7DQogICAgICB9IGVsc2UgaWYgKHN1cHByZXNzKSB7DQogICAgICAgIHNvdXJjZS5wdXNoKGV2ZW50KTsNCiAgICAgICAgcmV0dXJuDQogICAgICB9IGVsc2UgeyBicmVhayB9DQogICAgfQ0KDQogICAgLy8gQnVpbGQgdXAgYSByZXZlcnNlIGNoYW5nZSBvYmplY3QgdG8gYWRkIHRvIHRoZSBvcHBvc2l0ZSBoaXN0b3J5DQogICAgLy8gc3RhY2sgKHJlZG8gd2hlbiB1bmRvaW5nLCBhbmQgdmljZSB2ZXJzYSkuDQogICAgdmFyIGFudGlDaGFuZ2VzID0gW107DQogICAgcHVzaFNlbGVjdGlvblRvSGlzdG9yeShzZWxBZnRlciwgZGVzdCk7DQogICAgZGVzdC5wdXNoKHtjaGFuZ2VzOiBhbnRpQ2hhbmdlcywgZ2VuZXJhdGlvbjogaGlzdC5nZW5lcmF0aW9ufSk7DQogICAgaGlzdC5nZW5lcmF0aW9uID0gZXZlbnQuZ2VuZXJhdGlvbiB8fCArK2hpc3QubWF4R2VuZXJhdGlvbjsNCg0KICAgIHZhciBmaWx0ZXIgPSBoYXNIYW5kbGVyKGRvYywgImJlZm9yZUNoYW5nZSIpIHx8IGRvYy5jbSAmJiBoYXNIYW5kbGVyKGRvYy5jbSwgImJlZm9yZUNoYW5nZSIpOw0KDQogICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGkgKSB7DQogICAgICB2YXIgY2hhbmdlID0gZXZlbnQuY2hhbmdlc1tpXTsNCiAgICAgIGNoYW5nZS5vcmlnaW4gPSB0eXBlOw0KICAgICAgaWYgKGZpbHRlciAmJiAhZmlsdGVyQ2hhbmdlKGRvYywgY2hhbmdlLCBmYWxzZSkpIHsNCiAgICAgICAgc291cmNlLmxlbmd0aCA9IDA7DQogICAgICAgIHJldHVybiB7fQ0KICAgICAgfQ0KDQogICAgICBhbnRpQ2hhbmdlcy5wdXNoKGhpc3RvcnlDaGFuZ2VGcm9tQ2hhbmdlKGRvYywgY2hhbmdlKSk7DQoNCiAgICAgIHZhciBhZnRlciA9IGkgPyBjb21wdXRlU2VsQWZ0ZXJDaGFuZ2UoZG9jLCBjaGFuZ2UpIDogbHN0KHNvdXJjZSk7DQogICAgICBtYWtlQ2hhbmdlU2luZ2xlRG9jKGRvYywgY2hhbmdlLCBhZnRlciwgbWVyZ2VPbGRTcGFucyhkb2MsIGNoYW5nZSkpOw0KICAgICAgaWYgKCFpICYmIGRvYy5jbSkgeyBkb2MuY20uc2Nyb2xsSW50b1ZpZXcoe2Zyb206IGNoYW5nZS5mcm9tLCB0bzogY2hhbmdlRW5kKGNoYW5nZSl9KTsgfQ0KICAgICAgdmFyIHJlYmFzZWQgPSBbXTsNCg0KICAgICAgLy8gUHJvcGFnYXRlIHRvIHRoZSBsaW5rZWQgZG9jdW1lbnRzDQogICAgICBsaW5rZWREb2NzKGRvYywgZnVuY3Rpb24gKGRvYywgc2hhcmVkSGlzdCkgew0KICAgICAgICBpZiAoIXNoYXJlZEhpc3QgJiYgaW5kZXhPZihyZWJhc2VkLCBkb2MuaGlzdG9yeSkgPT0gLTEpIHsNCiAgICAgICAgICByZWJhc2VIaXN0KGRvYy5oaXN0b3J5LCBjaGFuZ2UpOw0KICAgICAgICAgIHJlYmFzZWQucHVzaChkb2MuaGlzdG9yeSk7DQogICAgICAgIH0NCiAgICAgICAgbWFrZUNoYW5nZVNpbmdsZURvYyhkb2MsIGNoYW5nZSwgbnVsbCwgbWVyZ2VPbGRTcGFucyhkb2MsIGNoYW5nZSkpOw0KICAgICAgfSk7DQogICAgfTsNCg0KICAgIGZvciAodmFyIGkkMSA9IGV2ZW50LmNoYW5nZXMubGVuZ3RoIC0gMTsgaSQxID49IDA7IC0taSQxKSB7DQogICAgICB2YXIgcmV0dXJuZWQgPSBsb29wKCBpJDEgKTsNCg0KICAgICAgaWYgKCByZXR1cm5lZCApIHJldHVybiByZXR1cm5lZC52Ow0KICAgIH0NCiAgfQ0KDQogIC8vIFN1Yi12aWV3cyBuZWVkIHRoZWlyIGxpbmUgbnVtYmVycyBzaGlmdGVkIHdoZW4gdGV4dCBpcyBhZGRlZA0KICAvLyBhYm92ZSBvciBiZWxvdyB0aGVtIGluIHRoZSBwYXJlbnQgZG9jdW1lbnQuDQogIGZ1bmN0aW9uIHNoaWZ0RG9jKGRvYywgZGlzdGFuY2UpIHsNCiAgICBpZiAoZGlzdGFuY2UgPT0gMCkgeyByZXR1cm4gfQ0KICAgIGRvYy5maXJzdCArPSBkaXN0YW5jZTsNCiAgICBkb2Muc2VsID0gbmV3IFNlbGVjdGlvbihtYXAoZG9jLnNlbC5yYW5nZXMsIGZ1bmN0aW9uIChyYW5nZSkgeyByZXR1cm4gbmV3IFJhbmdlKA0KICAgICAgUG9zKHJhbmdlLmFuY2hvci5saW5lICsgZGlzdGFuY2UsIHJhbmdlLmFuY2hvci5jaCksDQogICAgICBQb3MocmFuZ2UuaGVhZC5saW5lICsgZGlzdGFuY2UsIHJhbmdlLmhlYWQuY2gpDQogICAgKTsgfSksIGRvYy5zZWwucHJpbUluZGV4KTsNCiAgICBpZiAoZG9jLmNtKSB7DQogICAgICByZWdDaGFuZ2UoZG9jLmNtLCBkb2MuZmlyc3QsIGRvYy5maXJzdCAtIGRpc3RhbmNlLCBkaXN0YW5jZSk7DQogICAgICBmb3IgKHZhciBkID0gZG9jLmNtLmRpc3BsYXksIGwgPSBkLnZpZXdGcm9tOyBsIDwgZC52aWV3VG87IGwrKykNCiAgICAgICAgeyByZWdMaW5lQ2hhbmdlKGRvYy5jbSwgbCwgImd1dHRlciIpOyB9DQogICAgfQ0KICB9DQoNCiAgLy8gTW9yZSBsb3dlci1sZXZlbCBjaGFuZ2UgZnVuY3Rpb24sIGhhbmRsaW5nIG9ubHkgYSBzaW5nbGUgZG9jdW1lbnQNCiAgLy8gKG5vdCBsaW5rZWQgb25lcykuDQogIGZ1bmN0aW9uIG1ha2VDaGFuZ2VTaW5nbGVEb2MoZG9jLCBjaGFuZ2UsIHNlbEFmdGVyLCBzcGFucykgew0KICAgIGlmIChkb2MuY20gJiYgIWRvYy5jbS5jdXJPcCkNCiAgICAgIHsgcmV0dXJuIG9wZXJhdGlvbihkb2MuY20sIG1ha2VDaGFuZ2VTaW5nbGVEb2MpKGRvYywgY2hhbmdlLCBzZWxBZnRlciwgc3BhbnMpIH0NCg0KICAgIGlmIChjaGFuZ2UudG8ubGluZSA8IGRvYy5maXJzdCkgew0KICAgICAgc2hpZnREb2MoZG9jLCBjaGFuZ2UudGV4dC5sZW5ndGggLSAxIC0gKGNoYW5nZS50by5saW5lIC0gY2hhbmdlLmZyb20ubGluZSkpOw0KICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmIChjaGFuZ2UuZnJvbS5saW5lID4gZG9jLmxhc3RMaW5lKCkpIHsgcmV0dXJuIH0NCg0KICAgIC8vIENsaXAgdGhlIGNoYW5nZSB0byB0aGUgc2l6ZSBvZiB0aGlzIGRvYw0KICAgIGlmIChjaGFuZ2UuZnJvbS5saW5lIDwgZG9jLmZpcnN0KSB7DQogICAgICB2YXIgc2hpZnQgPSBjaGFuZ2UudGV4dC5sZW5ndGggLSAxIC0gKGRvYy5maXJzdCAtIGNoYW5nZS5mcm9tLmxpbmUpOw0KICAgICAgc2hpZnREb2MoZG9jLCBzaGlmdCk7DQogICAgICBjaGFuZ2UgPSB7ZnJvbTogUG9zKGRvYy5maXJzdCwgMCksIHRvOiBQb3MoY2hhbmdlLnRvLmxpbmUgKyBzaGlmdCwgY2hhbmdlLnRvLmNoKSwNCiAgICAgICAgICAgICAgICB0ZXh0OiBbbHN0KGNoYW5nZS50ZXh0KV0sIG9yaWdpbjogY2hhbmdlLm9yaWdpbn07DQogICAgfQ0KICAgIHZhciBsYXN0ID0gZG9jLmxhc3RMaW5lKCk7DQogICAgaWYgKGNoYW5nZS50by5saW5lID4gbGFzdCkgew0KICAgICAgY2hhbmdlID0ge2Zyb206IGNoYW5nZS5mcm9tLCB0bzogUG9zKGxhc3QsIGdldExpbmUoZG9jLCBsYXN0KS50ZXh0Lmxlbmd0aCksDQogICAgICAgICAgICAgICAgdGV4dDogW2NoYW5nZS50ZXh0WzBdXSwgb3JpZ2luOiBjaGFuZ2Uub3JpZ2lufTsNCiAgICB9DQoNCiAgICBjaGFuZ2UucmVtb3ZlZCA9IGdldEJldHdlZW4oZG9jLCBjaGFuZ2UuZnJvbSwgY2hhbmdlLnRvKTsNCg0KICAgIGlmICghc2VsQWZ0ZXIpIHsgc2VsQWZ0ZXIgPSBjb21wdXRlU2VsQWZ0ZXJDaGFuZ2UoZG9jLCBjaGFuZ2UpOyB9DQogICAgaWYgKGRvYy5jbSkgeyBtYWtlQ2hhbmdlU2luZ2xlRG9jSW5FZGl0b3IoZG9jLmNtLCBjaGFuZ2UsIHNwYW5zKTsgfQ0KICAgIGVsc2UgeyB1cGRhdGVEb2MoZG9jLCBjaGFuZ2UsIHNwYW5zKTsgfQ0KICAgIHNldFNlbGVjdGlvbk5vVW5kbyhkb2MsIHNlbEFmdGVyLCBzZWxfZG9udFNjcm9sbCk7DQoNCiAgICBpZiAoZG9jLmNhbnRFZGl0ICYmIHNraXBBdG9taWMoZG9jLCBQb3MoZG9jLmZpcnN0TGluZSgpLCAwKSkpDQogICAgICB7IGRvYy5jYW50RWRpdCA9IGZhbHNlOyB9DQogIH0NCg0KICAvLyBIYW5kbGUgdGhlIGludGVyYWN0aW9uIG9mIGEgY2hhbmdlIHRvIGEgZG9jdW1lbnQgd2l0aCB0aGUgZWRpdG9yDQogIC8vIHRoYXQgdGhpcyBkb2N1bWVudCBpcyBwYXJ0IG9mLg0KICBmdW5jdGlvbiBtYWtlQ2hhbmdlU2luZ2xlRG9jSW5FZGl0b3IoY20sIGNoYW5nZSwgc3BhbnMpIHsNCiAgICB2YXIgZG9jID0gY20uZG9jLCBkaXNwbGF5ID0gY20uZGlzcGxheSwgZnJvbSA9IGNoYW5nZS5mcm9tLCB0byA9IGNoYW5nZS50bzsNCg0KICAgIHZhciByZWNvbXB1dGVNYXhMZW5ndGggPSBmYWxzZSwgY2hlY2tXaWR0aFN0YXJ0ID0gZnJvbS5saW5lOw0KICAgIGlmICghY20ub3B0aW9ucy5saW5lV3JhcHBpbmcpIHsNCiAgICAgIGNoZWNrV2lkdGhTdGFydCA9IGxpbmVObyh2aXN1YWxMaW5lKGdldExpbmUoZG9jLCBmcm9tLmxpbmUpKSk7DQogICAgICBkb2MuaXRlcihjaGVja1dpZHRoU3RhcnQsIHRvLmxpbmUgKyAxLCBmdW5jdGlvbiAobGluZSkgew0KICAgICAgICBpZiAobGluZSA9PSBkaXNwbGF5Lm1heExpbmUpIHsNCiAgICAgICAgICByZWNvbXB1dGVNYXhMZW5ndGggPSB0cnVlOw0KICAgICAgICAgIHJldHVybiB0cnVlDQogICAgICAgIH0NCiAgICAgIH0pOw0KICAgIH0NCg0KICAgIGlmIChkb2Muc2VsLmNvbnRhaW5zKGNoYW5nZS5mcm9tLCBjaGFuZ2UudG8pID4gLTEpDQogICAgICB7IHNpZ25hbEN1cnNvckFjdGl2aXR5KGNtKTsgfQ0KDQogICAgdXBkYXRlRG9jKGRvYywgY2hhbmdlLCBzcGFucywgZXN0aW1hdGVIZWlnaHQoY20pKTsNCg0KICAgIGlmICghY20ub3B0aW9ucy5saW5lV3JhcHBpbmcpIHsNCiAgICAgIGRvYy5pdGVyKGNoZWNrV2lkdGhTdGFydCwgZnJvbS5saW5lICsgY2hhbmdlLnRleHQubGVuZ3RoLCBmdW5jdGlvbiAobGluZSkgew0KICAgICAgICB2YXIgbGVuID0gbGluZUxlbmd0aChsaW5lKTsNCiAgICAgICAgaWYgKGxlbiA+IGRpc3BsYXkubWF4TGluZUxlbmd0aCkgew0KICAgICAgICAgIGRpc3BsYXkubWF4TGluZSA9IGxpbmU7DQogICAgICAgICAgZGlzcGxheS5tYXhMaW5lTGVuZ3RoID0gbGVuOw0KICAgICAgICAgIGRpc3BsYXkubWF4TGluZUNoYW5nZWQgPSB0cnVlOw0KICAgICAgICAgIHJlY29tcHV0ZU1heExlbmd0aCA9IGZhbHNlOw0KICAgICAgICB9DQogICAgICB9KTsNCiAgICAgIGlmIChyZWNvbXB1dGVNYXhMZW5ndGgpIHsgY20uY3VyT3AudXBkYXRlTWF4TGluZSA9IHRydWU7IH0NCiAgICB9DQoNCiAgICByZXRyZWF0RnJvbnRpZXIoZG9jLCBmcm9tLmxpbmUpOw0KICAgIHN0YXJ0V29ya2VyKGNtLCA0MDApOw0KDQogICAgdmFyIGxlbmRpZmYgPSBjaGFuZ2UudGV4dC5sZW5ndGggLSAodG8ubGluZSAtIGZyb20ubGluZSkgLSAxOw0KICAgIC8vIFJlbWVtYmVyIHRoYXQgdGhlc2UgbGluZXMgY2hhbmdlZCwgZm9yIHVwZGF0aW5nIHRoZSBkaXNwbGF5DQogICAgaWYgKGNoYW5nZS5mdWxsKQ0KICAgICAgeyByZWdDaGFuZ2UoY20pOyB9DQogICAgZWxzZSBpZiAoZnJvbS5saW5lID09IHRvLmxpbmUgJiYgY2hhbmdlLnRleHQubGVuZ3RoID09IDEgJiYgIWlzV2hvbGVMaW5lVXBkYXRlKGNtLmRvYywgY2hhbmdlKSkNCiAgICAgIHsgcmVnTGluZUNoYW5nZShjbSwgZnJvbS5saW5lLCAidGV4dCIpOyB9DQogICAgZWxzZQ0KICAgICAgeyByZWdDaGFuZ2UoY20sIGZyb20ubGluZSwgdG8ubGluZSArIDEsIGxlbmRpZmYpOyB9DQoNCiAgICB2YXIgY2hhbmdlc0hhbmRsZXIgPSBoYXNIYW5kbGVyKGNtLCAiY2hhbmdlcyIpLCBjaGFuZ2VIYW5kbGVyID0gaGFzSGFuZGxlcihjbSwgImNoYW5nZSIpOw0KICAgIGlmIChjaGFuZ2VIYW5kbGVyIHx8IGNoYW5nZXNIYW5kbGVyKSB7DQogICAgICB2YXIgb2JqID0gew0KICAgICAgICBmcm9tOiBmcm9tLCB0bzogdG8sDQogICAgICAgIHRleHQ6IGNoYW5nZS50ZXh0LA0KICAgICAgICByZW1vdmVkOiBjaGFuZ2UucmVtb3ZlZCwNCiAgICAgICAgb3JpZ2luOiBjaGFuZ2Uub3JpZ2luDQogICAgICB9Ow0KICAgICAgaWYgKGNoYW5nZUhhbmRsZXIpIHsgc2lnbmFsTGF0ZXIoY20sICJjaGFuZ2UiLCBjbSwgb2JqKTsgfQ0KICAgICAgaWYgKGNoYW5nZXNIYW5kbGVyKSB7IChjbS5jdXJPcC5jaGFuZ2VPYmpzIHx8IChjbS5jdXJPcC5jaGFuZ2VPYmpzID0gW10pKS5wdXNoKG9iaik7IH0NCiAgICB9DQogICAgY20uZGlzcGxheS5zZWxGb3JDb250ZXh0TWVudSA9IG51bGw7DQogIH0NCg0KICBmdW5jdGlvbiByZXBsYWNlUmFuZ2UoZG9jLCBjb2RlLCBmcm9tLCB0bywgb3JpZ2luKSB7DQogICAgdmFyIGFzc2lnbjsNCg0KICAgIGlmICghdG8pIHsgdG8gPSBmcm9tOyB9DQogICAgaWYgKGNtcCh0bywgZnJvbSkgPCAwKSB7IChhc3NpZ24gPSBbdG8sIGZyb21dLCBmcm9tID0gYXNzaWduWzBdLCB0byA9IGFzc2lnblsxXSk7IH0NCiAgICBpZiAodHlwZW9mIGNvZGUgPT0gInN0cmluZyIpIHsgY29kZSA9IGRvYy5zcGxpdExpbmVzKGNvZGUpOyB9DQogICAgbWFrZUNoYW5nZShkb2MsIHtmcm9tOiBmcm9tLCB0bzogdG8sIHRleHQ6IGNvZGUsIG9yaWdpbjogb3JpZ2lufSk7DQogIH0NCg0KICAvLyBSZWJhc2luZy9yZXNldHRpbmcgaGlzdG9yeSB0byBkZWFsIHdpdGggZXh0ZXJuYWxseS1zb3VyY2VkIGNoYW5nZXMNCg0KICBmdW5jdGlvbiByZWJhc2VIaXN0U2VsU2luZ2xlKHBvcywgZnJvbSwgdG8sIGRpZmYpIHsNCiAgICBpZiAodG8gPCBwb3MubGluZSkgew0KICAgICAgcG9zLmxpbmUgKz0gZGlmZjsNCiAgICB9IGVsc2UgaWYgKGZyb20gPCBwb3MubGluZSkgew0KICAgICAgcG9zLmxpbmUgPSBmcm9tOw0KICAgICAgcG9zLmNoID0gMDsNCiAgICB9DQogIH0NCg0KICAvLyBUcmllcyB0byByZWJhc2UgYW4gYXJyYXkgb2YgaGlzdG9yeSBldmVudHMgZ2l2ZW4gYSBjaGFuZ2UgaW4gdGhlDQogIC8vIGRvY3VtZW50LiBJZiB0aGUgY2hhbmdlIHRvdWNoZXMgdGhlIHNhbWUgbGluZXMgYXMgdGhlIGV2ZW50LCB0aGUNCiAgLy8gZXZlbnQsIGFuZCBldmVyeXRoaW5nICdiZWhpbmQnIGl0LCBpcyBkaXNjYXJkZWQuIElmIHRoZSBjaGFuZ2UgaXMNCiAgLy8gYmVmb3JlIHRoZSBldmVudCwgdGhlIGV2ZW50J3MgcG9zaXRpb25zIGFyZSB1cGRhdGVkLiBVc2VzIGENCiAgLy8gY29weS1vbi13cml0ZSBzY2hlbWUgZm9yIHRoZSBwb3NpdGlvbnMsIHRvIGF2b2lkIGhhdmluZyB0bw0KICAvLyByZWFsbG9jYXRlIHRoZW0gYWxsIG9uIGV2ZXJ5IHJlYmFzZSwgYnV0IGFsc28gYXZvaWQgcHJvYmxlbXMgd2l0aA0KICAvLyBzaGFyZWQgcG9zaXRpb24gb2JqZWN0cyBiZWluZyB1bnNhZmVseSB1cGRhdGVkLg0KICBmdW5jdGlvbiByZWJhc2VIaXN0QXJyYXkoYXJyYXksIGZyb20sIHRvLCBkaWZmKSB7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7ICsraSkgew0KICAgICAgdmFyIHN1YiA9IGFycmF5W2ldLCBvayA9IHRydWU7DQogICAgICBpZiAoc3ViLnJhbmdlcykgew0KICAgICAgICBpZiAoIXN1Yi5jb3BpZWQpIHsgc3ViID0gYXJyYXlbaV0gPSBzdWIuZGVlcENvcHkoKTsgc3ViLmNvcGllZCA9IHRydWU7IH0NCiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzdWIucmFuZ2VzLmxlbmd0aDsgaisrKSB7DQogICAgICAgICAgcmViYXNlSGlzdFNlbFNpbmdsZShzdWIucmFuZ2VzW2pdLmFuY2hvciwgZnJvbSwgdG8sIGRpZmYpOw0KICAgICAgICAgIHJlYmFzZUhpc3RTZWxTaW5nbGUoc3ViLnJhbmdlc1tqXS5oZWFkLCBmcm9tLCB0bywgZGlmZik7DQogICAgICAgIH0NCiAgICAgICAgY29udGludWUNCiAgICAgIH0NCiAgICAgIGZvciAodmFyIGokMSA9IDA7IGokMSA8IHN1Yi5jaGFuZ2VzLmxlbmd0aDsgKytqJDEpIHsNCiAgICAgICAgdmFyIGN1ciA9IHN1Yi5jaGFuZ2VzW2okMV07DQogICAgICAgIGlmICh0byA8IGN1ci5mcm9tLmxpbmUpIHsNCiAgICAgICAgICBjdXIuZnJvbSA9IFBvcyhjdXIuZnJvbS5saW5lICsgZGlmZiwgY3VyLmZyb20uY2gpOw0KICAgICAgICAgIGN1ci50byA9IFBvcyhjdXIudG8ubGluZSArIGRpZmYsIGN1ci50by5jaCk7DQogICAgICAgIH0gZWxzZSBpZiAoZnJvbSA8PSBjdXIudG8ubGluZSkgew0KICAgICAgICAgIG9rID0gZmFsc2U7DQogICAgICAgICAgYnJlYWsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgICAgaWYgKCFvaykgew0KICAgICAgICBhcnJheS5zcGxpY2UoMCwgaSArIDEpOw0KICAgICAgICBpID0gMDsNCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICBmdW5jdGlvbiByZWJhc2VIaXN0KGhpc3QsIGNoYW5nZSkgew0KICAgIHZhciBmcm9tID0gY2hhbmdlLmZyb20ubGluZSwgdG8gPSBjaGFuZ2UudG8ubGluZSwgZGlmZiA9IGNoYW5nZS50ZXh0Lmxlbmd0aCAtICh0byAtIGZyb20pIC0gMTsNCiAgICByZWJhc2VIaXN0QXJyYXkoaGlzdC5kb25lLCBmcm9tLCB0bywgZGlmZik7DQogICAgcmViYXNlSGlzdEFycmF5KGhpc3QudW5kb25lLCBmcm9tLCB0bywgZGlmZik7DQogIH0NCg0KICAvLyBVdGlsaXR5IGZvciBhcHBseWluZyBhIGNoYW5nZSB0byBhIGxpbmUgYnkgaGFuZGxlIG9yIG51bWJlciwNCiAgLy8gcmV0dXJuaW5nIHRoZSBudW1iZXIgYW5kIG9wdGlvbmFsbHkgcmVnaXN0ZXJpbmcgdGhlIGxpbmUgYXMNCiAgLy8gY2hhbmdlZC4NCiAgZnVuY3Rpb24gY2hhbmdlTGluZShkb2MsIGhhbmRsZSwgY2hhbmdlVHlwZSwgb3ApIHsNCiAgICB2YXIgbm8gPSBoYW5kbGUsIGxpbmUgPSBoYW5kbGU7DQogICAgaWYgKHR5cGVvZiBoYW5kbGUgPT0gIm51bWJlciIpIHsgbGluZSA9IGdldExpbmUoZG9jLCBjbGlwTGluZShkb2MsIGhhbmRsZSkpOyB9DQogICAgZWxzZSB7IG5vID0gbGluZU5vKGhhbmRsZSk7IH0NCiAgICBpZiAobm8gPT0gbnVsbCkgeyByZXR1cm4gbnVsbCB9DQogICAgaWYgKG9wKGxpbmUsIG5vKSAmJiBkb2MuY20pIHsgcmVnTGluZUNoYW5nZShkb2MuY20sIG5vLCBjaGFuZ2VUeXBlKTsgfQ0KICAgIHJldHVybiBsaW5lDQogIH0NCg0KICAvLyBUaGUgZG9jdW1lbnQgaXMgcmVwcmVzZW50ZWQgYXMgYSBCVHJlZSBjb25zaXN0aW5nIG9mIGxlYXZlcywgd2l0aA0KICAvLyBjaHVuayBvZiBsaW5lcyBpbiB0aGVtLCBhbmQgYnJhbmNoZXMsIHdpdGggdXAgdG8gdGVuIGxlYXZlcyBvcg0KICAvLyBvdGhlciBicmFuY2ggbm9kZXMgYmVsb3cgdGhlbS4gVGhlIHRvcCBub2RlIGlzIGFsd2F5cyBhIGJyYW5jaA0KICAvLyBub2RlLCBhbmQgaXMgdGhlIGRvY3VtZW50IG9iamVjdCBpdHNlbGYgKG1lYW5pbmcgaXQgaGFzDQogIC8vIGFkZGl0aW9uYWwgbWV0aG9kcyBhbmQgcHJvcGVydGllcykuDQogIC8vDQogIC8vIEFsbCBub2RlcyBoYXZlIHBhcmVudCBsaW5rcy4gVGhlIHRyZWUgaXMgdXNlZCBib3RoIHRvIGdvIGZyb20NCiAgLy8gbGluZSBudW1iZXJzIHRvIGxpbmUgb2JqZWN0cywgYW5kIHRvIGdvIGZyb20gb2JqZWN0cyB0byBudW1iZXJzLg0KICAvLyBJdCBhbHNvIGluZGV4ZXMgYnkgaGVpZ2h0LCBhbmQgaXMgdXNlZCB0byBjb252ZXJ0IGJldHdlZW4gaGVpZ2h0DQogIC8vIGFuZCBsaW5lIG9iamVjdCwgYW5kIHRvIGZpbmQgdGhlIHRvdGFsIGhlaWdodCBvZiB0aGUgZG9jdW1lbnQuDQogIC8vDQogIC8vIFNlZSBhbHNvIGh0dHA6Ly9tYXJpam5oYXZlcmJla2UubmwvYmxvZy9jb2RlbWlycm9yLWxpbmUtdHJlZS5odG1sDQoNCiAgZnVuY3Rpb24gTGVhZkNodW5rKGxpbmVzKSB7DQogICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICB0aGlzLmxpbmVzID0gbGluZXM7DQogICAgdGhpcy5wYXJlbnQgPSBudWxsOw0KICAgIHZhciBoZWlnaHQgPSAwOw0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpIHsNCiAgICAgIGxpbmVzW2ldLnBhcmVudCA9IHRoaXMkMTsNCiAgICAgIGhlaWdodCArPSBsaW5lc1tpXS5oZWlnaHQ7DQogICAgfQ0KICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0Ow0KICB9DQoNCiAgTGVhZkNodW5rLnByb3RvdHlwZSA9IHsNCiAgICBjaHVua1NpemU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5saW5lcy5sZW5ndGggfSwNCg0KICAgIC8vIFJlbW92ZSB0aGUgbiBsaW5lcyBhdCBvZmZzZXQgJ2F0Jy4NCiAgICByZW1vdmVJbm5lcjogZnVuY3Rpb24oYXQsIG4pIHsNCiAgICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgICBmb3IgKHZhciBpID0gYXQsIGUgPSBhdCArIG47IGkgPCBlOyArK2kpIHsNCiAgICAgICAgdmFyIGxpbmUgPSB0aGlzJDEubGluZXNbaV07DQogICAgICAgIHRoaXMkMS5oZWlnaHQgLT0gbGluZS5oZWlnaHQ7DQogICAgICAgIGNsZWFuVXBMaW5lKGxpbmUpOw0KICAgICAgICBzaWduYWxMYXRlcihsaW5lLCAiZGVsZXRlIik7DQogICAgICB9DQogICAgICB0aGlzLmxpbmVzLnNwbGljZShhdCwgbik7DQogICAgfSwNCg0KICAgIC8vIEhlbHBlciB1c2VkIHRvIGNvbGxhcHNlIGEgc21hbGwgYnJhbmNoIGludG8gYSBzaW5nbGUgbGVhZi4NCiAgICBjb2xsYXBzZTogZnVuY3Rpb24obGluZXMpIHsNCiAgICAgIGxpbmVzLnB1c2guYXBwbHkobGluZXMsIHRoaXMubGluZXMpOw0KICAgIH0sDQoNCiAgICAvLyBJbnNlcnQgdGhlIGdpdmVuIGFycmF5IG9mIGxpbmVzIGF0IG9mZnNldCAnYXQnLCBjb3VudCB0aGVtIGFzDQogICAgLy8gaGF2aW5nIHRoZSBnaXZlbiBoZWlnaHQuDQogICAgaW5zZXJ0SW5uZXI6IGZ1bmN0aW9uKGF0LCBsaW5lcywgaGVpZ2h0KSB7DQogICAgICB2YXIgdGhpcyQxID0gdGhpczsNCg0KICAgICAgdGhpcy5oZWlnaHQgKz0gaGVpZ2h0Ow0KICAgICAgdGhpcy5saW5lcyA9IHRoaXMubGluZXMuc2xpY2UoMCwgYXQpLmNvbmNhdChsaW5lcykuY29uY2F0KHRoaXMubGluZXMuc2xpY2UoYXQpKTsNCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpIHsgbGluZXNbaV0ucGFyZW50ID0gdGhpcyQxOyB9DQogICAgfSwNCg0KICAgIC8vIFVzZWQgdG8gaXRlcmF0ZSBvdmVyIGEgcGFydCBvZiB0aGUgdHJlZS4NCiAgICBpdGVyTjogZnVuY3Rpb24oYXQsIG4sIG9wKSB7DQogICAgICB2YXIgdGhpcyQxID0gdGhpczsNCg0KICAgICAgZm9yICh2YXIgZSA9IGF0ICsgbjsgYXQgPCBlOyArK2F0KQ0KICAgICAgICB7IGlmIChvcCh0aGlzJDEubGluZXNbYXRdKSkgeyByZXR1cm4gdHJ1ZSB9IH0NCiAgICB9DQogIH07DQoNCiAgZnVuY3Rpb24gQnJhbmNoQ2h1bmsoY2hpbGRyZW4pIHsNCiAgICB2YXIgdGhpcyQxID0gdGhpczsNCg0KICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjsNCiAgICB2YXIgc2l6ZSA9IDAsIGhlaWdodCA9IDA7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkgew0KICAgICAgdmFyIGNoID0gY2hpbGRyZW5baV07DQogICAgICBzaXplICs9IGNoLmNodW5rU2l6ZSgpOyBoZWlnaHQgKz0gY2guaGVpZ2h0Ow0KICAgICAgY2gucGFyZW50ID0gdGhpcyQxOw0KICAgIH0NCiAgICB0aGlzLnNpemUgPSBzaXplOw0KICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0Ow0KICAgIHRoaXMucGFyZW50ID0gbnVsbDsNCiAgfQ0KDQogIEJyYW5jaENodW5rLnByb3RvdHlwZSA9IHsNCiAgICBjaHVua1NpemU6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5zaXplIH0sDQoNCiAgICByZW1vdmVJbm5lcjogZnVuY3Rpb24oYXQsIG4pIHsNCiAgICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgICB0aGlzLnNpemUgLT0gbjsNCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7ICsraSkgew0KICAgICAgICB2YXIgY2hpbGQgPSB0aGlzJDEuY2hpbGRyZW5baV0sIHN6ID0gY2hpbGQuY2h1bmtTaXplKCk7DQogICAgICAgIGlmIChhdCA8IHN6KSB7DQogICAgICAgICAgdmFyIHJtID0gTWF0aC5taW4obiwgc3ogLSBhdCksIG9sZEhlaWdodCA9IGNoaWxkLmhlaWdodDsNCiAgICAgICAgICBjaGlsZC5yZW1vdmVJbm5lcihhdCwgcm0pOw0KICAgICAgICAgIHRoaXMkMS5oZWlnaHQgLT0gb2xkSGVpZ2h0IC0gY2hpbGQuaGVpZ2h0Ow0KICAgICAgICAgIGlmIChzeiA9PSBybSkgeyB0aGlzJDEuY2hpbGRyZW4uc3BsaWNlKGktLSwgMSk7IGNoaWxkLnBhcmVudCA9IG51bGw7IH0NCiAgICAgICAgICBpZiAoKG4gLT0gcm0pID09IDApIHsgYnJlYWsgfQ0KICAgICAgICAgIGF0ID0gMDsNCiAgICAgICAgfSBlbHNlIHsgYXQgLT0gc3o7IH0NCiAgICAgIH0NCiAgICAgIC8vIElmIHRoZSByZXN1bHQgaXMgc21hbGxlciB0aGFuIDI1IGxpbmVzLCBlbnN1cmUgdGhhdCBpdCBpcyBhDQogICAgICAvLyBzaW5nbGUgbGVhZiBub2RlLg0KICAgICAgaWYgKHRoaXMuc2l6ZSAtIG4gPCAyNSAmJg0KICAgICAgICAgICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA+IDEgfHwgISh0aGlzLmNoaWxkcmVuWzBdIGluc3RhbmNlb2YgTGVhZkNodW5rKSkpIHsNCiAgICAgICAgdmFyIGxpbmVzID0gW107DQogICAgICAgIHRoaXMuY29sbGFwc2UobGluZXMpOw0KICAgICAgICB0aGlzLmNoaWxkcmVuID0gW25ldyBMZWFmQ2h1bmsobGluZXMpXTsNCiAgICAgICAgdGhpcy5jaGlsZHJlblswXS5wYXJlbnQgPSB0aGlzOw0KICAgICAgfQ0KICAgIH0sDQoNCiAgICBjb2xsYXBzZTogZnVuY3Rpb24obGluZXMpIHsNCiAgICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHsgdGhpcyQxLmNoaWxkcmVuW2ldLmNvbGxhcHNlKGxpbmVzKTsgfQ0KICAgIH0sDQoNCiAgICBpbnNlcnRJbm5lcjogZnVuY3Rpb24oYXQsIGxpbmVzLCBoZWlnaHQpIHsNCiAgICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgICB0aGlzLnNpemUgKz0gbGluZXMubGVuZ3RoOw0KICAgICAgdGhpcy5oZWlnaHQgKz0gaGVpZ2h0Ow0KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7DQogICAgICAgIHZhciBjaGlsZCA9IHRoaXMkMS5jaGlsZHJlbltpXSwgc3ogPSBjaGlsZC5jaHVua1NpemUoKTsNCiAgICAgICAgaWYgKGF0IDw9IHN6KSB7DQogICAgICAgICAgY2hpbGQuaW5zZXJ0SW5uZXIoYXQsIGxpbmVzLCBoZWlnaHQpOw0KICAgICAgICAgIGlmIChjaGlsZC5saW5lcyAmJiBjaGlsZC5saW5lcy5sZW5ndGggPiA1MCkgew0KICAgICAgICAgICAgLy8gVG8gYXZvaWQgbWVtb3J5IHRocmFzaGluZyB3aGVuIGNoaWxkLmxpbmVzIGlzIGh1Z2UgKGUuZy4gZmlyc3QgdmlldyBvZiBhIGxhcmdlIGZpbGUpLCBpdCdzIG5ldmVyIHNwbGljZWQuDQogICAgICAgICAgICAvLyBJbnN0ZWFkLCBzbWFsbCBzbGljZXMgYXJlIHRha2VuLiBUaGV5J3JlIHRha2VuIGluIG9yZGVyIGJlY2F1c2Ugc2VxdWVudGlhbCBtZW1vcnkgYWNjZXNzZXMgYXJlIGZhc3Rlc3QuDQogICAgICAgICAgICB2YXIgcmVtYWluaW5nID0gY2hpbGQubGluZXMubGVuZ3RoICUgMjUgKyAyNTsNCiAgICAgICAgICAgIGZvciAodmFyIHBvcyA9IHJlbWFpbmluZzsgcG9zIDwgY2hpbGQubGluZXMubGVuZ3RoOykgew0KICAgICAgICAgICAgICB2YXIgbGVhZiA9IG5ldyBMZWFmQ2h1bmsoY2hpbGQubGluZXMuc2xpY2UocG9zLCBwb3MgKz0gMjUpKTsNCiAgICAgICAgICAgICAgY2hpbGQuaGVpZ2h0IC09IGxlYWYuaGVpZ2h0Ow0KICAgICAgICAgICAgICB0aGlzJDEuY2hpbGRyZW4uc3BsaWNlKCsraSwgMCwgbGVhZik7DQogICAgICAgICAgICAgIGxlYWYucGFyZW50ID0gdGhpcyQxOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgY2hpbGQubGluZXMgPSBjaGlsZC5saW5lcy5zbGljZSgwLCByZW1haW5pbmcpOw0KICAgICAgICAgICAgdGhpcyQxLm1heWJlU3BpbGwoKTsNCiAgICAgICAgICB9DQogICAgICAgICAgYnJlYWsNCiAgICAgICAgfQ0KICAgICAgICBhdCAtPSBzejsNCiAgICAgIH0NCiAgICB9LA0KDQogICAgLy8gV2hlbiBhIG5vZGUgaGFzIGdyb3duLCBjaGVjayB3aGV0aGVyIGl0IHNob3VsZCBiZSBzcGxpdC4NCiAgICBtYXliZVNwaWxsOiBmdW5jdGlvbigpIHsNCiAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCA8PSAxMCkgeyByZXR1cm4gfQ0KICAgICAgdmFyIG1lID0gdGhpczsNCiAgICAgIGRvIHsNCiAgICAgICAgdmFyIHNwaWxsZWQgPSBtZS5jaGlsZHJlbi5zcGxpY2UobWUuY2hpbGRyZW4ubGVuZ3RoIC0gNSwgNSk7DQogICAgICAgIHZhciBzaWJsaW5nID0gbmV3IEJyYW5jaENodW5rKHNwaWxsZWQpOw0KICAgICAgICBpZiAoIW1lLnBhcmVudCkgeyAvLyBCZWNvbWUgdGhlIHBhcmVudCBub2RlDQogICAgICAgICAgdmFyIGNvcHkgPSBuZXcgQnJhbmNoQ2h1bmsobWUuY2hpbGRyZW4pOw0KICAgICAgICAgIGNvcHkucGFyZW50ID0gbWU7DQogICAgICAgICAgbWUuY2hpbGRyZW4gPSBbY29weSwgc2libGluZ107DQogICAgICAgICAgbWUgPSBjb3B5Ow0KICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgbWUuc2l6ZSAtPSBzaWJsaW5nLnNpemU7DQogICAgICAgICAgbWUuaGVpZ2h0IC09IHNpYmxpbmcuaGVpZ2h0Ow0KICAgICAgICAgIHZhciBteUluZGV4ID0gaW5kZXhPZihtZS5wYXJlbnQuY2hpbGRyZW4sIG1lKTsNCiAgICAgICAgICBtZS5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKG15SW5kZXggKyAxLCAwLCBzaWJsaW5nKTsNCiAgICAgICAgfQ0KICAgICAgICBzaWJsaW5nLnBhcmVudCA9IG1lLnBhcmVudDsNCiAgICAgIH0gd2hpbGUgKG1lLmNoaWxkcmVuLmxlbmd0aCA+IDEwKQ0KICAgICAgbWUucGFyZW50Lm1heWJlU3BpbGwoKTsNCiAgICB9LA0KDQogICAgaXRlck46IGZ1bmN0aW9uKGF0LCBuLCBvcCkgew0KICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7ICsraSkgew0KICAgICAgICB2YXIgY2hpbGQgPSB0aGlzJDEuY2hpbGRyZW5baV0sIHN6ID0gY2hpbGQuY2h1bmtTaXplKCk7DQogICAgICAgIGlmIChhdCA8IHN6KSB7DQogICAgICAgICAgdmFyIHVzZWQgPSBNYXRoLm1pbihuLCBzeiAtIGF0KTsNCiAgICAgICAgICBpZiAoY2hpbGQuaXRlck4oYXQsIHVzZWQsIG9wKSkgeyByZXR1cm4gdHJ1ZSB9DQogICAgICAgICAgaWYgKChuIC09IHVzZWQpID09IDApIHsgYnJlYWsgfQ0KICAgICAgICAgIGF0ID0gMDsNCiAgICAgICAgfSBlbHNlIHsgYXQgLT0gc3o7IH0NCiAgICAgIH0NCiAgICB9DQogIH07DQoNCiAgLy8gTGluZSB3aWRnZXRzIGFyZSBibG9jayBlbGVtZW50cyBkaXNwbGF5ZWQgYWJvdmUgb3IgYmVsb3cgYSBsaW5lLg0KDQogIHZhciBMaW5lV2lkZ2V0ID0gZnVuY3Rpb24oZG9jLCBub2RlLCBvcHRpb25zKSB7DQogICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICBpZiAob3B0aW9ucykgeyBmb3IgKHZhciBvcHQgaW4gb3B0aW9ucykgeyBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHQpKQ0KICAgICAgeyB0aGlzJDFbb3B0XSA9IG9wdGlvbnNbb3B0XTsgfSB9IH0NCiAgICB0aGlzLmRvYyA9IGRvYzsNCiAgICB0aGlzLm5vZGUgPSBub2RlOw0KICB9Ow0KDQogIExpbmVXaWRnZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkgew0KICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICB2YXIgY20gPSB0aGlzLmRvYy5jbSwgd3MgPSB0aGlzLmxpbmUud2lkZ2V0cywgbGluZSA9IHRoaXMubGluZSwgbm8gPSBsaW5lTm8obGluZSk7DQogICAgaWYgKG5vID09IG51bGwgfHwgIXdzKSB7IHJldHVybiB9DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3cy5sZW5ndGg7ICsraSkgeyBpZiAod3NbaV0gPT0gdGhpcyQxKSB7IHdzLnNwbGljZShpLS0sIDEpOyB9IH0NCiAgICBpZiAoIXdzLmxlbmd0aCkgeyBsaW5lLndpZGdldHMgPSBudWxsOyB9DQogICAgdmFyIGhlaWdodCA9IHdpZGdldEhlaWdodCh0aGlzKTsNCiAgICB1cGRhdGVMaW5lSGVpZ2h0KGxpbmUsIE1hdGgubWF4KDAsIGxpbmUuaGVpZ2h0IC0gaGVpZ2h0KSk7DQogICAgaWYgKGNtKSB7DQogICAgICBydW5Jbk9wKGNtLCBmdW5jdGlvbiAoKSB7DQogICAgICAgIGFkanVzdFNjcm9sbFdoZW5BYm92ZVZpc2libGUoY20sIGxpbmUsIC1oZWlnaHQpOw0KICAgICAgICByZWdMaW5lQ2hhbmdlKGNtLCBubywgIndpZGdldCIpOw0KICAgICAgfSk7DQogICAgICBzaWduYWxMYXRlcihjbSwgImxpbmVXaWRnZXRDbGVhcmVkIiwgY20sIHRoaXMsIG5vKTsNCiAgICB9DQogIH07DQoNCiAgTGluZVdpZGdldC5wcm90b3R5cGUuY2hhbmdlZCA9IGZ1bmN0aW9uICgpIHsNCiAgICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgdmFyIG9sZEggPSB0aGlzLmhlaWdodCwgY20gPSB0aGlzLmRvYy5jbSwgbGluZSA9IHRoaXMubGluZTsNCiAgICB0aGlzLmhlaWdodCA9IG51bGw7DQogICAgdmFyIGRpZmYgPSB3aWRnZXRIZWlnaHQodGhpcykgLSBvbGRIOw0KICAgIGlmICghZGlmZikgeyByZXR1cm4gfQ0KICAgIGlmICghbGluZUlzSGlkZGVuKHRoaXMuZG9jLCBsaW5lKSkgeyB1cGRhdGVMaW5lSGVpZ2h0KGxpbmUsIGxpbmUuaGVpZ2h0ICsgZGlmZik7IH0NCiAgICBpZiAoY20pIHsNCiAgICAgIHJ1bkluT3AoY20sIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgY20uY3VyT3AuZm9yY2VVcGRhdGUgPSB0cnVlOw0KICAgICAgICBhZGp1c3RTY3JvbGxXaGVuQWJvdmVWaXNpYmxlKGNtLCBsaW5lLCBkaWZmKTsNCiAgICAgICAgc2lnbmFsTGF0ZXIoY20sICJsaW5lV2lkZ2V0Q2hhbmdlZCIsIGNtLCB0aGlzJDEsIGxpbmVObyhsaW5lKSk7DQogICAgICB9KTsNCiAgICB9DQogIH07DQogIGV2ZW50TWl4aW4oTGluZVdpZGdldCk7DQoNCiAgZnVuY3Rpb24gYWRqdXN0U2Nyb2xsV2hlbkFib3ZlVmlzaWJsZShjbSwgbGluZSwgZGlmZikgew0KICAgIGlmIChoZWlnaHRBdExpbmUobGluZSkgPCAoKGNtLmN1ck9wICYmIGNtLmN1ck9wLnNjcm9sbFRvcCkgfHwgY20uZG9jLnNjcm9sbFRvcCkpDQogICAgICB7IGFkZFRvU2Nyb2xsVG9wKGNtLCBkaWZmKTsgfQ0KICB9DQoNCiAgZnVuY3Rpb24gYWRkTGluZVdpZGdldChkb2MsIGhhbmRsZSwgbm9kZSwgb3B0aW9ucykgew0KICAgIHZhciB3aWRnZXQgPSBuZXcgTGluZVdpZGdldChkb2MsIG5vZGUsIG9wdGlvbnMpOw0KICAgIHZhciBjbSA9IGRvYy5jbTsNCiAgICBpZiAoY20gJiYgd2lkZ2V0Lm5vSFNjcm9sbCkgeyBjbS5kaXNwbGF5LmFsaWduV2lkZ2V0cyA9IHRydWU7IH0NCiAgICBjaGFuZ2VMaW5lKGRvYywgaGFuZGxlLCAid2lkZ2V0IiwgZnVuY3Rpb24gKGxpbmUpIHsNCiAgICAgIHZhciB3aWRnZXRzID0gbGluZS53aWRnZXRzIHx8IChsaW5lLndpZGdldHMgPSBbXSk7DQogICAgICBpZiAod2lkZ2V0Lmluc2VydEF0ID09IG51bGwpIHsgd2lkZ2V0cy5wdXNoKHdpZGdldCk7IH0NCiAgICAgIGVsc2UgeyB3aWRnZXRzLnNwbGljZShNYXRoLm1pbih3aWRnZXRzLmxlbmd0aCAtIDEsIE1hdGgubWF4KDAsIHdpZGdldC5pbnNlcnRBdCkpLCAwLCB3aWRnZXQpOyB9DQogICAgICB3aWRnZXQubGluZSA9IGxpbmU7DQogICAgICBpZiAoY20gJiYgIWxpbmVJc0hpZGRlbihkb2MsIGxpbmUpKSB7DQogICAgICAgIHZhciBhYm92ZVZpc2libGUgPSBoZWlnaHRBdExpbmUobGluZSkgPCBkb2Muc2Nyb2xsVG9wOw0KICAgICAgICB1cGRhdGVMaW5lSGVpZ2h0KGxpbmUsIGxpbmUuaGVpZ2h0ICsgd2lkZ2V0SGVpZ2h0KHdpZGdldCkpOw0KICAgICAgICBpZiAoYWJvdmVWaXNpYmxlKSB7IGFkZFRvU2Nyb2xsVG9wKGNtLCB3aWRnZXQuaGVpZ2h0KTsgfQ0KICAgICAgICBjbS5jdXJPcC5mb3JjZVVwZGF0ZSA9IHRydWU7DQogICAgICB9DQogICAgICByZXR1cm4gdHJ1ZQ0KICAgIH0pOw0KICAgIGlmIChjbSkgeyBzaWduYWxMYXRlcihjbSwgImxpbmVXaWRnZXRBZGRlZCIsIGNtLCB3aWRnZXQsIHR5cGVvZiBoYW5kbGUgPT0gIm51bWJlciIgPyBoYW5kbGUgOiBsaW5lTm8oaGFuZGxlKSk7IH0NCiAgICByZXR1cm4gd2lkZ2V0DQogIH0NCg0KICAvLyBURVhUTUFSS0VSUw0KDQogIC8vIENyZWF0ZWQgd2l0aCBtYXJrVGV4dCBhbmQgc2V0Qm9va21hcmsgbWV0aG9kcy4gQSBUZXh0TWFya2VyIGlzIGENCiAgLy8gaGFuZGxlIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2xlYXIgb3IgZmluZCBhIG1hcmtlZCBwb3NpdGlvbiBpbiB0aGUNCiAgLy8gZG9jdW1lbnQuIExpbmUgb2JqZWN0cyBob2xkIGFycmF5cyAobWFya2VkU3BhbnMpIGNvbnRhaW5pbmcNCiAgLy8ge2Zyb20sIHRvLCBtYXJrZXJ9IG9iamVjdCBwb2ludGluZyB0byBzdWNoIG1hcmtlciBvYmplY3RzLCBhbmQNCiAgLy8gaW5kaWNhdGluZyB0aGF0IHN1Y2ggYSBtYXJrZXIgaXMgcHJlc2VudCBvbiB0aGF0IGxpbmUuIE11bHRpcGxlDQogIC8vIGxpbmVzIG1heSBwb2ludCB0byB0aGUgc2FtZSBtYXJrZXIgd2hlbiBpdCBzcGFucyBhY3Jvc3MgbGluZXMuDQogIC8vIFRoZSBzcGFucyB3aWxsIGhhdmUgbnVsbCBmb3IgdGhlaXIgZnJvbS90byBwcm9wZXJ0aWVzIHdoZW4gdGhlDQogIC8vIG1hcmtlciBjb250aW51ZXMgYmV5b25kIHRoZSBzdGFydC9lbmQgb2YgdGhlIGxpbmUuIE1hcmtlcnMgaGF2ZQ0KICAvLyBsaW5rcyBiYWNrIHRvIHRoZSBsaW5lcyB0aGV5IGN1cnJlbnRseSB0b3VjaC4NCg0KICAvLyBDb2xsYXBzZWQgbWFya2VycyBoYXZlIHVuaXF1ZSBpZHMsIGluIG9yZGVyIHRvIGJlIGFibGUgdG8gb3JkZXINCiAgLy8gdGhlbSwgd2hpY2ggaXMgbmVlZGVkIGZvciB1bmlxdWVseSBkZXRlcm1pbmluZyBhbiBvdXRlciBtYXJrZXINCiAgLy8gd2hlbiB0aGV5IG92ZXJsYXAgKHRoZXkgbWF5IG5lc3QsIGJ1dCBub3QgcGFydGlhbGx5IG92ZXJsYXApLg0KICB2YXIgbmV4dE1hcmtlcklkID0gMDsNCg0KICB2YXIgVGV4dE1hcmtlciA9IGZ1bmN0aW9uKGRvYywgdHlwZSkgew0KICAgIHRoaXMubGluZXMgPSBbXTsNCiAgICB0aGlzLnR5cGUgPSB0eXBlOw0KICAgIHRoaXMuZG9jID0gZG9jOw0KICAgIHRoaXMuaWQgPSArK25leHRNYXJrZXJJZDsNCiAgfTsNCg0KICAvLyBDbGVhciB0aGUgbWFya2VyLg0KICBUZXh0TWFya2VyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHsNCiAgICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgaWYgKHRoaXMuZXhwbGljaXRseUNsZWFyZWQpIHsgcmV0dXJuIH0NCiAgICB2YXIgY20gPSB0aGlzLmRvYy5jbSwgd2l0aE9wID0gY20gJiYgIWNtLmN1ck9wOw0KICAgIGlmICh3aXRoT3ApIHsgc3RhcnRPcGVyYXRpb24oY20pOyB9DQogICAgaWYgKGhhc0hhbmRsZXIodGhpcywgImNsZWFyIikpIHsNCiAgICAgIHZhciBmb3VuZCA9IHRoaXMuZmluZCgpOw0KICAgICAgaWYgKGZvdW5kKSB7IHNpZ25hbExhdGVyKHRoaXMsICJjbGVhciIsIGZvdW5kLmZyb20sIGZvdW5kLnRvKTsgfQ0KICAgIH0NCiAgICB2YXIgbWluID0gbnVsbCwgbWF4ID0gbnVsbDsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGluZXMubGVuZ3RoOyArK2kpIHsNCiAgICAgIHZhciBsaW5lID0gdGhpcyQxLmxpbmVzW2ldOw0KICAgICAgdmFyIHNwYW4gPSBnZXRNYXJrZWRTcGFuRm9yKGxpbmUubWFya2VkU3BhbnMsIHRoaXMkMSk7DQogICAgICBpZiAoY20gJiYgIXRoaXMkMS5jb2xsYXBzZWQpIHsgcmVnTGluZUNoYW5nZShjbSwgbGluZU5vKGxpbmUpLCAidGV4dCIpOyB9DQogICAgICBlbHNlIGlmIChjbSkgew0KICAgICAgICBpZiAoc3Bhbi50byAhPSBudWxsKSB7IG1heCA9IGxpbmVObyhsaW5lKTsgfQ0KICAgICAgICBpZiAoc3Bhbi5mcm9tICE9IG51bGwpIHsgbWluID0gbGluZU5vKGxpbmUpOyB9DQogICAgICB9DQogICAgICBsaW5lLm1hcmtlZFNwYW5zID0gcmVtb3ZlTWFya2VkU3BhbihsaW5lLm1hcmtlZFNwYW5zLCBzcGFuKTsNCiAgICAgIGlmIChzcGFuLmZyb20gPT0gbnVsbCAmJiB0aGlzJDEuY29sbGFwc2VkICYmICFsaW5lSXNIaWRkZW4odGhpcyQxLmRvYywgbGluZSkgJiYgY20pDQogICAgICAgIHsgdXBkYXRlTGluZUhlaWdodChsaW5lLCB0ZXh0SGVpZ2h0KGNtLmRpc3BsYXkpKTsgfQ0KICAgIH0NCiAgICBpZiAoY20gJiYgdGhpcy5jb2xsYXBzZWQgJiYgIWNtLm9wdGlvbnMubGluZVdyYXBwaW5nKSB7IGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHRoaXMubGluZXMubGVuZ3RoOyArK2kkMSkgew0KICAgICAgdmFyIHZpc3VhbCA9IHZpc3VhbExpbmUodGhpcyQxLmxpbmVzW2kkMV0pLCBsZW4gPSBsaW5lTGVuZ3RoKHZpc3VhbCk7DQogICAgICBpZiAobGVuID4gY20uZGlzcGxheS5tYXhMaW5lTGVuZ3RoKSB7DQogICAgICAgIGNtLmRpc3BsYXkubWF4TGluZSA9IHZpc3VhbDsNCiAgICAgICAgY20uZGlzcGxheS5tYXhMaW5lTGVuZ3RoID0gbGVuOw0KICAgICAgICBjbS5kaXNwbGF5Lm1heExpbmVDaGFuZ2VkID0gdHJ1ZTsNCiAgICAgIH0NCiAgICB9IH0NCg0KICAgIGlmIChtaW4gIT0gbnVsbCAmJiBjbSAmJiB0aGlzLmNvbGxhcHNlZCkgeyByZWdDaGFuZ2UoY20sIG1pbiwgbWF4ICsgMSk7IH0NCiAgICB0aGlzLmxpbmVzLmxlbmd0aCA9IDA7DQogICAgdGhpcy5leHBsaWNpdGx5Q2xlYXJlZCA9IHRydWU7DQogICAgaWYgKHRoaXMuYXRvbWljICYmIHRoaXMuZG9jLmNhbnRFZGl0KSB7DQogICAgICB0aGlzLmRvYy5jYW50RWRpdCA9IGZhbHNlOw0KICAgICAgaWYgKGNtKSB7IHJlQ2hlY2tTZWxlY3Rpb24oY20uZG9jKTsgfQ0KICAgIH0NCiAgICBpZiAoY20pIHsgc2lnbmFsTGF0ZXIoY20sICJtYXJrZXJDbGVhcmVkIiwgY20sIHRoaXMsIG1pbiwgbWF4KTsgfQ0KICAgIGlmICh3aXRoT3ApIHsgZW5kT3BlcmF0aW9uKGNtKTsgfQ0KICAgIGlmICh0aGlzLnBhcmVudCkgeyB0aGlzLnBhcmVudC5jbGVhcigpOyB9DQogIH07DQoNCiAgLy8gRmluZCB0aGUgcG9zaXRpb24gb2YgdGhlIG1hcmtlciBpbiB0aGUgZG9jdW1lbnQuIFJldHVybnMgYSB7ZnJvbSwNCiAgLy8gdG99IG9iamVjdCBieSBkZWZhdWx0LiBTaWRlIGNhbiBiZSBwYXNzZWQgdG8gZ2V0IGEgc3BlY2lmaWMgc2lkZQ0KICAvLyAtLSAwIChib3RoKSwgLTEgKGxlZnQpLCBvciAxIChyaWdodCkuIFdoZW4gbGluZU9iaiBpcyB0cnVlLCB0aGUNCiAgLy8gUG9zIG9iamVjdHMgcmV0dXJuZWQgY29udGFpbiBhIGxpbmUgb2JqZWN0LCByYXRoZXIgdGhhbiBhIGxpbmUNCiAgLy8gbnVtYmVyICh1c2VkIHRvIHByZXZlbnQgbG9va2luZyB1cCB0aGUgc2FtZSBsaW5lIHR3aWNlKS4NCiAgVGV4dE1hcmtlci5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uIChzaWRlLCBsaW5lT2JqKSB7DQogICAgICB2YXIgdGhpcyQxID0gdGhpczsNCg0KICAgIGlmIChzaWRlID09IG51bGwgJiYgdGhpcy50eXBlID09ICJib29rbWFyayIpIHsgc2lkZSA9IDE7IH0NCiAgICB2YXIgZnJvbSwgdG87DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxpbmVzLmxlbmd0aDsgKytpKSB7DQogICAgICB2YXIgbGluZSA9IHRoaXMkMS5saW5lc1tpXTsNCiAgICAgIHZhciBzcGFuID0gZ2V0TWFya2VkU3BhbkZvcihsaW5lLm1hcmtlZFNwYW5zLCB0aGlzJDEpOw0KICAgICAgaWYgKHNwYW4uZnJvbSAhPSBudWxsKSB7DQogICAgICAgIGZyb20gPSBQb3MobGluZU9iaiA/IGxpbmUgOiBsaW5lTm8obGluZSksIHNwYW4uZnJvbSk7DQogICAgICAgIGlmIChzaWRlID09IC0xKSB7IHJldHVybiBmcm9tIH0NCiAgICAgIH0NCiAgICAgIGlmIChzcGFuLnRvICE9IG51bGwpIHsNCiAgICAgICAgdG8gPSBQb3MobGluZU9iaiA/IGxpbmUgOiBsaW5lTm8obGluZSksIHNwYW4udG8pOw0KICAgICAgICBpZiAoc2lkZSA9PSAxKSB7IHJldHVybiB0byB9DQogICAgICB9DQogICAgfQ0KICAgIHJldHVybiBmcm9tICYmIHtmcm9tOiBmcm9tLCB0bzogdG99DQogIH07DQoNCiAgLy8gU2lnbmFscyB0aGF0IHRoZSBtYXJrZXIncyB3aWRnZXQgY2hhbmdlZCwgYW5kIHN1cnJvdW5kaW5nIGxheW91dA0KICAvLyBzaG91bGQgYmUgcmVjb21wdXRlZC4NCiAgVGV4dE1hcmtlci5wcm90b3R5cGUuY2hhbmdlZCA9IGZ1bmN0aW9uICgpIHsNCiAgICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgdmFyIHBvcyA9IHRoaXMuZmluZCgtMSwgdHJ1ZSksIHdpZGdldCA9IHRoaXMsIGNtID0gdGhpcy5kb2MuY207DQogICAgaWYgKCFwb3MgfHwgIWNtKSB7IHJldHVybiB9DQogICAgcnVuSW5PcChjbSwgZnVuY3Rpb24gKCkgew0KICAgICAgdmFyIGxpbmUgPSBwb3MubGluZSwgbGluZU4gPSBsaW5lTm8ocG9zLmxpbmUpOw0KICAgICAgdmFyIHZpZXcgPSBmaW5kVmlld0ZvckxpbmUoY20sIGxpbmVOKTsNCiAgICAgIGlmICh2aWV3KSB7DQogICAgICAgIGNsZWFyTGluZU1lYXN1cmVtZW50Q2FjaGVGb3Iodmlldyk7DQogICAgICAgIGNtLmN1ck9wLnNlbGVjdGlvbkNoYW5nZWQgPSBjbS5jdXJPcC5mb3JjZVVwZGF0ZSA9IHRydWU7DQogICAgICB9DQogICAgICBjbS5jdXJPcC51cGRhdGVNYXhMaW5lID0gdHJ1ZTsNCiAgICAgIGlmICghbGluZUlzSGlkZGVuKHdpZGdldC5kb2MsIGxpbmUpICYmIHdpZGdldC5oZWlnaHQgIT0gbnVsbCkgew0KICAgICAgICB2YXIgb2xkSGVpZ2h0ID0gd2lkZ2V0LmhlaWdodDsNCiAgICAgICAgd2lkZ2V0LmhlaWdodCA9IG51bGw7DQogICAgICAgIHZhciBkSGVpZ2h0ID0gd2lkZ2V0SGVpZ2h0KHdpZGdldCkgLSBvbGRIZWlnaHQ7DQogICAgICAgIGlmIChkSGVpZ2h0KQ0KICAgICAgICAgIHsgdXBkYXRlTGluZUhlaWdodChsaW5lLCBsaW5lLmhlaWdodCArIGRIZWlnaHQpOyB9DQogICAgICB9DQogICAgICBzaWduYWxMYXRlcihjbSwgIm1hcmtlckNoYW5nZWQiLCBjbSwgdGhpcyQxKTsNCiAgICB9KTsNCiAgfTsNCg0KICBUZXh0TWFya2VyLnByb3RvdHlwZS5hdHRhY2hMaW5lID0gZnVuY3Rpb24gKGxpbmUpIHsNCiAgICBpZiAoIXRoaXMubGluZXMubGVuZ3RoICYmIHRoaXMuZG9jLmNtKSB7DQogICAgICB2YXIgb3AgPSB0aGlzLmRvYy5jbS5jdXJPcDsNCiAgICAgIGlmICghb3AubWF5YmVIaWRkZW5NYXJrZXJzIHx8IGluZGV4T2Yob3AubWF5YmVIaWRkZW5NYXJrZXJzLCB0aGlzKSA9PSAtMSkNCiAgICAgICAgeyAob3AubWF5YmVVbmhpZGRlbk1hcmtlcnMgfHwgKG9wLm1heWJlVW5oaWRkZW5NYXJrZXJzID0gW10pKS5wdXNoKHRoaXMpOyB9DQogICAgfQ0KICAgIHRoaXMubGluZXMucHVzaChsaW5lKTsNCiAgfTsNCg0KICBUZXh0TWFya2VyLnByb3RvdHlwZS5kZXRhY2hMaW5lID0gZnVuY3Rpb24gKGxpbmUpIHsNCiAgICB0aGlzLmxpbmVzLnNwbGljZShpbmRleE9mKHRoaXMubGluZXMsIGxpbmUpLCAxKTsNCiAgICBpZiAoIXRoaXMubGluZXMubGVuZ3RoICYmIHRoaXMuZG9jLmNtKSB7DQogICAgICB2YXIgb3AgPSB0aGlzLmRvYy5jbS5jdXJPcA0KICAgICAgOyhvcC5tYXliZUhpZGRlbk1hcmtlcnMgfHwgKG9wLm1heWJlSGlkZGVuTWFya2VycyA9IFtdKSkucHVzaCh0aGlzKTsNCiAgICB9DQogIH07DQogIGV2ZW50TWl4aW4oVGV4dE1hcmtlcik7DQoNCiAgLy8gQ3JlYXRlIGEgbWFya2VyLCB3aXJlIGl0IHVwIHRvIHRoZSByaWdodCBsaW5lcywgYW5kDQogIGZ1bmN0aW9uIG1hcmtUZXh0KGRvYywgZnJvbSwgdG8sIG9wdGlvbnMsIHR5cGUpIHsNCiAgICAvLyBTaGFyZWQgbWFya2VycyAoYWNyb3NzIGxpbmtlZCBkb2N1bWVudHMpIGFyZSBoYW5kbGVkIHNlcGFyYXRlbHkNCiAgICAvLyAobWFya1RleHRTaGFyZWQgd2lsbCBjYWxsIG91dCB0byB0aGlzIGFnYWluLCBvbmNlIHBlcg0KICAgIC8vIGRvY3VtZW50KS4NCiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnNoYXJlZCkgeyByZXR1cm4gbWFya1RleHRTaGFyZWQoZG9jLCBmcm9tLCB0bywgb3B0aW9ucywgdHlwZSkgfQ0KICAgIC8vIEVuc3VyZSB3ZSBhcmUgaW4gYW4gb3BlcmF0aW9uLg0KICAgIGlmIChkb2MuY20gJiYgIWRvYy5jbS5jdXJPcCkgeyByZXR1cm4gb3BlcmF0aW9uKGRvYy5jbSwgbWFya1RleHQpKGRvYywgZnJvbSwgdG8sIG9wdGlvbnMsIHR5cGUpIH0NCg0KICAgIHZhciBtYXJrZXIgPSBuZXcgVGV4dE1hcmtlcihkb2MsIHR5cGUpLCBkaWZmID0gY21wKGZyb20sIHRvKTsNCiAgICBpZiAob3B0aW9ucykgeyBjb3B5T2JqKG9wdGlvbnMsIG1hcmtlciwgZmFsc2UpOyB9DQogICAgLy8gRG9uJ3QgY29ubmVjdCBlbXB0eSBtYXJrZXJzIHVubGVzcyBjbGVhcldoZW5FbXB0eSBpcyBmYWxzZQ0KICAgIGlmIChkaWZmID4gMCB8fCBkaWZmID09IDAgJiYgbWFya2VyLmNsZWFyV2hlbkVtcHR5ICE9PSBmYWxzZSkNCiAgICAgIHsgcmV0dXJuIG1hcmtlciB9DQogICAgaWYgKG1hcmtlci5yZXBsYWNlZFdpdGgpIHsNCiAgICAgIC8vIFNob3dpbmcgdXAgYXMgYSB3aWRnZXQgaW1wbGllcyBjb2xsYXBzZWQgKHdpZGdldCByZXBsYWNlcyB0ZXh0KQ0KICAgICAgbWFya2VyLmNvbGxhcHNlZCA9IHRydWU7DQogICAgICBtYXJrZXIud2lkZ2V0Tm9kZSA9IGVsdFAoInNwYW4iLCBbbWFya2VyLnJlcGxhY2VkV2l0aF0sICJDb2RlTWlycm9yLXdpZGdldCIpOw0KICAgICAgaWYgKCFvcHRpb25zLmhhbmRsZU1vdXNlRXZlbnRzKSB7IG1hcmtlci53aWRnZXROb2RlLnNldEF0dHJpYnV0ZSgiY20taWdub3JlLWV2ZW50cyIsICJ0cnVlIik7IH0NCiAgICAgIGlmIChvcHRpb25zLmluc2VydExlZnQpIHsgbWFya2VyLndpZGdldE5vZGUuaW5zZXJ0TGVmdCA9IHRydWU7IH0NCiAgICB9DQogICAgaWYgKG1hcmtlci5jb2xsYXBzZWQpIHsNCiAgICAgIGlmIChjb25mbGljdGluZ0NvbGxhcHNlZFJhbmdlKGRvYywgZnJvbS5saW5lLCBmcm9tLCB0bywgbWFya2VyKSB8fA0KICAgICAgICAgIGZyb20ubGluZSAhPSB0by5saW5lICYmIGNvbmZsaWN0aW5nQ29sbGFwc2VkUmFuZ2UoZG9jLCB0by5saW5lLCBmcm9tLCB0bywgbWFya2VyKSkNCiAgICAgICAgeyB0aHJvdyBuZXcgRXJyb3IoIkluc2VydGluZyBjb2xsYXBzZWQgbWFya2VyIHBhcnRpYWxseSBvdmVybGFwcGluZyBhbiBleGlzdGluZyBvbmUiKSB9DQogICAgICBzZWVDb2xsYXBzZWRTcGFucygpOw0KICAgIH0NCg0KICAgIGlmIChtYXJrZXIuYWRkVG9IaXN0b3J5KQ0KICAgICAgeyBhZGRDaGFuZ2VUb0hpc3RvcnkoZG9jLCB7ZnJvbTogZnJvbSwgdG86IHRvLCBvcmlnaW46ICJtYXJrVGV4dCJ9LCBkb2Muc2VsLCBOYU4pOyB9DQoNCiAgICB2YXIgY3VyTGluZSA9IGZyb20ubGluZSwgY20gPSBkb2MuY20sIHVwZGF0ZU1heExpbmU7DQogICAgZG9jLml0ZXIoY3VyTGluZSwgdG8ubGluZSArIDEsIGZ1bmN0aW9uIChsaW5lKSB7DQogICAgICBpZiAoY20gJiYgbWFya2VyLmNvbGxhcHNlZCAmJiAhY20ub3B0aW9ucy5saW5lV3JhcHBpbmcgJiYgdmlzdWFsTGluZShsaW5lKSA9PSBjbS5kaXNwbGF5Lm1heExpbmUpDQogICAgICAgIHsgdXBkYXRlTWF4TGluZSA9IHRydWU7IH0NCiAgICAgIGlmIChtYXJrZXIuY29sbGFwc2VkICYmIGN1ckxpbmUgIT0gZnJvbS5saW5lKSB7IHVwZGF0ZUxpbmVIZWlnaHQobGluZSwgMCk7IH0NCiAgICAgIGFkZE1hcmtlZFNwYW4obGluZSwgbmV3IE1hcmtlZFNwYW4obWFya2VyLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJMaW5lID09IGZyb20ubGluZSA/IGZyb20uY2ggOiBudWxsLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJMaW5lID09IHRvLmxpbmUgPyB0by5jaCA6IG51bGwpKTsNCiAgICAgICsrY3VyTGluZTsNCiAgICB9KTsNCiAgICAvLyBsaW5lSXNIaWRkZW4gZGVwZW5kcyBvbiB0aGUgcHJlc2VuY2Ugb2YgdGhlIHNwYW5zLCBzbyBuZWVkcyBhIHNlY29uZCBwYXNzDQogICAgaWYgKG1hcmtlci5jb2xsYXBzZWQpIHsgZG9jLml0ZXIoZnJvbS5saW5lLCB0by5saW5lICsgMSwgZnVuY3Rpb24gKGxpbmUpIHsNCiAgICAgIGlmIChsaW5lSXNIaWRkZW4oZG9jLCBsaW5lKSkgeyB1cGRhdGVMaW5lSGVpZ2h0KGxpbmUsIDApOyB9DQogICAgfSk7IH0NCg0KICAgIGlmIChtYXJrZXIuY2xlYXJPbkVudGVyKSB7IG9uKG1hcmtlciwgImJlZm9yZUN1cnNvckVudGVyIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFya2VyLmNsZWFyKCk7IH0pOyB9DQoNCiAgICBpZiAobWFya2VyLnJlYWRPbmx5KSB7DQogICAgICBzZWVSZWFkT25seVNwYW5zKCk7DQogICAgICBpZiAoZG9jLmhpc3RvcnkuZG9uZS5sZW5ndGggfHwgZG9jLmhpc3RvcnkudW5kb25lLmxlbmd0aCkNCiAgICAgICAgeyBkb2MuY2xlYXJIaXN0b3J5KCk7IH0NCiAgICB9DQogICAgaWYgKG1hcmtlci5jb2xsYXBzZWQpIHsNCiAgICAgIG1hcmtlci5pZCA9ICsrbmV4dE1hcmtlcklkOw0KICAgICAgbWFya2VyLmF0b21pYyA9IHRydWU7DQogICAgfQ0KICAgIGlmIChjbSkgew0KICAgICAgLy8gU3luYyBlZGl0b3Igc3RhdGUNCiAgICAgIGlmICh1cGRhdGVNYXhMaW5lKSB7IGNtLmN1ck9wLnVwZGF0ZU1heExpbmUgPSB0cnVlOyB9DQogICAgICBpZiAobWFya2VyLmNvbGxhcHNlZCkNCiAgICAgICAgeyByZWdDaGFuZ2UoY20sIGZyb20ubGluZSwgdG8ubGluZSArIDEpOyB9DQogICAgICBlbHNlIGlmIChtYXJrZXIuY2xhc3NOYW1lIHx8IG1hcmtlci5zdGFydFN0eWxlIHx8IG1hcmtlci5lbmRTdHlsZSB8fCBtYXJrZXIuY3NzIHx8DQogICAgICAgICAgICAgICBtYXJrZXIuYXR0cmlidXRlcyB8fCBtYXJrZXIudGl0bGUpDQogICAgICAgIHsgZm9yICh2YXIgaSA9IGZyb20ubGluZTsgaSA8PSB0by5saW5lOyBpKyspIHsgcmVnTGluZUNoYW5nZShjbSwgaSwgInRleHQiKTsgfSB9DQogICAgICBpZiAobWFya2VyLmF0b21pYykgeyByZUNoZWNrU2VsZWN0aW9uKGNtLmRvYyk7IH0NCiAgICAgIHNpZ25hbExhdGVyKGNtLCAibWFya2VyQWRkZWQiLCBjbSwgbWFya2VyKTsNCiAgICB9DQogICAgcmV0dXJuIG1hcmtlcg0KICB9DQoNCiAgLy8gU0hBUkVEIFRFWFRNQVJLRVJTDQoNCiAgLy8gQSBzaGFyZWQgbWFya2VyIHNwYW5zIG11bHRpcGxlIGxpbmtlZCBkb2N1bWVudHMuIEl0IGlzDQogIC8vIGltcGxlbWVudGVkIGFzIGEgbWV0YS1tYXJrZXItb2JqZWN0IGNvbnRyb2xsaW5nIG11bHRpcGxlIG5vcm1hbA0KICAvLyBtYXJrZXJzLg0KICB2YXIgU2hhcmVkVGV4dE1hcmtlciA9IGZ1bmN0aW9uKG1hcmtlcnMsIHByaW1hcnkpIHsNCiAgICB2YXIgdGhpcyQxID0gdGhpczsNCg0KICAgIHRoaXMubWFya2VycyA9IG1hcmtlcnM7DQogICAgdGhpcy5wcmltYXJ5ID0gcHJpbWFyeTsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hcmtlcnMubGVuZ3RoOyArK2kpDQogICAgICB7IG1hcmtlcnNbaV0ucGFyZW50ID0gdGhpcyQxOyB9DQogIH07DQoNCiAgU2hhcmVkVGV4dE1hcmtlci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7DQogICAgICB2YXIgdGhpcyQxID0gdGhpczsNCg0KICAgIGlmICh0aGlzLmV4cGxpY2l0bHlDbGVhcmVkKSB7IHJldHVybiB9DQogICAgdGhpcy5leHBsaWNpdGx5Q2xlYXJlZCA9IHRydWU7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1hcmtlcnMubGVuZ3RoOyArK2kpDQogICAgICB7IHRoaXMkMS5tYXJrZXJzW2ldLmNsZWFyKCk7IH0NCiAgICBzaWduYWxMYXRlcih0aGlzLCAiY2xlYXIiKTsNCiAgfTsNCg0KICBTaGFyZWRUZXh0TWFya2VyLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKHNpZGUsIGxpbmVPYmopIHsNCiAgICByZXR1cm4gdGhpcy5wcmltYXJ5LmZpbmQoc2lkZSwgbGluZU9iaikNCiAgfTsNCiAgZXZlbnRNaXhpbihTaGFyZWRUZXh0TWFya2VyKTsNCg0KICBmdW5jdGlvbiBtYXJrVGV4dFNoYXJlZChkb2MsIGZyb20sIHRvLCBvcHRpb25zLCB0eXBlKSB7DQogICAgb3B0aW9ucyA9IGNvcHlPYmoob3B0aW9ucyk7DQogICAgb3B0aW9ucy5zaGFyZWQgPSBmYWxzZTsNCiAgICB2YXIgbWFya2VycyA9IFttYXJrVGV4dChkb2MsIGZyb20sIHRvLCBvcHRpb25zLCB0eXBlKV0sIHByaW1hcnkgPSBtYXJrZXJzWzBdOw0KICAgIHZhciB3aWRnZXQgPSBvcHRpb25zLndpZGdldE5vZGU7DQogICAgbGlua2VkRG9jcyhkb2MsIGZ1bmN0aW9uIChkb2MpIHsNCiAgICAgIGlmICh3aWRnZXQpIHsgb3B0aW9ucy53aWRnZXROb2RlID0gd2lkZ2V0LmNsb25lTm9kZSh0cnVlKTsgfQ0KICAgICAgbWFya2Vycy5wdXNoKG1hcmtUZXh0KGRvYywgY2xpcFBvcyhkb2MsIGZyb20pLCBjbGlwUG9zKGRvYywgdG8pLCBvcHRpb25zLCB0eXBlKSk7DQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvYy5saW5rZWQubGVuZ3RoOyArK2kpDQogICAgICAgIHsgaWYgKGRvYy5saW5rZWRbaV0uaXNQYXJlbnQpIHsgcmV0dXJuIH0gfQ0KICAgICAgcHJpbWFyeSA9IGxzdChtYXJrZXJzKTsNCiAgICB9KTsNCiAgICByZXR1cm4gbmV3IFNoYXJlZFRleHRNYXJrZXIobWFya2VycywgcHJpbWFyeSkNCiAgfQ0KDQogIGZ1bmN0aW9uIGZpbmRTaGFyZWRNYXJrZXJzKGRvYykgew0KICAgIHJldHVybiBkb2MuZmluZE1hcmtzKFBvcyhkb2MuZmlyc3QsIDApLCBkb2MuY2xpcFBvcyhQb3MoZG9jLmxhc3RMaW5lKCkpKSwgZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ucGFyZW50OyB9KQ0KICB9DQoNCiAgZnVuY3Rpb24gY29weVNoYXJlZE1hcmtlcnMoZG9jLCBtYXJrZXJzKSB7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXJrZXJzLmxlbmd0aDsgaSsrKSB7DQogICAgICB2YXIgbWFya2VyID0gbWFya2Vyc1tpXSwgcG9zID0gbWFya2VyLmZpbmQoKTsNCiAgICAgIHZhciBtRnJvbSA9IGRvYy5jbGlwUG9zKHBvcy5mcm9tKSwgbVRvID0gZG9jLmNsaXBQb3MocG9zLnRvKTsNCiAgICAgIGlmIChjbXAobUZyb20sIG1UbykpIHsNCiAgICAgICAgdmFyIHN1Yk1hcmsgPSBtYXJrVGV4dChkb2MsIG1Gcm9tLCBtVG8sIG1hcmtlci5wcmltYXJ5LCBtYXJrZXIucHJpbWFyeS50eXBlKTsNCiAgICAgICAgbWFya2VyLm1hcmtlcnMucHVzaChzdWJNYXJrKTsNCiAgICAgICAgc3ViTWFyay5wYXJlbnQgPSBtYXJrZXI7DQogICAgICB9DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gZGV0YWNoU2hhcmVkTWFya2VycyhtYXJrZXJzKSB7DQogICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGkgKSB7DQogICAgICB2YXIgbWFya2VyID0gbWFya2Vyc1tpXSwgbGlua2VkID0gW21hcmtlci5wcmltYXJ5LmRvY107DQogICAgICBsaW5rZWREb2NzKG1hcmtlci5wcmltYXJ5LmRvYywgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGxpbmtlZC5wdXNoKGQpOyB9KTsNCiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWFya2VyLm1hcmtlcnMubGVuZ3RoOyBqKyspIHsNCiAgICAgICAgdmFyIHN1Yk1hcmtlciA9IG1hcmtlci5tYXJrZXJzW2pdOw0KICAgICAgICBpZiAoaW5kZXhPZihsaW5rZWQsIHN1Yk1hcmtlci5kb2MpID09IC0xKSB7DQogICAgICAgICAgc3ViTWFya2VyLnBhcmVudCA9IG51bGw7DQogICAgICAgICAgbWFya2VyLm1hcmtlcnMuc3BsaWNlKGotLSwgMSk7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9Ow0KDQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXJrZXJzLmxlbmd0aDsgaSsrKSBsb29wKCBpICk7DQogIH0NCg0KICB2YXIgbmV4dERvY0lkID0gMDsNCiAgdmFyIERvYyA9IGZ1bmN0aW9uKHRleHQsIG1vZGUsIGZpcnN0TGluZSwgbGluZVNlcCwgZGlyZWN0aW9uKSB7DQogICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIERvYykpIHsgcmV0dXJuIG5ldyBEb2ModGV4dCwgbW9kZSwgZmlyc3RMaW5lLCBsaW5lU2VwLCBkaXJlY3Rpb24pIH0NCiAgICBpZiAoZmlyc3RMaW5lID09IG51bGwpIHsgZmlyc3RMaW5lID0gMDsgfQ0KDQogICAgQnJhbmNoQ2h1bmsuY2FsbCh0aGlzLCBbbmV3IExlYWZDaHVuayhbbmV3IExpbmUoIiIsIG51bGwpXSldKTsNCiAgICB0aGlzLmZpcnN0ID0gZmlyc3RMaW5lOw0KICAgIHRoaXMuc2Nyb2xsVG9wID0gdGhpcy5zY3JvbGxMZWZ0ID0gMDsNCiAgICB0aGlzLmNhbnRFZGl0ID0gZmFsc2U7DQogICAgdGhpcy5jbGVhbkdlbmVyYXRpb24gPSAxOw0KICAgIHRoaXMubW9kZUZyb250aWVyID0gdGhpcy5oaWdobGlnaHRGcm9udGllciA9IGZpcnN0TGluZTsNCiAgICB2YXIgc3RhcnQgPSBQb3MoZmlyc3RMaW5lLCAwKTsNCiAgICB0aGlzLnNlbCA9IHNpbXBsZVNlbGVjdGlvbihzdGFydCk7DQogICAgdGhpcy5oaXN0b3J5ID0gbmV3IEhpc3RvcnkobnVsbCk7DQogICAgdGhpcy5pZCA9ICsrbmV4dERvY0lkOw0KICAgIHRoaXMubW9kZU9wdGlvbiA9IG1vZGU7DQogICAgdGhpcy5saW5lU2VwID0gbGluZVNlcDsNCiAgICB0aGlzLmRpcmVjdGlvbiA9IChkaXJlY3Rpb24gPT0gInJ0bCIpID8gInJ0bCIgOiAibHRyIjsNCiAgICB0aGlzLmV4dGVuZCA9IGZhbHNlOw0KDQogICAgaWYgKHR5cGVvZiB0ZXh0ID09ICJzdHJpbmciKSB7IHRleHQgPSB0aGlzLnNwbGl0TGluZXModGV4dCk7IH0NCiAgICB1cGRhdGVEb2ModGhpcywge2Zyb206IHN0YXJ0LCB0bzogc3RhcnQsIHRleHQ6IHRleHR9KTsNCiAgICBzZXRTZWxlY3Rpb24odGhpcywgc2ltcGxlU2VsZWN0aW9uKHN0YXJ0KSwgc2VsX2RvbnRTY3JvbGwpOw0KICB9Ow0KDQogIERvYy5wcm90b3R5cGUgPSBjcmVhdGVPYmooQnJhbmNoQ2h1bmsucHJvdG90eXBlLCB7DQogICAgY29uc3RydWN0b3I6IERvYywNCiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIGRvY3VtZW50LiBTdXBwb3J0cyB0d28gZm9ybXMgLS0gd2l0aCBvbmx5IG9uZQ0KICAgIC8vIGFyZ3VtZW50LCBpdCBjYWxscyB0aGF0IGZvciBlYWNoIGxpbmUgaW4gdGhlIGRvY3VtZW50LiBXaXRoDQogICAgLy8gdGhyZWUsIGl0IGl0ZXJhdGVzIG92ZXIgdGhlIHJhbmdlIGdpdmVuIGJ5IHRoZSBmaXJzdCB0d28gKHdpdGgNCiAgICAvLyB0aGUgc2Vjb25kIGJlaW5nIG5vbi1pbmNsdXNpdmUpLg0KICAgIGl0ZXI6IGZ1bmN0aW9uKGZyb20sIHRvLCBvcCkgew0KICAgICAgaWYgKG9wKSB7IHRoaXMuaXRlck4oZnJvbSAtIHRoaXMuZmlyc3QsIHRvIC0gZnJvbSwgb3ApOyB9DQogICAgICBlbHNlIHsgdGhpcy5pdGVyTih0aGlzLmZpcnN0LCB0aGlzLmZpcnN0ICsgdGhpcy5zaXplLCBmcm9tKTsgfQ0KICAgIH0sDQoNCiAgICAvLyBOb24tcHVibGljIGludGVyZmFjZSBmb3IgYWRkaW5nIGFuZCByZW1vdmluZyBsaW5lcy4NCiAgICBpbnNlcnQ6IGZ1bmN0aW9uKGF0LCBsaW5lcykgew0KICAgICAgdmFyIGhlaWdodCA9IDA7DQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKSB7IGhlaWdodCArPSBsaW5lc1tpXS5oZWlnaHQ7IH0NCiAgICAgIHRoaXMuaW5zZXJ0SW5uZXIoYXQgLSB0aGlzLmZpcnN0LCBsaW5lcywgaGVpZ2h0KTsNCiAgICB9LA0KICAgIHJlbW92ZTogZnVuY3Rpb24oYXQsIG4pIHsgdGhpcy5yZW1vdmVJbm5lcihhdCAtIHRoaXMuZmlyc3QsIG4pOyB9LA0KDQogICAgLy8gRnJvbSBoZXJlLCB0aGUgbWV0aG9kcyBhcmUgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS4gTW9zdA0KICAgIC8vIGFyZSBhbHNvIGF2YWlsYWJsZSBmcm9tIENvZGVNaXJyb3IgKGVkaXRvcikgaW5zdGFuY2VzLg0KDQogICAgZ2V0VmFsdWU6IGZ1bmN0aW9uKGxpbmVTZXApIHsNCiAgICAgIHZhciBsaW5lcyA9IGdldExpbmVzKHRoaXMsIHRoaXMuZmlyc3QsIHRoaXMuZmlyc3QgKyB0aGlzLnNpemUpOw0KICAgICAgaWYgKGxpbmVTZXAgPT09IGZhbHNlKSB7IHJldHVybiBsaW5lcyB9DQogICAgICByZXR1cm4gbGluZXMuam9pbihsaW5lU2VwIHx8IHRoaXMubGluZVNlcGFyYXRvcigpKQ0KICAgIH0sDQogICAgc2V0VmFsdWU6IGRvY01ldGhvZE9wKGZ1bmN0aW9uKGNvZGUpIHsNCiAgICAgIHZhciB0b3AgPSBQb3ModGhpcy5maXJzdCwgMCksIGxhc3QgPSB0aGlzLmZpcnN0ICsgdGhpcy5zaXplIC0gMTsNCiAgICAgIG1ha2VDaGFuZ2UodGhpcywge2Zyb206IHRvcCwgdG86IFBvcyhsYXN0LCBnZXRMaW5lKHRoaXMsIGxhc3QpLnRleHQubGVuZ3RoKSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMuc3BsaXRMaW5lcyhjb2RlKSwgb3JpZ2luOiAic2V0VmFsdWUiLCBmdWxsOiB0cnVlfSwgdHJ1ZSk7DQogICAgICBpZiAodGhpcy5jbSkgeyBzY3JvbGxUb0Nvb3Jkcyh0aGlzLmNtLCAwLCAwKTsgfQ0KICAgICAgc2V0U2VsZWN0aW9uKHRoaXMsIHNpbXBsZVNlbGVjdGlvbih0b3ApLCBzZWxfZG9udFNjcm9sbCk7DQogICAgfSksDQogICAgcmVwbGFjZVJhbmdlOiBmdW5jdGlvbihjb2RlLCBmcm9tLCB0bywgb3JpZ2luKSB7DQogICAgICBmcm9tID0gY2xpcFBvcyh0aGlzLCBmcm9tKTsNCiAgICAgIHRvID0gdG8gPyBjbGlwUG9zKHRoaXMsIHRvKSA6IGZyb207DQogICAgICByZXBsYWNlUmFuZ2UodGhpcywgY29kZSwgZnJvbSwgdG8sIG9yaWdpbik7DQogICAgfSwNCiAgICBnZXRSYW5nZTogZnVuY3Rpb24oZnJvbSwgdG8sIGxpbmVTZXApIHsNCiAgICAgIHZhciBsaW5lcyA9IGdldEJldHdlZW4odGhpcywgY2xpcFBvcyh0aGlzLCBmcm9tKSwgY2xpcFBvcyh0aGlzLCB0bykpOw0KICAgICAgaWYgKGxpbmVTZXAgPT09IGZhbHNlKSB7IHJldHVybiBsaW5lcyB9DQogICAgICByZXR1cm4gbGluZXMuam9pbihsaW5lU2VwIHx8IHRoaXMubGluZVNlcGFyYXRvcigpKQ0KICAgIH0sDQoNCiAgICBnZXRMaW5lOiBmdW5jdGlvbihsaW5lKSB7dmFyIGwgPSB0aGlzLmdldExpbmVIYW5kbGUobGluZSk7IHJldHVybiBsICYmIGwudGV4dH0sDQoNCiAgICBnZXRMaW5lSGFuZGxlOiBmdW5jdGlvbihsaW5lKSB7aWYgKGlzTGluZSh0aGlzLCBsaW5lKSkgeyByZXR1cm4gZ2V0TGluZSh0aGlzLCBsaW5lKSB9fSwNCiAgICBnZXRMaW5lTnVtYmVyOiBmdW5jdGlvbihsaW5lKSB7cmV0dXJuIGxpbmVObyhsaW5lKX0sDQoNCiAgICBnZXRMaW5lSGFuZGxlVmlzdWFsU3RhcnQ6IGZ1bmN0aW9uKGxpbmUpIHsNCiAgICAgIGlmICh0eXBlb2YgbGluZSA9PSAibnVtYmVyIikgeyBsaW5lID0gZ2V0TGluZSh0aGlzLCBsaW5lKTsgfQ0KICAgICAgcmV0dXJuIHZpc3VhbExpbmUobGluZSkNCiAgICB9LA0KDQogICAgbGluZUNvdW50OiBmdW5jdGlvbigpIHtyZXR1cm4gdGhpcy5zaXplfSwNCiAgICBmaXJzdExpbmU6IGZ1bmN0aW9uKCkge3JldHVybiB0aGlzLmZpcnN0fSwNCiAgICBsYXN0TGluZTogZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXMuZmlyc3QgKyB0aGlzLnNpemUgLSAxfSwNCg0KICAgIGNsaXBQb3M6IGZ1bmN0aW9uKHBvcykge3JldHVybiBjbGlwUG9zKHRoaXMsIHBvcyl9LA0KDQogICAgZ2V0Q3Vyc29yOiBmdW5jdGlvbihzdGFydCkgew0KICAgICAgdmFyIHJhbmdlJCQxID0gdGhpcy5zZWwucHJpbWFyeSgpLCBwb3M7DQogICAgICBpZiAoc3RhcnQgPT0gbnVsbCB8fCBzdGFydCA9PSAiaGVhZCIpIHsgcG9zID0gcmFuZ2UkJDEuaGVhZDsgfQ0KICAgICAgZWxzZSBpZiAoc3RhcnQgPT0gImFuY2hvciIpIHsgcG9zID0gcmFuZ2UkJDEuYW5jaG9yOyB9DQogICAgICBlbHNlIGlmIChzdGFydCA9PSAiZW5kIiB8fCBzdGFydCA9PSAidG8iIHx8IHN0YXJ0ID09PSBmYWxzZSkgeyBwb3MgPSByYW5nZSQkMS50bygpOyB9DQogICAgICBlbHNlIHsgcG9zID0gcmFuZ2UkJDEuZnJvbSgpOyB9DQogICAgICByZXR1cm4gcG9zDQogICAgfSwNCiAgICBsaXN0U2VsZWN0aW9uczogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLnNlbC5yYW5nZXMgfSwNCiAgICBzb21ldGhpbmdTZWxlY3RlZDogZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXMuc2VsLnNvbWV0aGluZ1NlbGVjdGVkKCl9LA0KDQogICAgc2V0Q3Vyc29yOiBkb2NNZXRob2RPcChmdW5jdGlvbihsaW5lLCBjaCwgb3B0aW9ucykgew0KICAgICAgc2V0U2ltcGxlU2VsZWN0aW9uKHRoaXMsIGNsaXBQb3ModGhpcywgdHlwZW9mIGxpbmUgPT0gIm51bWJlciIgPyBQb3MobGluZSwgY2ggfHwgMCkgOiBsaW5lKSwgbnVsbCwgb3B0aW9ucyk7DQogICAgfSksDQogICAgc2V0U2VsZWN0aW9uOiBkb2NNZXRob2RPcChmdW5jdGlvbihhbmNob3IsIGhlYWQsIG9wdGlvbnMpIHsNCiAgICAgIHNldFNpbXBsZVNlbGVjdGlvbih0aGlzLCBjbGlwUG9zKHRoaXMsIGFuY2hvciksIGNsaXBQb3ModGhpcywgaGVhZCB8fCBhbmNob3IpLCBvcHRpb25zKTsNCiAgICB9KSwNCiAgICBleHRlbmRTZWxlY3Rpb246IGRvY01ldGhvZE9wKGZ1bmN0aW9uKGhlYWQsIG90aGVyLCBvcHRpb25zKSB7DQogICAgICBleHRlbmRTZWxlY3Rpb24odGhpcywgY2xpcFBvcyh0aGlzLCBoZWFkKSwgb3RoZXIgJiYgY2xpcFBvcyh0aGlzLCBvdGhlciksIG9wdGlvbnMpOw0KICAgIH0pLA0KICAgIGV4dGVuZFNlbGVjdGlvbnM6IGRvY01ldGhvZE9wKGZ1bmN0aW9uKGhlYWRzLCBvcHRpb25zKSB7DQogICAgICBleHRlbmRTZWxlY3Rpb25zKHRoaXMsIGNsaXBQb3NBcnJheSh0aGlzLCBoZWFkcyksIG9wdGlvbnMpOw0KICAgIH0pLA0KICAgIGV4dGVuZFNlbGVjdGlvbnNCeTogZG9jTWV0aG9kT3AoZnVuY3Rpb24oZiwgb3B0aW9ucykgew0KICAgICAgdmFyIGhlYWRzID0gbWFwKHRoaXMuc2VsLnJhbmdlcywgZik7DQogICAgICBleHRlbmRTZWxlY3Rpb25zKHRoaXMsIGNsaXBQb3NBcnJheSh0aGlzLCBoZWFkcyksIG9wdGlvbnMpOw0KICAgIH0pLA0KICAgIHNldFNlbGVjdGlvbnM6IGRvY01ldGhvZE9wKGZ1bmN0aW9uKHJhbmdlcywgcHJpbWFyeSwgb3B0aW9ucykgew0KICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICAgIGlmICghcmFuZ2VzLmxlbmd0aCkgeyByZXR1cm4gfQ0KICAgICAgdmFyIG91dCA9IFtdOw0KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspDQogICAgICAgIHsgb3V0W2ldID0gbmV3IFJhbmdlKGNsaXBQb3ModGhpcyQxLCByYW5nZXNbaV0uYW5jaG9yKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaXBQb3ModGhpcyQxLCByYW5nZXNbaV0uaGVhZCkpOyB9DQogICAgICBpZiAocHJpbWFyeSA9PSBudWxsKSB7IHByaW1hcnkgPSBNYXRoLm1pbihyYW5nZXMubGVuZ3RoIC0gMSwgdGhpcy5zZWwucHJpbUluZGV4KTsgfQ0KICAgICAgc2V0U2VsZWN0aW9uKHRoaXMsIG5vcm1hbGl6ZVNlbGVjdGlvbih0aGlzLmNtLCBvdXQsIHByaW1hcnkpLCBvcHRpb25zKTsNCiAgICB9KSwNCiAgICBhZGRTZWxlY3Rpb246IGRvY01ldGhvZE9wKGZ1bmN0aW9uKGFuY2hvciwgaGVhZCwgb3B0aW9ucykgew0KICAgICAgdmFyIHJhbmdlcyA9IHRoaXMuc2VsLnJhbmdlcy5zbGljZSgwKTsNCiAgICAgIHJhbmdlcy5wdXNoKG5ldyBSYW5nZShjbGlwUG9zKHRoaXMsIGFuY2hvciksIGNsaXBQb3ModGhpcywgaGVhZCB8fCBhbmNob3IpKSk7DQogICAgICBzZXRTZWxlY3Rpb24odGhpcywgbm9ybWFsaXplU2VsZWN0aW9uKHRoaXMuY20sIHJhbmdlcywgcmFuZ2VzLmxlbmd0aCAtIDEpLCBvcHRpb25zKTsNCiAgICB9KSwNCg0KICAgIGdldFNlbGVjdGlvbjogZnVuY3Rpb24obGluZVNlcCkgew0KICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICAgIHZhciByYW5nZXMgPSB0aGlzLnNlbC5yYW5nZXMsIGxpbmVzOw0KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgdmFyIHNlbCA9IGdldEJldHdlZW4odGhpcyQxLCByYW5nZXNbaV0uZnJvbSgpLCByYW5nZXNbaV0udG8oKSk7DQogICAgICAgIGxpbmVzID0gbGluZXMgPyBsaW5lcy5jb25jYXQoc2VsKSA6IHNlbDsNCiAgICAgIH0NCiAgICAgIGlmIChsaW5lU2VwID09PSBmYWxzZSkgeyByZXR1cm4gbGluZXMgfQ0KICAgICAgZWxzZSB7IHJldHVybiBsaW5lcy5qb2luKGxpbmVTZXAgfHwgdGhpcy5saW5lU2VwYXJhdG9yKCkpIH0NCiAgICB9LA0KICAgIGdldFNlbGVjdGlvbnM6IGZ1bmN0aW9uKGxpbmVTZXApIHsNCiAgICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgICB2YXIgcGFydHMgPSBbXSwgcmFuZ2VzID0gdGhpcy5zZWwucmFuZ2VzOw0KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgdmFyIHNlbCA9IGdldEJldHdlZW4odGhpcyQxLCByYW5nZXNbaV0uZnJvbSgpLCByYW5nZXNbaV0udG8oKSk7DQogICAgICAgIGlmIChsaW5lU2VwICE9PSBmYWxzZSkgeyBzZWwgPSBzZWwuam9pbihsaW5lU2VwIHx8IHRoaXMkMS5saW5lU2VwYXJhdG9yKCkpOyB9DQogICAgICAgIHBhcnRzW2ldID0gc2VsOw0KICAgICAgfQ0KICAgICAgcmV0dXJuIHBhcnRzDQogICAgfSwNCiAgICByZXBsYWNlU2VsZWN0aW9uOiBmdW5jdGlvbihjb2RlLCBjb2xsYXBzZSwgb3JpZ2luKSB7DQogICAgICB2YXIgZHVwID0gW107DQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc2VsLnJhbmdlcy5sZW5ndGg7IGkrKykNCiAgICAgICAgeyBkdXBbaV0gPSBjb2RlOyB9DQogICAgICB0aGlzLnJlcGxhY2VTZWxlY3Rpb25zKGR1cCwgY29sbGFwc2UsIG9yaWdpbiB8fCAiK2lucHV0Iik7DQogICAgfSwNCiAgICByZXBsYWNlU2VsZWN0aW9uczogZG9jTWV0aG9kT3AoZnVuY3Rpb24oY29kZSwgY29sbGFwc2UsIG9yaWdpbikgew0KICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICAgIHZhciBjaGFuZ2VzID0gW10sIHNlbCA9IHRoaXMuc2VsOw0KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWwucmFuZ2VzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgIHZhciByYW5nZSQkMSA9IHNlbC5yYW5nZXNbaV07DQogICAgICAgIGNoYW5nZXNbaV0gPSB7ZnJvbTogcmFuZ2UkJDEuZnJvbSgpLCB0bzogcmFuZ2UkJDEudG8oKSwgdGV4dDogdGhpcyQxLnNwbGl0TGluZXMoY29kZVtpXSksIG9yaWdpbjogb3JpZ2lufTsNCiAgICAgIH0NCiAgICAgIHZhciBuZXdTZWwgPSBjb2xsYXBzZSAmJiBjb2xsYXBzZSAhPSAiZW5kIiAmJiBjb21wdXRlUmVwbGFjZWRTZWwodGhpcywgY2hhbmdlcywgY29sbGFwc2UpOw0KICAgICAgZm9yICh2YXIgaSQxID0gY2hhbmdlcy5sZW5ndGggLSAxOyBpJDEgPj0gMDsgaSQxLS0pDQogICAgICAgIHsgbWFrZUNoYW5nZSh0aGlzJDEsIGNoYW5nZXNbaSQxXSk7IH0NCiAgICAgIGlmIChuZXdTZWwpIHsgc2V0U2VsZWN0aW9uUmVwbGFjZUhpc3RvcnkodGhpcywgbmV3U2VsKTsgfQ0KICAgICAgZWxzZSBpZiAodGhpcy5jbSkgeyBlbnN1cmVDdXJzb3JWaXNpYmxlKHRoaXMuY20pOyB9DQogICAgfSksDQogICAgdW5kbzogZG9jTWV0aG9kT3AoZnVuY3Rpb24oKSB7bWFrZUNoYW5nZUZyb21IaXN0b3J5KHRoaXMsICJ1bmRvIik7fSksDQogICAgcmVkbzogZG9jTWV0aG9kT3AoZnVuY3Rpb24oKSB7bWFrZUNoYW5nZUZyb21IaXN0b3J5KHRoaXMsICJyZWRvIik7fSksDQogICAgdW5kb1NlbGVjdGlvbjogZG9jTWV0aG9kT3AoZnVuY3Rpb24oKSB7bWFrZUNoYW5nZUZyb21IaXN0b3J5KHRoaXMsICJ1bmRvIiwgdHJ1ZSk7fSksDQogICAgcmVkb1NlbGVjdGlvbjogZG9jTWV0aG9kT3AoZnVuY3Rpb24oKSB7bWFrZUNoYW5nZUZyb21IaXN0b3J5KHRoaXMsICJyZWRvIiwgdHJ1ZSk7fSksDQoNCiAgICBzZXRFeHRlbmRpbmc6IGZ1bmN0aW9uKHZhbCkge3RoaXMuZXh0ZW5kID0gdmFsO30sDQogICAgZ2V0RXh0ZW5kaW5nOiBmdW5jdGlvbigpIHtyZXR1cm4gdGhpcy5leHRlbmR9LA0KDQogICAgaGlzdG9yeVNpemU6IGZ1bmN0aW9uKCkgew0KICAgICAgdmFyIGhpc3QgPSB0aGlzLmhpc3RvcnksIGRvbmUgPSAwLCB1bmRvbmUgPSAwOw0KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoaXN0LmRvbmUubGVuZ3RoOyBpKyspIHsgaWYgKCFoaXN0LmRvbmVbaV0ucmFuZ2VzKSB7ICsrZG9uZTsgfSB9DQogICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBoaXN0LnVuZG9uZS5sZW5ndGg7IGkkMSsrKSB7IGlmICghaGlzdC51bmRvbmVbaSQxXS5yYW5nZXMpIHsgKyt1bmRvbmU7IH0gfQ0KICAgICAgcmV0dXJuIHt1bmRvOiBkb25lLCByZWRvOiB1bmRvbmV9DQogICAgfSwNCiAgICBjbGVhckhpc3Rvcnk6IGZ1bmN0aW9uKCkgew0KICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICAgIHRoaXMuaGlzdG9yeSA9IG5ldyBIaXN0b3J5KHRoaXMuaGlzdG9yeS5tYXhHZW5lcmF0aW9uKTsNCiAgICAgIGxpbmtlZERvY3ModGhpcywgZnVuY3Rpb24gKGRvYykgeyByZXR1cm4gZG9jLmhpc3RvcnkgPSB0aGlzJDEuaGlzdG9yeTsgfSwgdHJ1ZSk7DQogICAgfSwNCg0KICAgIG1hcmtDbGVhbjogZnVuY3Rpb24oKSB7DQogICAgICB0aGlzLmNsZWFuR2VuZXJhdGlvbiA9IHRoaXMuY2hhbmdlR2VuZXJhdGlvbih0cnVlKTsNCiAgICB9LA0KICAgIGNoYW5nZUdlbmVyYXRpb246IGZ1bmN0aW9uKGZvcmNlU3BsaXQpIHsNCiAgICAgIGlmIChmb3JjZVNwbGl0KQ0KICAgICAgICB7IHRoaXMuaGlzdG9yeS5sYXN0T3AgPSB0aGlzLmhpc3RvcnkubGFzdFNlbE9wID0gdGhpcy5oaXN0b3J5Lmxhc3RPcmlnaW4gPSBudWxsOyB9DQogICAgICByZXR1cm4gdGhpcy5oaXN0b3J5LmdlbmVyYXRpb24NCiAgICB9LA0KICAgIGlzQ2xlYW46IGZ1bmN0aW9uIChnZW4pIHsNCiAgICAgIHJldHVybiB0aGlzLmhpc3RvcnkuZ2VuZXJhdGlvbiA9PSAoZ2VuIHx8IHRoaXMuY2xlYW5HZW5lcmF0aW9uKQ0KICAgIH0sDQoNCiAgICBnZXRIaXN0b3J5OiBmdW5jdGlvbigpIHsNCiAgICAgIHJldHVybiB7ZG9uZTogY29weUhpc3RvcnlBcnJheSh0aGlzLmhpc3RvcnkuZG9uZSksDQogICAgICAgICAgICAgIHVuZG9uZTogY29weUhpc3RvcnlBcnJheSh0aGlzLmhpc3RvcnkudW5kb25lKX0NCiAgICB9LA0KICAgIHNldEhpc3Rvcnk6IGZ1bmN0aW9uKGhpc3REYXRhKSB7DQogICAgICB2YXIgaGlzdCA9IHRoaXMuaGlzdG9yeSA9IG5ldyBIaXN0b3J5KHRoaXMuaGlzdG9yeS5tYXhHZW5lcmF0aW9uKTsNCiAgICAgIGhpc3QuZG9uZSA9IGNvcHlIaXN0b3J5QXJyYXkoaGlzdERhdGEuZG9uZS5zbGljZSgwKSwgbnVsbCwgdHJ1ZSk7DQogICAgICBoaXN0LnVuZG9uZSA9IGNvcHlIaXN0b3J5QXJyYXkoaGlzdERhdGEudW5kb25lLnNsaWNlKDApLCBudWxsLCB0cnVlKTsNCiAgICB9LA0KDQogICAgc2V0R3V0dGVyTWFya2VyOiBkb2NNZXRob2RPcChmdW5jdGlvbihsaW5lLCBndXR0ZXJJRCwgdmFsdWUpIHsNCiAgICAgIHJldHVybiBjaGFuZ2VMaW5lKHRoaXMsIGxpbmUsICJndXR0ZXIiLCBmdW5jdGlvbiAobGluZSkgew0KICAgICAgICB2YXIgbWFya2VycyA9IGxpbmUuZ3V0dGVyTWFya2VycyB8fCAobGluZS5ndXR0ZXJNYXJrZXJzID0ge30pOw0KICAgICAgICBtYXJrZXJzW2d1dHRlcklEXSA9IHZhbHVlOw0KICAgICAgICBpZiAoIXZhbHVlICYmIGlzRW1wdHkobWFya2VycykpIHsgbGluZS5ndXR0ZXJNYXJrZXJzID0gbnVsbDsgfQ0KICAgICAgICByZXR1cm4gdHJ1ZQ0KICAgICAgfSkNCiAgICB9KSwNCg0KICAgIGNsZWFyR3V0dGVyOiBkb2NNZXRob2RPcChmdW5jdGlvbihndXR0ZXJJRCkgew0KICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICAgIHRoaXMuaXRlcihmdW5jdGlvbiAobGluZSkgew0KICAgICAgICBpZiAobGluZS5ndXR0ZXJNYXJrZXJzICYmIGxpbmUuZ3V0dGVyTWFya2Vyc1tndXR0ZXJJRF0pIHsNCiAgICAgICAgICBjaGFuZ2VMaW5lKHRoaXMkMSwgbGluZSwgImd1dHRlciIsIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGxpbmUuZ3V0dGVyTWFya2Vyc1tndXR0ZXJJRF0gPSBudWxsOw0KICAgICAgICAgICAgaWYgKGlzRW1wdHkobGluZS5ndXR0ZXJNYXJrZXJzKSkgeyBsaW5lLmd1dHRlck1hcmtlcnMgPSBudWxsOyB9DQogICAgICAgICAgICByZXR1cm4gdHJ1ZQ0KICAgICAgICAgIH0pOw0KICAgICAgICB9DQogICAgICB9KTsNCiAgICB9KSwNCg0KICAgIGxpbmVJbmZvOiBmdW5jdGlvbihsaW5lKSB7DQogICAgICB2YXIgbjsNCiAgICAgIGlmICh0eXBlb2YgbGluZSA9PSAibnVtYmVyIikgew0KICAgICAgICBpZiAoIWlzTGluZSh0aGlzLCBsaW5lKSkgeyByZXR1cm4gbnVsbCB9DQogICAgICAgIG4gPSBsaW5lOw0KICAgICAgICBsaW5lID0gZ2V0TGluZSh0aGlzLCBsaW5lKTsNCiAgICAgICAgaWYgKCFsaW5lKSB7IHJldHVybiBudWxsIH0NCiAgICAgIH0gZWxzZSB7DQogICAgICAgIG4gPSBsaW5lTm8obGluZSk7DQogICAgICAgIGlmIChuID09IG51bGwpIHsgcmV0dXJuIG51bGwgfQ0KICAgICAgfQ0KICAgICAgcmV0dXJuIHtsaW5lOiBuLCBoYW5kbGU6IGxpbmUsIHRleHQ6IGxpbmUudGV4dCwgZ3V0dGVyTWFya2VyczogbGluZS5ndXR0ZXJNYXJrZXJzLA0KICAgICAgICAgICAgICB0ZXh0Q2xhc3M6IGxpbmUudGV4dENsYXNzLCBiZ0NsYXNzOiBsaW5lLmJnQ2xhc3MsIHdyYXBDbGFzczogbGluZS53cmFwQ2xhc3MsDQogICAgICAgICAgICAgIHdpZGdldHM6IGxpbmUud2lkZ2V0c30NCiAgICB9LA0KDQogICAgYWRkTGluZUNsYXNzOiBkb2NNZXRob2RPcChmdW5jdGlvbihoYW5kbGUsIHdoZXJlLCBjbHMpIHsNCiAgICAgIHJldHVybiBjaGFuZ2VMaW5lKHRoaXMsIGhhbmRsZSwgd2hlcmUgPT0gImd1dHRlciIgPyAiZ3V0dGVyIiA6ICJjbGFzcyIsIGZ1bmN0aW9uIChsaW5lKSB7DQogICAgICAgIHZhciBwcm9wID0gd2hlcmUgPT0gInRleHQiID8gInRleHRDbGFzcyINCiAgICAgICAgICAgICAgICAgOiB3aGVyZSA9PSAiYmFja2dyb3VuZCIgPyAiYmdDbGFzcyINCiAgICAgICAgICAgICAgICAgOiB3aGVyZSA9PSAiZ3V0dGVyIiA/ICJndXR0ZXJDbGFzcyIgOiAid3JhcENsYXNzIjsNCiAgICAgICAgaWYgKCFsaW5lW3Byb3BdKSB7IGxpbmVbcHJvcF0gPSBjbHM7IH0NCiAgICAgICAgZWxzZSBpZiAoY2xhc3NUZXN0KGNscykudGVzdChsaW5lW3Byb3BdKSkgeyByZXR1cm4gZmFsc2UgfQ0KICAgICAgICBlbHNlIHsgbGluZVtwcm9wXSArPSAiICIgKyBjbHM7IH0NCiAgICAgICAgcmV0dXJuIHRydWUNCiAgICAgIH0pDQogICAgfSksDQogICAgcmVtb3ZlTGluZUNsYXNzOiBkb2NNZXRob2RPcChmdW5jdGlvbihoYW5kbGUsIHdoZXJlLCBjbHMpIHsNCiAgICAgIHJldHVybiBjaGFuZ2VMaW5lKHRoaXMsIGhhbmRsZSwgd2hlcmUgPT0gImd1dHRlciIgPyAiZ3V0dGVyIiA6ICJjbGFzcyIsIGZ1bmN0aW9uIChsaW5lKSB7DQogICAgICAgIHZhciBwcm9wID0gd2hlcmUgPT0gInRleHQiID8gInRleHRDbGFzcyINCiAgICAgICAgICAgICAgICAgOiB3aGVyZSA9PSAiYmFja2dyb3VuZCIgPyAiYmdDbGFzcyINCiAgICAgICAgICAgICAgICAgOiB3aGVyZSA9PSAiZ3V0dGVyIiA/ICJndXR0ZXJDbGFzcyIgOiAid3JhcENsYXNzIjsNCiAgICAgICAgdmFyIGN1ciA9IGxpbmVbcHJvcF07DQogICAgICAgIGlmICghY3VyKSB7IHJldHVybiBmYWxzZSB9DQogICAgICAgIGVsc2UgaWYgKGNscyA9PSBudWxsKSB7IGxpbmVbcHJvcF0gPSBudWxsOyB9DQogICAgICAgIGVsc2Ugew0KICAgICAgICAgIHZhciBmb3VuZCA9IGN1ci5tYXRjaChjbGFzc1Rlc3QoY2xzKSk7DQogICAgICAgICAgaWYgKCFmb3VuZCkgeyByZXR1cm4gZmFsc2UgfQ0KICAgICAgICAgIHZhciBlbmQgPSBmb3VuZC5pbmRleCArIGZvdW5kWzBdLmxlbmd0aDsNCiAgICAgICAgICBsaW5lW3Byb3BdID0gY3VyLnNsaWNlKDAsIGZvdW5kLmluZGV4KSArICghZm91bmQuaW5kZXggfHwgZW5kID09IGN1ci5sZW5ndGggPyAiIiA6ICIgIikgKyBjdXIuc2xpY2UoZW5kKSB8fCBudWxsOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiB0cnVlDQogICAgICB9KQ0KICAgIH0pLA0KDQogICAgYWRkTGluZVdpZGdldDogZG9jTWV0aG9kT3AoZnVuY3Rpb24oaGFuZGxlLCBub2RlLCBvcHRpb25zKSB7DQogICAgICByZXR1cm4gYWRkTGluZVdpZGdldCh0aGlzLCBoYW5kbGUsIG5vZGUsIG9wdGlvbnMpDQogICAgfSksDQogICAgcmVtb3ZlTGluZVdpZGdldDogZnVuY3Rpb24od2lkZ2V0KSB7IHdpZGdldC5jbGVhcigpOyB9LA0KDQogICAgbWFya1RleHQ6IGZ1bmN0aW9uKGZyb20sIHRvLCBvcHRpb25zKSB7DQogICAgICByZXR1cm4gbWFya1RleHQodGhpcywgY2xpcFBvcyh0aGlzLCBmcm9tKSwgY2xpcFBvcyh0aGlzLCB0byksIG9wdGlvbnMsIG9wdGlvbnMgJiYgb3B0aW9ucy50eXBlIHx8ICJyYW5nZSIpDQogICAgfSwNCiAgICBzZXRCb29rbWFyazogZnVuY3Rpb24ocG9zLCBvcHRpb25zKSB7DQogICAgICB2YXIgcmVhbE9wdHMgPSB7cmVwbGFjZWRXaXRoOiBvcHRpb25zICYmIChvcHRpb25zLm5vZGVUeXBlID09IG51bGwgPyBvcHRpb25zLndpZGdldCA6IG9wdGlvbnMpLA0KICAgICAgICAgICAgICAgICAgICAgIGluc2VydExlZnQ6IG9wdGlvbnMgJiYgb3B0aW9ucy5pbnNlcnRMZWZ0LA0KICAgICAgICAgICAgICAgICAgICAgIGNsZWFyV2hlbkVtcHR5OiBmYWxzZSwgc2hhcmVkOiBvcHRpb25zICYmIG9wdGlvbnMuc2hhcmVkLA0KICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU1vdXNlRXZlbnRzOiBvcHRpb25zICYmIG9wdGlvbnMuaGFuZGxlTW91c2VFdmVudHN9Ow0KICAgICAgcG9zID0gY2xpcFBvcyh0aGlzLCBwb3MpOw0KICAgICAgcmV0dXJuIG1hcmtUZXh0KHRoaXMsIHBvcywgcG9zLCByZWFsT3B0cywgImJvb2ttYXJrIikNCiAgICB9LA0KICAgIGZpbmRNYXJrc0F0OiBmdW5jdGlvbihwb3MpIHsNCiAgICAgIHBvcyA9IGNsaXBQb3ModGhpcywgcG9zKTsNCiAgICAgIHZhciBtYXJrZXJzID0gW10sIHNwYW5zID0gZ2V0TGluZSh0aGlzLCBwb3MubGluZSkubWFya2VkU3BhbnM7DQogICAgICBpZiAoc3BhbnMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGFucy5sZW5ndGg7ICsraSkgew0KICAgICAgICB2YXIgc3BhbiA9IHNwYW5zW2ldOw0KICAgICAgICBpZiAoKHNwYW4uZnJvbSA9PSBudWxsIHx8IHNwYW4uZnJvbSA8PSBwb3MuY2gpICYmDQogICAgICAgICAgICAoc3Bhbi50byA9PSBudWxsIHx8IHNwYW4udG8gPj0gcG9zLmNoKSkNCiAgICAgICAgICB7IG1hcmtlcnMucHVzaChzcGFuLm1hcmtlci5wYXJlbnQgfHwgc3Bhbi5tYXJrZXIpOyB9DQogICAgICB9IH0NCiAgICAgIHJldHVybiBtYXJrZXJzDQogICAgfSwNCiAgICBmaW5kTWFya3M6IGZ1bmN0aW9uKGZyb20sIHRvLCBmaWx0ZXIpIHsNCiAgICAgIGZyb20gPSBjbGlwUG9zKHRoaXMsIGZyb20pOyB0byA9IGNsaXBQb3ModGhpcywgdG8pOw0KICAgICAgdmFyIGZvdW5kID0gW10sIGxpbmVObyQkMSA9IGZyb20ubGluZTsNCiAgICAgIHRoaXMuaXRlcihmcm9tLmxpbmUsIHRvLmxpbmUgKyAxLCBmdW5jdGlvbiAobGluZSkgew0KICAgICAgICB2YXIgc3BhbnMgPSBsaW5lLm1hcmtlZFNwYW5zOw0KICAgICAgICBpZiAoc3BhbnMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGFucy5sZW5ndGg7IGkrKykgew0KICAgICAgICAgIHZhciBzcGFuID0gc3BhbnNbaV07DQogICAgICAgICAgaWYgKCEoc3Bhbi50byAhPSBudWxsICYmIGxpbmVObyQkMSA9PSBmcm9tLmxpbmUgJiYgZnJvbS5jaCA+PSBzcGFuLnRvIHx8DQogICAgICAgICAgICAgICAgc3Bhbi5mcm9tID09IG51bGwgJiYgbGluZU5vJCQxICE9IGZyb20ubGluZSB8fA0KICAgICAgICAgICAgICAgIHNwYW4uZnJvbSAhPSBudWxsICYmIGxpbmVObyQkMSA9PSB0by5saW5lICYmIHNwYW4uZnJvbSA+PSB0by5jaCkgJiYNCiAgICAgICAgICAgICAgKCFmaWx0ZXIgfHwgZmlsdGVyKHNwYW4ubWFya2VyKSkpDQogICAgICAgICAgICB7IGZvdW5kLnB1c2goc3Bhbi5tYXJrZXIucGFyZW50IHx8IHNwYW4ubWFya2VyKTsgfQ0KICAgICAgICB9IH0NCiAgICAgICAgKytsaW5lTm8kJDE7DQogICAgICB9KTsNCiAgICAgIHJldHVybiBmb3VuZA0KICAgIH0sDQogICAgZ2V0QWxsTWFya3M6IGZ1bmN0aW9uKCkgew0KICAgICAgdmFyIG1hcmtlcnMgPSBbXTsNCiAgICAgIHRoaXMuaXRlcihmdW5jdGlvbiAobGluZSkgew0KICAgICAgICB2YXIgc3BzID0gbGluZS5tYXJrZWRTcGFuczsNCiAgICAgICAgaWYgKHNwcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHNwcy5sZW5ndGg7ICsraSkNCiAgICAgICAgICB7IGlmIChzcHNbaV0uZnJvbSAhPSBudWxsKSB7IG1hcmtlcnMucHVzaChzcHNbaV0ubWFya2VyKTsgfSB9IH0NCiAgICAgIH0pOw0KICAgICAgcmV0dXJuIG1hcmtlcnMNCiAgICB9LA0KDQogICAgcG9zRnJvbUluZGV4OiBmdW5jdGlvbihvZmYpIHsNCiAgICAgIHZhciBjaCwgbGluZU5vJCQxID0gdGhpcy5maXJzdCwgc2VwU2l6ZSA9IHRoaXMubGluZVNlcGFyYXRvcigpLmxlbmd0aDsNCiAgICAgIHRoaXMuaXRlcihmdW5jdGlvbiAobGluZSkgew0KICAgICAgICB2YXIgc3ogPSBsaW5lLnRleHQubGVuZ3RoICsgc2VwU2l6ZTsNCiAgICAgICAgaWYgKHN6ID4gb2ZmKSB7IGNoID0gb2ZmOyByZXR1cm4gdHJ1ZSB9DQogICAgICAgIG9mZiAtPSBzejsNCiAgICAgICAgKytsaW5lTm8kJDE7DQogICAgICB9KTsNCiAgICAgIHJldHVybiBjbGlwUG9zKHRoaXMsIFBvcyhsaW5lTm8kJDEsIGNoKSkNCiAgICB9LA0KICAgIGluZGV4RnJvbVBvczogZnVuY3Rpb24gKGNvb3Jkcykgew0KICAgICAgY29vcmRzID0gY2xpcFBvcyh0aGlzLCBjb29yZHMpOw0KICAgICAgdmFyIGluZGV4ID0gY29vcmRzLmNoOw0KICAgICAgaWYgKGNvb3Jkcy5saW5lIDwgdGhpcy5maXJzdCB8fCBjb29yZHMuY2ggPCAwKSB7IHJldHVybiAwIH0NCiAgICAgIHZhciBzZXBTaXplID0gdGhpcy5saW5lU2VwYXJhdG9yKCkubGVuZ3RoOw0KICAgICAgdGhpcy5pdGVyKHRoaXMuZmlyc3QsIGNvb3Jkcy5saW5lLCBmdW5jdGlvbiAobGluZSkgeyAvLyBpdGVyIGFib3J0cyB3aGVuIGNhbGxiYWNrIHJldHVybnMgYSB0cnV0aHkgdmFsdWUNCiAgICAgICAgaW5kZXggKz0gbGluZS50ZXh0Lmxlbmd0aCArIHNlcFNpemU7DQogICAgICB9KTsNCiAgICAgIHJldHVybiBpbmRleA0KICAgIH0sDQoNCiAgICBjb3B5OiBmdW5jdGlvbihjb3B5SGlzdG9yeSkgew0KICAgICAgdmFyIGRvYyA9IG5ldyBEb2MoZ2V0TGluZXModGhpcywgdGhpcy5maXJzdCwgdGhpcy5maXJzdCArIHRoaXMuc2l6ZSksDQogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVPcHRpb24sIHRoaXMuZmlyc3QsIHRoaXMubGluZVNlcCwgdGhpcy5kaXJlY3Rpb24pOw0KICAgICAgZG9jLnNjcm9sbFRvcCA9IHRoaXMuc2Nyb2xsVG9wOyBkb2Muc2Nyb2xsTGVmdCA9IHRoaXMuc2Nyb2xsTGVmdDsNCiAgICAgIGRvYy5zZWwgPSB0aGlzLnNlbDsNCiAgICAgIGRvYy5leHRlbmQgPSBmYWxzZTsNCiAgICAgIGlmIChjb3B5SGlzdG9yeSkgew0KICAgICAgICBkb2MuaGlzdG9yeS51bmRvRGVwdGggPSB0aGlzLmhpc3RvcnkudW5kb0RlcHRoOw0KICAgICAgICBkb2Muc2V0SGlzdG9yeSh0aGlzLmdldEhpc3RvcnkoKSk7DQogICAgICB9DQogICAgICByZXR1cm4gZG9jDQogICAgfSwNCg0KICAgIGxpbmtlZERvYzogZnVuY3Rpb24ob3B0aW9ucykgew0KICAgICAgaWYgKCFvcHRpb25zKSB7IG9wdGlvbnMgPSB7fTsgfQ0KICAgICAgdmFyIGZyb20gPSB0aGlzLmZpcnN0LCB0byA9IHRoaXMuZmlyc3QgKyB0aGlzLnNpemU7DQogICAgICBpZiAob3B0aW9ucy5mcm9tICE9IG51bGwgJiYgb3B0aW9ucy5mcm9tID4gZnJvbSkgeyBmcm9tID0gb3B0aW9ucy5mcm9tOyB9DQogICAgICBpZiAob3B0aW9ucy50byAhPSBudWxsICYmIG9wdGlvbnMudG8gPCB0bykgeyB0byA9IG9wdGlvbnMudG87IH0NCiAgICAgIHZhciBjb3B5ID0gbmV3IERvYyhnZXRMaW5lcyh0aGlzLCBmcm9tLCB0byksIG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGVPcHRpb24sIGZyb20sIHRoaXMubGluZVNlcCwgdGhpcy5kaXJlY3Rpb24pOw0KICAgICAgaWYgKG9wdGlvbnMuc2hhcmVkSGlzdCkgeyBjb3B5Lmhpc3RvcnkgPSB0aGlzLmhpc3RvcnkNCiAgICAgIDsgfSh0aGlzLmxpbmtlZCB8fCAodGhpcy5saW5rZWQgPSBbXSkpLnB1c2goe2RvYzogY29weSwgc2hhcmVkSGlzdDogb3B0aW9ucy5zaGFyZWRIaXN0fSk7DQogICAgICBjb3B5LmxpbmtlZCA9IFt7ZG9jOiB0aGlzLCBpc1BhcmVudDogdHJ1ZSwgc2hhcmVkSGlzdDogb3B0aW9ucy5zaGFyZWRIaXN0fV07DQogICAgICBjb3B5U2hhcmVkTWFya2Vycyhjb3B5LCBmaW5kU2hhcmVkTWFya2Vycyh0aGlzKSk7DQogICAgICByZXR1cm4gY29weQ0KICAgIH0sDQogICAgdW5saW5rRG9jOiBmdW5jdGlvbihvdGhlcikgew0KICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIENvZGVNaXJyb3IpIHsgb3RoZXIgPSBvdGhlci5kb2M7IH0NCiAgICAgIGlmICh0aGlzLmxpbmtlZCkgeyBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGlua2VkLmxlbmd0aDsgKytpKSB7DQogICAgICAgIHZhciBsaW5rID0gdGhpcyQxLmxpbmtlZFtpXTsNCiAgICAgICAgaWYgKGxpbmsuZG9jICE9IG90aGVyKSB7IGNvbnRpbnVlIH0NCiAgICAgICAgdGhpcyQxLmxpbmtlZC5zcGxpY2UoaSwgMSk7DQogICAgICAgIG90aGVyLnVubGlua0RvYyh0aGlzJDEpOw0KICAgICAgICBkZXRhY2hTaGFyZWRNYXJrZXJzKGZpbmRTaGFyZWRNYXJrZXJzKHRoaXMkMSkpOw0KICAgICAgICBicmVhaw0KICAgICAgfSB9DQogICAgICAvLyBJZiB0aGUgaGlzdG9yaWVzIHdlcmUgc2hhcmVkLCBzcGxpdCB0aGVtIGFnYWluDQogICAgICBpZiAob3RoZXIuaGlzdG9yeSA9PSB0aGlzLmhpc3RvcnkpIHsNCiAgICAgICAgdmFyIHNwbGl0SWRzID0gW290aGVyLmlkXTsNCiAgICAgICAgbGlua2VkRG9jcyhvdGhlciwgZnVuY3Rpb24gKGRvYykgeyByZXR1cm4gc3BsaXRJZHMucHVzaChkb2MuaWQpOyB9LCB0cnVlKTsNCiAgICAgICAgb3RoZXIuaGlzdG9yeSA9IG5ldyBIaXN0b3J5KG51bGwpOw0KICAgICAgICBvdGhlci5oaXN0b3J5LmRvbmUgPSBjb3B5SGlzdG9yeUFycmF5KHRoaXMuaGlzdG9yeS5kb25lLCBzcGxpdElkcyk7DQogICAgICAgIG90aGVyLmhpc3RvcnkudW5kb25lID0gY29weUhpc3RvcnlBcnJheSh0aGlzLmhpc3RvcnkudW5kb25lLCBzcGxpdElkcyk7DQogICAgICB9DQogICAgfSwNCiAgICBpdGVyTGlua2VkRG9jczogZnVuY3Rpb24oZikge2xpbmtlZERvY3ModGhpcywgZik7fSwNCg0KICAgIGdldE1vZGU6IGZ1bmN0aW9uKCkge3JldHVybiB0aGlzLm1vZGV9LA0KICAgIGdldEVkaXRvcjogZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXMuY219LA0KDQogICAgc3BsaXRMaW5lczogZnVuY3Rpb24oc3RyKSB7DQogICAgICBpZiAodGhpcy5saW5lU2VwKSB7IHJldHVybiBzdHIuc3BsaXQodGhpcy5saW5lU2VwKSB9DQogICAgICByZXR1cm4gc3BsaXRMaW5lc0F1dG8oc3RyKQ0KICAgIH0sDQogICAgbGluZVNlcGFyYXRvcjogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmxpbmVTZXAgfHwgIlxuIiB9LA0KDQogICAgc2V0RGlyZWN0aW9uOiBkb2NNZXRob2RPcChmdW5jdGlvbiAoZGlyKSB7DQogICAgICBpZiAoZGlyICE9ICJydGwiKSB7IGRpciA9ICJsdHIiOyB9DQogICAgICBpZiAoZGlyID09IHRoaXMuZGlyZWN0aW9uKSB7IHJldHVybiB9DQogICAgICB0aGlzLmRpcmVjdGlvbiA9IGRpcjsNCiAgICAgIHRoaXMuaXRlcihmdW5jdGlvbiAobGluZSkgeyByZXR1cm4gbGluZS5vcmRlciA9IG51bGw7IH0pOw0KICAgICAgaWYgKHRoaXMuY20pIHsgZGlyZWN0aW9uQ2hhbmdlZCh0aGlzLmNtKTsgfQ0KICAgIH0pDQogIH0pOw0KDQogIC8vIFB1YmxpYyBhbGlhcy4NCiAgRG9jLnByb3RvdHlwZS5lYWNoTGluZSA9IERvYy5wcm90b3R5cGUuaXRlcjsNCg0KICAvLyBLbHVkZ2UgdG8gd29yayBhcm91bmQgc3RyYW5nZSBJRSBiZWhhdmlvciB3aGVyZSBpdCdsbCBzb21ldGltZXMNCiAgLy8gcmUtZmlyZSBhIHNlcmllcyBvZiBkcmFnLXJlbGF0ZWQgZXZlbnRzIHJpZ2h0IGFmdGVyIHRoZSBkcm9wICgjMTU1MSkNCiAgdmFyIGxhc3REcm9wID0gMDsNCg0KICBmdW5jdGlvbiBvbkRyb3AoZSkgew0KICAgIHZhciBjbSA9IHRoaXM7DQogICAgY2xlYXJEcmFnQ3Vyc29yKGNtKTsNCiAgICBpZiAoc2lnbmFsRE9NRXZlbnQoY20sIGUpIHx8IGV2ZW50SW5XaWRnZXQoY20uZGlzcGxheSwgZSkpDQogICAgICB7IHJldHVybiB9DQogICAgZV9wcmV2ZW50RGVmYXVsdChlKTsNCiAgICBpZiAoaWUpIHsgbGFzdERyb3AgPSArbmV3IERhdGU7IH0NCiAgICB2YXIgcG9zID0gcG9zRnJvbU1vdXNlKGNtLCBlLCB0cnVlKSwgZmlsZXMgPSBlLmRhdGFUcmFuc2Zlci5maWxlczsNCiAgICBpZiAoIXBvcyB8fCBjbS5pc1JlYWRPbmx5KCkpIHsgcmV0dXJuIH0NCiAgICAvLyBNaWdodCBiZSBhIGZpbGUgZHJvcCwgaW4gd2hpY2ggY2FzZSB3ZSBzaW1wbHkgZXh0cmFjdCB0aGUgdGV4dA0KICAgIC8vIGFuZCBpbnNlcnQgaXQuDQogICAgaWYgKGZpbGVzICYmIGZpbGVzLmxlbmd0aCAmJiB3aW5kb3cuRmlsZVJlYWRlciAmJiB3aW5kb3cuRmlsZSkgew0KICAgICAgdmFyIG4gPSBmaWxlcy5sZW5ndGgsIHRleHQgPSBBcnJheShuKSwgcmVhZCA9IDA7DQogICAgICB2YXIgbWFya0FzUmVhZEFuZFBhc3RlSWZBbGxGaWxlc0FyZVJlYWQgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgIGlmICgrK3JlYWQgPT0gbikgew0KICAgICAgICAgIG9wZXJhdGlvbihjbSwgZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgcG9zID0gY2xpcFBvcyhjbS5kb2MsIHBvcyk7DQogICAgICAgICAgICB2YXIgY2hhbmdlID0ge2Zyb206IHBvcywgdG86IHBvcywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogY20uZG9jLnNwbGl0TGluZXMoDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gdCAhPSBudWxsOyB9KS5qb2luKGNtLmRvYy5saW5lU2VwYXJhdG9yKCkpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luOiAicGFzdGUifTsNCiAgICAgICAgICAgIG1ha2VDaGFuZ2UoY20uZG9jLCBjaGFuZ2UpOw0KICAgICAgICAgICAgc2V0U2VsZWN0aW9uUmVwbGFjZUhpc3RvcnkoY20uZG9jLCBzaW1wbGVTZWxlY3Rpb24oY2xpcFBvcyhjbS5kb2MsIHBvcyksIGNsaXBQb3MoY20uZG9jLCBjaGFuZ2VFbmQoY2hhbmdlKSkpKTsNCiAgICAgICAgICB9KSgpOw0KICAgICAgICB9DQogICAgICB9Ow0KICAgICAgdmFyIHJlYWRUZXh0RnJvbUZpbGUgPSBmdW5jdGlvbiAoZmlsZSwgaSkgew0KICAgICAgICBpZiAoY20ub3B0aW9ucy5hbGxvd0Ryb3BGaWxlVHlwZXMgJiYNCiAgICAgICAgICAgIGluZGV4T2YoY20ub3B0aW9ucy5hbGxvd0Ryb3BGaWxlVHlwZXMsIGZpbGUudHlwZSkgPT0gLTEpIHsNCiAgICAgICAgICBtYXJrQXNSZWFkQW5kUGFzdGVJZkFsbEZpbGVzQXJlUmVhZCgpOw0KICAgICAgICAgIHJldHVybg0KICAgICAgICB9DQogICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcjsNCiAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtYXJrQXNSZWFkQW5kUGFzdGVJZkFsbEZpbGVzQXJlUmVhZCgpOyB9Ow0KICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgIHZhciBjb250ZW50ID0gcmVhZGVyLnJlc3VsdDsNCiAgICAgICAgICBpZiAoL1tceDAwLVx4MDhceDBlLVx4MWZdezJ9Ly50ZXN0KGNvbnRlbnQpKSB7DQogICAgICAgICAgICBtYXJrQXNSZWFkQW5kUGFzdGVJZkFsbEZpbGVzQXJlUmVhZCgpOw0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgfQ0KICAgICAgICAgIHRleHRbaV0gPSBjb250ZW50Ow0KICAgICAgICAgIG1hcmtBc1JlYWRBbmRQYXN0ZUlmQWxsRmlsZXNBcmVSZWFkKCk7DQogICAgICAgIH07DQogICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpOw0KICAgICAgfTsNCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZXMubGVuZ3RoOyBpKyspIHsgcmVhZFRleHRGcm9tRmlsZShmaWxlc1tpXSwgaSk7IH0NCiAgICB9IGVsc2UgeyAvLyBOb3JtYWwgZHJvcA0KICAgICAgLy8gRG9uJ3QgZG8gYSByZXBsYWNlIGlmIHRoZSBkcm9wIGhhcHBlbmVkIGluc2lkZSBvZiB0aGUgc2VsZWN0ZWQgdGV4dC4NCiAgICAgIGlmIChjbS5zdGF0ZS5kcmFnZ2luZ1RleHQgJiYgY20uZG9jLnNlbC5jb250YWlucyhwb3MpID4gLTEpIHsNCiAgICAgICAgY20uc3RhdGUuZHJhZ2dpbmdUZXh0KGUpOw0KICAgICAgICAvLyBFbnN1cmUgdGhlIGVkaXRvciBpcyByZS1mb2N1c2VkDQogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gY20uZGlzcGxheS5pbnB1dC5mb2N1cygpOyB9LCAyMCk7DQogICAgICAgIHJldHVybg0KICAgICAgfQ0KICAgICAgdHJ5IHsNCiAgICAgICAgdmFyIHRleHQkMSA9IGUuZGF0YVRyYW5zZmVyLmdldERhdGEoIlRleHQiKTsNCiAgICAgICAgaWYgKHRleHQkMSkgew0KICAgICAgICAgIHZhciBzZWxlY3RlZDsNCiAgICAgICAgICBpZiAoY20uc3RhdGUuZHJhZ2dpbmdUZXh0ICYmICFjbS5zdGF0ZS5kcmFnZ2luZ1RleHQuY29weSkNCiAgICAgICAgICAgIHsgc2VsZWN0ZWQgPSBjbS5saXN0U2VsZWN0aW9ucygpOyB9DQogICAgICAgICAgc2V0U2VsZWN0aW9uTm9VbmRvKGNtLmRvYywgc2ltcGxlU2VsZWN0aW9uKHBvcywgcG9zKSk7DQogICAgICAgICAgaWYgKHNlbGVjdGVkKSB7IGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHNlbGVjdGVkLmxlbmd0aDsgKytpJDEpDQogICAgICAgICAgICB7IHJlcGxhY2VSYW5nZShjbS5kb2MsICIiLCBzZWxlY3RlZFtpJDFdLmFuY2hvciwgc2VsZWN0ZWRbaSQxXS5oZWFkLCAiZHJhZyIpOyB9IH0NCiAgICAgICAgICBjbS5yZXBsYWNlU2VsZWN0aW9uKHRleHQkMSwgImFyb3VuZCIsICJwYXN0ZSIpOw0KICAgICAgICAgIGNtLmRpc3BsYXkuaW5wdXQuZm9jdXMoKTsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgICAgY2F0Y2goZSl7fQ0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIG9uRHJhZ1N0YXJ0KGNtLCBlKSB7DQogICAgaWYgKGllICYmICghY20uc3RhdGUuZHJhZ2dpbmdUZXh0IHx8ICtuZXcgRGF0ZSAtIGxhc3REcm9wIDwgMTAwKSkgeyBlX3N0b3AoZSk7IHJldHVybiB9DQogICAgaWYgKHNpZ25hbERPTUV2ZW50KGNtLCBlKSB8fCBldmVudEluV2lkZ2V0KGNtLmRpc3BsYXksIGUpKSB7IHJldHVybiB9DQoNCiAgICBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKCJUZXh0IiwgY20uZ2V0U2VsZWN0aW9uKCkpOw0KICAgIGUuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSAiY29weU1vdmUiOw0KDQogICAgLy8gVXNlIGR1bW15IGltYWdlIGluc3RlYWQgb2YgZGVmYXVsdCBicm93c2VycyBpbWFnZS4NCiAgICAvLyBSZWNlbnQgU2FmYXJpICh+Ni4wLjIpIGhhdmUgYSB0ZW5kZW5jeSB0byBzZWdmYXVsdCB3aGVuIHRoaXMgaGFwcGVucywgc28gd2UgZG9uJ3QgZG8gaXQgdGhlcmUuDQogICAgaWYgKGUuZGF0YVRyYW5zZmVyLnNldERyYWdJbWFnZSAmJiAhc2FmYXJpKSB7DQogICAgICB2YXIgaW1nID0gZWx0KCJpbWciLCBudWxsLCBudWxsLCAicG9zaXRpb246IGZpeGVkOyBsZWZ0OiAwOyB0b3A6IDA7Iik7DQogICAgICBpbWcuc3JjID0gImRhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaEFRQUJBQUFBQUNINUJBRUtBQUVBTEFBQUFBQUJBQUVBQUFJQ1RBRUFPdz09IjsNCiAgICAgIGlmIChwcmVzdG8pIHsNCiAgICAgICAgaW1nLndpZHRoID0gaW1nLmhlaWdodCA9IDE7DQogICAgICAgIGNtLmRpc3BsYXkud3JhcHBlci5hcHBlbmRDaGlsZChpbWcpOw0KICAgICAgICAvLyBGb3JjZSBhIHJlbGF5b3V0LCBvciBPcGVyYSB3b24ndCB1c2Ugb3VyIGltYWdlIGZvciBzb21lIG9ic2N1cmUgcmVhc29uDQogICAgICAgIGltZy5fdG9wID0gaW1nLm9mZnNldFRvcDsNCiAgICAgIH0NCiAgICAgIGUuZGF0YVRyYW5zZmVyLnNldERyYWdJbWFnZShpbWcsIDAsIDApOw0KICAgICAgaWYgKHByZXN0bykgeyBpbWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpbWcpOyB9DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gb25EcmFnT3ZlcihjbSwgZSkgew0KICAgIHZhciBwb3MgPSBwb3NGcm9tTW91c2UoY20sIGUpOw0KICAgIGlmICghcG9zKSB7IHJldHVybiB9DQogICAgdmFyIGZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7DQogICAgZHJhd1NlbGVjdGlvbkN1cnNvcihjbSwgcG9zLCBmcmFnKTsNCiAgICBpZiAoIWNtLmRpc3BsYXkuZHJhZ0N1cnNvcikgew0KICAgICAgY20uZGlzcGxheS5kcmFnQ3Vyc29yID0gZWx0KCJkaXYiLCBudWxsLCAiQ29kZU1pcnJvci1jdXJzb3JzIENvZGVNaXJyb3ItZHJhZ2N1cnNvcnMiKTsNCiAgICAgIGNtLmRpc3BsYXkubGluZVNwYWNlLmluc2VydEJlZm9yZShjbS5kaXNwbGF5LmRyYWdDdXJzb3IsIGNtLmRpc3BsYXkuY3Vyc29yRGl2KTsNCiAgICB9DQogICAgcmVtb3ZlQ2hpbGRyZW5BbmRBZGQoY20uZGlzcGxheS5kcmFnQ3Vyc29yLCBmcmFnKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGNsZWFyRHJhZ0N1cnNvcihjbSkgew0KICAgIGlmIChjbS5kaXNwbGF5LmRyYWdDdXJzb3IpIHsNCiAgICAgIGNtLmRpc3BsYXkubGluZVNwYWNlLnJlbW92ZUNoaWxkKGNtLmRpc3BsYXkuZHJhZ0N1cnNvcik7DQogICAgICBjbS5kaXNwbGF5LmRyYWdDdXJzb3IgPSBudWxsOw0KICAgIH0NCiAgfQ0KDQogIC8vIFRoZXNlIG11c3QgYmUgaGFuZGxlZCBjYXJlZnVsbHksIGJlY2F1c2UgbmFpdmVseSByZWdpc3RlcmluZyBhDQogIC8vIGhhbmRsZXIgZm9yIGVhY2ggZWRpdG9yIHdpbGwgY2F1c2UgdGhlIGVkaXRvcnMgdG8gbmV2ZXIgYmUNCiAgLy8gZ2FyYmFnZSBjb2xsZWN0ZWQuDQoNCiAgZnVuY3Rpb24gZm9yRWFjaENvZGVNaXJyb3IoZikgew0KICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSkgeyByZXR1cm4gfQ0KICAgIHZhciBieUNsYXNzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiQ29kZU1pcnJvciIpLCBlZGl0b3JzID0gW107DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieUNsYXNzLmxlbmd0aDsgaSsrKSB7DQogICAgICB2YXIgY20gPSBieUNsYXNzW2ldLkNvZGVNaXJyb3I7DQogICAgICBpZiAoY20pIHsgZWRpdG9ycy5wdXNoKGNtKTsgfQ0KICAgIH0NCiAgICBpZiAoZWRpdG9ycy5sZW5ndGgpIHsgZWRpdG9yc1swXS5vcGVyYXRpb24oZnVuY3Rpb24gKCkgew0KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlZGl0b3JzLmxlbmd0aDsgaSsrKSB7IGYoZWRpdG9yc1tpXSk7IH0NCiAgICB9KTsgfQ0KICB9DQoNCiAgdmFyIGdsb2JhbHNSZWdpc3RlcmVkID0gZmFsc2U7DQogIGZ1bmN0aW9uIGVuc3VyZUdsb2JhbEhhbmRsZXJzKCkgew0KICAgIGlmIChnbG9iYWxzUmVnaXN0ZXJlZCkgeyByZXR1cm4gfQ0KICAgIHJlZ2lzdGVyR2xvYmFsSGFuZGxlcnMoKTsNCiAgICBnbG9iYWxzUmVnaXN0ZXJlZCA9IHRydWU7DQogIH0NCiAgZnVuY3Rpb24gcmVnaXN0ZXJHbG9iYWxIYW5kbGVycygpIHsNCiAgICAvLyBXaGVuIHRoZSB3aW5kb3cgcmVzaXplcywgd2UgbmVlZCB0byByZWZyZXNoIGFjdGl2ZSBlZGl0b3JzLg0KICAgIHZhciByZXNpemVUaW1lcjsNCiAgICBvbih3aW5kb3csICJyZXNpemUiLCBmdW5jdGlvbiAoKSB7DQogICAgICBpZiAocmVzaXplVGltZXIgPT0gbnVsbCkgeyByZXNpemVUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgICByZXNpemVUaW1lciA9IG51bGw7DQogICAgICAgIGZvckVhY2hDb2RlTWlycm9yKG9uUmVzaXplKTsNCiAgICAgIH0sIDEwMCk7IH0NCiAgICB9KTsNCiAgICAvLyBXaGVuIHRoZSB3aW5kb3cgbG9zZXMgZm9jdXMsIHdlIHdhbnQgdG8gc2hvdyB0aGUgZWRpdG9yIGFzIGJsdXJyZWQNCiAgICBvbih3aW5kb3csICJibHVyIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZm9yRWFjaENvZGVNaXJyb3Iob25CbHVyKTsgfSk7DQogIH0NCiAgLy8gQ2FsbGVkIHdoZW4gdGhlIHdpbmRvdyByZXNpemVzDQogIGZ1bmN0aW9uIG9uUmVzaXplKGNtKSB7DQogICAgdmFyIGQgPSBjbS5kaXNwbGF5Ow0KICAgIC8vIE1pZ2h0IGJlIGEgdGV4dCBzY2FsaW5nIG9wZXJhdGlvbiwgY2xlYXIgc2l6ZSBjYWNoZXMuDQogICAgZC5jYWNoZWRDaGFyV2lkdGggPSBkLmNhY2hlZFRleHRIZWlnaHQgPSBkLmNhY2hlZFBhZGRpbmdIID0gbnVsbDsNCiAgICBkLnNjcm9sbGJhcnNDbGlwcGVkID0gZmFsc2U7DQogICAgY20uc2V0U2l6ZSgpOw0KICB9DQoNCiAgdmFyIGtleU5hbWVzID0gew0KICAgIDM6ICJQYXVzZSIsIDg6ICJCYWNrc3BhY2UiLCA5OiAiVGFiIiwgMTM6ICJFbnRlciIsIDE2OiAiU2hpZnQiLCAxNzogIkN0cmwiLCAxODogIkFsdCIsDQogICAgMTk6ICJQYXVzZSIsIDIwOiAiQ2Fwc0xvY2siLCAyNzogIkVzYyIsIDMyOiAiU3BhY2UiLCAzMzogIlBhZ2VVcCIsIDM0OiAiUGFnZURvd24iLCAzNTogIkVuZCIsDQogICAgMzY6ICJIb21lIiwgMzc6ICJMZWZ0IiwgMzg6ICJVcCIsIDM5OiAiUmlnaHQiLCA0MDogIkRvd24iLCA0NDogIlByaW50U2NybiIsIDQ1OiAiSW5zZXJ0IiwNCiAgICA0NjogIkRlbGV0ZSIsIDU5OiAiOyIsIDYxOiAiPSIsIDkxOiAiTW9kIiwgOTI6ICJNb2QiLCA5MzogIk1vZCIsDQogICAgMTA2OiAiKiIsIDEwNzogIj0iLCAxMDk6ICItIiwgMTEwOiAiLiIsIDExMTogIi8iLCAxNDU6ICJTY3JvbGxMb2NrIiwNCiAgICAxNzM6ICItIiwgMTg2OiAiOyIsIDE4NzogIj0iLCAxODg6ICIsIiwgMTg5OiAiLSIsIDE5MDogIi4iLCAxOTE6ICIvIiwgMTkyOiAiYCIsIDIxOTogIlsiLCAyMjA6ICJcXCIsDQogICAgMjIxOiAiXSIsIDIyMjogIiciLCA2MzIzMjogIlVwIiwgNjMyMzM6ICJEb3duIiwgNjMyMzQ6ICJMZWZ0IiwgNjMyMzU6ICJSaWdodCIsIDYzMjcyOiAiRGVsZXRlIiwNCiAgICA2MzI3MzogIkhvbWUiLCA2MzI3NTogIkVuZCIsIDYzMjc2OiAiUGFnZVVwIiwgNjMyNzc6ICJQYWdlRG93biIsIDYzMzAyOiAiSW5zZXJ0Ig0KICB9Ow0KDQogIC8vIE51bWJlciBrZXlzDQogIGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykgeyBrZXlOYW1lc1tpICsgNDhdID0ga2V5TmFtZXNbaSArIDk2XSA9IFN0cmluZyhpKTsgfQ0KICAvLyBBbHBoYWJldGljIGtleXMNCiAgZm9yICh2YXIgaSQxID0gNjU7IGkkMSA8PSA5MDsgaSQxKyspIHsga2V5TmFtZXNbaSQxXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoaSQxKTsgfQ0KICAvLyBGdW5jdGlvbiBrZXlzDQogIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8PSAxMjsgaSQyKyspIHsga2V5TmFtZXNbaSQyICsgMTExXSA9IGtleU5hbWVzW2kkMiArIDYzMjM1XSA9ICJGIiArIGkkMjsgfQ0KDQogIHZhciBrZXlNYXAgPSB7fTsNCg0KICBrZXlNYXAuYmFzaWMgPSB7DQogICAgIkxlZnQiOiAiZ29DaGFyTGVmdCIsICJSaWdodCI6ICJnb0NoYXJSaWdodCIsICJVcCI6ICJnb0xpbmVVcCIsICJEb3duIjogImdvTGluZURvd24iLA0KICAgICJFbmQiOiAiZ29MaW5lRW5kIiwgIkhvbWUiOiAiZ29MaW5lU3RhcnRTbWFydCIsICJQYWdlVXAiOiAiZ29QYWdlVXAiLCAiUGFnZURvd24iOiAiZ29QYWdlRG93biIsDQogICAgIkRlbGV0ZSI6ICJkZWxDaGFyQWZ0ZXIiLCAiQmFja3NwYWNlIjogImRlbENoYXJCZWZvcmUiLCAiU2hpZnQtQmFja3NwYWNlIjogImRlbENoYXJCZWZvcmUiLA0KICAgICJUYWIiOiAiZGVmYXVsdFRhYiIsICJTaGlmdC1UYWIiOiAiaW5kZW50QXV0byIsDQogICAgIkVudGVyIjogIm5ld2xpbmVBbmRJbmRlbnQiLCAiSW5zZXJ0IjogInRvZ2dsZU92ZXJ3cml0ZSIsDQogICAgIkVzYyI6ICJzaW5nbGVTZWxlY3Rpb24iDQogIH07DQogIC8vIE5vdGUgdGhhdCB0aGUgc2F2ZSBhbmQgZmluZC1yZWxhdGVkIGNvbW1hbmRzIGFyZW4ndCBkZWZpbmVkIGJ5DQogIC8vIGRlZmF1bHQuIFVzZXIgY29kZSBvciBhZGRvbnMgY2FuIGRlZmluZSB0aGVtLiBVbmtub3duIGNvbW1hbmRzDQogIC8vIGFyZSBzaW1wbHkgaWdub3JlZC4NCiAga2V5TWFwLnBjRGVmYXVsdCA9IHsNCiAgICAiQ3RybC1BIjogInNlbGVjdEFsbCIsICJDdHJsLUQiOiAiZGVsZXRlTGluZSIsICJDdHJsLVoiOiAidW5kbyIsICJTaGlmdC1DdHJsLVoiOiAicmVkbyIsICJDdHJsLVkiOiAicmVkbyIsDQogICAgIkN0cmwtSG9tZSI6ICJnb0RvY1N0YXJ0IiwgIkN0cmwtRW5kIjogImdvRG9jRW5kIiwgIkN0cmwtVXAiOiAiZ29MaW5lVXAiLCAiQ3RybC1Eb3duIjogImdvTGluZURvd24iLA0KICAgICJDdHJsLUxlZnQiOiAiZ29Hcm91cExlZnQiLCAiQ3RybC1SaWdodCI6ICJnb0dyb3VwUmlnaHQiLCAiQWx0LUxlZnQiOiAiZ29MaW5lU3RhcnQiLCAiQWx0LVJpZ2h0IjogImdvTGluZUVuZCIsDQogICAgIkN0cmwtQmFja3NwYWNlIjogImRlbEdyb3VwQmVmb3JlIiwgIkN0cmwtRGVsZXRlIjogImRlbEdyb3VwQWZ0ZXIiLCAiQ3RybC1TIjogInNhdmUiLCAiQ3RybC1GIjogImZpbmQiLA0KICAgICJDdHJsLUciOiAiZmluZE5leHQiLCAiU2hpZnQtQ3RybC1HIjogImZpbmRQcmV2IiwgIlNoaWZ0LUN0cmwtRiI6ICJyZXBsYWNlIiwgIlNoaWZ0LUN0cmwtUiI6ICJyZXBsYWNlQWxsIiwNCiAgICAiQ3RybC1bIjogImluZGVudExlc3MiLCAiQ3RybC1dIjogImluZGVudE1vcmUiLA0KICAgICJDdHJsLVUiOiAidW5kb1NlbGVjdGlvbiIsICJTaGlmdC1DdHJsLVUiOiAicmVkb1NlbGVjdGlvbiIsICJBbHQtVSI6ICJyZWRvU2VsZWN0aW9uIiwNCiAgICAiZmFsbHRocm91Z2giOiAiYmFzaWMiDQogIH07DQogIC8vIFZlcnkgYmFzaWMgcmVhZGxpbmUvZW1hY3Mtc3R5bGUgYmluZGluZ3MsIHdoaWNoIGFyZSBzdGFuZGFyZCBvbiBNYWMuDQogIGtleU1hcC5lbWFjc3kgPSB7DQogICAgIkN0cmwtRiI6ICJnb0NoYXJSaWdodCIsICJDdHJsLUIiOiAiZ29DaGFyTGVmdCIsICJDdHJsLVAiOiAiZ29MaW5lVXAiLCAiQ3RybC1OIjogImdvTGluZURvd24iLA0KICAgICJBbHQtRiI6ICJnb1dvcmRSaWdodCIsICJBbHQtQiI6ICJnb1dvcmRMZWZ0IiwgIkN0cmwtQSI6ICJnb0xpbmVTdGFydCIsICJDdHJsLUUiOiAiZ29MaW5lRW5kIiwNCiAgICAiQ3RybC1WIjogImdvUGFnZURvd24iLCAiU2hpZnQtQ3RybC1WIjogImdvUGFnZVVwIiwgIkN0cmwtRCI6ICJkZWxDaGFyQWZ0ZXIiLCAiQ3RybC1IIjogImRlbENoYXJCZWZvcmUiLA0KICAgICJBbHQtRCI6ICJkZWxXb3JkQWZ0ZXIiLCAiQWx0LUJhY2tzcGFjZSI6ICJkZWxXb3JkQmVmb3JlIiwgIkN0cmwtSyI6ICJraWxsTGluZSIsICJDdHJsLVQiOiAidHJhbnNwb3NlQ2hhcnMiLA0KICAgICJDdHJsLU8iOiAib3BlbkxpbmUiDQogIH07DQogIGtleU1hcC5tYWNEZWZhdWx0ID0gew0KICAgICJDbWQtQSI6ICJzZWxlY3RBbGwiLCAiQ21kLUQiOiAiZGVsZXRlTGluZSIsICJDbWQtWiI6ICJ1bmRvIiwgIlNoaWZ0LUNtZC1aIjogInJlZG8iLCAiQ21kLVkiOiAicmVkbyIsDQogICAgIkNtZC1Ib21lIjogImdvRG9jU3RhcnQiLCAiQ21kLVVwIjogImdvRG9jU3RhcnQiLCAiQ21kLUVuZCI6ICJnb0RvY0VuZCIsICJDbWQtRG93biI6ICJnb0RvY0VuZCIsICJBbHQtTGVmdCI6ICJnb0dyb3VwTGVmdCIsDQogICAgIkFsdC1SaWdodCI6ICJnb0dyb3VwUmlnaHQiLCAiQ21kLUxlZnQiOiAiZ29MaW5lTGVmdCIsICJDbWQtUmlnaHQiOiAiZ29MaW5lUmlnaHQiLCAiQWx0LUJhY2tzcGFjZSI6ICJkZWxHcm91cEJlZm9yZSIsDQogICAgIkN0cmwtQWx0LUJhY2tzcGFjZSI6ICJkZWxHcm91cEFmdGVyIiwgIkFsdC1EZWxldGUiOiAiZGVsR3JvdXBBZnRlciIsICJDbWQtUyI6ICJzYXZlIiwgIkNtZC1GIjogImZpbmQiLA0KICAgICJDbWQtRyI6ICJmaW5kTmV4dCIsICJTaGlmdC1DbWQtRyI6ICJmaW5kUHJldiIsICJDbWQtQWx0LUYiOiAicmVwbGFjZSIsICJTaGlmdC1DbWQtQWx0LUYiOiAicmVwbGFjZUFsbCIsDQogICAgIkNtZC1bIjogImluZGVudExlc3MiLCAiQ21kLV0iOiAiaW5kZW50TW9yZSIsICJDbWQtQmFja3NwYWNlIjogImRlbFdyYXBwZWRMaW5lTGVmdCIsICJDbWQtRGVsZXRlIjogImRlbFdyYXBwZWRMaW5lUmlnaHQiLA0KICAgICJDbWQtVSI6ICJ1bmRvU2VsZWN0aW9uIiwgIlNoaWZ0LUNtZC1VIjogInJlZG9TZWxlY3Rpb24iLCAiQ3RybC1VcCI6ICJnb0RvY1N0YXJ0IiwgIkN0cmwtRG93biI6ICJnb0RvY0VuZCIsDQogICAgImZhbGx0aHJvdWdoIjogWyJiYXNpYyIsICJlbWFjc3kiXQ0KICB9Ow0KICBrZXlNYXBbImRlZmF1bHQiXSA9IG1hYyA/IGtleU1hcC5tYWNEZWZhdWx0IDoga2V5TWFwLnBjRGVmYXVsdDsNCg0KICAvLyBLRVlNQVAgRElTUEFUQ0gNCg0KICBmdW5jdGlvbiBub3JtYWxpemVLZXlOYW1lKG5hbWUpIHsNCiAgICB2YXIgcGFydHMgPSBuYW1lLnNwbGl0KC8tKD8hJCkvKTsNCiAgICBuYW1lID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07DQogICAgdmFyIGFsdCwgY3RybCwgc2hpZnQsIGNtZDsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aCAtIDE7IGkrKykgew0KICAgICAgdmFyIG1vZCA9IHBhcnRzW2ldOw0KICAgICAgaWYgKC9eKGNtZHxtZXRhfG0pJC9pLnRlc3QobW9kKSkgeyBjbWQgPSB0cnVlOyB9DQogICAgICBlbHNlIGlmICgvXmEobHQpPyQvaS50ZXN0KG1vZCkpIHsgYWx0ID0gdHJ1ZTsgfQ0KICAgICAgZWxzZSBpZiAoL14oY3xjdHJsfGNvbnRyb2wpJC9pLnRlc3QobW9kKSkgeyBjdHJsID0gdHJ1ZTsgfQ0KICAgICAgZWxzZSBpZiAoL15zKGhpZnQpPyQvaS50ZXN0KG1vZCkpIHsgc2hpZnQgPSB0cnVlOyB9DQogICAgICBlbHNlIHsgdGhyb3cgbmV3IEVycm9yKCJVbnJlY29nbml6ZWQgbW9kaWZpZXIgbmFtZTogIiArIG1vZCkgfQ0KICAgIH0NCiAgICBpZiAoYWx0KSB7IG5hbWUgPSAiQWx0LSIgKyBuYW1lOyB9DQogICAgaWYgKGN0cmwpIHsgbmFtZSA9ICJDdHJsLSIgKyBuYW1lOyB9DQogICAgaWYgKGNtZCkgeyBuYW1lID0gIkNtZC0iICsgbmFtZTsgfQ0KICAgIGlmIChzaGlmdCkgeyBuYW1lID0gIlNoaWZ0LSIgKyBuYW1lOyB9DQogICAgcmV0dXJuIG5hbWUNCiAgfQ0KDQogIC8vIFRoaXMgaXMgYSBrbHVkZ2UgdG8ga2VlcCBrZXltYXBzIG1vc3RseSB3b3JraW5nIGFzIHJhdyBvYmplY3RzDQogIC8vIChiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSkgd2hpbGUgYXQgdGhlIHNhbWUgdGltZSBzdXBwb3J0IGZlYXR1cmVzDQogIC8vIGxpa2Ugbm9ybWFsaXphdGlvbiBhbmQgbXVsdGktc3Ryb2tlIGtleSBiaW5kaW5ncy4gSXQgY29tcGlsZXMgYQ0KICAvLyBuZXcgbm9ybWFsaXplZCBrZXltYXAsIGFuZCB0aGVuIHVwZGF0ZXMgdGhlIG9sZCBvYmplY3QgdG8gcmVmbGVjdA0KICAvLyB0aGlzLg0KICBmdW5jdGlvbiBub3JtYWxpemVLZXlNYXAoa2V5bWFwKSB7DQogICAgdmFyIGNvcHkgPSB7fTsNCiAgICBmb3IgKHZhciBrZXluYW1lIGluIGtleW1hcCkgeyBpZiAoa2V5bWFwLmhhc093blByb3BlcnR5KGtleW5hbWUpKSB7DQogICAgICB2YXIgdmFsdWUgPSBrZXltYXBba2V5bmFtZV07DQogICAgICBpZiAoL14obmFtZXxmYWxsdGhyb3VnaHwoZGV8YXQpdGFjaCkkLy50ZXN0KGtleW5hbWUpKSB7IGNvbnRpbnVlIH0NCiAgICAgIGlmICh2YWx1ZSA9PSAiLi4uIikgeyBkZWxldGUga2V5bWFwW2tleW5hbWVdOyBjb250aW51ZSB9DQoNCiAgICAgIHZhciBrZXlzID0gbWFwKGtleW5hbWUuc3BsaXQoIiAiKSwgbm9ybWFsaXplS2V5TmFtZSk7DQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgdmFyIHZhbCA9ICh2b2lkIDApLCBuYW1lID0gKHZvaWQgMCk7DQogICAgICAgIGlmIChpID09IGtleXMubGVuZ3RoIC0gMSkgew0KICAgICAgICAgIG5hbWUgPSBrZXlzLmpvaW4oIiAiKTsNCiAgICAgICAgICB2YWwgPSB2YWx1ZTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICBuYW1lID0ga2V5cy5zbGljZSgwLCBpICsgMSkuam9pbigiICIpOw0KICAgICAgICAgIHZhbCA9ICIuLi4iOw0KICAgICAgICB9DQogICAgICAgIHZhciBwcmV2ID0gY29weVtuYW1lXTsNCiAgICAgICAgaWYgKCFwcmV2KSB7IGNvcHlbbmFtZV0gPSB2YWw7IH0NCiAgICAgICAgZWxzZSBpZiAocHJldiAhPSB2YWwpIHsgdGhyb3cgbmV3IEVycm9yKCJJbmNvbnNpc3RlbnQgYmluZGluZ3MgZm9yICIgKyBuYW1lKSB9DQogICAgICB9DQogICAgICBkZWxldGUga2V5bWFwW2tleW5hbWVdOw0KICAgIH0gfQ0KICAgIGZvciAodmFyIHByb3AgaW4gY29weSkgeyBrZXltYXBbcHJvcF0gPSBjb3B5W3Byb3BdOyB9DQogICAgcmV0dXJuIGtleW1hcA0KICB9DQoNCiAgZnVuY3Rpb24gbG9va3VwS2V5KGtleSwgbWFwJCQxLCBoYW5kbGUsIGNvbnRleHQpIHsNCiAgICBtYXAkJDEgPSBnZXRLZXlNYXAobWFwJCQxKTsNCiAgICB2YXIgZm91bmQgPSBtYXAkJDEuY2FsbCA/IG1hcCQkMS5jYWxsKGtleSwgY29udGV4dCkgOiBtYXAkJDFba2V5XTsNCiAgICBpZiAoZm91bmQgPT09IGZhbHNlKSB7IHJldHVybiAibm90aGluZyIgfQ0KICAgIGlmIChmb3VuZCA9PT0gIi4uLiIpIHsgcmV0dXJuICJtdWx0aSIgfQ0KICAgIGlmIChmb3VuZCAhPSBudWxsICYmIGhhbmRsZShmb3VuZCkpIHsgcmV0dXJuICJoYW5kbGVkIiB9DQoNCiAgICBpZiAobWFwJCQxLmZhbGx0aHJvdWdoKSB7DQogICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG1hcCQkMS5mYWxsdGhyb3VnaCkgIT0gIltvYmplY3QgQXJyYXldIikNCiAgICAgICAgeyByZXR1cm4gbG9va3VwS2V5KGtleSwgbWFwJCQxLmZhbGx0aHJvdWdoLCBoYW5kbGUsIGNvbnRleHQpIH0NCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFwJCQxLmZhbGx0aHJvdWdoLmxlbmd0aDsgaSsrKSB7DQogICAgICAgIHZhciByZXN1bHQgPSBsb29rdXBLZXkoa2V5LCBtYXAkJDEuZmFsbHRocm91Z2hbaV0sIGhhbmRsZSwgY29udGV4dCk7DQogICAgICAgIGlmIChyZXN1bHQpIHsgcmV0dXJuIHJlc3VsdCB9DQogICAgICB9DQogICAgfQ0KICB9DQoNCiAgLy8gTW9kaWZpZXIga2V5IHByZXNzZXMgZG9uJ3QgY291bnQgYXMgJ3JlYWwnIGtleSBwcmVzc2VzIGZvciB0aGUNCiAgLy8gcHVycG9zZSBvZiBrZXltYXAgZmFsbHRocm91Z2guDQogIGZ1bmN0aW9uIGlzTW9kaWZpZXJLZXkodmFsdWUpIHsNCiAgICB2YXIgbmFtZSA9IHR5cGVvZiB2YWx1ZSA9PSAic3RyaW5nIiA/IHZhbHVlIDoga2V5TmFtZXNbdmFsdWUua2V5Q29kZV07DQogICAgcmV0dXJuIG5hbWUgPT0gIkN0cmwiIHx8IG5hbWUgPT0gIkFsdCIgfHwgbmFtZSA9PSAiU2hpZnQiIHx8IG5hbWUgPT0gIk1vZCINCiAgfQ0KDQogIGZ1bmN0aW9uIGFkZE1vZGlmaWVyTmFtZXMobmFtZSwgZXZlbnQsIG5vU2hpZnQpIHsNCiAgICB2YXIgYmFzZSA9IG5hbWU7DQogICAgaWYgKGV2ZW50LmFsdEtleSAmJiBiYXNlICE9ICJBbHQiKSB7IG5hbWUgPSAiQWx0LSIgKyBuYW1lOyB9DQogICAgaWYgKChmbGlwQ3RybENtZCA/IGV2ZW50Lm1ldGFLZXkgOiBldmVudC5jdHJsS2V5KSAmJiBiYXNlICE9ICJDdHJsIikgeyBuYW1lID0gIkN0cmwtIiArIG5hbWU7IH0NCiAgICBpZiAoKGZsaXBDdHJsQ21kID8gZXZlbnQuY3RybEtleSA6IGV2ZW50Lm1ldGFLZXkpICYmIGJhc2UgIT0gIkNtZCIpIHsgbmFtZSA9ICJDbWQtIiArIG5hbWU7IH0NCiAgICBpZiAoIW5vU2hpZnQgJiYgZXZlbnQuc2hpZnRLZXkgJiYgYmFzZSAhPSAiU2hpZnQiKSB7IG5hbWUgPSAiU2hpZnQtIiArIG5hbWU7IH0NCiAgICByZXR1cm4gbmFtZQ0KICB9DQoNCiAgLy8gTG9vayB1cCB0aGUgbmFtZSBvZiBhIGtleSBhcyBpbmRpY2F0ZWQgYnkgYW4gZXZlbnQgb2JqZWN0Lg0KICBmdW5jdGlvbiBrZXlOYW1lKGV2ZW50LCBub1NoaWZ0KSB7DQogICAgaWYgKHByZXN0byAmJiBldmVudC5rZXlDb2RlID09IDM0ICYmIGV2ZW50WyJjaGFyIl0pIHsgcmV0dXJuIGZhbHNlIH0NCiAgICB2YXIgbmFtZSA9IGtleU5hbWVzW2V2ZW50LmtleUNvZGVdOw0KICAgIGlmIChuYW1lID09IG51bGwgfHwgZXZlbnQuYWx0R3JhcGhLZXkpIHsgcmV0dXJuIGZhbHNlIH0NCiAgICAvLyBDdHJsLVNjcm9sbExvY2sgaGFzIGtleUNvZGUgMywgc2FtZSBhcyBDdHJsLVBhdXNlLA0KICAgIC8vIHNvIHdlJ2xsIHVzZSBldmVudC5jb2RlIHdoZW4gYXZhaWxhYmxlIChDaHJvbWUgNDgrLCBGRiAzOCssIFNhZmFyaSAxMC4xKykNCiAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSAzICYmIGV2ZW50LmNvZGUpIHsgbmFtZSA9IGV2ZW50LmNvZGU7IH0NCiAgICByZXR1cm4gYWRkTW9kaWZpZXJOYW1lcyhuYW1lLCBldmVudCwgbm9TaGlmdCkNCiAgfQ0KDQogIGZ1bmN0aW9uIGdldEtleU1hcCh2YWwpIHsNCiAgICByZXR1cm4gdHlwZW9mIHZhbCA9PSAic3RyaW5nIiA/IGtleU1hcFt2YWxdIDogdmFsDQogIH0NCg0KICAvLyBIZWxwZXIgZm9yIGRlbGV0aW5nIHRleHQgbmVhciB0aGUgc2VsZWN0aW9uKHMpLCB1c2VkIHRvIGltcGxlbWVudA0KICAvLyBiYWNrc3BhY2UsIGRlbGV0ZSwgYW5kIHNpbWlsYXIgZnVuY3Rpb25hbGl0eS4NCiAgZnVuY3Rpb24gZGVsZXRlTmVhclNlbGVjdGlvbihjbSwgY29tcHV0ZSkgew0KICAgIHZhciByYW5nZXMgPSBjbS5kb2Muc2VsLnJhbmdlcywga2lsbCA9IFtdOw0KICAgIC8vIEJ1aWxkIHVwIGEgc2V0IG9mIHJhbmdlcyB0byBraWxsIGZpcnN0LCBtZXJnaW5nIG92ZXJsYXBwaW5nDQogICAgLy8gcmFuZ2VzLg0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7DQogICAgICB2YXIgdG9LaWxsID0gY29tcHV0ZShyYW5nZXNbaV0pOw0KICAgICAgd2hpbGUgKGtpbGwubGVuZ3RoICYmIGNtcCh0b0tpbGwuZnJvbSwgbHN0KGtpbGwpLnRvKSA8PSAwKSB7DQogICAgICAgIHZhciByZXBsYWNlZCA9IGtpbGwucG9wKCk7DQogICAgICAgIGlmIChjbXAocmVwbGFjZWQuZnJvbSwgdG9LaWxsLmZyb20pIDwgMCkgew0KICAgICAgICAgIHRvS2lsbC5mcm9tID0gcmVwbGFjZWQuZnJvbTsNCiAgICAgICAgICBicmVhaw0KICAgICAgICB9DQogICAgICB9DQogICAgICBraWxsLnB1c2godG9LaWxsKTsNCiAgICB9DQogICAgLy8gTmV4dCwgcmVtb3ZlIHRob3NlIGFjdHVhbCByYW5nZXMuDQogICAgcnVuSW5PcChjbSwgZnVuY3Rpb24gKCkgew0KICAgICAgZm9yICh2YXIgaSA9IGtpbGwubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pDQogICAgICAgIHsgcmVwbGFjZVJhbmdlKGNtLmRvYywgIiIsIGtpbGxbaV0uZnJvbSwga2lsbFtpXS50bywgIitkZWxldGUiKTsgfQ0KICAgICAgZW5zdXJlQ3Vyc29yVmlzaWJsZShjbSk7DQogICAgfSk7DQogIH0NCg0KICBmdW5jdGlvbiBtb3ZlQ2hhckxvZ2ljYWxseShsaW5lLCBjaCwgZGlyKSB7DQogICAgdmFyIHRhcmdldCA9IHNraXBFeHRlbmRpbmdDaGFycyhsaW5lLnRleHQsIGNoICsgZGlyLCBkaXIpOw0KICAgIHJldHVybiB0YXJnZXQgPCAwIHx8IHRhcmdldCA+IGxpbmUudGV4dC5sZW5ndGggPyBudWxsIDogdGFyZ2V0DQogIH0NCg0KICBmdW5jdGlvbiBtb3ZlTG9naWNhbGx5KGxpbmUsIHN0YXJ0LCBkaXIpIHsNCiAgICB2YXIgY2ggPSBtb3ZlQ2hhckxvZ2ljYWxseShsaW5lLCBzdGFydC5jaCwgZGlyKTsNCiAgICByZXR1cm4gY2ggPT0gbnVsbCA/IG51bGwgOiBuZXcgUG9zKHN0YXJ0LmxpbmUsIGNoLCBkaXIgPCAwID8gImFmdGVyIiA6ICJiZWZvcmUiKQ0KICB9DQoNCiAgZnVuY3Rpb24gZW5kT2ZMaW5lKHZpc3VhbGx5LCBjbSwgbGluZU9iaiwgbGluZU5vLCBkaXIpIHsNCiAgICBpZiAodmlzdWFsbHkpIHsNCiAgICAgIGlmIChjbS5kb2MuZGlyZWN0aW9uID09ICJydGwiKSB7IGRpciA9IC1kaXI7IH0NCiAgICAgIHZhciBvcmRlciA9IGdldE9yZGVyKGxpbmVPYmosIGNtLmRvYy5kaXJlY3Rpb24pOw0KICAgICAgaWYgKG9yZGVyKSB7DQogICAgICAgIHZhciBwYXJ0ID0gZGlyIDwgMCA/IGxzdChvcmRlcikgOiBvcmRlclswXTsNCiAgICAgICAgdmFyIG1vdmVJblN0b3JhZ2VPcmRlciA9IChkaXIgPCAwKSA9PSAocGFydC5sZXZlbCA9PSAxKTsNCiAgICAgICAgdmFyIHN0aWNreSA9IG1vdmVJblN0b3JhZ2VPcmRlciA/ICJhZnRlciIgOiAiYmVmb3JlIjsNCiAgICAgICAgdmFyIGNoOw0KICAgICAgICAvLyBXaXRoIGEgd3JhcHBlZCBydGwgY2h1bmsgKHBvc3NpYmx5IHNwYW5uaW5nIG11bHRpcGxlIGJpZGkgcGFydHMpLA0KICAgICAgICAvLyBpdCBjb3VsZCBiZSB0aGF0IHRoZSBsYXN0IGJpZGkgcGFydCBpcyBub3Qgb24gdGhlIGxhc3QgdmlzdWFsIGxpbmUsDQogICAgICAgIC8vIHNpbmNlIHZpc3VhbCBsaW5lcyBjb250YWluIGNvbnRlbnQgb3JkZXItY29uc2VjdXRpdmUgY2h1bmtzLg0KICAgICAgICAvLyBUaHVzLCBpbiBydGwsIHdlIGFyZSBsb29raW5nIGZvciB0aGUgZmlyc3QgKGNvbnRlbnQtb3JkZXIpIGNoYXJhY3Rlcg0KICAgICAgICAvLyBpbiB0aGUgcnRsIGNodW5rIHRoYXQgaXMgb24gdGhlIGxhc3QgbGluZSAodGhhdCBpcywgdGhlIHNhbWUgbGluZQ0KICAgICAgICAvLyBhcyB0aGUgbGFzdCAoY29udGVudC1vcmRlcikgY2hhcmFjdGVyKS4NCiAgICAgICAgaWYgKHBhcnQubGV2ZWwgPiAwIHx8IGNtLmRvYy5kaXJlY3Rpb24gPT0gInJ0bCIpIHsNCiAgICAgICAgICB2YXIgcHJlcCA9IHByZXBhcmVNZWFzdXJlRm9yTGluZShjbSwgbGluZU9iaik7DQogICAgICAgICAgY2ggPSBkaXIgPCAwID8gbGluZU9iai50ZXh0Lmxlbmd0aCAtIDEgOiAwOw0KICAgICAgICAgIHZhciB0YXJnZXRUb3AgPSBtZWFzdXJlQ2hhclByZXBhcmVkKGNtLCBwcmVwLCBjaCkudG9wOw0KICAgICAgICAgIGNoID0gZmluZEZpcnN0KGZ1bmN0aW9uIChjaCkgeyByZXR1cm4gbWVhc3VyZUNoYXJQcmVwYXJlZChjbSwgcHJlcCwgY2gpLnRvcCA9PSB0YXJnZXRUb3A7IH0sIChkaXIgPCAwKSA9PSAocGFydC5sZXZlbCA9PSAxKSA/IHBhcnQuZnJvbSA6IHBhcnQudG8gLSAxLCBjaCk7DQogICAgICAgICAgaWYgKHN0aWNreSA9PSAiYmVmb3JlIikgeyBjaCA9IG1vdmVDaGFyTG9naWNhbGx5KGxpbmVPYmosIGNoLCAxKTsgfQ0KICAgICAgICB9IGVsc2UgeyBjaCA9IGRpciA8IDAgPyBwYXJ0LnRvIDogcGFydC5mcm9tOyB9DQogICAgICAgIHJldHVybiBuZXcgUG9zKGxpbmVObywgY2gsIHN0aWNreSkNCiAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIG5ldyBQb3MobGluZU5vLCBkaXIgPCAwID8gbGluZU9iai50ZXh0Lmxlbmd0aCA6IDAsIGRpciA8IDAgPyAiYmVmb3JlIiA6ICJhZnRlciIpDQogIH0NCg0KICBmdW5jdGlvbiBtb3ZlVmlzdWFsbHkoY20sIGxpbmUsIHN0YXJ0LCBkaXIpIHsNCiAgICB2YXIgYmlkaSA9IGdldE9yZGVyKGxpbmUsIGNtLmRvYy5kaXJlY3Rpb24pOw0KICAgIGlmICghYmlkaSkgeyByZXR1cm4gbW92ZUxvZ2ljYWxseShsaW5lLCBzdGFydCwgZGlyKSB9DQogICAgaWYgKHN0YXJ0LmNoID49IGxpbmUudGV4dC5sZW5ndGgpIHsNCiAgICAgIHN0YXJ0LmNoID0gbGluZS50ZXh0Lmxlbmd0aDsNCiAgICAgIHN0YXJ0LnN0aWNreSA9ICJiZWZvcmUiOw0KICAgIH0gZWxzZSBpZiAoc3RhcnQuY2ggPD0gMCkgew0KICAgICAgc3RhcnQuY2ggPSAwOw0KICAgICAgc3RhcnQuc3RpY2t5ID0gImFmdGVyIjsNCiAgICB9DQogICAgdmFyIHBhcnRQb3MgPSBnZXRCaWRpUGFydEF0KGJpZGksIHN0YXJ0LmNoLCBzdGFydC5zdGlja3kpLCBwYXJ0ID0gYmlkaVtwYXJ0UG9zXTsNCiAgICBpZiAoY20uZG9jLmRpcmVjdGlvbiA9PSAibHRyIiAmJiBwYXJ0LmxldmVsICUgMiA9PSAwICYmIChkaXIgPiAwID8gcGFydC50byA+IHN0YXJ0LmNoIDogcGFydC5mcm9tIDwgc3RhcnQuY2gpKSB7DQogICAgICAvLyBDYXNlIDE6IFdlIG1vdmUgd2l0aGluIGFuIGx0ciBwYXJ0IGluIGFuIGx0ciBlZGl0b3IuIEV2ZW4gd2l0aCB3cmFwcGVkIGxpbmVzLA0KICAgICAgLy8gbm90aGluZyBpbnRlcmVzdGluZyBoYXBwZW5zLg0KICAgICAgcmV0dXJuIG1vdmVMb2dpY2FsbHkobGluZSwgc3RhcnQsIGRpcikNCiAgICB9DQoNCiAgICB2YXIgbXYgPSBmdW5jdGlvbiAocG9zLCBkaXIpIHsgcmV0dXJuIG1vdmVDaGFyTG9naWNhbGx5KGxpbmUsIHBvcyBpbnN0YW5jZW9mIFBvcyA/IHBvcy5jaCA6IHBvcywgZGlyKTsgfTsNCiAgICB2YXIgcHJlcDsNCiAgICB2YXIgZ2V0V3JhcHBlZExpbmVFeHRlbnQgPSBmdW5jdGlvbiAoY2gpIHsNCiAgICAgIGlmICghY20ub3B0aW9ucy5saW5lV3JhcHBpbmcpIHsgcmV0dXJuIHtiZWdpbjogMCwgZW5kOiBsaW5lLnRleHQubGVuZ3RofSB9DQogICAgICBwcmVwID0gcHJlcCB8fCBwcmVwYXJlTWVhc3VyZUZvckxpbmUoY20sIGxpbmUpOw0KICAgICAgcmV0dXJuIHdyYXBwZWRMaW5lRXh0ZW50Q2hhcihjbSwgbGluZSwgcHJlcCwgY2gpDQogICAgfTsNCiAgICB2YXIgd3JhcHBlZExpbmVFeHRlbnQgPSBnZXRXcmFwcGVkTGluZUV4dGVudChzdGFydC5zdGlja3kgPT0gImJlZm9yZSIgPyBtdihzdGFydCwgLTEpIDogc3RhcnQuY2gpOw0KDQogICAgaWYgKGNtLmRvYy5kaXJlY3Rpb24gPT0gInJ0bCIgfHwgcGFydC5sZXZlbCA9PSAxKSB7DQogICAgICB2YXIgbW92ZUluU3RvcmFnZU9yZGVyID0gKHBhcnQubGV2ZWwgPT0gMSkgPT0gKGRpciA8IDApOw0KICAgICAgdmFyIGNoID0gbXYoc3RhcnQsIG1vdmVJblN0b3JhZ2VPcmRlciA/IDEgOiAtMSk7DQogICAgICBpZiAoY2ggIT0gbnVsbCAmJiAoIW1vdmVJblN0b3JhZ2VPcmRlciA/IGNoID49IHBhcnQuZnJvbSAmJiBjaCA+PSB3cmFwcGVkTGluZUV4dGVudC5iZWdpbiA6IGNoIDw9IHBhcnQudG8gJiYgY2ggPD0gd3JhcHBlZExpbmVFeHRlbnQuZW5kKSkgew0KICAgICAgICAvLyBDYXNlIDI6IFdlIG1vdmUgd2l0aGluIGFuIHJ0bCBwYXJ0IG9yIGluIGFuIHJ0bCBlZGl0b3Igb24gdGhlIHNhbWUgdmlzdWFsIGxpbmUNCiAgICAgICAgdmFyIHN0aWNreSA9IG1vdmVJblN0b3JhZ2VPcmRlciA/ICJiZWZvcmUiIDogImFmdGVyIjsNCiAgICAgICAgcmV0dXJuIG5ldyBQb3Moc3RhcnQubGluZSwgY2gsIHN0aWNreSkNCiAgICAgIH0NCiAgICB9DQoNCiAgICAvLyBDYXNlIDM6IENvdWxkIG5vdCBtb3ZlIHdpdGhpbiB0aGlzIGJpZGkgcGFydCBpbiB0aGlzIHZpc3VhbCBsaW5lLCBzbyBsZWF2ZQ0KICAgIC8vIHRoZSBjdXJyZW50IGJpZGkgcGFydA0KDQogICAgdmFyIHNlYXJjaEluVmlzdWFsTGluZSA9IGZ1bmN0aW9uIChwYXJ0UG9zLCBkaXIsIHdyYXBwZWRMaW5lRXh0ZW50KSB7DQogICAgICB2YXIgZ2V0UmVzID0gZnVuY3Rpb24gKGNoLCBtb3ZlSW5TdG9yYWdlT3JkZXIpIHsgcmV0dXJuIG1vdmVJblN0b3JhZ2VPcmRlcg0KICAgICAgICA/IG5ldyBQb3Moc3RhcnQubGluZSwgbXYoY2gsIDEpLCAiYmVmb3JlIikNCiAgICAgICAgOiBuZXcgUG9zKHN0YXJ0LmxpbmUsIGNoLCAiYWZ0ZXIiKTsgfTsNCg0KICAgICAgZm9yICg7IHBhcnRQb3MgPj0gMCAmJiBwYXJ0UG9zIDwgYmlkaS5sZW5ndGg7IHBhcnRQb3MgKz0gZGlyKSB7DQogICAgICAgIHZhciBwYXJ0ID0gYmlkaVtwYXJ0UG9zXTsNCiAgICAgICAgdmFyIG1vdmVJblN0b3JhZ2VPcmRlciA9IChkaXIgPiAwKSA9PSAocGFydC5sZXZlbCAhPSAxKTsNCiAgICAgICAgdmFyIGNoID0gbW92ZUluU3RvcmFnZU9yZGVyID8gd3JhcHBlZExpbmVFeHRlbnQuYmVnaW4gOiBtdih3cmFwcGVkTGluZUV4dGVudC5lbmQsIC0xKTsNCiAgICAgICAgaWYgKHBhcnQuZnJvbSA8PSBjaCAmJiBjaCA8IHBhcnQudG8pIHsgcmV0dXJuIGdldFJlcyhjaCwgbW92ZUluU3RvcmFnZU9yZGVyKSB9DQogICAgICAgIGNoID0gbW92ZUluU3RvcmFnZU9yZGVyID8gcGFydC5mcm9tIDogbXYocGFydC50bywgLTEpOw0KICAgICAgICBpZiAod3JhcHBlZExpbmVFeHRlbnQuYmVnaW4gPD0gY2ggJiYgY2ggPCB3cmFwcGVkTGluZUV4dGVudC5lbmQpIHsgcmV0dXJuIGdldFJlcyhjaCwgbW92ZUluU3RvcmFnZU9yZGVyKSB9DQogICAgICB9DQogICAgfTsNCg0KICAgIC8vIENhc2UgM2E6IExvb2sgZm9yIG90aGVyIGJpZGkgcGFydHMgb24gdGhlIHNhbWUgdmlzdWFsIGxpbmUNCiAgICB2YXIgcmVzID0gc2VhcmNoSW5WaXN1YWxMaW5lKHBhcnRQb3MgKyBkaXIsIGRpciwgd3JhcHBlZExpbmVFeHRlbnQpOw0KICAgIGlmIChyZXMpIHsgcmV0dXJuIHJlcyB9DQoNCiAgICAvLyBDYXNlIDNiOiBMb29rIGZvciBvdGhlciBiaWRpIHBhcnRzIG9uIHRoZSBuZXh0IHZpc3VhbCBsaW5lDQogICAgdmFyIG5leHRDaCA9IGRpciA+IDAgPyB3cmFwcGVkTGluZUV4dGVudC5lbmQgOiBtdih3cmFwcGVkTGluZUV4dGVudC5iZWdpbiwgLTEpOw0KICAgIGlmIChuZXh0Q2ggIT0gbnVsbCAmJiAhKGRpciA+IDAgJiYgbmV4dENoID09IGxpbmUudGV4dC5sZW5ndGgpKSB7DQogICAgICByZXMgPSBzZWFyY2hJblZpc3VhbExpbmUoZGlyID4gMCA/IDAgOiBiaWRpLmxlbmd0aCAtIDEsIGRpciwgZ2V0V3JhcHBlZExpbmVFeHRlbnQobmV4dENoKSk7DQogICAgICBpZiAocmVzKSB7IHJldHVybiByZXMgfQ0KICAgIH0NCg0KICAgIC8vIENhc2UgNDogTm93aGVyZSB0byBtb3ZlDQogICAgcmV0dXJuIG51bGwNCiAgfQ0KDQogIC8vIENvbW1hbmRzIGFyZSBwYXJhbWV0ZXItbGVzcyBhY3Rpb25zIHRoYXQgY2FuIGJlIHBlcmZvcm1lZCBvbiBhbg0KICAvLyBlZGl0b3IsIG1vc3RseSB1c2VkIGZvciBrZXliaW5kaW5ncy4NCiAgdmFyIGNvbW1hbmRzID0gew0KICAgIHNlbGVjdEFsbDogc2VsZWN0QWxsLA0KICAgIHNpbmdsZVNlbGVjdGlvbjogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5zZXRTZWxlY3Rpb24oY20uZ2V0Q3Vyc29yKCJhbmNob3IiKSwgY20uZ2V0Q3Vyc29yKCJoZWFkIiksIHNlbF9kb250U2Nyb2xsKTsgfSwNCiAgICBraWxsTGluZTogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBkZWxldGVOZWFyU2VsZWN0aW9uKGNtLCBmdW5jdGlvbiAocmFuZ2UpIHsNCiAgICAgIGlmIChyYW5nZS5lbXB0eSgpKSB7DQogICAgICAgIHZhciBsZW4gPSBnZXRMaW5lKGNtLmRvYywgcmFuZ2UuaGVhZC5saW5lKS50ZXh0Lmxlbmd0aDsNCiAgICAgICAgaWYgKHJhbmdlLmhlYWQuY2ggPT0gbGVuICYmIHJhbmdlLmhlYWQubGluZSA8IGNtLmxhc3RMaW5lKCkpDQogICAgICAgICAgeyByZXR1cm4ge2Zyb206IHJhbmdlLmhlYWQsIHRvOiBQb3MocmFuZ2UuaGVhZC5saW5lICsgMSwgMCl9IH0NCiAgICAgICAgZWxzZQ0KICAgICAgICAgIHsgcmV0dXJuIHtmcm9tOiByYW5nZS5oZWFkLCB0bzogUG9zKHJhbmdlLmhlYWQubGluZSwgbGVuKX0gfQ0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgcmV0dXJuIHtmcm9tOiByYW5nZS5mcm9tKCksIHRvOiByYW5nZS50bygpfQ0KICAgICAgfQ0KICAgIH0pOyB9LA0KICAgIGRlbGV0ZUxpbmU6IGZ1bmN0aW9uIChjbSkgeyByZXR1cm4gZGVsZXRlTmVhclNlbGVjdGlvbihjbSwgZnVuY3Rpb24gKHJhbmdlKSB7IHJldHVybiAoew0KICAgICAgZnJvbTogUG9zKHJhbmdlLmZyb20oKS5saW5lLCAwKSwNCiAgICAgIHRvOiBjbGlwUG9zKGNtLmRvYywgUG9zKHJhbmdlLnRvKCkubGluZSArIDEsIDApKQ0KICAgIH0pOyB9KTsgfSwNCiAgICBkZWxMaW5lTGVmdDogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBkZWxldGVOZWFyU2VsZWN0aW9uKGNtLCBmdW5jdGlvbiAocmFuZ2UpIHsgcmV0dXJuICh7DQogICAgICBmcm9tOiBQb3MocmFuZ2UuZnJvbSgpLmxpbmUsIDApLCB0bzogcmFuZ2UuZnJvbSgpDQogICAgfSk7IH0pOyB9LA0KICAgIGRlbFdyYXBwZWRMaW5lTGVmdDogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBkZWxldGVOZWFyU2VsZWN0aW9uKGNtLCBmdW5jdGlvbiAocmFuZ2UpIHsNCiAgICAgIHZhciB0b3AgPSBjbS5jaGFyQ29vcmRzKHJhbmdlLmhlYWQsICJkaXYiKS50b3AgKyA1Ow0KICAgICAgdmFyIGxlZnRQb3MgPSBjbS5jb29yZHNDaGFyKHtsZWZ0OiAwLCB0b3A6IHRvcH0sICJkaXYiKTsNCiAgICAgIHJldHVybiB7ZnJvbTogbGVmdFBvcywgdG86IHJhbmdlLmZyb20oKX0NCiAgICB9KTsgfSwNCiAgICBkZWxXcmFwcGVkTGluZVJpZ2h0OiBmdW5jdGlvbiAoY20pIHsgcmV0dXJuIGRlbGV0ZU5lYXJTZWxlY3Rpb24oY20sIGZ1bmN0aW9uIChyYW5nZSkgew0KICAgICAgdmFyIHRvcCA9IGNtLmNoYXJDb29yZHMocmFuZ2UuaGVhZCwgImRpdiIpLnRvcCArIDU7DQogICAgICB2YXIgcmlnaHRQb3MgPSBjbS5jb29yZHNDaGFyKHtsZWZ0OiBjbS5kaXNwbGF5LmxpbmVEaXYub2Zmc2V0V2lkdGggKyAxMDAsIHRvcDogdG9wfSwgImRpdiIpOw0KICAgICAgcmV0dXJuIHtmcm9tOiByYW5nZS5mcm9tKCksIHRvOiByaWdodFBvcyB9DQogICAgfSk7IH0sDQogICAgdW5kbzogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS51bmRvKCk7IH0sDQogICAgcmVkbzogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5yZWRvKCk7IH0sDQogICAgdW5kb1NlbGVjdGlvbjogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS51bmRvU2VsZWN0aW9uKCk7IH0sDQogICAgcmVkb1NlbGVjdGlvbjogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5yZWRvU2VsZWN0aW9uKCk7IH0sDQogICAgZ29Eb2NTdGFydDogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5leHRlbmRTZWxlY3Rpb24oUG9zKGNtLmZpcnN0TGluZSgpLCAwKSk7IH0sDQogICAgZ29Eb2NFbmQ6IGZ1bmN0aW9uIChjbSkgeyByZXR1cm4gY20uZXh0ZW5kU2VsZWN0aW9uKFBvcyhjbS5sYXN0TGluZSgpKSk7IH0sDQogICAgZ29MaW5lU3RhcnQ6IGZ1bmN0aW9uIChjbSkgeyByZXR1cm4gY20uZXh0ZW5kU2VsZWN0aW9uc0J5KGZ1bmN0aW9uIChyYW5nZSkgeyByZXR1cm4gbGluZVN0YXJ0KGNtLCByYW5nZS5oZWFkLmxpbmUpOyB9LA0KICAgICAge29yaWdpbjogIittb3ZlIiwgYmlhczogMX0NCiAgICApOyB9LA0KICAgIGdvTGluZVN0YXJ0U21hcnQ6IGZ1bmN0aW9uIChjbSkgeyByZXR1cm4gY20uZXh0ZW5kU2VsZWN0aW9uc0J5KGZ1bmN0aW9uIChyYW5nZSkgeyByZXR1cm4gbGluZVN0YXJ0U21hcnQoY20sIHJhbmdlLmhlYWQpOyB9LA0KICAgICAge29yaWdpbjogIittb3ZlIiwgYmlhczogMX0NCiAgICApOyB9LA0KICAgIGdvTGluZUVuZDogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5leHRlbmRTZWxlY3Rpb25zQnkoZnVuY3Rpb24gKHJhbmdlKSB7IHJldHVybiBsaW5lRW5kKGNtLCByYW5nZS5oZWFkLmxpbmUpOyB9LA0KICAgICAge29yaWdpbjogIittb3ZlIiwgYmlhczogLTF9DQogICAgKTsgfSwNCiAgICBnb0xpbmVSaWdodDogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5leHRlbmRTZWxlY3Rpb25zQnkoZnVuY3Rpb24gKHJhbmdlKSB7DQogICAgICB2YXIgdG9wID0gY20uY3Vyc29yQ29vcmRzKHJhbmdlLmhlYWQsICJkaXYiKS50b3AgKyA1Ow0KICAgICAgcmV0dXJuIGNtLmNvb3Jkc0NoYXIoe2xlZnQ6IGNtLmRpc3BsYXkubGluZURpdi5vZmZzZXRXaWR0aCArIDEwMCwgdG9wOiB0b3B9LCAiZGl2IikNCiAgICB9LCBzZWxfbW92ZSk7IH0sDQogICAgZ29MaW5lTGVmdDogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5leHRlbmRTZWxlY3Rpb25zQnkoZnVuY3Rpb24gKHJhbmdlKSB7DQogICAgICB2YXIgdG9wID0gY20uY3Vyc29yQ29vcmRzKHJhbmdlLmhlYWQsICJkaXYiKS50b3AgKyA1Ow0KICAgICAgcmV0dXJuIGNtLmNvb3Jkc0NoYXIoe2xlZnQ6IDAsIHRvcDogdG9wfSwgImRpdiIpDQogICAgfSwgc2VsX21vdmUpOyB9LA0KICAgIGdvTGluZUxlZnRTbWFydDogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5leHRlbmRTZWxlY3Rpb25zQnkoZnVuY3Rpb24gKHJhbmdlKSB7DQogICAgICB2YXIgdG9wID0gY20uY3Vyc29yQ29vcmRzKHJhbmdlLmhlYWQsICJkaXYiKS50b3AgKyA1Ow0KICAgICAgdmFyIHBvcyA9IGNtLmNvb3Jkc0NoYXIoe2xlZnQ6IDAsIHRvcDogdG9wfSwgImRpdiIpOw0KICAgICAgaWYgKHBvcy5jaCA8IGNtLmdldExpbmUocG9zLmxpbmUpLnNlYXJjaCgvXFMvKSkgeyByZXR1cm4gbGluZVN0YXJ0U21hcnQoY20sIHJhbmdlLmhlYWQpIH0NCiAgICAgIHJldHVybiBwb3MNCiAgICB9LCBzZWxfbW92ZSk7IH0sDQogICAgZ29MaW5lVXA6IGZ1bmN0aW9uIChjbSkgeyByZXR1cm4gY20ubW92ZVYoLTEsICJsaW5lIik7IH0sDQogICAgZ29MaW5lRG93bjogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5tb3ZlVigxLCAibGluZSIpOyB9LA0KICAgIGdvUGFnZVVwOiBmdW5jdGlvbiAoY20pIHsgcmV0dXJuIGNtLm1vdmVWKC0xLCAicGFnZSIpOyB9LA0KICAgIGdvUGFnZURvd246IGZ1bmN0aW9uIChjbSkgeyByZXR1cm4gY20ubW92ZVYoMSwgInBhZ2UiKTsgfSwNCiAgICBnb0NoYXJMZWZ0OiBmdW5jdGlvbiAoY20pIHsgcmV0dXJuIGNtLm1vdmVIKC0xLCAiY2hhciIpOyB9LA0KICAgIGdvQ2hhclJpZ2h0OiBmdW5jdGlvbiAoY20pIHsgcmV0dXJuIGNtLm1vdmVIKDEsICJjaGFyIik7IH0sDQogICAgZ29Db2x1bW5MZWZ0OiBmdW5jdGlvbiAoY20pIHsgcmV0dXJuIGNtLm1vdmVIKC0xLCAiY29sdW1uIik7IH0sDQogICAgZ29Db2x1bW5SaWdodDogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5tb3ZlSCgxLCAiY29sdW1uIik7IH0sDQogICAgZ29Xb3JkTGVmdDogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5tb3ZlSCgtMSwgIndvcmQiKTsgfSwNCiAgICBnb0dyb3VwUmlnaHQ6IGZ1bmN0aW9uIChjbSkgeyByZXR1cm4gY20ubW92ZUgoMSwgImdyb3VwIik7IH0sDQogICAgZ29Hcm91cExlZnQ6IGZ1bmN0aW9uIChjbSkgeyByZXR1cm4gY20ubW92ZUgoLTEsICJncm91cCIpOyB9LA0KICAgIGdvV29yZFJpZ2h0OiBmdW5jdGlvbiAoY20pIHsgcmV0dXJuIGNtLm1vdmVIKDEsICJ3b3JkIik7IH0sDQogICAgZGVsQ2hhckJlZm9yZTogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5kZWxldGVIKC0xLCAiY2hhciIpOyB9LA0KICAgIGRlbENoYXJBZnRlcjogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5kZWxldGVIKDEsICJjaGFyIik7IH0sDQogICAgZGVsV29yZEJlZm9yZTogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5kZWxldGVIKC0xLCAid29yZCIpOyB9LA0KICAgIGRlbFdvcmRBZnRlcjogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5kZWxldGVIKDEsICJ3b3JkIik7IH0sDQogICAgZGVsR3JvdXBCZWZvcmU6IGZ1bmN0aW9uIChjbSkgeyByZXR1cm4gY20uZGVsZXRlSCgtMSwgImdyb3VwIik7IH0sDQogICAgZGVsR3JvdXBBZnRlcjogZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5kZWxldGVIKDEsICJncm91cCIpOyB9LA0KICAgIGluZGVudEF1dG86IGZ1bmN0aW9uIChjbSkgeyByZXR1cm4gY20uaW5kZW50U2VsZWN0aW9uKCJzbWFydCIpOyB9LA0KICAgIGluZGVudE1vcmU6IGZ1bmN0aW9uIChjbSkgeyByZXR1cm4gY20uaW5kZW50U2VsZWN0aW9uKCJhZGQiKTsgfSwNCiAgICBpbmRlbnRMZXNzOiBmdW5jdGlvbiAoY20pIHsgcmV0dXJuIGNtLmluZGVudFNlbGVjdGlvbigic3VidHJhY3QiKTsgfSwNCiAgICBpbnNlcnRUYWI6IGZ1bmN0aW9uIChjbSkgeyByZXR1cm4gY20ucmVwbGFjZVNlbGVjdGlvbigiXHQiKTsgfSwNCiAgICBpbnNlcnRTb2Z0VGFiOiBmdW5jdGlvbiAoY20pIHsNCiAgICAgIHZhciBzcGFjZXMgPSBbXSwgcmFuZ2VzID0gY20ubGlzdFNlbGVjdGlvbnMoKSwgdGFiU2l6ZSA9IGNtLm9wdGlvbnMudGFiU2l6ZTsNCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgIHZhciBwb3MgPSByYW5nZXNbaV0uZnJvbSgpOw0KICAgICAgICB2YXIgY29sID0gY291bnRDb2x1bW4oY20uZ2V0TGluZShwb3MubGluZSksIHBvcy5jaCwgdGFiU2l6ZSk7DQogICAgICAgIHNwYWNlcy5wdXNoKHNwYWNlU3RyKHRhYlNpemUgLSBjb2wgJSB0YWJTaXplKSk7DQogICAgICB9DQogICAgICBjbS5yZXBsYWNlU2VsZWN0aW9ucyhzcGFjZXMpOw0KICAgIH0sDQogICAgZGVmYXVsdFRhYjogZnVuY3Rpb24gKGNtKSB7DQogICAgICBpZiAoY20uc29tZXRoaW5nU2VsZWN0ZWQoKSkgeyBjbS5pbmRlbnRTZWxlY3Rpb24oImFkZCIpOyB9DQogICAgICBlbHNlIHsgY20uZXhlY0NvbW1hbmQoImluc2VydFRhYiIpOyB9DQogICAgfSwNCiAgICAvLyBTd2FwIHRoZSB0d28gY2hhcnMgbGVmdCBhbmQgcmlnaHQgb2YgZWFjaCBzZWxlY3Rpb24ncyBoZWFkLg0KICAgIC8vIE1vdmUgY3Vyc29yIGJlaGluZCB0aGUgdHdvIHN3YXBwZWQgY2hhcmFjdGVycyBhZnRlcndhcmRzLg0KICAgIC8vDQogICAgLy8gRG9lc24ndCBjb25zaWRlciBsaW5lIGZlZWRzIGEgY2hhcmFjdGVyLg0KICAgIC8vIERvZXNuJ3Qgc2NhbiBtb3JlIHRoYW4gb25lIGxpbmUgYWJvdmUgdG8gZmluZCBhIGNoYXJhY3Rlci4NCiAgICAvLyBEb2Vzbid0IGRvIGFueXRoaW5nIG9uIGFuIGVtcHR5IGxpbmUuDQogICAgLy8gRG9lc24ndCBkbyBhbnl0aGluZyB3aXRoIG5vbi1lbXB0eSBzZWxlY3Rpb25zLg0KICAgIHRyYW5zcG9zZUNoYXJzOiBmdW5jdGlvbiAoY20pIHsgcmV0dXJuIHJ1bkluT3AoY20sIGZ1bmN0aW9uICgpIHsNCiAgICAgIHZhciByYW5nZXMgPSBjbS5saXN0U2VsZWN0aW9ucygpLCBuZXdTZWwgPSBbXTsNCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgIGlmICghcmFuZ2VzW2ldLmVtcHR5KCkpIHsgY29udGludWUgfQ0KICAgICAgICB2YXIgY3VyID0gcmFuZ2VzW2ldLmhlYWQsIGxpbmUgPSBnZXRMaW5lKGNtLmRvYywgY3VyLmxpbmUpLnRleHQ7DQogICAgICAgIGlmIChsaW5lKSB7DQogICAgICAgICAgaWYgKGN1ci5jaCA9PSBsaW5lLmxlbmd0aCkgeyBjdXIgPSBuZXcgUG9zKGN1ci5saW5lLCBjdXIuY2ggLSAxKTsgfQ0KICAgICAgICAgIGlmIChjdXIuY2ggPiAwKSB7DQogICAgICAgICAgICBjdXIgPSBuZXcgUG9zKGN1ci5saW5lLCBjdXIuY2ggKyAxKTsNCiAgICAgICAgICAgIGNtLnJlcGxhY2VSYW5nZShsaW5lLmNoYXJBdChjdXIuY2ggLSAxKSArIGxpbmUuY2hhckF0KGN1ci5jaCAtIDIpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBvcyhjdXIubGluZSwgY3VyLmNoIC0gMiksIGN1ciwgIit0cmFuc3Bvc2UiKTsNCiAgICAgICAgICB9IGVsc2UgaWYgKGN1ci5saW5lID4gY20uZG9jLmZpcnN0KSB7DQogICAgICAgICAgICB2YXIgcHJldiA9IGdldExpbmUoY20uZG9jLCBjdXIubGluZSAtIDEpLnRleHQ7DQogICAgICAgICAgICBpZiAocHJldikgew0KICAgICAgICAgICAgICBjdXIgPSBuZXcgUG9zKGN1ci5saW5lLCAxKTsNCiAgICAgICAgICAgICAgY20ucmVwbGFjZVJhbmdlKGxpbmUuY2hhckF0KDApICsgY20uZG9jLmxpbmVTZXBhcmF0b3IoKSArDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2LmNoYXJBdChwcmV2Lmxlbmd0aCAtIDEpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUG9zKGN1ci5saW5lIC0gMSwgcHJldi5sZW5ndGggLSAxKSwgY3VyLCAiK3RyYW5zcG9zZSIpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgICBuZXdTZWwucHVzaChuZXcgUmFuZ2UoY3VyLCBjdXIpKTsNCiAgICAgIH0NCiAgICAgIGNtLnNldFNlbGVjdGlvbnMobmV3U2VsKTsNCiAgICB9KTsgfSwNCiAgICBuZXdsaW5lQW5kSW5kZW50OiBmdW5jdGlvbiAoY20pIHsgcmV0dXJuIHJ1bkluT3AoY20sIGZ1bmN0aW9uICgpIHsNCiAgICAgIHZhciBzZWxzID0gY20ubGlzdFNlbGVjdGlvbnMoKTsNCiAgICAgIGZvciAodmFyIGkgPSBzZWxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKQ0KICAgICAgICB7IGNtLnJlcGxhY2VSYW5nZShjbS5kb2MubGluZVNlcGFyYXRvcigpLCBzZWxzW2ldLmFuY2hvciwgc2Vsc1tpXS5oZWFkLCAiK2lucHV0Iik7IH0NCiAgICAgIHNlbHMgPSBjbS5saXN0U2VsZWN0aW9ucygpOw0KICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgc2Vscy5sZW5ndGg7IGkkMSsrKQ0KICAgICAgICB7IGNtLmluZGVudExpbmUoc2Vsc1tpJDFdLmZyb20oKS5saW5lLCBudWxsLCB0cnVlKTsgfQ0KICAgICAgZW5zdXJlQ3Vyc29yVmlzaWJsZShjbSk7DQogICAgfSk7IH0sDQogICAgb3BlbkxpbmU6IGZ1bmN0aW9uIChjbSkgeyByZXR1cm4gY20ucmVwbGFjZVNlbGVjdGlvbigiXG4iLCAic3RhcnQiKTsgfSwNCiAgICB0b2dnbGVPdmVyd3JpdGU6IGZ1bmN0aW9uIChjbSkgeyByZXR1cm4gY20udG9nZ2xlT3ZlcndyaXRlKCk7IH0NCiAgfTsNCg0KDQogIGZ1bmN0aW9uIGxpbmVTdGFydChjbSwgbGluZU4pIHsNCiAgICB2YXIgbGluZSA9IGdldExpbmUoY20uZG9jLCBsaW5lTik7DQogICAgdmFyIHZpc3VhbCA9IHZpc3VhbExpbmUobGluZSk7DQogICAgaWYgKHZpc3VhbCAhPSBsaW5lKSB7IGxpbmVOID0gbGluZU5vKHZpc3VhbCk7IH0NCiAgICByZXR1cm4gZW5kT2ZMaW5lKHRydWUsIGNtLCB2aXN1YWwsIGxpbmVOLCAxKQ0KICB9DQogIGZ1bmN0aW9uIGxpbmVFbmQoY20sIGxpbmVOKSB7DQogICAgdmFyIGxpbmUgPSBnZXRMaW5lKGNtLmRvYywgbGluZU4pOw0KICAgIHZhciB2aXN1YWwgPSB2aXN1YWxMaW5lRW5kKGxpbmUpOw0KICAgIGlmICh2aXN1YWwgIT0gbGluZSkgeyBsaW5lTiA9IGxpbmVObyh2aXN1YWwpOyB9DQogICAgcmV0dXJuIGVuZE9mTGluZSh0cnVlLCBjbSwgbGluZSwgbGluZU4sIC0xKQ0KICB9DQogIGZ1bmN0aW9uIGxpbmVTdGFydFNtYXJ0KGNtLCBwb3MpIHsNCiAgICB2YXIgc3RhcnQgPSBsaW5lU3RhcnQoY20sIHBvcy5saW5lKTsNCiAgICB2YXIgbGluZSA9IGdldExpbmUoY20uZG9jLCBzdGFydC5saW5lKTsNCiAgICB2YXIgb3JkZXIgPSBnZXRPcmRlcihsaW5lLCBjbS5kb2MuZGlyZWN0aW9uKTsNCiAgICBpZiAoIW9yZGVyIHx8IG9yZGVyWzBdLmxldmVsID09IDApIHsNCiAgICAgIHZhciBmaXJzdE5vbldTID0gTWF0aC5tYXgoc3RhcnQuY2gsIGxpbmUudGV4dC5zZWFyY2goL1xTLykpOw0KICAgICAgdmFyIGluV1MgPSBwb3MubGluZSA9PSBzdGFydC5saW5lICYmIHBvcy5jaCA8PSBmaXJzdE5vbldTICYmIHBvcy5jaDsNCiAgICAgIHJldHVybiBQb3Moc3RhcnQubGluZSwgaW5XUyA/IDAgOiBmaXJzdE5vbldTLCBzdGFydC5zdGlja3kpDQogICAgfQ0KICAgIHJldHVybiBzdGFydA0KICB9DQoNCiAgLy8gUnVuIGEgaGFuZGxlciB0aGF0IHdhcyBib3VuZCB0byBhIGtleS4NCiAgZnVuY3Rpb24gZG9IYW5kbGVCaW5kaW5nKGNtLCBib3VuZCwgZHJvcFNoaWZ0KSB7DQogICAgaWYgKHR5cGVvZiBib3VuZCA9PSAic3RyaW5nIikgew0KICAgICAgYm91bmQgPSBjb21tYW5kc1tib3VuZF07DQogICAgICBpZiAoIWJvdW5kKSB7IHJldHVybiBmYWxzZSB9DQogICAgfQ0KICAgIC8vIEVuc3VyZSBwcmV2aW91cyBpbnB1dCBoYXMgYmVlbiByZWFkLCBzbyB0aGF0IHRoZSBoYW5kbGVyIHNlZXMgYQ0KICAgIC8vIGNvbnNpc3RlbnQgdmlldyBvZiB0aGUgZG9jdW1lbnQNCiAgICBjbS5kaXNwbGF5LmlucHV0LmVuc3VyZVBvbGxlZCgpOw0KICAgIHZhciBwcmV2U2hpZnQgPSBjbS5kaXNwbGF5LnNoaWZ0LCBkb25lID0gZmFsc2U7DQogICAgdHJ5IHsNCiAgICAgIGlmIChjbS5pc1JlYWRPbmx5KCkpIHsgY20uc3RhdGUuc3VwcHJlc3NFZGl0cyA9IHRydWU7IH0NCiAgICAgIGlmIChkcm9wU2hpZnQpIHsgY20uZGlzcGxheS5zaGlmdCA9IGZhbHNlOyB9DQogICAgICBkb25lID0gYm91bmQoY20pICE9IFBhc3M7DQogICAgfSBmaW5hbGx5IHsNCiAgICAgIGNtLmRpc3BsYXkuc2hpZnQgPSBwcmV2U2hpZnQ7DQogICAgICBjbS5zdGF0ZS5zdXBwcmVzc0VkaXRzID0gZmFsc2U7DQogICAgfQ0KICAgIHJldHVybiBkb25lDQogIH0NCg0KICBmdW5jdGlvbiBsb29rdXBLZXlGb3JFZGl0b3IoY20sIG5hbWUsIGhhbmRsZSkgew0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY20uc3RhdGUua2V5TWFwcy5sZW5ndGg7IGkrKykgew0KICAgICAgdmFyIHJlc3VsdCA9IGxvb2t1cEtleShuYW1lLCBjbS5zdGF0ZS5rZXlNYXBzW2ldLCBoYW5kbGUsIGNtKTsNCiAgICAgIGlmIChyZXN1bHQpIHsgcmV0dXJuIHJlc3VsdCB9DQogICAgfQ0KICAgIHJldHVybiAoY20ub3B0aW9ucy5leHRyYUtleXMgJiYgbG9va3VwS2V5KG5hbWUsIGNtLm9wdGlvbnMuZXh0cmFLZXlzLCBoYW5kbGUsIGNtKSkNCiAgICAgIHx8IGxvb2t1cEtleShuYW1lLCBjbS5vcHRpb25zLmtleU1hcCwgaGFuZGxlLCBjbSkNCiAgfQ0KDQogIC8vIE5vdGUgdGhhdCwgZGVzcGl0ZSB0aGUgbmFtZSwgdGhpcyBmdW5jdGlvbiBpcyBhbHNvIHVzZWQgdG8gY2hlY2sNCiAgLy8gZm9yIGJvdW5kIG1vdXNlIGNsaWNrcy4NCg0KICB2YXIgc3RvcFNlcSA9IG5ldyBEZWxheWVkOw0KDQogIGZ1bmN0aW9uIGRpc3BhdGNoS2V5KGNtLCBuYW1lLCBlLCBoYW5kbGUpIHsNCiAgICB2YXIgc2VxID0gY20uc3RhdGUua2V5U2VxOw0KICAgIGlmIChzZXEpIHsNCiAgICAgIGlmIChpc01vZGlmaWVyS2V5KG5hbWUpKSB7IHJldHVybiAiaGFuZGxlZCIgfQ0KICAgICAgaWYgKC9cJyQvLnRlc3QobmFtZSkpDQogICAgICAgIHsgY20uc3RhdGUua2V5U2VxID0gbnVsbDsgfQ0KICAgICAgZWxzZQ0KICAgICAgICB7IHN0b3BTZXEuc2V0KDUwLCBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgaWYgKGNtLnN0YXRlLmtleVNlcSA9PSBzZXEpIHsNCiAgICAgICAgICAgIGNtLnN0YXRlLmtleVNlcSA9IG51bGw7DQogICAgICAgICAgICBjbS5kaXNwbGF5LmlucHV0LnJlc2V0KCk7DQogICAgICAgICAgfQ0KICAgICAgICB9KTsgfQ0KICAgICAgaWYgKGRpc3BhdGNoS2V5SW5uZXIoY20sIHNlcSArICIgIiArIG5hbWUsIGUsIGhhbmRsZSkpIHsgcmV0dXJuIHRydWUgfQ0KICAgIH0NCiAgICByZXR1cm4gZGlzcGF0Y2hLZXlJbm5lcihjbSwgbmFtZSwgZSwgaGFuZGxlKQ0KICB9DQoNCiAgZnVuY3Rpb24gZGlzcGF0Y2hLZXlJbm5lcihjbSwgbmFtZSwgZSwgaGFuZGxlKSB7DQogICAgdmFyIHJlc3VsdCA9IGxvb2t1cEtleUZvckVkaXRvcihjbSwgbmFtZSwgaGFuZGxlKTsNCg0KICAgIGlmIChyZXN1bHQgPT0gIm11bHRpIikNCiAgICAgIHsgY20uc3RhdGUua2V5U2VxID0gbmFtZTsgfQ0KICAgIGlmIChyZXN1bHQgPT0gImhhbmRsZWQiKQ0KICAgICAgeyBzaWduYWxMYXRlcihjbSwgImtleUhhbmRsZWQiLCBjbSwgbmFtZSwgZSk7IH0NCg0KICAgIGlmIChyZXN1bHQgPT0gImhhbmRsZWQiIHx8IHJlc3VsdCA9PSAibXVsdGkiKSB7DQogICAgICBlX3ByZXZlbnREZWZhdWx0KGUpOw0KICAgICAgcmVzdGFydEJsaW5rKGNtKTsNCiAgICB9DQoNCiAgICByZXR1cm4gISFyZXN1bHQNCiAgfQ0KDQogIC8vIEhhbmRsZSBhIGtleSBmcm9tIHRoZSBrZXlkb3duIGV2ZW50Lg0KICBmdW5jdGlvbiBoYW5kbGVLZXlCaW5kaW5nKGNtLCBlKSB7DQogICAgdmFyIG5hbWUgPSBrZXlOYW1lKGUsIHRydWUpOw0KICAgIGlmICghbmFtZSkgeyByZXR1cm4gZmFsc2UgfQ0KDQogICAgaWYgKGUuc2hpZnRLZXkgJiYgIWNtLnN0YXRlLmtleVNlcSkgew0KICAgICAgLy8gRmlyc3QgdHJ5IHRvIHJlc29sdmUgZnVsbCBuYW1lIChpbmNsdWRpbmcgJ1NoaWZ0LScpLiBGYWlsaW5nDQogICAgICAvLyB0aGF0LCBzZWUgaWYgdGhlcmUgaXMgYSBjdXJzb3ItbW90aW9uIGNvbW1hbmQgKHN0YXJ0aW5nIHdpdGgNCiAgICAgIC8vICdnbycpIGJvdW5kIHRvIHRoZSBrZXluYW1lIHdpdGhvdXQgJ1NoaWZ0LScuDQogICAgICByZXR1cm4gZGlzcGF0Y2hLZXkoY20sICJTaGlmdC0iICsgbmFtZSwgZSwgZnVuY3Rpb24gKGIpIHsgcmV0dXJuIGRvSGFuZGxlQmluZGluZyhjbSwgYiwgdHJ1ZSk7IH0pDQogICAgICAgICAgfHwgZGlzcGF0Y2hLZXkoY20sIG5hbWUsIGUsIGZ1bmN0aW9uIChiKSB7DQogICAgICAgICAgICAgICBpZiAodHlwZW9mIGIgPT0gInN0cmluZyIgPyAvXmdvW0EtWl0vLnRlc3QoYikgOiBiLm1vdGlvbikNCiAgICAgICAgICAgICAgICAgeyByZXR1cm4gZG9IYW5kbGVCaW5kaW5nKGNtLCBiKSB9DQogICAgICAgICAgICAgfSkNCiAgICB9IGVsc2Ugew0KICAgICAgcmV0dXJuIGRpc3BhdGNoS2V5KGNtLCBuYW1lLCBlLCBmdW5jdGlvbiAoYikgeyByZXR1cm4gZG9IYW5kbGVCaW5kaW5nKGNtLCBiKTsgfSkNCiAgICB9DQogIH0NCg0KICAvLyBIYW5kbGUgYSBrZXkgZnJvbSB0aGUga2V5cHJlc3MgZXZlbnQNCiAgZnVuY3Rpb24gaGFuZGxlQ2hhckJpbmRpbmcoY20sIGUsIGNoKSB7DQogICAgcmV0dXJuIGRpc3BhdGNoS2V5KGNtLCAiJyIgKyBjaCArICInIiwgZSwgZnVuY3Rpb24gKGIpIHsgcmV0dXJuIGRvSGFuZGxlQmluZGluZyhjbSwgYiwgdHJ1ZSk7IH0pDQogIH0NCg0KICB2YXIgbGFzdFN0b3BwZWRLZXkgPSBudWxsOw0KICBmdW5jdGlvbiBvbktleURvd24oZSkgew0KICAgIHZhciBjbSA9IHRoaXM7DQogICAgY20uY3VyT3AuZm9jdXMgPSBhY3RpdmVFbHQoKTsNCiAgICBpZiAoc2lnbmFsRE9NRXZlbnQoY20sIGUpKSB7IHJldHVybiB9DQogICAgLy8gSUUgZG9lcyBzdHJhbmdlIHRoaW5ncyB3aXRoIGVzY2FwZS4NCiAgICBpZiAoaWUgJiYgaWVfdmVyc2lvbiA8IDExICYmIGUua2V5Q29kZSA9PSAyNykgeyBlLnJldHVyblZhbHVlID0gZmFsc2U7IH0NCiAgICB2YXIgY29kZSA9IGUua2V5Q29kZTsNCiAgICBjbS5kaXNwbGF5LnNoaWZ0ID0gY29kZSA9PSAxNiB8fCBlLnNoaWZ0S2V5Ow0KICAgIHZhciBoYW5kbGVkID0gaGFuZGxlS2V5QmluZGluZyhjbSwgZSk7DQogICAgaWYgKHByZXN0bykgew0KICAgICAgbGFzdFN0b3BwZWRLZXkgPSBoYW5kbGVkID8gY29kZSA6IG51bGw7DQogICAgICAvLyBPcGVyYSBoYXMgbm8gY3V0IGV2ZW50Li4uIHdlIHRyeSB0byBhdCBsZWFzdCBjYXRjaCB0aGUga2V5IGNvbWJvDQogICAgICBpZiAoIWhhbmRsZWQgJiYgY29kZSA9PSA4OCAmJiAhaGFzQ29weUV2ZW50ICYmIChtYWMgPyBlLm1ldGFLZXkgOiBlLmN0cmxLZXkpKQ0KICAgICAgICB7IGNtLnJlcGxhY2VTZWxlY3Rpb24oIiIsIG51bGwsICJjdXQiKTsgfQ0KICAgIH0NCiAgICBpZiAoZ2Vja28gJiYgIW1hYyAmJiAhaGFuZGxlZCAmJiBjb2RlID09IDQ2ICYmIGUuc2hpZnRLZXkgJiYgIWUuY3RybEtleSAmJiBkb2N1bWVudC5leGVjQ29tbWFuZCkNCiAgICAgIHsgZG9jdW1lbnQuZXhlY0NvbW1hbmQoImN1dCIpOyB9DQoNCiAgICAvLyBUdXJuIG1vdXNlIGludG8gY3Jvc3NoYWlyIHdoZW4gQWx0IGlzIGhlbGQgb24gTWFjLg0KICAgIGlmIChjb2RlID09IDE4ICYmICEvXGJDb2RlTWlycm9yLWNyb3NzaGFpclxiLy50ZXN0KGNtLmRpc3BsYXkubGluZURpdi5jbGFzc05hbWUpKQ0KICAgICAgeyBzaG93Q3Jvc3NIYWlyKGNtKTsgfQ0KICB9DQoNCiAgZnVuY3Rpb24gc2hvd0Nyb3NzSGFpcihjbSkgew0KICAgIHZhciBsaW5lRGl2ID0gY20uZGlzcGxheS5saW5lRGl2Ow0KICAgIGFkZENsYXNzKGxpbmVEaXYsICJDb2RlTWlycm9yLWNyb3NzaGFpciIpOw0KDQogICAgZnVuY3Rpb24gdXAoZSkgew0KICAgICAgaWYgKGUua2V5Q29kZSA9PSAxOCB8fCAhZS5hbHRLZXkpIHsNCiAgICAgICAgcm1DbGFzcyhsaW5lRGl2LCAiQ29kZU1pcnJvci1jcm9zc2hhaXIiKTsNCiAgICAgICAgb2ZmKGRvY3VtZW50LCAia2V5dXAiLCB1cCk7DQogICAgICAgIG9mZihkb2N1bWVudCwgIm1vdXNlb3ZlciIsIHVwKTsNCiAgICAgIH0NCiAgICB9DQogICAgb24oZG9jdW1lbnQsICJrZXl1cCIsIHVwKTsNCiAgICBvbihkb2N1bWVudCwgIm1vdXNlb3ZlciIsIHVwKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIG9uS2V5VXAoZSkgew0KICAgIGlmIChlLmtleUNvZGUgPT0gMTYpIHsgdGhpcy5kb2Muc2VsLnNoaWZ0ID0gZmFsc2U7IH0NCiAgICBzaWduYWxET01FdmVudCh0aGlzLCBlKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIG9uS2V5UHJlc3MoZSkgew0KICAgIHZhciBjbSA9IHRoaXM7DQogICAgaWYgKGV2ZW50SW5XaWRnZXQoY20uZGlzcGxheSwgZSkgfHwgc2lnbmFsRE9NRXZlbnQoY20sIGUpIHx8IGUuY3RybEtleSAmJiAhZS5hbHRLZXkgfHwgbWFjICYmIGUubWV0YUtleSkgeyByZXR1cm4gfQ0KICAgIHZhciBrZXlDb2RlID0gZS5rZXlDb2RlLCBjaGFyQ29kZSA9IGUuY2hhckNvZGU7DQogICAgaWYgKHByZXN0byAmJiBrZXlDb2RlID09IGxhc3RTdG9wcGVkS2V5KSB7bGFzdFN0b3BwZWRLZXkgPSBudWxsOyBlX3ByZXZlbnREZWZhdWx0KGUpOyByZXR1cm59DQogICAgaWYgKChwcmVzdG8gJiYgKCFlLndoaWNoIHx8IGUud2hpY2ggPCAxMCkpICYmIGhhbmRsZUtleUJpbmRpbmcoY20sIGUpKSB7IHJldHVybiB9DQogICAgdmFyIGNoID0gU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSA9PSBudWxsID8ga2V5Q29kZSA6IGNoYXJDb2RlKTsNCiAgICAvLyBTb21lIGJyb3dzZXJzIGZpcmUga2V5cHJlc3MgZXZlbnRzIGZvciBiYWNrc3BhY2UNCiAgICBpZiAoY2ggPT0gIlx4MDgiKSB7IHJldHVybiB9DQogICAgaWYgKGhhbmRsZUNoYXJCaW5kaW5nKGNtLCBlLCBjaCkpIHsgcmV0dXJuIH0NCiAgICBjbS5kaXNwbGF5LmlucHV0Lm9uS2V5UHJlc3MoZSk7DQogIH0NCg0KICB2YXIgRE9VQkxFQ0xJQ0tfREVMQVkgPSA0MDA7DQoNCiAgdmFyIFBhc3RDbGljayA9IGZ1bmN0aW9uKHRpbWUsIHBvcywgYnV0dG9uKSB7DQogICAgdGhpcy50aW1lID0gdGltZTsNCiAgICB0aGlzLnBvcyA9IHBvczsNCiAgICB0aGlzLmJ1dHRvbiA9IGJ1dHRvbjsNCiAgfTsNCg0KICBQYXN0Q2xpY2sucHJvdG90eXBlLmNvbXBhcmUgPSBmdW5jdGlvbiAodGltZSwgcG9zLCBidXR0b24pIHsNCiAgICByZXR1cm4gdGhpcy50aW1lICsgRE9VQkxFQ0xJQ0tfREVMQVkgPiB0aW1lICYmDQogICAgICBjbXAocG9zLCB0aGlzLnBvcykgPT0gMCAmJiBidXR0b24gPT0gdGhpcy5idXR0b24NCiAgfTsNCg0KICB2YXIgbGFzdENsaWNrLCBsYXN0RG91YmxlQ2xpY2s7DQogIGZ1bmN0aW9uIGNsaWNrUmVwZWF0KHBvcywgYnV0dG9uKSB7DQogICAgdmFyIG5vdyA9ICtuZXcgRGF0ZTsNCiAgICBpZiAobGFzdERvdWJsZUNsaWNrICYmIGxhc3REb3VibGVDbGljay5jb21wYXJlKG5vdywgcG9zLCBidXR0b24pKSB7DQogICAgICBsYXN0Q2xpY2sgPSBsYXN0RG91YmxlQ2xpY2sgPSBudWxsOw0KICAgICAgcmV0dXJuICJ0cmlwbGUiDQogICAgfSBlbHNlIGlmIChsYXN0Q2xpY2sgJiYgbGFzdENsaWNrLmNvbXBhcmUobm93LCBwb3MsIGJ1dHRvbikpIHsNCiAgICAgIGxhc3REb3VibGVDbGljayA9IG5ldyBQYXN0Q2xpY2sobm93LCBwb3MsIGJ1dHRvbik7DQogICAgICBsYXN0Q2xpY2sgPSBudWxsOw0KICAgICAgcmV0dXJuICJkb3VibGUiDQogICAgfSBlbHNlIHsNCiAgICAgIGxhc3RDbGljayA9IG5ldyBQYXN0Q2xpY2sobm93LCBwb3MsIGJ1dHRvbik7DQogICAgICBsYXN0RG91YmxlQ2xpY2sgPSBudWxsOw0KICAgICAgcmV0dXJuICJzaW5nbGUiDQogICAgfQ0KICB9DQoNCiAgLy8gQSBtb3VzZSBkb3duIGNhbiBiZSBhIHNpbmdsZSBjbGljaywgZG91YmxlIGNsaWNrLCB0cmlwbGUgY2xpY2ssDQogIC8vIHN0YXJ0IG9mIHNlbGVjdGlvbiBkcmFnLCBzdGFydCBvZiB0ZXh0IGRyYWcsIG5ldyBjdXJzb3INCiAgLy8gKGN0cmwtY2xpY2spLCByZWN0YW5nbGUgZHJhZyAoYWx0LWRyYWcpLCBvciB4d2luDQogIC8vIG1pZGRsZS1jbGljay1wYXN0ZS4gT3IgaXQgbWlnaHQgYmUgYSBjbGljayBvbiBzb21ldGhpbmcgd2Ugc2hvdWxkDQogIC8vIG5vdCBpbnRlcmZlcmUgd2l0aCwgc3VjaCBhcyBhIHNjcm9sbGJhciBvciB3aWRnZXQuDQogIGZ1bmN0aW9uIG9uTW91c2VEb3duKGUpIHsNCiAgICB2YXIgY20gPSB0aGlzLCBkaXNwbGF5ID0gY20uZGlzcGxheTsNCiAgICBpZiAoc2lnbmFsRE9NRXZlbnQoY20sIGUpIHx8IGRpc3BsYXkuYWN0aXZlVG91Y2ggJiYgZGlzcGxheS5pbnB1dC5zdXBwb3J0c1RvdWNoKCkpIHsgcmV0dXJuIH0NCiAgICBkaXNwbGF5LmlucHV0LmVuc3VyZVBvbGxlZCgpOw0KICAgIGRpc3BsYXkuc2hpZnQgPSBlLnNoaWZ0S2V5Ow0KDQogICAgaWYgKGV2ZW50SW5XaWRnZXQoZGlzcGxheSwgZSkpIHsNCiAgICAgIGlmICghd2Via2l0KSB7DQogICAgICAgIC8vIEJyaWVmbHkgdHVybiBvZmYgZHJhZ2dhYmlsaXR5LCB0byBhbGxvdyB3aWRnZXRzIHRvIGRvDQogICAgICAgIC8vIG5vcm1hbCBkcmFnZ2luZyB0aGluZ3MuDQogICAgICAgIGRpc3BsYXkuc2Nyb2xsZXIuZHJhZ2dhYmxlID0gZmFsc2U7DQogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzcGxheS5zY3JvbGxlci5kcmFnZ2FibGUgPSB0cnVlOyB9LCAxMDApOw0KICAgICAgfQ0KICAgICAgcmV0dXJuDQogICAgfQ0KICAgIGlmIChjbGlja0luR3V0dGVyKGNtLCBlKSkgeyByZXR1cm4gfQ0KICAgIHZhciBwb3MgPSBwb3NGcm9tTW91c2UoY20sIGUpLCBidXR0b24gPSBlX2J1dHRvbihlKSwgcmVwZWF0ID0gcG9zID8gY2xpY2tSZXBlYXQocG9zLCBidXR0b24pIDogInNpbmdsZSI7DQogICAgd2luZG93LmZvY3VzKCk7DQoNCiAgICAvLyAjMzI2MTogbWFrZSBzdXJlLCB0aGF0IHdlJ3JlIG5vdCBzdGFydGluZyBhIHNlY29uZCBzZWxlY3Rpb24NCiAgICBpZiAoYnV0dG9uID09IDEgJiYgY20uc3RhdGUuc2VsZWN0aW5nVGV4dCkNCiAgICAgIHsgY20uc3RhdGUuc2VsZWN0aW5nVGV4dChlKTsgfQ0KDQogICAgaWYgKHBvcyAmJiBoYW5kbGVNYXBwZWRCdXR0b24oY20sIGJ1dHRvbiwgcG9zLCByZXBlYXQsIGUpKSB7IHJldHVybiB9DQoNCiAgICBpZiAoYnV0dG9uID09IDEpIHsNCiAgICAgIGlmIChwb3MpIHsgbGVmdEJ1dHRvbkRvd24oY20sIHBvcywgcmVwZWF0LCBlKTsgfQ0KICAgICAgZWxzZSBpZiAoZV90YXJnZXQoZSkgPT0gZGlzcGxheS5zY3JvbGxlcikgeyBlX3ByZXZlbnREZWZhdWx0KGUpOyB9DQogICAgfSBlbHNlIGlmIChidXR0b24gPT0gMikgew0KICAgICAgaWYgKHBvcykgeyBleHRlbmRTZWxlY3Rpb24oY20uZG9jLCBwb3MpOyB9DQogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpc3BsYXkuaW5wdXQuZm9jdXMoKTsgfSwgMjApOw0KICAgIH0gZWxzZSBpZiAoYnV0dG9uID09IDMpIHsNCiAgICAgIGlmIChjYXB0dXJlUmlnaHRDbGljaykgeyBjbS5kaXNwbGF5LmlucHV0Lm9uQ29udGV4dE1lbnUoZSk7IH0NCiAgICAgIGVsc2UgeyBkZWxheUJsdXJFdmVudChjbSk7IH0NCiAgICB9DQogIH0NCg0KICBmdW5jdGlvbiBoYW5kbGVNYXBwZWRCdXR0b24oY20sIGJ1dHRvbiwgcG9zLCByZXBlYXQsIGV2ZW50KSB7DQogICAgdmFyIG5hbWUgPSAiQ2xpY2siOw0KICAgIGlmIChyZXBlYXQgPT0gImRvdWJsZSIpIHsgbmFtZSA9ICJEb3VibGUiICsgbmFtZTsgfQ0KICAgIGVsc2UgaWYgKHJlcGVhdCA9PSAidHJpcGxlIikgeyBuYW1lID0gIlRyaXBsZSIgKyBuYW1lOyB9DQogICAgbmFtZSA9IChidXR0b24gPT0gMSA/ICJMZWZ0IiA6IGJ1dHRvbiA9PSAyID8gIk1pZGRsZSIgOiAiUmlnaHQiKSArIG5hbWU7DQoNCiAgICByZXR1cm4gZGlzcGF0Y2hLZXkoY20sICBhZGRNb2RpZmllck5hbWVzKG5hbWUsIGV2ZW50KSwgZXZlbnQsIGZ1bmN0aW9uIChib3VuZCkgew0KICAgICAgaWYgKHR5cGVvZiBib3VuZCA9PSAic3RyaW5nIikgeyBib3VuZCA9IGNvbW1hbmRzW2JvdW5kXTsgfQ0KICAgICAgaWYgKCFib3VuZCkgeyByZXR1cm4gZmFsc2UgfQ0KICAgICAgdmFyIGRvbmUgPSBmYWxzZTsNCiAgICAgIHRyeSB7DQogICAgICAgIGlmIChjbS5pc1JlYWRPbmx5KCkpIHsgY20uc3RhdGUuc3VwcHJlc3NFZGl0cyA9IHRydWU7IH0NCiAgICAgICAgZG9uZSA9IGJvdW5kKGNtLCBwb3MpICE9IFBhc3M7DQogICAgICB9IGZpbmFsbHkgew0KICAgICAgICBjbS5zdGF0ZS5zdXBwcmVzc0VkaXRzID0gZmFsc2U7DQogICAgICB9DQogICAgICByZXR1cm4gZG9uZQ0KICAgIH0pDQogIH0NCg0KICBmdW5jdGlvbiBjb25maWd1cmVNb3VzZShjbSwgcmVwZWF0LCBldmVudCkgew0KICAgIHZhciBvcHRpb24gPSBjbS5nZXRPcHRpb24oImNvbmZpZ3VyZU1vdXNlIik7DQogICAgdmFyIHZhbHVlID0gb3B0aW9uID8gb3B0aW9uKGNtLCByZXBlYXQsIGV2ZW50KSA6IHt9Ow0KICAgIGlmICh2YWx1ZS51bml0ID09IG51bGwpIHsNCiAgICAgIHZhciByZWN0ID0gY2hyb21lT1MgPyBldmVudC5zaGlmdEtleSAmJiBldmVudC5tZXRhS2V5IDogZXZlbnQuYWx0S2V5Ow0KICAgICAgdmFsdWUudW5pdCA9IHJlY3QgPyAicmVjdGFuZ2xlIiA6IHJlcGVhdCA9PSAic2luZ2xlIiA/ICJjaGFyIiA6IHJlcGVhdCA9PSAiZG91YmxlIiA/ICJ3b3JkIiA6ICJsaW5lIjsNCiAgICB9DQogICAgaWYgKHZhbHVlLmV4dGVuZCA9PSBudWxsIHx8IGNtLmRvYy5leHRlbmQpIHsgdmFsdWUuZXh0ZW5kID0gY20uZG9jLmV4dGVuZCB8fCBldmVudC5zaGlmdEtleTsgfQ0KICAgIGlmICh2YWx1ZS5hZGROZXcgPT0gbnVsbCkgeyB2YWx1ZS5hZGROZXcgPSBtYWMgPyBldmVudC5tZXRhS2V5IDogZXZlbnQuY3RybEtleTsgfQ0KICAgIGlmICh2YWx1ZS5tb3ZlT25EcmFnID09IG51bGwpIHsgdmFsdWUubW92ZU9uRHJhZyA9ICEobWFjID8gZXZlbnQuYWx0S2V5IDogZXZlbnQuY3RybEtleSk7IH0NCiAgICByZXR1cm4gdmFsdWUNCiAgfQ0KDQogIGZ1bmN0aW9uIGxlZnRCdXR0b25Eb3duKGNtLCBwb3MsIHJlcGVhdCwgZXZlbnQpIHsNCiAgICBpZiAoaWUpIHsgc2V0VGltZW91dChiaW5kKGVuc3VyZUZvY3VzLCBjbSksIDApOyB9DQogICAgZWxzZSB7IGNtLmN1ck9wLmZvY3VzID0gYWN0aXZlRWx0KCk7IH0NCg0KICAgIHZhciBiZWhhdmlvciA9IGNvbmZpZ3VyZU1vdXNlKGNtLCByZXBlYXQsIGV2ZW50KTsNCg0KICAgIHZhciBzZWwgPSBjbS5kb2Muc2VsLCBjb250YWluZWQ7DQogICAgaWYgKGNtLm9wdGlvbnMuZHJhZ0Ryb3AgJiYgZHJhZ0FuZERyb3AgJiYgIWNtLmlzUmVhZE9ubHkoKSAmJg0KICAgICAgICByZXBlYXQgPT0gInNpbmdsZSIgJiYgKGNvbnRhaW5lZCA9IHNlbC5jb250YWlucyhwb3MpKSA+IC0xICYmDQogICAgICAgIChjbXAoKGNvbnRhaW5lZCA9IHNlbC5yYW5nZXNbY29udGFpbmVkXSkuZnJvbSgpLCBwb3MpIDwgMCB8fCBwb3MueFJlbCA+IDApICYmDQogICAgICAgIChjbXAoY29udGFpbmVkLnRvKCksIHBvcykgPiAwIHx8IHBvcy54UmVsIDwgMCkpDQogICAgICB7IGxlZnRCdXR0b25TdGFydERyYWcoY20sIGV2ZW50LCBwb3MsIGJlaGF2aW9yKTsgfQ0KICAgIGVsc2UNCiAgICAgIHsgbGVmdEJ1dHRvblNlbGVjdChjbSwgZXZlbnQsIHBvcywgYmVoYXZpb3IpOyB9DQogIH0NCg0KICAvLyBTdGFydCBhIHRleHQgZHJhZy4gV2hlbiBpdCBlbmRzLCBzZWUgaWYgYW55IGRyYWdnaW5nIGFjdHVhbGx5DQogIC8vIGhhcHBlbiwgYW5kIHRyZWF0IGFzIGEgY2xpY2sgaWYgaXQgZGlkbid0Lg0KICBmdW5jdGlvbiBsZWZ0QnV0dG9uU3RhcnREcmFnKGNtLCBldmVudCwgcG9zLCBiZWhhdmlvcikgew0KICAgIHZhciBkaXNwbGF5ID0gY20uZGlzcGxheSwgbW92ZWQgPSBmYWxzZTsNCiAgICB2YXIgZHJhZ0VuZCA9IG9wZXJhdGlvbihjbSwgZnVuY3Rpb24gKGUpIHsNCiAgICAgIGlmICh3ZWJraXQpIHsgZGlzcGxheS5zY3JvbGxlci5kcmFnZ2FibGUgPSBmYWxzZTsgfQ0KICAgICAgY20uc3RhdGUuZHJhZ2dpbmdUZXh0ID0gZmFsc2U7DQogICAgICBvZmYoZGlzcGxheS53cmFwcGVyLm93bmVyRG9jdW1lbnQsICJtb3VzZXVwIiwgZHJhZ0VuZCk7DQogICAgICBvZmYoZGlzcGxheS53cmFwcGVyLm93bmVyRG9jdW1lbnQsICJtb3VzZW1vdmUiLCBtb3VzZU1vdmUpOw0KICAgICAgb2ZmKGRpc3BsYXkuc2Nyb2xsZXIsICJkcmFnc3RhcnQiLCBkcmFnU3RhcnQpOw0KICAgICAgb2ZmKGRpc3BsYXkuc2Nyb2xsZXIsICJkcm9wIiwgZHJhZ0VuZCk7DQogICAgICBpZiAoIW1vdmVkKSB7DQogICAgICAgIGVfcHJldmVudERlZmF1bHQoZSk7DQogICAgICAgIGlmICghYmVoYXZpb3IuYWRkTmV3KQ0KICAgICAgICAgIHsgZXh0ZW5kU2VsZWN0aW9uKGNtLmRvYywgcG9zLCBudWxsLCBudWxsLCBiZWhhdmlvci5leHRlbmQpOyB9DQogICAgICAgIC8vIFdvcmsgYXJvdW5kIHVuZXhwbGFpbmFibGUgZm9jdXMgcHJvYmxlbSBpbiBJRTkgKCMyMTI3KSBhbmQgQ2hyb21lICgjMzA4MSkNCiAgICAgICAgaWYgKHdlYmtpdCB8fCBpZSAmJiBpZV92ZXJzaW9uID09IDkpDQogICAgICAgICAgeyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtkaXNwbGF5LndyYXBwZXIub3duZXJEb2N1bWVudC5ib2R5LmZvY3VzKCk7IGRpc3BsYXkuaW5wdXQuZm9jdXMoKTt9LCAyMCk7IH0NCiAgICAgICAgZWxzZQ0KICAgICAgICAgIHsgZGlzcGxheS5pbnB1dC5mb2N1cygpOyB9DQogICAgICB9DQogICAgfSk7DQogICAgdmFyIG1vdXNlTW92ZSA9IGZ1bmN0aW9uKGUyKSB7DQogICAgICBtb3ZlZCA9IG1vdmVkIHx8IE1hdGguYWJzKGV2ZW50LmNsaWVudFggLSBlMi5jbGllbnRYKSArIE1hdGguYWJzKGV2ZW50LmNsaWVudFkgLSBlMi5jbGllbnRZKSA+PSAxMDsNCiAgICB9Ow0KICAgIHZhciBkcmFnU3RhcnQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtb3ZlZCA9IHRydWU7IH07DQogICAgLy8gTGV0IHRoZSBkcmFnIGhhbmRsZXIgaGFuZGxlIHRoaXMuDQogICAgaWYgKHdlYmtpdCkgeyBkaXNwbGF5LnNjcm9sbGVyLmRyYWdnYWJsZSA9IHRydWU7IH0NCiAgICBjbS5zdGF0ZS5kcmFnZ2luZ1RleHQgPSBkcmFnRW5kOw0KICAgIGRyYWdFbmQuY29weSA9ICFiZWhhdmlvci5tb3ZlT25EcmFnOw0KICAgIC8vIElFJ3MgYXBwcm9hY2ggdG8gZHJhZ2dhYmxlDQogICAgaWYgKGRpc3BsYXkuc2Nyb2xsZXIuZHJhZ0Ryb3ApIHsgZGlzcGxheS5zY3JvbGxlci5kcmFnRHJvcCgpOyB9DQogICAgb24oZGlzcGxheS53cmFwcGVyLm93bmVyRG9jdW1lbnQsICJtb3VzZXVwIiwgZHJhZ0VuZCk7DQogICAgb24oZGlzcGxheS53cmFwcGVyLm93bmVyRG9jdW1lbnQsICJtb3VzZW1vdmUiLCBtb3VzZU1vdmUpOw0KICAgIG9uKGRpc3BsYXkuc2Nyb2xsZXIsICJkcmFnc3RhcnQiLCBkcmFnU3RhcnQpOw0KICAgIG9uKGRpc3BsYXkuc2Nyb2xsZXIsICJkcm9wIiwgZHJhZ0VuZCk7DQoNCiAgICBkZWxheUJsdXJFdmVudChjbSk7DQogICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBkaXNwbGF5LmlucHV0LmZvY3VzKCk7IH0sIDIwKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIHJhbmdlRm9yVW5pdChjbSwgcG9zLCB1bml0KSB7DQogICAgaWYgKHVuaXQgPT0gImNoYXIiKSB7IHJldHVybiBuZXcgUmFuZ2UocG9zLCBwb3MpIH0NCiAgICBpZiAodW5pdCA9PSAid29yZCIpIHsgcmV0dXJuIGNtLmZpbmRXb3JkQXQocG9zKSB9DQogICAgaWYgKHVuaXQgPT0gImxpbmUiKSB7IHJldHVybiBuZXcgUmFuZ2UoUG9zKHBvcy5saW5lLCAwKSwgY2xpcFBvcyhjbS5kb2MsIFBvcyhwb3MubGluZSArIDEsIDApKSkgfQ0KICAgIHZhciByZXN1bHQgPSB1bml0KGNtLCBwb3MpOw0KICAgIHJldHVybiBuZXcgUmFuZ2UocmVzdWx0LmZyb20sIHJlc3VsdC50bykNCiAgfQ0KDQogIC8vIE5vcm1hbCBzZWxlY3Rpb24sIGFzIG9wcG9zZWQgdG8gdGV4dCBkcmFnZ2luZy4NCiAgZnVuY3Rpb24gbGVmdEJ1dHRvblNlbGVjdChjbSwgZXZlbnQsIHN0YXJ0LCBiZWhhdmlvcikgew0KICAgIHZhciBkaXNwbGF5ID0gY20uZGlzcGxheSwgZG9jID0gY20uZG9jOw0KICAgIGVfcHJldmVudERlZmF1bHQoZXZlbnQpOw0KDQogICAgdmFyIG91clJhbmdlLCBvdXJJbmRleCwgc3RhcnRTZWwgPSBkb2Muc2VsLCByYW5nZXMgPSBzdGFydFNlbC5yYW5nZXM7DQogICAgaWYgKGJlaGF2aW9yLmFkZE5ldyAmJiAhYmVoYXZpb3IuZXh0ZW5kKSB7DQogICAgICBvdXJJbmRleCA9IGRvYy5zZWwuY29udGFpbnMoc3RhcnQpOw0KICAgICAgaWYgKG91ckluZGV4ID4gLTEpDQogICAgICAgIHsgb3VyUmFuZ2UgPSByYW5nZXNbb3VySW5kZXhdOyB9DQogICAgICBlbHNlDQogICAgICAgIHsgb3VyUmFuZ2UgPSBuZXcgUmFuZ2Uoc3RhcnQsIHN0YXJ0KTsgfQ0KICAgIH0gZWxzZSB7DQogICAgICBvdXJSYW5nZSA9IGRvYy5zZWwucHJpbWFyeSgpOw0KICAgICAgb3VySW5kZXggPSBkb2Muc2VsLnByaW1JbmRleDsNCiAgICB9DQoNCiAgICBpZiAoYmVoYXZpb3IudW5pdCA9PSAicmVjdGFuZ2xlIikgew0KICAgICAgaWYgKCFiZWhhdmlvci5hZGROZXcpIHsgb3VyUmFuZ2UgPSBuZXcgUmFuZ2Uoc3RhcnQsIHN0YXJ0KTsgfQ0KICAgICAgc3RhcnQgPSBwb3NGcm9tTW91c2UoY20sIGV2ZW50LCB0cnVlLCB0cnVlKTsNCiAgICAgIG91ckluZGV4ID0gLTE7DQogICAgfSBlbHNlIHsNCiAgICAgIHZhciByYW5nZSQkMSA9IHJhbmdlRm9yVW5pdChjbSwgc3RhcnQsIGJlaGF2aW9yLnVuaXQpOw0KICAgICAgaWYgKGJlaGF2aW9yLmV4dGVuZCkNCiAgICAgICAgeyBvdXJSYW5nZSA9IGV4dGVuZFJhbmdlKG91clJhbmdlLCByYW5nZSQkMS5hbmNob3IsIHJhbmdlJCQxLmhlYWQsIGJlaGF2aW9yLmV4dGVuZCk7IH0NCiAgICAgIGVsc2UNCiAgICAgICAgeyBvdXJSYW5nZSA9IHJhbmdlJCQxOyB9DQogICAgfQ0KDQogICAgaWYgKCFiZWhhdmlvci5hZGROZXcpIHsNCiAgICAgIG91ckluZGV4ID0gMDsNCiAgICAgIHNldFNlbGVjdGlvbihkb2MsIG5ldyBTZWxlY3Rpb24oW291clJhbmdlXSwgMCksIHNlbF9tb3VzZSk7DQogICAgICBzdGFydFNlbCA9IGRvYy5zZWw7DQogICAgfSBlbHNlIGlmIChvdXJJbmRleCA9PSAtMSkgew0KICAgICAgb3VySW5kZXggPSByYW5nZXMubGVuZ3RoOw0KICAgICAgc2V0U2VsZWN0aW9uKGRvYywgbm9ybWFsaXplU2VsZWN0aW9uKGNtLCByYW5nZXMuY29uY2F0KFtvdXJSYW5nZV0pLCBvdXJJbmRleCksDQogICAgICAgICAgICAgICAgICAge3Njcm9sbDogZmFsc2UsIG9yaWdpbjogIiptb3VzZSJ9KTsNCiAgICB9IGVsc2UgaWYgKHJhbmdlcy5sZW5ndGggPiAxICYmIHJhbmdlc1tvdXJJbmRleF0uZW1wdHkoKSAmJiBiZWhhdmlvci51bml0ID09ICJjaGFyIiAmJiAhYmVoYXZpb3IuZXh0ZW5kKSB7DQogICAgICBzZXRTZWxlY3Rpb24oZG9jLCBub3JtYWxpemVTZWxlY3Rpb24oY20sIHJhbmdlcy5zbGljZSgwLCBvdXJJbmRleCkuY29uY2F0KHJhbmdlcy5zbGljZShvdXJJbmRleCArIDEpKSwgMCksDQogICAgICAgICAgICAgICAgICAge3Njcm9sbDogZmFsc2UsIG9yaWdpbjogIiptb3VzZSJ9KTsNCiAgICAgIHN0YXJ0U2VsID0gZG9jLnNlbDsNCiAgICB9IGVsc2Ugew0KICAgICAgcmVwbGFjZU9uZVNlbGVjdGlvbihkb2MsIG91ckluZGV4LCBvdXJSYW5nZSwgc2VsX21vdXNlKTsNCiAgICB9DQoNCiAgICB2YXIgbGFzdFBvcyA9IHN0YXJ0Ow0KICAgIGZ1bmN0aW9uIGV4dGVuZFRvKHBvcykgew0KICAgICAgaWYgKGNtcChsYXN0UG9zLCBwb3MpID09IDApIHsgcmV0dXJuIH0NCiAgICAgIGxhc3RQb3MgPSBwb3M7DQoNCiAgICAgIGlmIChiZWhhdmlvci51bml0ID09ICJyZWN0YW5nbGUiKSB7DQogICAgICAgIHZhciByYW5nZXMgPSBbXSwgdGFiU2l6ZSA9IGNtLm9wdGlvbnMudGFiU2l6ZTsNCiAgICAgICAgdmFyIHN0YXJ0Q29sID0gY291bnRDb2x1bW4oZ2V0TGluZShkb2MsIHN0YXJ0LmxpbmUpLnRleHQsIHN0YXJ0LmNoLCB0YWJTaXplKTsNCiAgICAgICAgdmFyIHBvc0NvbCA9IGNvdW50Q29sdW1uKGdldExpbmUoZG9jLCBwb3MubGluZSkudGV4dCwgcG9zLmNoLCB0YWJTaXplKTsNCiAgICAgICAgdmFyIGxlZnQgPSBNYXRoLm1pbihzdGFydENvbCwgcG9zQ29sKSwgcmlnaHQgPSBNYXRoLm1heChzdGFydENvbCwgcG9zQ29sKTsNCiAgICAgICAgZm9yICh2YXIgbGluZSA9IE1hdGgubWluKHN0YXJ0LmxpbmUsIHBvcy5saW5lKSwgZW5kID0gTWF0aC5taW4oY20ubGFzdExpbmUoKSwgTWF0aC5tYXgoc3RhcnQubGluZSwgcG9zLmxpbmUpKTsNCiAgICAgICAgICAgICBsaW5lIDw9IGVuZDsgbGluZSsrKSB7DQogICAgICAgICAgdmFyIHRleHQgPSBnZXRMaW5lKGRvYywgbGluZSkudGV4dCwgbGVmdFBvcyA9IGZpbmRDb2x1bW4odGV4dCwgbGVmdCwgdGFiU2l6ZSk7DQogICAgICAgICAgaWYgKGxlZnQgPT0gcmlnaHQpDQogICAgICAgICAgICB7IHJhbmdlcy5wdXNoKG5ldyBSYW5nZShQb3MobGluZSwgbGVmdFBvcyksIFBvcyhsaW5lLCBsZWZ0UG9zKSkpOyB9DQogICAgICAgICAgZWxzZSBpZiAodGV4dC5sZW5ndGggPiBsZWZ0UG9zKQ0KICAgICAgICAgICAgeyByYW5nZXMucHVzaChuZXcgUmFuZ2UoUG9zKGxpbmUsIGxlZnRQb3MpLCBQb3MobGluZSwgZmluZENvbHVtbih0ZXh0LCByaWdodCwgdGFiU2l6ZSkpKSk7IH0NCiAgICAgICAgfQ0KICAgICAgICBpZiAoIXJhbmdlcy5sZW5ndGgpIHsgcmFuZ2VzLnB1c2gobmV3IFJhbmdlKHN0YXJ0LCBzdGFydCkpOyB9DQogICAgICAgIHNldFNlbGVjdGlvbihkb2MsIG5vcm1hbGl6ZVNlbGVjdGlvbihjbSwgc3RhcnRTZWwucmFuZ2VzLnNsaWNlKDAsIG91ckluZGV4KS5jb25jYXQocmFuZ2VzKSwgb3VySW5kZXgpLA0KICAgICAgICAgICAgICAgICAgICAge29yaWdpbjogIiptb3VzZSIsIHNjcm9sbDogZmFsc2V9KTsNCiAgICAgICAgY20uc2Nyb2xsSW50b1ZpZXcocG9zKTsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHZhciBvbGRSYW5nZSA9IG91clJhbmdlOw0KICAgICAgICB2YXIgcmFuZ2UkJDEgPSByYW5nZUZvclVuaXQoY20sIHBvcywgYmVoYXZpb3IudW5pdCk7DQogICAgICAgIHZhciBhbmNob3IgPSBvbGRSYW5nZS5hbmNob3IsIGhlYWQ7DQogICAgICAgIGlmIChjbXAocmFuZ2UkJDEuYW5jaG9yLCBhbmNob3IpID4gMCkgew0KICAgICAgICAgIGhlYWQgPSByYW5nZSQkMS5oZWFkOw0KICAgICAgICAgIGFuY2hvciA9IG1pblBvcyhvbGRSYW5nZS5mcm9tKCksIHJhbmdlJCQxLmFuY2hvcik7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgaGVhZCA9IHJhbmdlJCQxLmFuY2hvcjsNCiAgICAgICAgICBhbmNob3IgPSBtYXhQb3Mob2xkUmFuZ2UudG8oKSwgcmFuZ2UkJDEuaGVhZCk7DQogICAgICAgIH0NCiAgICAgICAgdmFyIHJhbmdlcyQxID0gc3RhcnRTZWwucmFuZ2VzLnNsaWNlKDApOw0KICAgICAgICByYW5nZXMkMVtvdXJJbmRleF0gPSBiaWRpU2ltcGxpZnkoY20sIG5ldyBSYW5nZShjbGlwUG9zKGRvYywgYW5jaG9yKSwgaGVhZCkpOw0KICAgICAgICBzZXRTZWxlY3Rpb24oZG9jLCBub3JtYWxpemVTZWxlY3Rpb24oY20sIHJhbmdlcyQxLCBvdXJJbmRleCksIHNlbF9tb3VzZSk7DQogICAgICB9DQogICAgfQ0KDQogICAgdmFyIGVkaXRvclNpemUgPSBkaXNwbGF5LndyYXBwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7DQogICAgLy8gVXNlZCB0byBlbnN1cmUgdGltZW91dCByZS10cmllcyBkb24ndCBmaXJlIHdoZW4gYW5vdGhlciBleHRlbmQNCiAgICAvLyBoYXBwZW5lZCBpbiB0aGUgbWVhbnRpbWUgKGNsZWFyVGltZW91dCBpc24ndCByZWxpYWJsZSAtLSBhdA0KICAgIC8vIGxlYXN0IG9uIENocm9tZSwgdGhlIHRpbWVvdXRzIHN0aWxsIGhhcHBlbiBldmVuIHdoZW4gY2xlYXJlZCwNCiAgICAvLyBpZiB0aGUgY2xlYXIgaGFwcGVucyBhZnRlciB0aGVpciBzY2hlZHVsZWQgZmlyaW5nIHRpbWUpLg0KICAgIHZhciBjb3VudGVyID0gMDsNCg0KICAgIGZ1bmN0aW9uIGV4dGVuZChlKSB7DQogICAgICB2YXIgY3VyQ291bnQgPSArK2NvdW50ZXI7DQogICAgICB2YXIgY3VyID0gcG9zRnJvbU1vdXNlKGNtLCBlLCB0cnVlLCBiZWhhdmlvci51bml0ID09ICJyZWN0YW5nbGUiKTsNCiAgICAgIGlmICghY3VyKSB7IHJldHVybiB9DQogICAgICBpZiAoY21wKGN1ciwgbGFzdFBvcykgIT0gMCkgew0KICAgICAgICBjbS5jdXJPcC5mb2N1cyA9IGFjdGl2ZUVsdCgpOw0KICAgICAgICBleHRlbmRUbyhjdXIpOw0KICAgICAgICB2YXIgdmlzaWJsZSA9IHZpc2libGVMaW5lcyhkaXNwbGF5LCBkb2MpOw0KICAgICAgICBpZiAoY3VyLmxpbmUgPj0gdmlzaWJsZS50byB8fCBjdXIubGluZSA8IHZpc2libGUuZnJvbSkNCiAgICAgICAgICB7IHNldFRpbWVvdXQob3BlcmF0aW9uKGNtLCBmdW5jdGlvbiAoKSB7aWYgKGNvdW50ZXIgPT0gY3VyQ291bnQpIHsgZXh0ZW5kKGUpOyB9fSksIDE1MCk7IH0NCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHZhciBvdXRzaWRlID0gZS5jbGllbnRZIDwgZWRpdG9yU2l6ZS50b3AgPyAtMjAgOiBlLmNsaWVudFkgPiBlZGl0b3JTaXplLmJvdHRvbSA/IDIwIDogMDsNCiAgICAgICAgaWYgKG91dHNpZGUpIHsgc2V0VGltZW91dChvcGVyYXRpb24oY20sIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICBpZiAoY291bnRlciAhPSBjdXJDb3VudCkgeyByZXR1cm4gfQ0KICAgICAgICAgIGRpc3BsYXkuc2Nyb2xsZXIuc2Nyb2xsVG9wICs9IG91dHNpZGU7DQogICAgICAgICAgZXh0ZW5kKGUpOw0KICAgICAgICB9KSwgNTApOyB9DQogICAgICB9DQogICAgfQ0KDQogICAgZnVuY3Rpb24gZG9uZShlKSB7DQogICAgICBjbS5zdGF0ZS5zZWxlY3RpbmdUZXh0ID0gZmFsc2U7DQogICAgICBjb3VudGVyID0gSW5maW5pdHk7DQogICAgICAvLyBJZiBlIGlzIG51bGwgb3IgdW5kZWZpbmVkIHdlIGludGVycHJldCB0aGlzIGFzIHNvbWVvbmUgdHJ5aW5nDQogICAgICAvLyB0byBleHBsaWNpdGx5IGNhbmNlbCB0aGUgc2VsZWN0aW9uIHJhdGhlciB0aGFuIHRoZSB1c2VyDQogICAgICAvLyBsZXR0aW5nIGdvIG9mIHRoZSBtb3VzZSBidXR0b24uDQogICAgICBpZiAoZSkgew0KICAgICAgICBlX3ByZXZlbnREZWZhdWx0KGUpOw0KICAgICAgICBkaXNwbGF5LmlucHV0LmZvY3VzKCk7DQogICAgICB9DQogICAgICBvZmYoZGlzcGxheS53cmFwcGVyLm93bmVyRG9jdW1lbnQsICJtb3VzZW1vdmUiLCBtb3ZlKTsNCiAgICAgIG9mZihkaXNwbGF5LndyYXBwZXIub3duZXJEb2N1bWVudCwgIm1vdXNldXAiLCB1cCk7DQogICAgICBkb2MuaGlzdG9yeS5sYXN0U2VsT3JpZ2luID0gbnVsbDsNCiAgICB9DQoNCiAgICB2YXIgbW92ZSA9IG9wZXJhdGlvbihjbSwgZnVuY3Rpb24gKGUpIHsNCiAgICAgIGlmIChlLmJ1dHRvbnMgPT09IDAgfHwgIWVfYnV0dG9uKGUpKSB7IGRvbmUoZSk7IH0NCiAgICAgIGVsc2UgeyBleHRlbmQoZSk7IH0NCiAgICB9KTsNCiAgICB2YXIgdXAgPSBvcGVyYXRpb24oY20sIGRvbmUpOw0KICAgIGNtLnN0YXRlLnNlbGVjdGluZ1RleHQgPSB1cDsNCiAgICBvbihkaXNwbGF5LndyYXBwZXIub3duZXJEb2N1bWVudCwgIm1vdXNlbW92ZSIsIG1vdmUpOw0KICAgIG9uKGRpc3BsYXkud3JhcHBlci5vd25lckRvY3VtZW50LCAibW91c2V1cCIsIHVwKTsNCiAgfQ0KDQogIC8vIFVzZWQgd2hlbiBtb3VzZS1zZWxlY3RpbmcgdG8gYWRqdXN0IHRoZSBhbmNob3IgdG8gdGhlIHByb3BlciBzaWRlDQogIC8vIG9mIGEgYmlkaSBqdW1wIGRlcGVuZGluZyBvbiB0aGUgdmlzdWFsIHBvc2l0aW9uIG9mIHRoZSBoZWFkLg0KICBmdW5jdGlvbiBiaWRpU2ltcGxpZnkoY20sIHJhbmdlJCQxKSB7DQogICAgdmFyIGFuY2hvciA9IHJhbmdlJCQxLmFuY2hvcjsNCiAgICB2YXIgaGVhZCA9IHJhbmdlJCQxLmhlYWQ7DQogICAgdmFyIGFuY2hvckxpbmUgPSBnZXRMaW5lKGNtLmRvYywgYW5jaG9yLmxpbmUpOw0KICAgIGlmIChjbXAoYW5jaG9yLCBoZWFkKSA9PSAwICYmIGFuY2hvci5zdGlja3kgPT0gaGVhZC5zdGlja3kpIHsgcmV0dXJuIHJhbmdlJCQxIH0NCiAgICB2YXIgb3JkZXIgPSBnZXRPcmRlcihhbmNob3JMaW5lKTsNCiAgICBpZiAoIW9yZGVyKSB7IHJldHVybiByYW5nZSQkMSB9DQogICAgdmFyIGluZGV4ID0gZ2V0QmlkaVBhcnRBdChvcmRlciwgYW5jaG9yLmNoLCBhbmNob3Iuc3RpY2t5KSwgcGFydCA9IG9yZGVyW2luZGV4XTsNCiAgICBpZiAocGFydC5mcm9tICE9IGFuY2hvci5jaCAmJiBwYXJ0LnRvICE9IGFuY2hvci5jaCkgeyByZXR1cm4gcmFuZ2UkJDEgfQ0KICAgIHZhciBib3VuZGFyeSA9IGluZGV4ICsgKChwYXJ0LmZyb20gPT0gYW5jaG9yLmNoKSA9PSAocGFydC5sZXZlbCAhPSAxKSA/IDAgOiAxKTsNCiAgICBpZiAoYm91bmRhcnkgPT0gMCB8fCBib3VuZGFyeSA9PSBvcmRlci5sZW5ndGgpIHsgcmV0dXJuIHJhbmdlJCQxIH0NCg0KICAgIC8vIENvbXB1dGUgdGhlIHJlbGF0aXZlIHZpc3VhbCBwb3NpdGlvbiBvZiB0aGUgaGVhZCBjb21wYXJlZCB0byB0aGUNCiAgICAvLyBhbmNob3IgKDwwIGlzIHRvIHRoZSBsZWZ0LCA+MCB0byB0aGUgcmlnaHQpDQogICAgdmFyIGxlZnRTaWRlOw0KICAgIGlmIChoZWFkLmxpbmUgIT0gYW5jaG9yLmxpbmUpIHsNCiAgICAgIGxlZnRTaWRlID0gKGhlYWQubGluZSAtIGFuY2hvci5saW5lKSAqIChjbS5kb2MuZGlyZWN0aW9uID09ICJsdHIiID8gMSA6IC0xKSA+IDA7DQogICAgfSBlbHNlIHsNCiAgICAgIHZhciBoZWFkSW5kZXggPSBnZXRCaWRpUGFydEF0KG9yZGVyLCBoZWFkLmNoLCBoZWFkLnN0aWNreSk7DQogICAgICB2YXIgZGlyID0gaGVhZEluZGV4IC0gaW5kZXggfHwgKGhlYWQuY2ggLSBhbmNob3IuY2gpICogKHBhcnQubGV2ZWwgPT0gMSA/IC0xIDogMSk7DQogICAgICBpZiAoaGVhZEluZGV4ID09IGJvdW5kYXJ5IC0gMSB8fCBoZWFkSW5kZXggPT0gYm91bmRhcnkpDQogICAgICAgIHsgbGVmdFNpZGUgPSBkaXIgPCAwOyB9DQogICAgICBlbHNlDQogICAgICAgIHsgbGVmdFNpZGUgPSBkaXIgPiAwOyB9DQogICAgfQ0KDQogICAgdmFyIHVzZVBhcnQgPSBvcmRlcltib3VuZGFyeSArIChsZWZ0U2lkZSA/IC0xIDogMCldOw0KICAgIHZhciBmcm9tID0gbGVmdFNpZGUgPT0gKHVzZVBhcnQubGV2ZWwgPT0gMSk7DQogICAgdmFyIGNoID0gZnJvbSA/IHVzZVBhcnQuZnJvbSA6IHVzZVBhcnQudG8sIHN0aWNreSA9IGZyb20gPyAiYWZ0ZXIiIDogImJlZm9yZSI7DQogICAgcmV0dXJuIGFuY2hvci5jaCA9PSBjaCAmJiBhbmNob3Iuc3RpY2t5ID09IHN0aWNreSA/IHJhbmdlJCQxIDogbmV3IFJhbmdlKG5ldyBQb3MoYW5jaG9yLmxpbmUsIGNoLCBzdGlja3kpLCBoZWFkKQ0KICB9DQoNCg0KICAvLyBEZXRlcm1pbmVzIHdoZXRoZXIgYW4gZXZlbnQgaGFwcGVuZWQgaW4gdGhlIGd1dHRlciwgYW5kIGZpcmVzIHRoZQ0KICAvLyBoYW5kbGVycyBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgZXZlbnQuDQogIGZ1bmN0aW9uIGd1dHRlckV2ZW50KGNtLCBlLCB0eXBlLCBwcmV2ZW50KSB7DQogICAgdmFyIG1YLCBtWTsNCiAgICBpZiAoZS50b3VjaGVzKSB7DQogICAgICBtWCA9IGUudG91Y2hlc1swXS5jbGllbnRYOw0KICAgICAgbVkgPSBlLnRvdWNoZXNbMF0uY2xpZW50WTsNCiAgICB9IGVsc2Ugew0KICAgICAgdHJ5IHsgbVggPSBlLmNsaWVudFg7IG1ZID0gZS5jbGllbnRZOyB9DQogICAgICBjYXRjaChlKSB7IHJldHVybiBmYWxzZSB9DQogICAgfQ0KICAgIGlmIChtWCA+PSBNYXRoLmZsb29yKGNtLmRpc3BsYXkuZ3V0dGVycy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodCkpIHsgcmV0dXJuIGZhbHNlIH0NCiAgICBpZiAocHJldmVudCkgeyBlX3ByZXZlbnREZWZhdWx0KGUpOyB9DQoNCiAgICB2YXIgZGlzcGxheSA9IGNtLmRpc3BsYXk7DQogICAgdmFyIGxpbmVCb3ggPSBkaXNwbGF5LmxpbmVEaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7DQoNCiAgICBpZiAobVkgPiBsaW5lQm94LmJvdHRvbSB8fCAhaGFzSGFuZGxlcihjbSwgdHlwZSkpIHsgcmV0dXJuIGVfZGVmYXVsdFByZXZlbnRlZChlKSB9DQogICAgbVkgLT0gbGluZUJveC50b3AgLSBkaXNwbGF5LnZpZXdPZmZzZXQ7DQoNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNtLmRpc3BsYXkuZ3V0dGVyU3BlY3MubGVuZ3RoOyArK2kpIHsNCiAgICAgIHZhciBnID0gZGlzcGxheS5ndXR0ZXJzLmNoaWxkTm9kZXNbaV07DQogICAgICBpZiAoZyAmJiBnLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0ID49IG1YKSB7DQogICAgICAgIHZhciBsaW5lID0gbGluZUF0SGVpZ2h0KGNtLmRvYywgbVkpOw0KICAgICAgICB2YXIgZ3V0dGVyID0gY20uZGlzcGxheS5ndXR0ZXJTcGVjc1tpXTsNCiAgICAgICAgc2lnbmFsKGNtLCB0eXBlLCBjbSwgbGluZSwgZ3V0dGVyLmNsYXNzTmFtZSwgZSk7DQogICAgICAgIHJldHVybiBlX2RlZmF1bHRQcmV2ZW50ZWQoZSkNCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICBmdW5jdGlvbiBjbGlja0luR3V0dGVyKGNtLCBlKSB7DQogICAgcmV0dXJuIGd1dHRlckV2ZW50KGNtLCBlLCAiZ3V0dGVyQ2xpY2siLCB0cnVlKQ0KICB9DQoNCiAgLy8gQ09OVEVYVCBNRU5VIEhBTkRMSU5HDQoNCiAgLy8gVG8gbWFrZSB0aGUgY29udGV4dCBtZW51IHdvcmssIHdlIG5lZWQgdG8gYnJpZWZseSB1bmhpZGUgdGhlDQogIC8vIHRleHRhcmVhIChtYWtpbmcgaXQgYXMgdW5vYnRydXNpdmUgYXMgcG9zc2libGUpIHRvIGxldCB0aGUNCiAgLy8gcmlnaHQtY2xpY2sgdGFrZSBlZmZlY3Qgb24gaXQuDQogIGZ1bmN0aW9uIG9uQ29udGV4dE1lbnUoY20sIGUpIHsNCiAgICBpZiAoZXZlbnRJbldpZGdldChjbS5kaXNwbGF5LCBlKSB8fCBjb250ZXh0TWVudUluR3V0dGVyKGNtLCBlKSkgeyByZXR1cm4gfQ0KICAgIGlmIChzaWduYWxET01FdmVudChjbSwgZSwgImNvbnRleHRtZW51IikpIHsgcmV0dXJuIH0NCiAgICBpZiAoIWNhcHR1cmVSaWdodENsaWNrKSB7IGNtLmRpc3BsYXkuaW5wdXQub25Db250ZXh0TWVudShlKTsgfQ0KICB9DQoNCiAgZnVuY3Rpb24gY29udGV4dE1lbnVJbkd1dHRlcihjbSwgZSkgew0KICAgIGlmICghaGFzSGFuZGxlcihjbSwgImd1dHRlckNvbnRleHRNZW51IikpIHsgcmV0dXJuIGZhbHNlIH0NCiAgICByZXR1cm4gZ3V0dGVyRXZlbnQoY20sIGUsICJndXR0ZXJDb250ZXh0TWVudSIsIGZhbHNlKQ0KICB9DQoNCiAgZnVuY3Rpb24gdGhlbWVDaGFuZ2VkKGNtKSB7DQogICAgY20uZGlzcGxheS53cmFwcGVyLmNsYXNzTmFtZSA9IGNtLmRpc3BsYXkud3JhcHBlci5jbGFzc05hbWUucmVwbGFjZSgvXHMqY20tcy1cUysvZywgIiIpICsNCiAgICAgIGNtLm9wdGlvbnMudGhlbWUucmVwbGFjZSgvKF58XHMpXHMqL2csICIgY20tcy0iKTsNCiAgICBjbGVhckNhY2hlcyhjbSk7DQogIH0NCg0KICB2YXIgSW5pdCA9IHt0b1N0cmluZzogZnVuY3Rpb24oKXtyZXR1cm4gIkNvZGVNaXJyb3IuSW5pdCJ9fTsNCg0KICB2YXIgZGVmYXVsdHMgPSB7fTsNCiAgdmFyIG9wdGlvbkhhbmRsZXJzID0ge307DQoNCiAgZnVuY3Rpb24gZGVmaW5lT3B0aW9ucyhDb2RlTWlycm9yKSB7DQogICAgdmFyIG9wdGlvbkhhbmRsZXJzID0gQ29kZU1pcnJvci5vcHRpb25IYW5kbGVyczsNCg0KICAgIGZ1bmN0aW9uIG9wdGlvbihuYW1lLCBkZWZsdCwgaGFuZGxlLCBub3RPbkluaXQpIHsNCiAgICAgIENvZGVNaXJyb3IuZGVmYXVsdHNbbmFtZV0gPSBkZWZsdDsNCiAgICAgIGlmIChoYW5kbGUpIHsgb3B0aW9uSGFuZGxlcnNbbmFtZV0gPQ0KICAgICAgICBub3RPbkluaXQgPyBmdW5jdGlvbiAoY20sIHZhbCwgb2xkKSB7aWYgKG9sZCAhPSBJbml0KSB7IGhhbmRsZShjbSwgdmFsLCBvbGQpOyB9fSA6IGhhbmRsZTsgfQ0KICAgIH0NCg0KICAgIENvZGVNaXJyb3IuZGVmaW5lT3B0aW9uID0gb3B0aW9uOw0KDQogICAgLy8gUGFzc2VkIHRvIG9wdGlvbiBoYW5kbGVycyB3aGVuIHRoZXJlIGlzIG5vIG9sZCB2YWx1ZS4NCiAgICBDb2RlTWlycm9yLkluaXQgPSBJbml0Ow0KDQogICAgLy8gVGhlc2UgdHdvIGFyZSwgb24gaW5pdCwgY2FsbGVkIGZyb20gdGhlIGNvbnN0cnVjdG9yIGJlY2F1c2UgdGhleQ0KICAgIC8vIGhhdmUgdG8gYmUgaW5pdGlhbGl6ZWQgYmVmb3JlIHRoZSBlZGl0b3IgY2FuIHN0YXJ0IGF0IGFsbC4NCiAgICBvcHRpb24oInZhbHVlIiwgIiIsIGZ1bmN0aW9uIChjbSwgdmFsKSB7IHJldHVybiBjbS5zZXRWYWx1ZSh2YWwpOyB9LCB0cnVlKTsNCiAgICBvcHRpb24oIm1vZGUiLCBudWxsLCBmdW5jdGlvbiAoY20sIHZhbCkgew0KICAgICAgY20uZG9jLm1vZGVPcHRpb24gPSB2YWw7DQogICAgICBsb2FkTW9kZShjbSk7DQogICAgfSwgdHJ1ZSk7DQoNCiAgICBvcHRpb24oImluZGVudFVuaXQiLCAyLCBsb2FkTW9kZSwgdHJ1ZSk7DQogICAgb3B0aW9uKCJpbmRlbnRXaXRoVGFicyIsIGZhbHNlKTsNCiAgICBvcHRpb24oInNtYXJ0SW5kZW50IiwgdHJ1ZSk7DQogICAgb3B0aW9uKCJ0YWJTaXplIiwgNCwgZnVuY3Rpb24gKGNtKSB7DQogICAgICByZXNldE1vZGVTdGF0ZShjbSk7DQogICAgICBjbGVhckNhY2hlcyhjbSk7DQogICAgICByZWdDaGFuZ2UoY20pOw0KICAgIH0sIHRydWUpOw0KDQogICAgb3B0aW9uKCJsaW5lU2VwYXJhdG9yIiwgbnVsbCwgZnVuY3Rpb24gKGNtLCB2YWwpIHsNCiAgICAgIGNtLmRvYy5saW5lU2VwID0gdmFsOw0KICAgICAgaWYgKCF2YWwpIHsgcmV0dXJuIH0NCiAgICAgIHZhciBuZXdCcmVha3MgPSBbXSwgbGluZU5vID0gY20uZG9jLmZpcnN0Ow0KICAgICAgY20uZG9jLml0ZXIoZnVuY3Rpb24gKGxpbmUpIHsNCiAgICAgICAgZm9yICh2YXIgcG9zID0gMDs7KSB7DQogICAgICAgICAgdmFyIGZvdW5kID0gbGluZS50ZXh0LmluZGV4T2YodmFsLCBwb3MpOw0KICAgICAgICAgIGlmIChmb3VuZCA9PSAtMSkgeyBicmVhayB9DQogICAgICAgICAgcG9zID0gZm91bmQgKyB2YWwubGVuZ3RoOw0KICAgICAgICAgIG5ld0JyZWFrcy5wdXNoKFBvcyhsaW5lTm8sIGZvdW5kKSk7DQogICAgICAgIH0NCiAgICAgICAgbGluZU5vKys7DQogICAgICB9KTsNCiAgICAgIGZvciAodmFyIGkgPSBuZXdCcmVha3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pDQogICAgICAgIHsgcmVwbGFjZVJhbmdlKGNtLmRvYywgdmFsLCBuZXdCcmVha3NbaV0sIFBvcyhuZXdCcmVha3NbaV0ubGluZSwgbmV3QnJlYWtzW2ldLmNoICsgdmFsLmxlbmd0aCkpOyB9DQogICAgfSk7DQogICAgb3B0aW9uKCJzcGVjaWFsQ2hhcnMiLCAvW1x1MDAwMC1cdTAwMWZcdTAwN2YtXHUwMDlmXHUwMGFkXHUwNjFjXHUyMDBiLVx1MjAwZlx1MjAyOFx1MjAyOVx1ZmVmZlx1ZmZmOS1cdWZmZmNdL2csIGZ1bmN0aW9uIChjbSwgdmFsLCBvbGQpIHsNCiAgICAgIGNtLnN0YXRlLnNwZWNpYWxDaGFycyA9IG5ldyBSZWdFeHAodmFsLnNvdXJjZSArICh2YWwudGVzdCgiXHQiKSA/ICIiIDogInxcdCIpLCAiZyIpOw0KICAgICAgaWYgKG9sZCAhPSBJbml0KSB7IGNtLnJlZnJlc2goKTsgfQ0KICAgIH0pOw0KICAgIG9wdGlvbigic3BlY2lhbENoYXJQbGFjZWhvbGRlciIsIGRlZmF1bHRTcGVjaWFsQ2hhclBsYWNlaG9sZGVyLCBmdW5jdGlvbiAoY20pIHsgcmV0dXJuIGNtLnJlZnJlc2goKTsgfSwgdHJ1ZSk7DQogICAgb3B0aW9uKCJlbGVjdHJpY0NoYXJzIiwgdHJ1ZSk7DQogICAgb3B0aW9uKCJpbnB1dFN0eWxlIiwgbW9iaWxlID8gImNvbnRlbnRlZGl0YWJsZSIgOiAidGV4dGFyZWEiLCBmdW5jdGlvbiAoKSB7DQogICAgICB0aHJvdyBuZXcgRXJyb3IoImlucHV0U3R5bGUgY2FuIG5vdCAoeWV0KSBiZSBjaGFuZ2VkIGluIGEgcnVubmluZyBlZGl0b3IiKSAvLyBGSVhNRQ0KICAgIH0sIHRydWUpOw0KICAgIG9wdGlvbigic3BlbGxjaGVjayIsIGZhbHNlLCBmdW5jdGlvbiAoY20sIHZhbCkgeyByZXR1cm4gY20uZ2V0SW5wdXRGaWVsZCgpLnNwZWxsY2hlY2sgPSB2YWw7IH0sIHRydWUpOw0KICAgIG9wdGlvbigiYXV0b2NvcnJlY3QiLCBmYWxzZSwgZnVuY3Rpb24gKGNtLCB2YWwpIHsgcmV0dXJuIGNtLmdldElucHV0RmllbGQoKS5hdXRvY29ycmVjdCA9IHZhbDsgfSwgdHJ1ZSk7DQogICAgb3B0aW9uKCJhdXRvY2FwaXRhbGl6ZSIsIGZhbHNlLCBmdW5jdGlvbiAoY20sIHZhbCkgeyByZXR1cm4gY20uZ2V0SW5wdXRGaWVsZCgpLmF1dG9jYXBpdGFsaXplID0gdmFsOyB9LCB0cnVlKTsNCiAgICBvcHRpb24oInJ0bE1vdmVWaXN1YWxseSIsICF3aW5kb3dzKTsNCiAgICBvcHRpb24oIndob2xlTGluZVVwZGF0ZUJlZm9yZSIsIHRydWUpOw0KDQogICAgb3B0aW9uKCJ0aGVtZSIsICJkZWZhdWx0IiwgZnVuY3Rpb24gKGNtKSB7DQogICAgICB0aGVtZUNoYW5nZWQoY20pOw0KICAgICAgdXBkYXRlR3V0dGVycyhjbSk7DQogICAgfSwgdHJ1ZSk7DQogICAgb3B0aW9uKCJrZXlNYXAiLCAiZGVmYXVsdCIsIGZ1bmN0aW9uIChjbSwgdmFsLCBvbGQpIHsNCiAgICAgIHZhciBuZXh0ID0gZ2V0S2V5TWFwKHZhbCk7DQogICAgICB2YXIgcHJldiA9IG9sZCAhPSBJbml0ICYmIGdldEtleU1hcChvbGQpOw0KICAgICAgaWYgKHByZXYgJiYgcHJldi5kZXRhY2gpIHsgcHJldi5kZXRhY2goY20sIG5leHQpOyB9DQogICAgICBpZiAobmV4dC5hdHRhY2gpIHsgbmV4dC5hdHRhY2goY20sIHByZXYgfHwgbnVsbCk7IH0NCiAgICB9KTsNCiAgICBvcHRpb24oImV4dHJhS2V5cyIsIG51bGwpOw0KICAgIG9wdGlvbigiY29uZmlndXJlTW91c2UiLCBudWxsKTsNCg0KICAgIG9wdGlvbigibGluZVdyYXBwaW5nIiwgZmFsc2UsIHdyYXBwaW5nQ2hhbmdlZCwgdHJ1ZSk7DQogICAgb3B0aW9uKCJndXR0ZXJzIiwgW10sIGZ1bmN0aW9uIChjbSwgdmFsKSB7DQogICAgICBjbS5kaXNwbGF5Lmd1dHRlclNwZWNzID0gZ2V0R3V0dGVycyh2YWwsIGNtLm9wdGlvbnMubGluZU51bWJlcnMpOw0KICAgICAgdXBkYXRlR3V0dGVycyhjbSk7DQogICAgfSwgdHJ1ZSk7DQogICAgb3B0aW9uKCJmaXhlZEd1dHRlciIsIHRydWUsIGZ1bmN0aW9uIChjbSwgdmFsKSB7DQogICAgICBjbS5kaXNwbGF5Lmd1dHRlcnMuc3R5bGUubGVmdCA9IHZhbCA/IGNvbXBlbnNhdGVGb3JIU2Nyb2xsKGNtLmRpc3BsYXkpICsgInB4IiA6ICIwIjsNCiAgICAgIGNtLnJlZnJlc2goKTsNCiAgICB9LCB0cnVlKTsNCiAgICBvcHRpb24oImNvdmVyR3V0dGVyTmV4dFRvU2Nyb2xsYmFyIiwgZmFsc2UsIGZ1bmN0aW9uIChjbSkgeyByZXR1cm4gdXBkYXRlU2Nyb2xsYmFycyhjbSk7IH0sIHRydWUpOw0KICAgIG9wdGlvbigic2Nyb2xsYmFyU3R5bGUiLCAibmF0aXZlIiwgZnVuY3Rpb24gKGNtKSB7DQogICAgICBpbml0U2Nyb2xsYmFycyhjbSk7DQogICAgICB1cGRhdGVTY3JvbGxiYXJzKGNtKTsNCiAgICAgIGNtLmRpc3BsYXkuc2Nyb2xsYmFycy5zZXRTY3JvbGxUb3AoY20uZG9jLnNjcm9sbFRvcCk7DQogICAgICBjbS5kaXNwbGF5LnNjcm9sbGJhcnMuc2V0U2Nyb2xsTGVmdChjbS5kb2Muc2Nyb2xsTGVmdCk7DQogICAgfSwgdHJ1ZSk7DQogICAgb3B0aW9uKCJsaW5lTnVtYmVycyIsIGZhbHNlLCBmdW5jdGlvbiAoY20sIHZhbCkgew0KICAgICAgY20uZGlzcGxheS5ndXR0ZXJTcGVjcyA9IGdldEd1dHRlcnMoY20ub3B0aW9ucy5ndXR0ZXJzLCB2YWwpOw0KICAgICAgdXBkYXRlR3V0dGVycyhjbSk7DQogICAgfSwgdHJ1ZSk7DQogICAgb3B0aW9uKCJmaXJzdExpbmVOdW1iZXIiLCAxLCB1cGRhdGVHdXR0ZXJzLCB0cnVlKTsNCiAgICBvcHRpb24oImxpbmVOdW1iZXJGb3JtYXR0ZXIiLCBmdW5jdGlvbiAoaW50ZWdlcikgeyByZXR1cm4gaW50ZWdlcjsgfSwgdXBkYXRlR3V0dGVycywgdHJ1ZSk7DQogICAgb3B0aW9uKCJzaG93Q3Vyc29yV2hlblNlbGVjdGluZyIsIGZhbHNlLCB1cGRhdGVTZWxlY3Rpb24sIHRydWUpOw0KDQogICAgb3B0aW9uKCJyZXNldFNlbGVjdGlvbk9uQ29udGV4dE1lbnUiLCB0cnVlKTsNCiAgICBvcHRpb24oImxpbmVXaXNlQ29weUN1dCIsIHRydWUpOw0KICAgIG9wdGlvbigicGFzdGVMaW5lc1BlclNlbGVjdGlvbiIsIHRydWUpOw0KICAgIG9wdGlvbigic2VsZWN0aW9uc01heVRvdWNoIiwgZmFsc2UpOw0KDQogICAgb3B0aW9uKCJyZWFkT25seSIsIGZhbHNlLCBmdW5jdGlvbiAoY20sIHZhbCkgew0KICAgICAgaWYgKHZhbCA9PSAibm9jdXJzb3IiKSB7DQogICAgICAgIG9uQmx1cihjbSk7DQogICAgICAgIGNtLmRpc3BsYXkuaW5wdXQuYmx1cigpOw0KICAgICAgfQ0KICAgICAgY20uZGlzcGxheS5pbnB1dC5yZWFkT25seUNoYW5nZWQodmFsKTsNCiAgICB9KTsNCg0KICAgIG9wdGlvbigic2NyZWVuUmVhZGVyTGFiZWwiLCBudWxsLCBmdW5jdGlvbiAoY20sIHZhbCkgew0KICAgICAgdmFsID0gKHZhbCA9PT0gJycpID8gbnVsbCA6IHZhbDsNCiAgICAgIGNtLmRpc3BsYXkuaW5wdXQuc2NyZWVuUmVhZGVyTGFiZWxDaGFuZ2VkKHZhbCk7DQogICAgfSk7DQoNCiAgICBvcHRpb24oImRpc2FibGVJbnB1dCIsIGZhbHNlLCBmdW5jdGlvbiAoY20sIHZhbCkge2lmICghdmFsKSB7IGNtLmRpc3BsYXkuaW5wdXQucmVzZXQoKTsgfX0sIHRydWUpOw0KICAgIG9wdGlvbigiZHJhZ0Ryb3AiLCB0cnVlLCBkcmFnRHJvcENoYW5nZWQpOw0KICAgIG9wdGlvbigiYWxsb3dEcm9wRmlsZVR5cGVzIiwgbnVsbCk7DQoNCiAgICBvcHRpb24oImN1cnNvckJsaW5rUmF0ZSIsIDUzMCk7DQogICAgb3B0aW9uKCJjdXJzb3JTY3JvbGxNYXJnaW4iLCAwKTsNCiAgICBvcHRpb24oImN1cnNvckhlaWdodCIsIDEsIHVwZGF0ZVNlbGVjdGlvbiwgdHJ1ZSk7DQogICAgb3B0aW9uKCJzaW5nbGVDdXJzb3JIZWlnaHRQZXJMaW5lIiwgdHJ1ZSwgdXBkYXRlU2VsZWN0aW9uLCB0cnVlKTsNCiAgICBvcHRpb24oIndvcmtUaW1lIiwgMTAwKTsNCiAgICBvcHRpb24oIndvcmtEZWxheSIsIDEwMCk7DQogICAgb3B0aW9uKCJmbGF0dGVuU3BhbnMiLCB0cnVlLCByZXNldE1vZGVTdGF0ZSwgdHJ1ZSk7DQogICAgb3B0aW9uKCJhZGRNb2RlQ2xhc3MiLCBmYWxzZSwgcmVzZXRNb2RlU3RhdGUsIHRydWUpOw0KICAgIG9wdGlvbigicG9sbEludGVydmFsIiwgMTAwKTsNCiAgICBvcHRpb24oInVuZG9EZXB0aCIsIDIwMCwgZnVuY3Rpb24gKGNtLCB2YWwpIHsgcmV0dXJuIGNtLmRvYy5oaXN0b3J5LnVuZG9EZXB0aCA9IHZhbDsgfSk7DQogICAgb3B0aW9uKCJoaXN0b3J5RXZlbnREZWxheSIsIDEyNTApOw0KICAgIG9wdGlvbigidmlld3BvcnRNYXJnaW4iLCAxMCwgZnVuY3Rpb24gKGNtKSB7IHJldHVybiBjbS5yZWZyZXNoKCk7IH0sIHRydWUpOw0KICAgIG9wdGlvbigibWF4SGlnaGxpZ2h0TGVuZ3RoIiwgMTAwMDAsIHJlc2V0TW9kZVN0YXRlLCB0cnVlKTsNCiAgICBvcHRpb24oIm1vdmVJbnB1dFdpdGhDdXJzb3IiLCB0cnVlLCBmdW5jdGlvbiAoY20sIHZhbCkgew0KICAgICAgaWYgKCF2YWwpIHsgY20uZGlzcGxheS5pbnB1dC5yZXNldFBvc2l0aW9uKCk7IH0NCiAgICB9KTsNCg0KICAgIG9wdGlvbigidGFiaW5kZXgiLCBudWxsLCBmdW5jdGlvbiAoY20sIHZhbCkgeyByZXR1cm4gY20uZGlzcGxheS5pbnB1dC5nZXRGaWVsZCgpLnRhYkluZGV4ID0gdmFsIHx8ICIiOyB9KTsNCiAgICBvcHRpb24oImF1dG9mb2N1cyIsIG51bGwpOw0KICAgIG9wdGlvbigiZGlyZWN0aW9uIiwgImx0ciIsIGZ1bmN0aW9uIChjbSwgdmFsKSB7IHJldHVybiBjbS5kb2Muc2V0RGlyZWN0aW9uKHZhbCk7IH0sIHRydWUpOw0KICAgIG9wdGlvbigicGhyYXNlcyIsIG51bGwpOw0KICB9DQoNCiAgZnVuY3Rpb24gZHJhZ0Ryb3BDaGFuZ2VkKGNtLCB2YWx1ZSwgb2xkKSB7DQogICAgdmFyIHdhc09uID0gb2xkICYmIG9sZCAhPSBJbml0Ow0KICAgIGlmICghdmFsdWUgIT0gIXdhc09uKSB7DQogICAgICB2YXIgZnVuY3MgPSBjbS5kaXNwbGF5LmRyYWdGdW5jdGlvbnM7DQogICAgICB2YXIgdG9nZ2xlID0gdmFsdWUgPyBvbiA6IG9mZjsNCiAgICAgIHRvZ2dsZShjbS5kaXNwbGF5LnNjcm9sbGVyLCAiZHJhZ3N0YXJ0IiwgZnVuY3Muc3RhcnQpOw0KICAgICAgdG9nZ2xlKGNtLmRpc3BsYXkuc2Nyb2xsZXIsICJkcmFnZW50ZXIiLCBmdW5jcy5lbnRlcik7DQogICAgICB0b2dnbGUoY20uZGlzcGxheS5zY3JvbGxlciwgImRyYWdvdmVyIiwgZnVuY3Mub3Zlcik7DQogICAgICB0b2dnbGUoY20uZGlzcGxheS5zY3JvbGxlciwgImRyYWdsZWF2ZSIsIGZ1bmNzLmxlYXZlKTsNCiAgICAgIHRvZ2dsZShjbS5kaXNwbGF5LnNjcm9sbGVyLCAiZHJvcCIsIGZ1bmNzLmRyb3ApOw0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIHdyYXBwaW5nQ2hhbmdlZChjbSkgew0KICAgIGlmIChjbS5vcHRpb25zLmxpbmVXcmFwcGluZykgew0KICAgICAgYWRkQ2xhc3MoY20uZGlzcGxheS53cmFwcGVyLCAiQ29kZU1pcnJvci13cmFwIik7DQogICAgICBjbS5kaXNwbGF5LnNpemVyLnN0eWxlLm1pbldpZHRoID0gIiI7DQogICAgICBjbS5kaXNwbGF5LnNpemVyV2lkdGggPSBudWxsOw0KICAgIH0gZWxzZSB7DQogICAgICBybUNsYXNzKGNtLmRpc3BsYXkud3JhcHBlciwgIkNvZGVNaXJyb3Itd3JhcCIpOw0KICAgICAgZmluZE1heExpbmUoY20pOw0KICAgIH0NCiAgICBlc3RpbWF0ZUxpbmVIZWlnaHRzKGNtKTsNCiAgICByZWdDaGFuZ2UoY20pOw0KICAgIGNsZWFyQ2FjaGVzKGNtKTsNCiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVwZGF0ZVNjcm9sbGJhcnMoY20pOyB9LCAxMDApOw0KICB9DQoNCiAgLy8gQSBDb2RlTWlycm9yIGluc3RhbmNlIHJlcHJlc2VudHMgYW4gZWRpdG9yLiBUaGlzIGlzIHRoZSBvYmplY3QNCiAgLy8gdGhhdCB1c2VyIGNvZGUgaXMgdXN1YWxseSBkZWFsaW5nIHdpdGguDQoNCiAgZnVuY3Rpb24gQ29kZU1pcnJvcihwbGFjZSwgb3B0aW9ucykgew0KICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIENvZGVNaXJyb3IpKSB7IHJldHVybiBuZXcgQ29kZU1pcnJvcihwbGFjZSwgb3B0aW9ucykgfQ0KDQogICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyA9IG9wdGlvbnMgPyBjb3B5T2JqKG9wdGlvbnMpIDoge307DQogICAgLy8gRGV0ZXJtaW5lIGVmZmVjdGl2ZSBvcHRpb25zIGJhc2VkIG9uIGdpdmVuIHZhbHVlcyBhbmQgZGVmYXVsdHMuDQogICAgY29weU9iaihkZWZhdWx0cywgb3B0aW9ucywgZmFsc2UpOw0KDQogICAgdmFyIGRvYyA9IG9wdGlvbnMudmFsdWU7DQogICAgaWYgKHR5cGVvZiBkb2MgPT0gInN0cmluZyIpIHsgZG9jID0gbmV3IERvYyhkb2MsIG9wdGlvbnMubW9kZSwgbnVsbCwgb3B0aW9ucy5saW5lU2VwYXJhdG9yLCBvcHRpb25zLmRpcmVjdGlvbik7IH0NCiAgICBlbHNlIGlmIChvcHRpb25zLm1vZGUpIHsgZG9jLm1vZGVPcHRpb24gPSBvcHRpb25zLm1vZGU7IH0NCiAgICB0aGlzLmRvYyA9IGRvYzsNCg0KICAgIHZhciBpbnB1dCA9IG5ldyBDb2RlTWlycm9yLmlucHV0U3R5bGVzW29wdGlvbnMuaW5wdXRTdHlsZV0odGhpcyk7DQogICAgdmFyIGRpc3BsYXkgPSB0aGlzLmRpc3BsYXkgPSBuZXcgRGlzcGxheShwbGFjZSwgZG9jLCBpbnB1dCwgb3B0aW9ucyk7DQogICAgZGlzcGxheS53cmFwcGVyLkNvZGVNaXJyb3IgPSB0aGlzOw0KICAgIHRoZW1lQ2hhbmdlZCh0aGlzKTsNCiAgICBpZiAob3B0aW9ucy5saW5lV3JhcHBpbmcpDQogICAgICB7IHRoaXMuZGlzcGxheS53cmFwcGVyLmNsYXNzTmFtZSArPSAiIENvZGVNaXJyb3Itd3JhcCI7IH0NCiAgICBpbml0U2Nyb2xsYmFycyh0aGlzKTsNCg0KICAgIHRoaXMuc3RhdGUgPSB7DQogICAgICBrZXlNYXBzOiBbXSwgIC8vIHN0b3JlcyBtYXBzIGFkZGVkIGJ5IGFkZEtleU1hcA0KICAgICAgb3ZlcmxheXM6IFtdLCAvLyBoaWdobGlnaHRpbmcgb3ZlcmxheXMsIGFzIGFkZGVkIGJ5IGFkZE92ZXJsYXkNCiAgICAgIG1vZGVHZW46IDAsICAgLy8gYnVtcGVkIHdoZW4gbW9kZS9vdmVybGF5IGNoYW5nZXMsIHVzZWQgdG8gaW52YWxpZGF0ZSBoaWdobGlnaHRpbmcgaW5mbw0KICAgICAgb3ZlcndyaXRlOiBmYWxzZSwNCiAgICAgIGRlbGF5aW5nQmx1ckV2ZW50OiBmYWxzZSwNCiAgICAgIGZvY3VzZWQ6IGZhbHNlLA0KICAgICAgc3VwcHJlc3NFZGl0czogZmFsc2UsIC8vIHVzZWQgdG8gZGlzYWJsZSBlZGl0aW5nIGR1cmluZyBrZXkgaGFuZGxlcnMgd2hlbiBpbiByZWFkT25seSBtb2RlDQogICAgICBwYXN0ZUluY29taW5nOiAtMSwgY3V0SW5jb21pbmc6IC0xLCAvLyBoZWxwIHJlY29nbml6ZSBwYXN0ZS9jdXQgZWRpdHMgaW4gaW5wdXQucG9sbA0KICAgICAgc2VsZWN0aW5nVGV4dDogZmFsc2UsDQogICAgICBkcmFnZ2luZ1RleHQ6IGZhbHNlLA0KICAgICAgaGlnaGxpZ2h0OiBuZXcgRGVsYXllZCgpLCAvLyBzdG9yZXMgaGlnaGxpZ2h0IHdvcmtlciB0aW1lb3V0DQogICAgICBrZXlTZXE6IG51bGwsICAvLyBVbmZpbmlzaGVkIGtleSBzZXF1ZW5jZQ0KICAgICAgc3BlY2lhbENoYXJzOiBudWxsDQogICAgfTsNCg0KICAgIGlmIChvcHRpb25zLmF1dG9mb2N1cyAmJiAhbW9iaWxlKSB7IGRpc3BsYXkuaW5wdXQuZm9jdXMoKTsgfQ0KDQogICAgLy8gT3ZlcnJpZGUgbWFnaWMgdGV4dGFyZWEgY29udGVudCByZXN0b3JlIHRoYXQgSUUgc29tZXRpbWVzIGRvZXMNCiAgICAvLyBvbiBvdXIgaGlkZGVuIHRleHRhcmVhIG9uIHJlbG9hZA0KICAgIGlmIChpZSAmJiBpZV92ZXJzaW9uIDwgMTEpIHsgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuZGlzcGxheS5pbnB1dC5yZXNldCh0cnVlKTsgfSwgMjApOyB9DQoNCiAgICByZWdpc3RlckV2ZW50SGFuZGxlcnModGhpcyk7DQogICAgZW5zdXJlR2xvYmFsSGFuZGxlcnMoKTsNCg0KICAgIHN0YXJ0T3BlcmF0aW9uKHRoaXMpOw0KICAgIHRoaXMuY3VyT3AuZm9yY2VVcGRhdGUgPSB0cnVlOw0KICAgIGF0dGFjaERvYyh0aGlzLCBkb2MpOw0KDQogICAgaWYgKChvcHRpb25zLmF1dG9mb2N1cyAmJiAhbW9iaWxlKSB8fCB0aGlzLmhhc0ZvY3VzKCkpDQogICAgICB7IHNldFRpbWVvdXQoYmluZChvbkZvY3VzLCB0aGlzKSwgMjApOyB9DQogICAgZWxzZQ0KICAgICAgeyBvbkJsdXIodGhpcyk7IH0NCg0KICAgIGZvciAodmFyIG9wdCBpbiBvcHRpb25IYW5kbGVycykgeyBpZiAob3B0aW9uSGFuZGxlcnMuaGFzT3duUHJvcGVydHkob3B0KSkNCiAgICAgIHsgb3B0aW9uSGFuZGxlcnNbb3B0XSh0aGlzJDEsIG9wdGlvbnNbb3B0XSwgSW5pdCk7IH0gfQ0KICAgIG1heWJlVXBkYXRlTGluZU51bWJlcldpZHRoKHRoaXMpOw0KICAgIGlmIChvcHRpb25zLmZpbmlzaEluaXQpIHsgb3B0aW9ucy5maW5pc2hJbml0KHRoaXMpOyB9DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbml0SG9va3MubGVuZ3RoOyArK2kpIHsgaW5pdEhvb2tzW2ldKHRoaXMkMSk7IH0NCiAgICBlbmRPcGVyYXRpb24odGhpcyk7DQogICAgLy8gU3VwcHJlc3Mgb3B0aW1pemVsZWdpYmlsaXR5IGluIFdlYmtpdCwgc2luY2UgaXQgYnJlYWtzIHRleHQNCiAgICAvLyBtZWFzdXJpbmcgb24gbGluZSB3cmFwcGluZyBib3VuZGFyaWVzLg0KICAgIGlmICh3ZWJraXQgJiYgb3B0aW9ucy5saW5lV3JhcHBpbmcgJiYNCiAgICAgICAgZ2V0Q29tcHV0ZWRTdHlsZShkaXNwbGF5LmxpbmVEaXYpLnRleHRSZW5kZXJpbmcgPT0gIm9wdGltaXplbGVnaWJpbGl0eSIpDQogICAgICB7IGRpc3BsYXkubGluZURpdi5zdHlsZS50ZXh0UmVuZGVyaW5nID0gImF1dG8iOyB9DQogIH0NCg0KICAvLyBUaGUgZGVmYXVsdCBjb25maWd1cmF0aW9uIG9wdGlvbnMuDQogIENvZGVNaXJyb3IuZGVmYXVsdHMgPSBkZWZhdWx0czsNCiAgLy8gRnVuY3Rpb25zIHRvIHJ1biB3aGVuIG9wdGlvbnMgYXJlIGNoYW5nZWQuDQogIENvZGVNaXJyb3Iub3B0aW9uSGFuZGxlcnMgPSBvcHRpb25IYW5kbGVyczsNCg0KICAvLyBBdHRhY2ggdGhlIG5lY2Vzc2FyeSBldmVudCBoYW5kbGVycyB3aGVuIGluaXRpYWxpemluZyB0aGUgZWRpdG9yDQogIGZ1bmN0aW9uIHJlZ2lzdGVyRXZlbnRIYW5kbGVycyhjbSkgew0KICAgIHZhciBkID0gY20uZGlzcGxheTsNCiAgICBvbihkLnNjcm9sbGVyLCAibW91c2Vkb3duIiwgb3BlcmF0aW9uKGNtLCBvbk1vdXNlRG93bikpOw0KICAgIC8vIE9sZGVyIElFJ3Mgd2lsbCBub3QgZmlyZSBhIHNlY29uZCBtb3VzZWRvd24gZm9yIGEgZG91YmxlIGNsaWNrDQogICAgaWYgKGllICYmIGllX3ZlcnNpb24gPCAxMSkNCiAgICAgIHsgb24oZC5zY3JvbGxlciwgImRibGNsaWNrIiwgb3BlcmF0aW9uKGNtLCBmdW5jdGlvbiAoZSkgew0KICAgICAgICBpZiAoc2lnbmFsRE9NRXZlbnQoY20sIGUpKSB7IHJldHVybiB9DQogICAgICAgIHZhciBwb3MgPSBwb3NGcm9tTW91c2UoY20sIGUpOw0KICAgICAgICBpZiAoIXBvcyB8fCBjbGlja0luR3V0dGVyKGNtLCBlKSB8fCBldmVudEluV2lkZ2V0KGNtLmRpc3BsYXksIGUpKSB7IHJldHVybiB9DQogICAgICAgIGVfcHJldmVudERlZmF1bHQoZSk7DQogICAgICAgIHZhciB3b3JkID0gY20uZmluZFdvcmRBdChwb3MpOw0KICAgICAgICBleHRlbmRTZWxlY3Rpb24oY20uZG9jLCB3b3JkLmFuY2hvciwgd29yZC5oZWFkKTsNCiAgICAgIH0pKTsgfQ0KICAgIGVsc2UNCiAgICAgIHsgb24oZC5zY3JvbGxlciwgImRibGNsaWNrIiwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHNpZ25hbERPTUV2ZW50KGNtLCBlKSB8fCBlX3ByZXZlbnREZWZhdWx0KGUpOyB9KTsgfQ0KICAgIC8vIFNvbWUgYnJvd3NlcnMgZmlyZSBjb250ZXh0bWVudSAqYWZ0ZXIqIG9wZW5pbmcgdGhlIG1lbnUsIGF0DQogICAgLy8gd2hpY2ggcG9pbnQgd2UgY2FuJ3QgbWVzcyB3aXRoIGl0IGFueW1vcmUuIENvbnRleHQgbWVudSBpcw0KICAgIC8vIGhhbmRsZWQgaW4gb25Nb3VzZURvd24gZm9yIHRoZXNlIGJyb3dzZXJzLg0KICAgIG9uKGQuc2Nyb2xsZXIsICJjb250ZXh0bWVudSIsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBvbkNvbnRleHRNZW51KGNtLCBlKTsgfSk7DQogICAgb24oZC5pbnB1dC5nZXRGaWVsZCgpLCAiY29udGV4dG1lbnUiLCBmdW5jdGlvbiAoZSkgew0KICAgICAgaWYgKCFkLnNjcm9sbGVyLmNvbnRhaW5zKGUudGFyZ2V0KSkgeyBvbkNvbnRleHRNZW51KGNtLCBlKTsgfQ0KICAgIH0pOw0KDQogICAgLy8gVXNlZCB0byBzdXBwcmVzcyBtb3VzZSBldmVudCBoYW5kbGluZyB3aGVuIGEgdG91Y2ggaGFwcGVucw0KICAgIHZhciB0b3VjaEZpbmlzaGVkLCBwcmV2VG91Y2ggPSB7ZW5kOiAwfTsNCiAgICBmdW5jdGlvbiBmaW5pc2hUb3VjaCgpIHsNCiAgICAgIGlmIChkLmFjdGl2ZVRvdWNoKSB7DQogICAgICAgIHRvdWNoRmluaXNoZWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGQuYWN0aXZlVG91Y2ggPSBudWxsOyB9LCAxMDAwKTsNCiAgICAgICAgcHJldlRvdWNoID0gZC5hY3RpdmVUb3VjaDsNCiAgICAgICAgcHJldlRvdWNoLmVuZCA9ICtuZXcgRGF0ZTsNCiAgICAgIH0NCiAgICB9DQogICAgZnVuY3Rpb24gaXNNb3VzZUxpa2VUb3VjaEV2ZW50KGUpIHsNCiAgICAgIGlmIChlLnRvdWNoZXMubGVuZ3RoICE9IDEpIHsgcmV0dXJuIGZhbHNlIH0NCiAgICAgIHZhciB0b3VjaCA9IGUudG91Y2hlc1swXTsNCiAgICAgIHJldHVybiB0b3VjaC5yYWRpdXNYIDw9IDEgJiYgdG91Y2gucmFkaXVzWSA8PSAxDQogICAgfQ0KICAgIGZ1bmN0aW9uIGZhckF3YXkodG91Y2gsIG90aGVyKSB7DQogICAgICBpZiAob3RoZXIubGVmdCA9PSBudWxsKSB7IHJldHVybiB0cnVlIH0NCiAgICAgIHZhciBkeCA9IG90aGVyLmxlZnQgLSB0b3VjaC5sZWZ0LCBkeSA9IG90aGVyLnRvcCAtIHRvdWNoLnRvcDsNCiAgICAgIHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeSA+IDIwICogMjANCiAgICB9DQogICAgb24oZC5zY3JvbGxlciwgInRvdWNoc3RhcnQiLCBmdW5jdGlvbiAoZSkgew0KICAgICAgaWYgKCFzaWduYWxET01FdmVudChjbSwgZSkgJiYgIWlzTW91c2VMaWtlVG91Y2hFdmVudChlKSAmJiAhY2xpY2tJbkd1dHRlcihjbSwgZSkpIHsNCiAgICAgICAgZC5pbnB1dC5lbnN1cmVQb2xsZWQoKTsNCiAgICAgICAgY2xlYXJUaW1lb3V0KHRvdWNoRmluaXNoZWQpOw0KICAgICAgICB2YXIgbm93ID0gK25ldyBEYXRlOw0KICAgICAgICBkLmFjdGl2ZVRvdWNoID0ge3N0YXJ0OiBub3csIG1vdmVkOiBmYWxzZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2OiBub3cgLSBwcmV2VG91Y2guZW5kIDw9IDMwMCA/IHByZXZUb3VjaCA6IG51bGx9Ow0KICAgICAgICBpZiAoZS50b3VjaGVzLmxlbmd0aCA9PSAxKSB7DQogICAgICAgICAgZC5hY3RpdmVUb3VjaC5sZWZ0ID0gZS50b3VjaGVzWzBdLnBhZ2VYOw0KICAgICAgICAgIGQuYWN0aXZlVG91Y2gudG9wID0gZS50b3VjaGVzWzBdLnBhZ2VZOw0KICAgICAgICB9DQogICAgICB9DQogICAgfSk7DQogICAgb24oZC5zY3JvbGxlciwgInRvdWNobW92ZSIsIGZ1bmN0aW9uICgpIHsNCiAgICAgIGlmIChkLmFjdGl2ZVRvdWNoKSB7IGQuYWN0aXZlVG91Y2gubW92ZWQgPSB0cnVlOyB9DQogICAgfSk7DQogICAgb24oZC5zY3JvbGxlciwgInRvdWNoZW5kIiwgZnVuY3Rpb24gKGUpIHsNCiAgICAgIHZhciB0b3VjaCA9IGQuYWN0aXZlVG91Y2g7DQogICAgICBpZiAodG91Y2ggJiYgIWV2ZW50SW5XaWRnZXQoZCwgZSkgJiYgdG91Y2gubGVmdCAhPSBudWxsICYmDQogICAgICAgICAgIXRvdWNoLm1vdmVkICYmIG5ldyBEYXRlIC0gdG91Y2guc3RhcnQgPCAzMDApIHsNCiAgICAgICAgdmFyIHBvcyA9IGNtLmNvb3Jkc0NoYXIoZC5hY3RpdmVUb3VjaCwgInBhZ2UiKSwgcmFuZ2U7DQogICAgICAgIGlmICghdG91Y2gucHJldiB8fCBmYXJBd2F5KHRvdWNoLCB0b3VjaC5wcmV2KSkgLy8gU2luZ2xlIHRhcA0KICAgICAgICAgIHsgcmFuZ2UgPSBuZXcgUmFuZ2UocG9zLCBwb3MpOyB9DQogICAgICAgIGVsc2UgaWYgKCF0b3VjaC5wcmV2LnByZXYgfHwgZmFyQXdheSh0b3VjaCwgdG91Y2gucHJldi5wcmV2KSkgLy8gRG91YmxlIHRhcA0KICAgICAgICAgIHsgcmFuZ2UgPSBjbS5maW5kV29yZEF0KHBvcyk7IH0NCiAgICAgICAgZWxzZSAvLyBUcmlwbGUgdGFwDQogICAgICAgICAgeyByYW5nZSA9IG5ldyBSYW5nZShQb3MocG9zLmxpbmUsIDApLCBjbGlwUG9zKGNtLmRvYywgUG9zKHBvcy5saW5lICsgMSwgMCkpKTsgfQ0KICAgICAgICBjbS5zZXRTZWxlY3Rpb24ocmFuZ2UuYW5jaG9yLCByYW5nZS5oZWFkKTsNCiAgICAgICAgY20uZm9jdXMoKTsNCiAgICAgICAgZV9wcmV2ZW50RGVmYXVsdChlKTsNCiAgICAgIH0NCiAgICAgIGZpbmlzaFRvdWNoKCk7DQogICAgfSk7DQogICAgb24oZC5zY3JvbGxlciwgInRvdWNoY2FuY2VsIiwgZmluaXNoVG91Y2gpOw0KDQogICAgLy8gU3luYyBzY3JvbGxpbmcgYmV0d2VlbiBmYWtlIHNjcm9sbGJhcnMgYW5kIHJlYWwgc2Nyb2xsYWJsZQ0KICAgIC8vIGFyZWEsIGVuc3VyZSB2aWV3cG9ydCBpcyB1cGRhdGVkIHdoZW4gc2Nyb2xsaW5nLg0KICAgIG9uKGQuc2Nyb2xsZXIsICJzY3JvbGwiLCBmdW5jdGlvbiAoKSB7DQogICAgICBpZiAoZC5zY3JvbGxlci5jbGllbnRIZWlnaHQpIHsNCiAgICAgICAgdXBkYXRlU2Nyb2xsVG9wKGNtLCBkLnNjcm9sbGVyLnNjcm9sbFRvcCk7DQogICAgICAgIHNldFNjcm9sbExlZnQoY20sIGQuc2Nyb2xsZXIuc2Nyb2xsTGVmdCwgdHJ1ZSk7DQogICAgICAgIHNpZ25hbChjbSwgInNjcm9sbCIsIGNtKTsNCiAgICAgIH0NCiAgICB9KTsNCg0KICAgIC8vIExpc3RlbiB0byB3aGVlbCBldmVudHMgaW4gb3JkZXIgdG8gdHJ5IGFuZCB1cGRhdGUgdGhlIHZpZXdwb3J0IG9uIHRpbWUuDQogICAgb24oZC5zY3JvbGxlciwgIm1vdXNld2hlZWwiLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gb25TY3JvbGxXaGVlbChjbSwgZSk7IH0pOw0KICAgIG9uKGQuc2Nyb2xsZXIsICJET01Nb3VzZVNjcm9sbCIsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBvblNjcm9sbFdoZWVsKGNtLCBlKTsgfSk7DQoNCiAgICAvLyBQcmV2ZW50IHdyYXBwZXIgZnJvbSBldmVyIHNjcm9sbGluZw0KICAgIG9uKGQud3JhcHBlciwgInNjcm9sbCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGQud3JhcHBlci5zY3JvbGxUb3AgPSBkLndyYXBwZXIuc2Nyb2xsTGVmdCA9IDA7IH0pOw0KDQogICAgZC5kcmFnRnVuY3Rpb25zID0gew0KICAgICAgZW50ZXI6IGZ1bmN0aW9uIChlKSB7aWYgKCFzaWduYWxET01FdmVudChjbSwgZSkpIHsgZV9zdG9wKGUpOyB9fSwNCiAgICAgIG92ZXI6IGZ1bmN0aW9uIChlKSB7aWYgKCFzaWduYWxET01FdmVudChjbSwgZSkpIHsgb25EcmFnT3ZlcihjbSwgZSk7IGVfc3RvcChlKTsgfX0sDQogICAgICBzdGFydDogZnVuY3Rpb24gKGUpIHsgcmV0dXJuIG9uRHJhZ1N0YXJ0KGNtLCBlKTsgfSwNCiAgICAgIGRyb3A6IG9wZXJhdGlvbihjbSwgb25Ecm9wKSwNCiAgICAgIGxlYXZlOiBmdW5jdGlvbiAoZSkge2lmICghc2lnbmFsRE9NRXZlbnQoY20sIGUpKSB7IGNsZWFyRHJhZ0N1cnNvcihjbSk7IH19DQogICAgfTsNCg0KICAgIHZhciBpbnAgPSBkLmlucHV0LmdldEZpZWxkKCk7DQogICAgb24oaW5wLCAia2V5dXAiLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gb25LZXlVcC5jYWxsKGNtLCBlKTsgfSk7DQogICAgb24oaW5wLCAia2V5ZG93biIsIG9wZXJhdGlvbihjbSwgb25LZXlEb3duKSk7DQogICAgb24oaW5wLCAia2V5cHJlc3MiLCBvcGVyYXRpb24oY20sIG9uS2V5UHJlc3MpKTsNCiAgICBvbihpbnAsICJmb2N1cyIsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBvbkZvY3VzKGNtLCBlKTsgfSk7DQogICAgb24oaW5wLCAiYmx1ciIsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBvbkJsdXIoY20sIGUpOyB9KTsNCiAgfQ0KDQogIHZhciBpbml0SG9va3MgPSBbXTsNCiAgQ29kZU1pcnJvci5kZWZpbmVJbml0SG9vayA9IGZ1bmN0aW9uIChmKSB7IHJldHVybiBpbml0SG9va3MucHVzaChmKTsgfTsNCg0KICAvLyBJbmRlbnQgdGhlIGdpdmVuIGxpbmUuIFRoZSBob3cgcGFyYW1ldGVyIGNhbiBiZSAic21hcnQiLA0KICAvLyAiYWRkIi9udWxsLCAic3VidHJhY3QiLCBvciAicHJldiIuIFdoZW4gYWdncmVzc2l2ZSBpcyBmYWxzZQ0KICAvLyAodHlwaWNhbGx5IHNldCB0byB0cnVlIGZvciBmb3JjZWQgc2luZ2xlLWxpbmUgaW5kZW50cyksIGVtcHR5DQogIC8vIGxpbmVzIGFyZSBub3QgaW5kZW50ZWQsIGFuZCBwbGFjZXMgd2hlcmUgdGhlIG1vZGUgcmV0dXJucyBQYXNzDQogIC8vIGFyZSBsZWZ0IGFsb25lLg0KICBmdW5jdGlvbiBpbmRlbnRMaW5lKGNtLCBuLCBob3csIGFnZ3Jlc3NpdmUpIHsNCiAgICB2YXIgZG9jID0gY20uZG9jLCBzdGF0ZTsNCiAgICBpZiAoaG93ID09IG51bGwpIHsgaG93ID0gImFkZCI7IH0NCiAgICBpZiAoaG93ID09ICJzbWFydCIpIHsNCiAgICAgIC8vIEZhbGwgYmFjayB0byAicHJldiIgd2hlbiB0aGUgbW9kZSBkb2Vzbid0IGhhdmUgYW4gaW5kZW50YXRpb24NCiAgICAgIC8vIG1ldGhvZC4NCiAgICAgIGlmICghZG9jLm1vZGUuaW5kZW50KSB7IGhvdyA9ICJwcmV2IjsgfQ0KICAgICAgZWxzZSB7IHN0YXRlID0gZ2V0Q29udGV4dEJlZm9yZShjbSwgbikuc3RhdGU7IH0NCiAgICB9DQoNCiAgICB2YXIgdGFiU2l6ZSA9IGNtLm9wdGlvbnMudGFiU2l6ZTsNCiAgICB2YXIgbGluZSA9IGdldExpbmUoZG9jLCBuKSwgY3VyU3BhY2UgPSBjb3VudENvbHVtbihsaW5lLnRleHQsIG51bGwsIHRhYlNpemUpOw0KICAgIGlmIChsaW5lLnN0YXRlQWZ0ZXIpIHsgbGluZS5zdGF0ZUFmdGVyID0gbnVsbDsgfQ0KICAgIHZhciBjdXJTcGFjZVN0cmluZyA9IGxpbmUudGV4dC5tYXRjaCgvXlxzKi8pWzBdLCBpbmRlbnRhdGlvbjsNCiAgICBpZiAoIWFnZ3Jlc3NpdmUgJiYgIS9cUy8udGVzdChsaW5lLnRleHQpKSB7DQogICAgICBpbmRlbnRhdGlvbiA9IDA7DQogICAgICBob3cgPSAibm90IjsNCiAgICB9IGVsc2UgaWYgKGhvdyA9PSAic21hcnQiKSB7DQogICAgICBpbmRlbnRhdGlvbiA9IGRvYy5tb2RlLmluZGVudChzdGF0ZSwgbGluZS50ZXh0LnNsaWNlKGN1clNwYWNlU3RyaW5nLmxlbmd0aCksIGxpbmUudGV4dCk7DQogICAgICBpZiAoaW5kZW50YXRpb24gPT0gUGFzcyB8fCBpbmRlbnRhdGlvbiA+IDE1MCkgew0KICAgICAgICBpZiAoIWFnZ3Jlc3NpdmUpIHsgcmV0dXJuIH0NCiAgICAgICAgaG93ID0gInByZXYiOw0KICAgICAgfQ0KICAgIH0NCiAgICBpZiAoaG93ID09ICJwcmV2Iikgew0KICAgICAgaWYgKG4gPiBkb2MuZmlyc3QpIHsgaW5kZW50YXRpb24gPSBjb3VudENvbHVtbihnZXRMaW5lKGRvYywgbi0xKS50ZXh0LCBudWxsLCB0YWJTaXplKTsgfQ0KICAgICAgZWxzZSB7IGluZGVudGF0aW9uID0gMDsgfQ0KICAgIH0gZWxzZSBpZiAoaG93ID09ICJhZGQiKSB7DQogICAgICBpbmRlbnRhdGlvbiA9IGN1clNwYWNlICsgY20ub3B0aW9ucy5pbmRlbnRVbml0Ow0KICAgIH0gZWxzZSBpZiAoaG93ID09ICJzdWJ0cmFjdCIpIHsNCiAgICAgIGluZGVudGF0aW9uID0gY3VyU3BhY2UgLSBjbS5vcHRpb25zLmluZGVudFVuaXQ7DQogICAgfSBlbHNlIGlmICh0eXBlb2YgaG93ID09ICJudW1iZXIiKSB7DQogICAgICBpbmRlbnRhdGlvbiA9IGN1clNwYWNlICsgaG93Ow0KICAgIH0NCiAgICBpbmRlbnRhdGlvbiA9IE1hdGgubWF4KDAsIGluZGVudGF0aW9uKTsNCg0KICAgIHZhciBpbmRlbnRTdHJpbmcgPSAiIiwgcG9zID0gMDsNCiAgICBpZiAoY20ub3B0aW9ucy5pbmRlbnRXaXRoVGFicykNCiAgICAgIHsgZm9yICh2YXIgaSA9IE1hdGguZmxvb3IoaW5kZW50YXRpb24gLyB0YWJTaXplKTsgaTsgLS1pKSB7cG9zICs9IHRhYlNpemU7IGluZGVudFN0cmluZyArPSAiXHQiO30gfQ0KICAgIGlmIChwb3MgPCBpbmRlbnRhdGlvbikgeyBpbmRlbnRTdHJpbmcgKz0gc3BhY2VTdHIoaW5kZW50YXRpb24gLSBwb3MpOyB9DQoNCiAgICBpZiAoaW5kZW50U3RyaW5nICE9IGN1clNwYWNlU3RyaW5nKSB7DQogICAgICByZXBsYWNlUmFuZ2UoZG9jLCBpbmRlbnRTdHJpbmcsIFBvcyhuLCAwKSwgUG9zKG4sIGN1clNwYWNlU3RyaW5nLmxlbmd0aCksICIraW5wdXQiKTsNCiAgICAgIGxpbmUuc3RhdGVBZnRlciA9IG51bGw7DQogICAgICByZXR1cm4gdHJ1ZQ0KICAgIH0gZWxzZSB7DQogICAgICAvLyBFbnN1cmUgdGhhdCwgaWYgdGhlIGN1cnNvciB3YXMgaW4gdGhlIHdoaXRlc3BhY2UgYXQgdGhlIHN0YXJ0DQogICAgICAvLyBvZiB0aGUgbGluZSwgaXQgaXMgbW92ZWQgdG8gdGhlIGVuZCBvZiB0aGF0IHNwYWNlLg0KICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgZG9jLnNlbC5yYW5nZXMubGVuZ3RoOyBpJDErKykgew0KICAgICAgICB2YXIgcmFuZ2UgPSBkb2Muc2VsLnJhbmdlc1tpJDFdOw0KICAgICAgICBpZiAocmFuZ2UuaGVhZC5saW5lID09IG4gJiYgcmFuZ2UuaGVhZC5jaCA8IGN1clNwYWNlU3RyaW5nLmxlbmd0aCkgew0KICAgICAgICAgIHZhciBwb3MkMSA9IFBvcyhuLCBjdXJTcGFjZVN0cmluZy5sZW5ndGgpOw0KICAgICAgICAgIHJlcGxhY2VPbmVTZWxlY3Rpb24oZG9jLCBpJDEsIG5ldyBSYW5nZShwb3MkMSwgcG9zJDEpKTsNCiAgICAgICAgICBicmVhaw0KICAgICAgICB9DQogICAgICB9DQogICAgfQ0KICB9DQoNCiAgLy8gVGhpcyB3aWxsIGJlIHNldCB0byBhIHtsaW5lV2lzZTogYm9vbCwgdGV4dDogW3N0cmluZ119IG9iamVjdCwgc28NCiAgLy8gdGhhdCwgd2hlbiBwYXN0aW5nLCB3ZSBrbm93IHdoYXQga2luZCBvZiBzZWxlY3Rpb25zIHRoZSBjb3BpZWQNCiAgLy8gdGV4dCB3YXMgbWFkZSBvdXQgb2YuDQogIHZhciBsYXN0Q29waWVkID0gbnVsbDsNCg0KICBmdW5jdGlvbiBzZXRMYXN0Q29waWVkKG5ld0xhc3RDb3BpZWQpIHsNCiAgICBsYXN0Q29waWVkID0gbmV3TGFzdENvcGllZDsNCiAgfQ0KDQogIGZ1bmN0aW9uIGFwcGx5VGV4dElucHV0KGNtLCBpbnNlcnRlZCwgZGVsZXRlZCwgc2VsLCBvcmlnaW4pIHsNCiAgICB2YXIgZG9jID0gY20uZG9jOw0KICAgIGNtLmRpc3BsYXkuc2hpZnQgPSBmYWxzZTsNCiAgICBpZiAoIXNlbCkgeyBzZWwgPSBkb2Muc2VsOyB9DQoNCiAgICB2YXIgcmVjZW50ID0gK25ldyBEYXRlIC0gMjAwOw0KICAgIHZhciBwYXN0ZSA9IG9yaWdpbiA9PSAicGFzdGUiIHx8IGNtLnN0YXRlLnBhc3RlSW5jb21pbmcgPiByZWNlbnQ7DQogICAgdmFyIHRleHRMaW5lcyA9IHNwbGl0TGluZXNBdXRvKGluc2VydGVkKSwgbXVsdGlQYXN0ZSA9IG51bGw7DQogICAgLy8gV2hlbiBwYXN0aW5nIE4gbGluZXMgaW50byBOIHNlbGVjdGlvbnMsIGluc2VydCBvbmUgbGluZSBwZXIgc2VsZWN0aW9uDQogICAgaWYgKHBhc3RlICYmIHNlbC5yYW5nZXMubGVuZ3RoID4gMSkgew0KICAgICAgaWYgKGxhc3RDb3BpZWQgJiYgbGFzdENvcGllZC50ZXh0LmpvaW4oIlxuIikgPT0gaW5zZXJ0ZWQpIHsNCiAgICAgICAgaWYgKHNlbC5yYW5nZXMubGVuZ3RoICUgbGFzdENvcGllZC50ZXh0Lmxlbmd0aCA9PSAwKSB7DQogICAgICAgICAgbXVsdGlQYXN0ZSA9IFtdOw0KICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdENvcGllZC50ZXh0Lmxlbmd0aDsgaSsrKQ0KICAgICAgICAgICAgeyBtdWx0aVBhc3RlLnB1c2goZG9jLnNwbGl0TGluZXMobGFzdENvcGllZC50ZXh0W2ldKSk7IH0NCiAgICAgICAgfQ0KICAgICAgfSBlbHNlIGlmICh0ZXh0TGluZXMubGVuZ3RoID09IHNlbC5yYW5nZXMubGVuZ3RoICYmIGNtLm9wdGlvbnMucGFzdGVMaW5lc1BlclNlbGVjdGlvbikgew0KICAgICAgICBtdWx0aVBhc3RlID0gbWFwKHRleHRMaW5lcywgZnVuY3Rpb24gKGwpIHsgcmV0dXJuIFtsXTsgfSk7DQogICAgICB9DQogICAgfQ0KDQogICAgdmFyIHVwZGF0ZUlucHV0ID0gY20uY3VyT3AudXBkYXRlSW5wdXQ7DQogICAgLy8gTm9ybWFsIGJlaGF2aW9yIGlzIHRvIGluc2VydCB0aGUgbmV3IHRleHQgaW50byBldmVyeSBzZWxlY3Rpb24NCiAgICBmb3IgKHZhciBpJDEgPSBzZWwucmFuZ2VzLmxlbmd0aCAtIDE7IGkkMSA+PSAwOyBpJDEtLSkgew0KICAgICAgdmFyIHJhbmdlJCQxID0gc2VsLnJhbmdlc1tpJDFdOw0KICAgICAgdmFyIGZyb20gPSByYW5nZSQkMS5mcm9tKCksIHRvID0gcmFuZ2UkJDEudG8oKTsNCiAgICAgIGlmIChyYW5nZSQkMS5lbXB0eSgpKSB7DQogICAgICAgIGlmIChkZWxldGVkICYmIGRlbGV0ZWQgPiAwKSAvLyBIYW5kbGUgZGVsZXRpb24NCiAgICAgICAgICB7IGZyb20gPSBQb3MoZnJvbS5saW5lLCBmcm9tLmNoIC0gZGVsZXRlZCk7IH0NCiAgICAgICAgZWxzZSBpZiAoY20uc3RhdGUub3ZlcndyaXRlICYmICFwYXN0ZSkgLy8gSGFuZGxlIG92ZXJ3cml0ZQ0KICAgICAgICAgIHsgdG8gPSBQb3ModG8ubGluZSwgTWF0aC5taW4oZ2V0TGluZShkb2MsIHRvLmxpbmUpLnRleHQubGVuZ3RoLCB0by5jaCArIGxzdCh0ZXh0TGluZXMpLmxlbmd0aCkpOyB9DQogICAgICAgIGVsc2UgaWYgKHBhc3RlICYmIGxhc3RDb3BpZWQgJiYgbGFzdENvcGllZC5saW5lV2lzZSAmJiBsYXN0Q29waWVkLnRleHQuam9pbigiXG4iKSA9PSBpbnNlcnRlZCkNCiAgICAgICAgICB7IGZyb20gPSB0byA9IFBvcyhmcm9tLmxpbmUsIDApOyB9DQogICAgICB9DQogICAgICB2YXIgY2hhbmdlRXZlbnQgPSB7ZnJvbTogZnJvbSwgdG86IHRvLCB0ZXh0OiBtdWx0aVBhc3RlID8gbXVsdGlQYXN0ZVtpJDEgJSBtdWx0aVBhc3RlLmxlbmd0aF0gOiB0ZXh0TGluZXMsDQogICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luOiBvcmlnaW4gfHwgKHBhc3RlID8gInBhc3RlIiA6IGNtLnN0YXRlLmN1dEluY29taW5nID4gcmVjZW50ID8gImN1dCIgOiAiK2lucHV0Iil9Ow0KICAgICAgbWFrZUNoYW5nZShjbS5kb2MsIGNoYW5nZUV2ZW50KTsNCiAgICAgIHNpZ25hbExhdGVyKGNtLCAiaW5wdXRSZWFkIiwgY20sIGNoYW5nZUV2ZW50KTsNCiAgICB9DQogICAgaWYgKGluc2VydGVkICYmICFwYXN0ZSkNCiAgICAgIHsgdHJpZ2dlckVsZWN0cmljKGNtLCBpbnNlcnRlZCk7IH0NCg0KICAgIGVuc3VyZUN1cnNvclZpc2libGUoY20pOw0KICAgIGlmIChjbS5jdXJPcC51cGRhdGVJbnB1dCA8IDIpIHsgY20uY3VyT3AudXBkYXRlSW5wdXQgPSB1cGRhdGVJbnB1dDsgfQ0KICAgIGNtLmN1ck9wLnR5cGluZyA9IHRydWU7DQogICAgY20uc3RhdGUucGFzdGVJbmNvbWluZyA9IGNtLnN0YXRlLmN1dEluY29taW5nID0gLTE7DQogIH0NCg0KICBmdW5jdGlvbiBoYW5kbGVQYXN0ZShlLCBjbSkgew0KICAgIHZhciBwYXN0ZWQgPSBlLmNsaXBib2FyZERhdGEgJiYgZS5jbGlwYm9hcmREYXRhLmdldERhdGEoIlRleHQiKTsNCiAgICBpZiAocGFzdGVkKSB7DQogICAgICBlLnByZXZlbnREZWZhdWx0KCk7DQogICAgICBpZiAoIWNtLmlzUmVhZE9ubHkoKSAmJiAhY20ub3B0aW9ucy5kaXNhYmxlSW5wdXQpDQogICAgICAgIHsgcnVuSW5PcChjbSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYXBwbHlUZXh0SW5wdXQoY20sIHBhc3RlZCwgMCwgbnVsbCwgInBhc3RlIik7IH0pOyB9DQogICAgICByZXR1cm4gdHJ1ZQ0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIHRyaWdnZXJFbGVjdHJpYyhjbSwgaW5zZXJ0ZWQpIHsNCiAgICAvLyBXaGVuIGFuICdlbGVjdHJpYycgY2hhcmFjdGVyIGlzIGluc2VydGVkLCBpbW1lZGlhdGVseSB0cmlnZ2VyIGEgcmVpbmRlbnQNCiAgICBpZiAoIWNtLm9wdGlvbnMuZWxlY3RyaWNDaGFycyB8fCAhY20ub3B0aW9ucy5zbWFydEluZGVudCkgeyByZXR1cm4gfQ0KICAgIHZhciBzZWwgPSBjbS5kb2Muc2VsOw0KDQogICAgZm9yICh2YXIgaSA9IHNlbC5yYW5nZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsNCiAgICAgIHZhciByYW5nZSQkMSA9IHNlbC5yYW5nZXNbaV07DQogICAgICBpZiAocmFuZ2UkJDEuaGVhZC5jaCA+IDEwMCB8fCAoaSAmJiBzZWwucmFuZ2VzW2kgLSAxXS5oZWFkLmxpbmUgPT0gcmFuZ2UkJDEuaGVhZC5saW5lKSkgeyBjb250aW51ZSB9DQogICAgICB2YXIgbW9kZSA9IGNtLmdldE1vZGVBdChyYW5nZSQkMS5oZWFkKTsNCiAgICAgIHZhciBpbmRlbnRlZCA9IGZhbHNlOw0KICAgICAgaWYgKG1vZGUuZWxlY3RyaWNDaGFycykgew0KICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1vZGUuZWxlY3RyaWNDaGFycy5sZW5ndGg7IGorKykNCiAgICAgICAgICB7IGlmIChpbnNlcnRlZC5pbmRleE9mKG1vZGUuZWxlY3RyaWNDaGFycy5jaGFyQXQoaikpID4gLTEpIHsNCiAgICAgICAgICAgIGluZGVudGVkID0gaW5kZW50TGluZShjbSwgcmFuZ2UkJDEuaGVhZC5saW5lLCAic21hcnQiKTsNCiAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgfSB9DQogICAgICB9IGVsc2UgaWYgKG1vZGUuZWxlY3RyaWNJbnB1dCkgew0KICAgICAgICBpZiAobW9kZS5lbGVjdHJpY0lucHV0LnRlc3QoZ2V0TGluZShjbS5kb2MsIHJhbmdlJCQxLmhlYWQubGluZSkudGV4dC5zbGljZSgwLCByYW5nZSQkMS5oZWFkLmNoKSkpDQogICAgICAgICAgeyBpbmRlbnRlZCA9IGluZGVudExpbmUoY20sIHJhbmdlJCQxLmhlYWQubGluZSwgInNtYXJ0Iik7IH0NCiAgICAgIH0NCiAgICAgIGlmIChpbmRlbnRlZCkgeyBzaWduYWxMYXRlcihjbSwgImVsZWN0cmljSW5wdXQiLCBjbSwgcmFuZ2UkJDEuaGVhZC5saW5lKTsgfQ0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIGNvcHlhYmxlUmFuZ2VzKGNtKSB7DQogICAgdmFyIHRleHQgPSBbXSwgcmFuZ2VzID0gW107DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbS5kb2Muc2VsLnJhbmdlcy5sZW5ndGg7IGkrKykgew0KICAgICAgdmFyIGxpbmUgPSBjbS5kb2Muc2VsLnJhbmdlc1tpXS5oZWFkLmxpbmU7DQogICAgICB2YXIgbGluZVJhbmdlID0ge2FuY2hvcjogUG9zKGxpbmUsIDApLCBoZWFkOiBQb3MobGluZSArIDEsIDApfTsNCiAgICAgIHJhbmdlcy5wdXNoKGxpbmVSYW5nZSk7DQogICAgICB0ZXh0LnB1c2goY20uZ2V0UmFuZ2UobGluZVJhbmdlLmFuY2hvciwgbGluZVJhbmdlLmhlYWQpKTsNCiAgICB9DQogICAgcmV0dXJuIHt0ZXh0OiB0ZXh0LCByYW5nZXM6IHJhbmdlc30NCiAgfQ0KDQogIGZ1bmN0aW9uIGRpc2FibGVCcm93c2VyTWFnaWMoZmllbGQsIHNwZWxsY2hlY2ssIGF1dG9jb3JyZWN0LCBhdXRvY2FwaXRhbGl6ZSkgew0KICAgIGZpZWxkLnNldEF0dHJpYnV0ZSgiYXV0b2NvcnJlY3QiLCBhdXRvY29ycmVjdCA/ICIiIDogIm9mZiIpOw0KICAgIGZpZWxkLnNldEF0dHJpYnV0ZSgiYXV0b2NhcGl0YWxpemUiLCBhdXRvY2FwaXRhbGl6ZSA/ICIiIDogIm9mZiIpOw0KICAgIGZpZWxkLnNldEF0dHJpYnV0ZSgic3BlbGxjaGVjayIsICEhc3BlbGxjaGVjayk7DQogIH0NCg0KICBmdW5jdGlvbiBoaWRkZW5UZXh0YXJlYSgpIHsNCiAgICB2YXIgdGUgPSBlbHQoInRleHRhcmVhIiwgbnVsbCwgbnVsbCwgInBvc2l0aW9uOiBhYnNvbHV0ZTsgYm90dG9tOiAtMWVtOyBwYWRkaW5nOiAwOyB3aWR0aDogMXB4OyBoZWlnaHQ6IDFlbTsgb3V0bGluZTogbm9uZSIpOw0KICAgIHZhciBkaXYgPSBlbHQoImRpdiIsIFt0ZV0sIG51bGwsICJvdmVyZmxvdzogaGlkZGVuOyBwb3NpdGlvbjogcmVsYXRpdmU7IHdpZHRoOiAzcHg7IGhlaWdodDogMHB4OyIpOw0KICAgIC8vIFRoZSB0ZXh0YXJlYSBpcyBrZXB0IHBvc2l0aW9uZWQgbmVhciB0aGUgY3Vyc29yIHRvIHByZXZlbnQgdGhlDQogICAgLy8gZmFjdCB0aGF0IGl0J2xsIGJlIHNjcm9sbGVkIGludG8gdmlldyBvbiBpbnB1dCBmcm9tIHNjcm9sbGluZw0KICAgIC8vIG91ciBmYWtlIGN1cnNvciBvdXQgb2Ygdmlldy4gT24gd2Via2l0LCB3aGVuIHdyYXA9b2ZmLCBwYXN0ZSBpcw0KICAgIC8vIHZlcnkgc2xvdy4gU28gbWFrZSB0aGUgYXJlYSB3aWRlIGluc3RlYWQuDQogICAgaWYgKHdlYmtpdCkgeyB0ZS5zdHlsZS53aWR0aCA9ICIxMDAwcHgiOyB9DQogICAgZWxzZSB7IHRlLnNldEF0dHJpYnV0ZSgid3JhcCIsICJvZmYiKTsgfQ0KICAgIC8vIElmIGJvcmRlcjogMDsgLS0gaU9TIGZhaWxzIHRvIG9wZW4ga2V5Ym9hcmQgKGlzc3VlICMxMjg3KQ0KICAgIGlmIChpb3MpIHsgdGUuc3R5bGUuYm9yZGVyID0gIjFweCBzb2xpZCBibGFjayI7IH0NCiAgICBkaXNhYmxlQnJvd3Nlck1hZ2ljKHRlKTsNCiAgICByZXR1cm4gZGl2DQogIH0NCg0KICAvLyBUaGUgcHVibGljbHkgdmlzaWJsZSBBUEkuIE5vdGUgdGhhdCBtZXRob2RPcChmKSBtZWFucw0KICAvLyAnd3JhcCBmIGluIGFuIG9wZXJhdGlvbiwgcGVyZm9ybWVkIG9uIGl0cyBgdGhpc2AgcGFyYW1ldGVyJy4NCg0KICAvLyBUaGlzIGlzIG5vdCB0aGUgY29tcGxldGUgc2V0IG9mIGVkaXRvciBtZXRob2RzLiBNb3N0IG9mIHRoZQ0KICAvLyBtZXRob2RzIGRlZmluZWQgb24gdGhlIERvYyB0eXBlIGFyZSBhbHNvIGluamVjdGVkIGludG8NCiAgLy8gQ29kZU1pcnJvci5wcm90b3R5cGUsIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBhbmQNCiAgLy8gY29udmVuaWVuY2UuDQoNCiAgZnVuY3Rpb24gYWRkRWRpdG9yTWV0aG9kcyhDb2RlTWlycm9yKSB7DQogICAgdmFyIG9wdGlvbkhhbmRsZXJzID0gQ29kZU1pcnJvci5vcHRpb25IYW5kbGVyczsNCg0KICAgIHZhciBoZWxwZXJzID0gQ29kZU1pcnJvci5oZWxwZXJzID0ge307DQoNCiAgICBDb2RlTWlycm9yLnByb3RvdHlwZSA9IHsNCiAgICAgIGNvbnN0cnVjdG9yOiBDb2RlTWlycm9yLA0KICAgICAgZm9jdXM6IGZ1bmN0aW9uKCl7d2luZG93LmZvY3VzKCk7IHRoaXMuZGlzcGxheS5pbnB1dC5mb2N1cygpO30sDQoNCiAgICAgIHNldE9wdGlvbjogZnVuY3Rpb24ob3B0aW9uLCB2YWx1ZSkgew0KICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucywgb2xkID0gb3B0aW9uc1tvcHRpb25dOw0KICAgICAgICBpZiAob3B0aW9uc1tvcHRpb25dID09IHZhbHVlICYmIG9wdGlvbiAhPSAibW9kZSIpIHsgcmV0dXJuIH0NCiAgICAgICAgb3B0aW9uc1tvcHRpb25dID0gdmFsdWU7DQogICAgICAgIGlmIChvcHRpb25IYW5kbGVycy5oYXNPd25Qcm9wZXJ0eShvcHRpb24pKQ0KICAgICAgICAgIHsgb3BlcmF0aW9uKHRoaXMsIG9wdGlvbkhhbmRsZXJzW29wdGlvbl0pKHRoaXMsIHZhbHVlLCBvbGQpOyB9DQogICAgICAgIHNpZ25hbCh0aGlzLCAib3B0aW9uQ2hhbmdlIiwgdGhpcywgb3B0aW9uKTsNCiAgICAgIH0sDQoNCiAgICAgIGdldE9wdGlvbjogZnVuY3Rpb24ob3B0aW9uKSB7cmV0dXJuIHRoaXMub3B0aW9uc1tvcHRpb25dfSwNCiAgICAgIGdldERvYzogZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXMuZG9jfSwNCg0KICAgICAgYWRkS2V5TWFwOiBmdW5jdGlvbihtYXAkJDEsIGJvdHRvbSkgew0KICAgICAgICB0aGlzLnN0YXRlLmtleU1hcHNbYm90dG9tID8gInB1c2giIDogInVuc2hpZnQiXShnZXRLZXlNYXAobWFwJCQxKSk7DQogICAgICB9LA0KICAgICAgcmVtb3ZlS2V5TWFwOiBmdW5jdGlvbihtYXAkJDEpIHsNCiAgICAgICAgdmFyIG1hcHMgPSB0aGlzLnN0YXRlLmtleU1hcHM7DQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFwcy5sZW5ndGg7ICsraSkNCiAgICAgICAgICB7IGlmIChtYXBzW2ldID09IG1hcCQkMSB8fCBtYXBzW2ldLm5hbWUgPT0gbWFwJCQxKSB7DQogICAgICAgICAgICBtYXBzLnNwbGljZShpLCAxKTsNCiAgICAgICAgICAgIHJldHVybiB0cnVlDQogICAgICAgICAgfSB9DQogICAgICB9LA0KDQogICAgICBhZGRPdmVybGF5OiBtZXRob2RPcChmdW5jdGlvbihzcGVjLCBvcHRpb25zKSB7DQogICAgICAgIHZhciBtb2RlID0gc3BlYy50b2tlbiA/IHNwZWMgOiBDb2RlTWlycm9yLmdldE1vZGUodGhpcy5vcHRpb25zLCBzcGVjKTsNCiAgICAgICAgaWYgKG1vZGUuc3RhcnRTdGF0ZSkgeyB0aHJvdyBuZXcgRXJyb3IoIk92ZXJsYXlzIG1heSBub3QgYmUgc3RhdGVmdWwuIikgfQ0KICAgICAgICBpbnNlcnRTb3J0ZWQodGhpcy5zdGF0ZS5vdmVybGF5cywNCiAgICAgICAgICAgICAgICAgICAgIHttb2RlOiBtb2RlLCBtb2RlU3BlYzogc3BlYywgb3BhcXVlOiBvcHRpb25zICYmIG9wdGlvbnMub3BhcXVlLA0KICAgICAgICAgICAgICAgICAgICAgIHByaW9yaXR5OiAob3B0aW9ucyAmJiBvcHRpb25zLnByaW9yaXR5KSB8fCAwfSwNCiAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChvdmVybGF5KSB7IHJldHVybiBvdmVybGF5LnByaW9yaXR5OyB9KTsNCiAgICAgICAgdGhpcy5zdGF0ZS5tb2RlR2VuKys7DQogICAgICAgIHJlZ0NoYW5nZSh0aGlzKTsNCiAgICAgIH0pLA0KICAgICAgcmVtb3ZlT3ZlcmxheTogbWV0aG9kT3AoZnVuY3Rpb24oc3BlYykgew0KICAgICAgICB2YXIgdGhpcyQxID0gdGhpczsNCg0KICAgICAgICB2YXIgb3ZlcmxheXMgPSB0aGlzLnN0YXRlLm92ZXJsYXlzOw0KICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG92ZXJsYXlzLmxlbmd0aDsgKytpKSB7DQogICAgICAgICAgdmFyIGN1ciA9IG92ZXJsYXlzW2ldLm1vZGVTcGVjOw0KICAgICAgICAgIGlmIChjdXIgPT0gc3BlYyB8fCB0eXBlb2Ygc3BlYyA9PSAic3RyaW5nIiAmJiBjdXIubmFtZSA9PSBzcGVjKSB7DQogICAgICAgICAgICBvdmVybGF5cy5zcGxpY2UoaSwgMSk7DQogICAgICAgICAgICB0aGlzJDEuc3RhdGUubW9kZUdlbisrOw0KICAgICAgICAgICAgcmVnQ2hhbmdlKHRoaXMkMSk7DQogICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgIH0pLA0KDQogICAgICBpbmRlbnRMaW5lOiBtZXRob2RPcChmdW5jdGlvbihuLCBkaXIsIGFnZ3Jlc3NpdmUpIHsNCiAgICAgICAgaWYgKHR5cGVvZiBkaXIgIT0gInN0cmluZyIgJiYgdHlwZW9mIGRpciAhPSAibnVtYmVyIikgew0KICAgICAgICAgIGlmIChkaXIgPT0gbnVsbCkgeyBkaXIgPSB0aGlzLm9wdGlvbnMuc21hcnRJbmRlbnQgPyAic21hcnQiIDogInByZXYiOyB9DQogICAgICAgICAgZWxzZSB7IGRpciA9IGRpciA/ICJhZGQiIDogInN1YnRyYWN0IjsgfQ0KICAgICAgICB9DQogICAgICAgIGlmIChpc0xpbmUodGhpcy5kb2MsIG4pKSB7IGluZGVudExpbmUodGhpcywgbiwgZGlyLCBhZ2dyZXNzaXZlKTsgfQ0KICAgICAgfSksDQogICAgICBpbmRlbnRTZWxlY3Rpb246IG1ldGhvZE9wKGZ1bmN0aW9uKGhvdykgew0KICAgICAgICB2YXIgdGhpcyQxID0gdGhpczsNCg0KICAgICAgICB2YXIgcmFuZ2VzID0gdGhpcy5kb2Muc2VsLnJhbmdlcywgZW5kID0gLTE7DQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgdmFyIHJhbmdlJCQxID0gcmFuZ2VzW2ldOw0KICAgICAgICAgIGlmICghcmFuZ2UkJDEuZW1wdHkoKSkgew0KICAgICAgICAgICAgdmFyIGZyb20gPSByYW5nZSQkMS5mcm9tKCksIHRvID0gcmFuZ2UkJDEudG8oKTsNCiAgICAgICAgICAgIHZhciBzdGFydCA9IE1hdGgubWF4KGVuZCwgZnJvbS5saW5lKTsNCiAgICAgICAgICAgIGVuZCA9IE1hdGgubWluKHRoaXMkMS5sYXN0TGluZSgpLCB0by5saW5lIC0gKHRvLmNoID8gMCA6IDEpKSArIDE7DQogICAgICAgICAgICBmb3IgKHZhciBqID0gc3RhcnQ7IGogPCBlbmQ7ICsraikNCiAgICAgICAgICAgICAgeyBpbmRlbnRMaW5lKHRoaXMkMSwgaiwgaG93KTsgfQ0KICAgICAgICAgICAgdmFyIG5ld1JhbmdlcyA9IHRoaXMkMS5kb2Muc2VsLnJhbmdlczsNCiAgICAgICAgICAgIGlmIChmcm9tLmNoID09IDAgJiYgcmFuZ2VzLmxlbmd0aCA9PSBuZXdSYW5nZXMubGVuZ3RoICYmIG5ld1Jhbmdlc1tpXS5mcm9tKCkuY2ggPiAwKQ0KICAgICAgICAgICAgICB7IHJlcGxhY2VPbmVTZWxlY3Rpb24odGhpcyQxLmRvYywgaSwgbmV3IFJhbmdlKGZyb20sIG5ld1Jhbmdlc1tpXS50bygpKSwgc2VsX2RvbnRTY3JvbGwpOyB9DQogICAgICAgICAgfSBlbHNlIGlmIChyYW5nZSQkMS5oZWFkLmxpbmUgPiBlbmQpIHsNCiAgICAgICAgICAgIGluZGVudExpbmUodGhpcyQxLCByYW5nZSQkMS5oZWFkLmxpbmUsIGhvdywgdHJ1ZSk7DQogICAgICAgICAgICBlbmQgPSByYW5nZSQkMS5oZWFkLmxpbmU7DQogICAgICAgICAgICBpZiAoaSA9PSB0aGlzJDEuZG9jLnNlbC5wcmltSW5kZXgpIHsgZW5zdXJlQ3Vyc29yVmlzaWJsZSh0aGlzJDEpOyB9DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9KSwNCg0KICAgICAgLy8gRmV0Y2ggdGhlIHBhcnNlciB0b2tlbiBmb3IgYSBnaXZlbiBjaGFyYWN0ZXIuIFVzZWZ1bCBmb3IgaGFja3MNCiAgICAgIC8vIHRoYXQgd2FudCB0byBpbnNwZWN0IHRoZSBtb2RlIHN0YXRlIChzYXksIGZvciBjb21wbGV0aW9uKS4NCiAgICAgIGdldFRva2VuQXQ6IGZ1bmN0aW9uKHBvcywgcHJlY2lzZSkgew0KICAgICAgICByZXR1cm4gdGFrZVRva2VuKHRoaXMsIHBvcywgcHJlY2lzZSkNCiAgICAgIH0sDQoNCiAgICAgIGdldExpbmVUb2tlbnM6IGZ1bmN0aW9uKGxpbmUsIHByZWNpc2UpIHsNCiAgICAgICAgcmV0dXJuIHRha2VUb2tlbih0aGlzLCBQb3MobGluZSksIHByZWNpc2UsIHRydWUpDQogICAgICB9LA0KDQogICAgICBnZXRUb2tlblR5cGVBdDogZnVuY3Rpb24ocG9zKSB7DQogICAgICAgIHBvcyA9IGNsaXBQb3ModGhpcy5kb2MsIHBvcyk7DQogICAgICAgIHZhciBzdHlsZXMgPSBnZXRMaW5lU3R5bGVzKHRoaXMsIGdldExpbmUodGhpcy5kb2MsIHBvcy5saW5lKSk7DQogICAgICAgIHZhciBiZWZvcmUgPSAwLCBhZnRlciA9IChzdHlsZXMubGVuZ3RoIC0gMSkgLyAyLCBjaCA9IHBvcy5jaDsNCiAgICAgICAgdmFyIHR5cGU7DQogICAgICAgIGlmIChjaCA9PSAwKSB7IHR5cGUgPSBzdHlsZXNbMl07IH0NCiAgICAgICAgZWxzZSB7IGZvciAoOzspIHsNCiAgICAgICAgICB2YXIgbWlkID0gKGJlZm9yZSArIGFmdGVyKSA+PiAxOw0KICAgICAgICAgIGlmICgobWlkID8gc3R5bGVzW21pZCAqIDIgLSAxXSA6IDApID49IGNoKSB7IGFmdGVyID0gbWlkOyB9DQogICAgICAgICAgZWxzZSBpZiAoc3R5bGVzW21pZCAqIDIgKyAxXSA8IGNoKSB7IGJlZm9yZSA9IG1pZCArIDE7IH0NCiAgICAgICAgICBlbHNlIHsgdHlwZSA9IHN0eWxlc1ttaWQgKiAyICsgMl07IGJyZWFrIH0NCiAgICAgICAgfSB9DQogICAgICAgIHZhciBjdXQgPSB0eXBlID8gdHlwZS5pbmRleE9mKCJvdmVybGF5ICIpIDogLTE7DQogICAgICAgIHJldHVybiBjdXQgPCAwID8gdHlwZSA6IGN1dCA9PSAwID8gbnVsbCA6IHR5cGUuc2xpY2UoMCwgY3V0IC0gMSkNCiAgICAgIH0sDQoNCiAgICAgIGdldE1vZGVBdDogZnVuY3Rpb24ocG9zKSB7DQogICAgICAgIHZhciBtb2RlID0gdGhpcy5kb2MubW9kZTsNCiAgICAgICAgaWYgKCFtb2RlLmlubmVyTW9kZSkgeyByZXR1cm4gbW9kZSB9DQogICAgICAgIHJldHVybiBDb2RlTWlycm9yLmlubmVyTW9kZShtb2RlLCB0aGlzLmdldFRva2VuQXQocG9zKS5zdGF0ZSkubW9kZQ0KICAgICAgfSwNCg0KICAgICAgZ2V0SGVscGVyOiBmdW5jdGlvbihwb3MsIHR5cGUpIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0SGVscGVycyhwb3MsIHR5cGUpWzBdDQogICAgICB9LA0KDQogICAgICBnZXRIZWxwZXJzOiBmdW5jdGlvbihwb3MsIHR5cGUpIHsNCiAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICAgICAgdmFyIGZvdW5kID0gW107DQogICAgICAgIGlmICghaGVscGVycy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgeyByZXR1cm4gZm91bmQgfQ0KICAgICAgICB2YXIgaGVscCA9IGhlbHBlcnNbdHlwZV0sIG1vZGUgPSB0aGlzLmdldE1vZGVBdChwb3MpOw0KICAgICAgICBpZiAodHlwZW9mIG1vZGVbdHlwZV0gPT0gInN0cmluZyIpIHsNCiAgICAgICAgICBpZiAoaGVscFttb2RlW3R5cGVdXSkgeyBmb3VuZC5wdXNoKGhlbHBbbW9kZVt0eXBlXV0pOyB9DQogICAgICAgIH0gZWxzZSBpZiAobW9kZVt0eXBlXSkgew0KICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbW9kZVt0eXBlXS5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgdmFyIHZhbCA9IGhlbHBbbW9kZVt0eXBlXVtpXV07DQogICAgICAgICAgICBpZiAodmFsKSB7IGZvdW5kLnB1c2godmFsKTsgfQ0KICAgICAgICAgIH0NCiAgICAgICAgfSBlbHNlIGlmIChtb2RlLmhlbHBlclR5cGUgJiYgaGVscFttb2RlLmhlbHBlclR5cGVdKSB7DQogICAgICAgICAgZm91bmQucHVzaChoZWxwW21vZGUuaGVscGVyVHlwZV0pOw0KICAgICAgICB9IGVsc2UgaWYgKGhlbHBbbW9kZS5uYW1lXSkgew0KICAgICAgICAgIGZvdW5kLnB1c2goaGVscFttb2RlLm5hbWVdKTsNCiAgICAgICAgfQ0KICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBoZWxwLl9nbG9iYWwubGVuZ3RoOyBpJDErKykgew0KICAgICAgICAgIHZhciBjdXIgPSBoZWxwLl9nbG9iYWxbaSQxXTsNCiAgICAgICAgICBpZiAoY3VyLnByZWQobW9kZSwgdGhpcyQxKSAmJiBpbmRleE9mKGZvdW5kLCBjdXIudmFsKSA9PSAtMSkNCiAgICAgICAgICAgIHsgZm91bmQucHVzaChjdXIudmFsKTsgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBmb3VuZA0KICAgICAgfSwNCg0KICAgICAgZ2V0U3RhdGVBZnRlcjogZnVuY3Rpb24obGluZSwgcHJlY2lzZSkgew0KICAgICAgICB2YXIgZG9jID0gdGhpcy5kb2M7DQogICAgICAgIGxpbmUgPSBjbGlwTGluZShkb2MsIGxpbmUgPT0gbnVsbCA/IGRvYy5maXJzdCArIGRvYy5zaXplIC0gMTogbGluZSk7DQogICAgICAgIHJldHVybiBnZXRDb250ZXh0QmVmb3JlKHRoaXMsIGxpbmUgKyAxLCBwcmVjaXNlKS5zdGF0ZQ0KICAgICAgfSwNCg0KICAgICAgY3Vyc29yQ29vcmRzOiBmdW5jdGlvbihzdGFydCwgbW9kZSkgew0KICAgICAgICB2YXIgcG9zLCByYW5nZSQkMSA9IHRoaXMuZG9jLnNlbC5wcmltYXJ5KCk7DQogICAgICAgIGlmIChzdGFydCA9PSBudWxsKSB7IHBvcyA9IHJhbmdlJCQxLmhlYWQ7IH0NCiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHN0YXJ0ID09ICJvYmplY3QiKSB7IHBvcyA9IGNsaXBQb3ModGhpcy5kb2MsIHN0YXJ0KTsgfQ0KICAgICAgICBlbHNlIHsgcG9zID0gc3RhcnQgPyByYW5nZSQkMS5mcm9tKCkgOiByYW5nZSQkMS50bygpOyB9DQogICAgICAgIHJldHVybiBjdXJzb3JDb29yZHModGhpcywgcG9zLCBtb2RlIHx8ICJwYWdlIikNCiAgICAgIH0sDQoNCiAgICAgIGNoYXJDb29yZHM6IGZ1bmN0aW9uKHBvcywgbW9kZSkgew0KICAgICAgICByZXR1cm4gY2hhckNvb3Jkcyh0aGlzLCBjbGlwUG9zKHRoaXMuZG9jLCBwb3MpLCBtb2RlIHx8ICJwYWdlIikNCiAgICAgIH0sDQoNCiAgICAgIGNvb3Jkc0NoYXI6IGZ1bmN0aW9uKGNvb3JkcywgbW9kZSkgew0KICAgICAgICBjb29yZHMgPSBmcm9tQ29vcmRTeXN0ZW0odGhpcywgY29vcmRzLCBtb2RlIHx8ICJwYWdlIik7DQogICAgICAgIHJldHVybiBjb29yZHNDaGFyKHRoaXMsIGNvb3Jkcy5sZWZ0LCBjb29yZHMudG9wKQ0KICAgICAgfSwNCg0KICAgICAgbGluZUF0SGVpZ2h0OiBmdW5jdGlvbihoZWlnaHQsIG1vZGUpIHsNCiAgICAgICAgaGVpZ2h0ID0gZnJvbUNvb3JkU3lzdGVtKHRoaXMsIHt0b3A6IGhlaWdodCwgbGVmdDogMH0sIG1vZGUgfHwgInBhZ2UiKS50b3A7DQogICAgICAgIHJldHVybiBsaW5lQXRIZWlnaHQodGhpcy5kb2MsIGhlaWdodCArIHRoaXMuZGlzcGxheS52aWV3T2Zmc2V0KQ0KICAgICAgfSwNCiAgICAgIGhlaWdodEF0TGluZTogZnVuY3Rpb24obGluZSwgbW9kZSwgaW5jbHVkZVdpZGdldHMpIHsNCiAgICAgICAgdmFyIGVuZCA9IGZhbHNlLCBsaW5lT2JqOw0KICAgICAgICBpZiAodHlwZW9mIGxpbmUgPT0gIm51bWJlciIpIHsNCiAgICAgICAgICB2YXIgbGFzdCA9IHRoaXMuZG9jLmZpcnN0ICsgdGhpcy5kb2Muc2l6ZSAtIDE7DQogICAgICAgICAgaWYgKGxpbmUgPCB0aGlzLmRvYy5maXJzdCkgeyBsaW5lID0gdGhpcy5kb2MuZmlyc3Q7IH0NCiAgICAgICAgICBlbHNlIGlmIChsaW5lID4gbGFzdCkgeyBsaW5lID0gbGFzdDsgZW5kID0gdHJ1ZTsgfQ0KICAgICAgICAgIGxpbmVPYmogPSBnZXRMaW5lKHRoaXMuZG9jLCBsaW5lKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICBsaW5lT2JqID0gbGluZTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gaW50b0Nvb3JkU3lzdGVtKHRoaXMsIGxpbmVPYmosIHt0b3A6IDAsIGxlZnQ6IDB9LCBtb2RlIHx8ICJwYWdlIiwgaW5jbHVkZVdpZGdldHMgfHwgZW5kKS50b3AgKw0KICAgICAgICAgIChlbmQgPyB0aGlzLmRvYy5oZWlnaHQgLSBoZWlnaHRBdExpbmUobGluZU9iaikgOiAwKQ0KICAgICAgfSwNCg0KICAgICAgZGVmYXVsdFRleHRIZWlnaHQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGV4dEhlaWdodCh0aGlzLmRpc3BsYXkpIH0sDQogICAgICBkZWZhdWx0Q2hhcldpZHRoOiBmdW5jdGlvbigpIHsgcmV0dXJuIGNoYXJXaWR0aCh0aGlzLmRpc3BsYXkpIH0sDQoNCiAgICAgIGdldFZpZXdwb3J0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHtmcm9tOiB0aGlzLmRpc3BsYXkudmlld0Zyb20sIHRvOiB0aGlzLmRpc3BsYXkudmlld1RvfX0sDQoNCiAgICAgIGFkZFdpZGdldDogZnVuY3Rpb24ocG9zLCBub2RlLCBzY3JvbGwsIHZlcnQsIGhvcml6KSB7DQogICAgICAgIHZhciBkaXNwbGF5ID0gdGhpcy5kaXNwbGF5Ow0KICAgICAgICBwb3MgPSBjdXJzb3JDb29yZHModGhpcywgY2xpcFBvcyh0aGlzLmRvYywgcG9zKSk7DQogICAgICAgIHZhciB0b3AgPSBwb3MuYm90dG9tLCBsZWZ0ID0gcG9zLmxlZnQ7DQogICAgICAgIG5vZGUuc3R5bGUucG9zaXRpb24gPSAiYWJzb2x1dGUiOw0KICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgiY20taWdub3JlLWV2ZW50cyIsICJ0cnVlIik7DQogICAgICAgIHRoaXMuZGlzcGxheS5pbnB1dC5zZXRVbmVkaXRhYmxlKG5vZGUpOw0KICAgICAgICBkaXNwbGF5LnNpemVyLmFwcGVuZENoaWxkKG5vZGUpOw0KICAgICAgICBpZiAodmVydCA9PSAib3ZlciIpIHsNCiAgICAgICAgICB0b3AgPSBwb3MudG9wOw0KICAgICAgICB9IGVsc2UgaWYgKHZlcnQgPT0gImFib3ZlIiB8fCB2ZXJ0ID09ICJuZWFyIikgew0KICAgICAgICAgIHZhciB2c3BhY2UgPSBNYXRoLm1heChkaXNwbGF5LndyYXBwZXIuY2xpZW50SGVpZ2h0LCB0aGlzLmRvYy5oZWlnaHQpLA0KICAgICAgICAgIGhzcGFjZSA9IE1hdGgubWF4KGRpc3BsYXkuc2l6ZXIuY2xpZW50V2lkdGgsIGRpc3BsYXkubGluZVNwYWNlLmNsaWVudFdpZHRoKTsNCiAgICAgICAgICAvLyBEZWZhdWx0IHRvIHBvc2l0aW9uaW5nIGFib3ZlIChpZiBzcGVjaWZpZWQgYW5kIHBvc3NpYmxlKTsgb3RoZXJ3aXNlIGRlZmF1bHQgdG8gcG9zaXRpb25pbmcgYmVsb3cNCiAgICAgICAgICBpZiAoKHZlcnQgPT0gJ2Fib3ZlJyB8fCBwb3MuYm90dG9tICsgbm9kZS5vZmZzZXRIZWlnaHQgPiB2c3BhY2UpICYmIHBvcy50b3AgPiBub2RlLm9mZnNldEhlaWdodCkNCiAgICAgICAgICAgIHsgdG9wID0gcG9zLnRvcCAtIG5vZGUub2Zmc2V0SGVpZ2h0OyB9DQogICAgICAgICAgZWxzZSBpZiAocG9zLmJvdHRvbSArIG5vZGUub2Zmc2V0SGVpZ2h0IDw9IHZzcGFjZSkNCiAgICAgICAgICAgIHsgdG9wID0gcG9zLmJvdHRvbTsgfQ0KICAgICAgICAgIGlmIChsZWZ0ICsgbm9kZS5vZmZzZXRXaWR0aCA+IGhzcGFjZSkNCiAgICAgICAgICAgIHsgbGVmdCA9IGhzcGFjZSAtIG5vZGUub2Zmc2V0V2lkdGg7IH0NCiAgICAgICAgfQ0KICAgICAgICBub2RlLnN0eWxlLnRvcCA9IHRvcCArICJweCI7DQogICAgICAgIG5vZGUuc3R5bGUubGVmdCA9IG5vZGUuc3R5bGUucmlnaHQgPSAiIjsNCiAgICAgICAgaWYgKGhvcml6ID09ICJyaWdodCIpIHsNCiAgICAgICAgICBsZWZ0ID0gZGlzcGxheS5zaXplci5jbGllbnRXaWR0aCAtIG5vZGUub2Zmc2V0V2lkdGg7DQogICAgICAgICAgbm9kZS5zdHlsZS5yaWdodCA9ICIwcHgiOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIGlmIChob3JpeiA9PSAibGVmdCIpIHsgbGVmdCA9IDA7IH0NCiAgICAgICAgICBlbHNlIGlmIChob3JpeiA9PSAibWlkZGxlIikgeyBsZWZ0ID0gKGRpc3BsYXkuc2l6ZXIuY2xpZW50V2lkdGggLSBub2RlLm9mZnNldFdpZHRoKSAvIDI7IH0NCiAgICAgICAgICBub2RlLnN0eWxlLmxlZnQgPSBsZWZ0ICsgInB4IjsNCiAgICAgICAgfQ0KICAgICAgICBpZiAoc2Nyb2xsKQ0KICAgICAgICAgIHsgc2Nyb2xsSW50b1ZpZXcodGhpcywge2xlZnQ6IGxlZnQsIHRvcDogdG9wLCByaWdodDogbGVmdCArIG5vZGUub2Zmc2V0V2lkdGgsIGJvdHRvbTogdG9wICsgbm9kZS5vZmZzZXRIZWlnaHR9KTsgfQ0KICAgICAgfSwNCg0KICAgICAgdHJpZ2dlck9uS2V5RG93bjogbWV0aG9kT3Aob25LZXlEb3duKSwNCiAgICAgIHRyaWdnZXJPbktleVByZXNzOiBtZXRob2RPcChvbktleVByZXNzKSwNCiAgICAgIHRyaWdnZXJPbktleVVwOiBvbktleVVwLA0KICAgICAgdHJpZ2dlck9uTW91c2VEb3duOiBtZXRob2RPcChvbk1vdXNlRG93biksDQoNCiAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbihjbWQpIHsNCiAgICAgICAgaWYgKGNvbW1hbmRzLmhhc093blByb3BlcnR5KGNtZCkpDQogICAgICAgICAgeyByZXR1cm4gY29tbWFuZHNbY21kXS5jYWxsKG51bGwsIHRoaXMpIH0NCiAgICAgIH0sDQoNCiAgICAgIHRyaWdnZXJFbGVjdHJpYzogbWV0aG9kT3AoZnVuY3Rpb24odGV4dCkgeyB0cmlnZ2VyRWxlY3RyaWModGhpcywgdGV4dCk7IH0pLA0KDQogICAgICBmaW5kUG9zSDogZnVuY3Rpb24oZnJvbSwgYW1vdW50LCB1bml0LCB2aXN1YWxseSkgew0KICAgICAgICB2YXIgdGhpcyQxID0gdGhpczsNCg0KICAgICAgICB2YXIgZGlyID0gMTsNCiAgICAgICAgaWYgKGFtb3VudCA8IDApIHsgZGlyID0gLTE7IGFtb3VudCA9IC1hbW91bnQ7IH0NCiAgICAgICAgdmFyIGN1ciA9IGNsaXBQb3ModGhpcy5kb2MsIGZyb20pOw0KICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFtb3VudDsgKytpKSB7DQogICAgICAgICAgY3VyID0gZmluZFBvc0godGhpcyQxLmRvYywgY3VyLCBkaXIsIHVuaXQsIHZpc3VhbGx5KTsNCiAgICAgICAgICBpZiAoY3VyLmhpdFNpZGUpIHsgYnJlYWsgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBjdXINCiAgICAgIH0sDQoNCiAgICAgIG1vdmVIOiBtZXRob2RPcChmdW5jdGlvbihkaXIsIHVuaXQpIHsNCiAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICAgICAgdGhpcy5leHRlbmRTZWxlY3Rpb25zQnkoZnVuY3Rpb24gKHJhbmdlJCQxKSB7DQogICAgICAgICAgaWYgKHRoaXMkMS5kaXNwbGF5LnNoaWZ0IHx8IHRoaXMkMS5kb2MuZXh0ZW5kIHx8IHJhbmdlJCQxLmVtcHR5KCkpDQogICAgICAgICAgICB7IHJldHVybiBmaW5kUG9zSCh0aGlzJDEuZG9jLCByYW5nZSQkMS5oZWFkLCBkaXIsIHVuaXQsIHRoaXMkMS5vcHRpb25zLnJ0bE1vdmVWaXN1YWxseSkgfQ0KICAgICAgICAgIGVsc2UNCiAgICAgICAgICAgIHsgcmV0dXJuIGRpciA8IDAgPyByYW5nZSQkMS5mcm9tKCkgOiByYW5nZSQkMS50bygpIH0NCiAgICAgICAgfSwgc2VsX21vdmUpOw0KICAgICAgfSksDQoNCiAgICAgIGRlbGV0ZUg6IG1ldGhvZE9wKGZ1bmN0aW9uKGRpciwgdW5pdCkgew0KICAgICAgICB2YXIgc2VsID0gdGhpcy5kb2Muc2VsLCBkb2MgPSB0aGlzLmRvYzsNCiAgICAgICAgaWYgKHNlbC5zb21ldGhpbmdTZWxlY3RlZCgpKQ0KICAgICAgICAgIHsgZG9jLnJlcGxhY2VTZWxlY3Rpb24oIiIsIG51bGwsICIrZGVsZXRlIik7IH0NCiAgICAgICAgZWxzZQ0KICAgICAgICAgIHsgZGVsZXRlTmVhclNlbGVjdGlvbih0aGlzLCBmdW5jdGlvbiAocmFuZ2UkJDEpIHsNCiAgICAgICAgICAgIHZhciBvdGhlciA9IGZpbmRQb3NIKGRvYywgcmFuZ2UkJDEuaGVhZCwgZGlyLCB1bml0LCBmYWxzZSk7DQogICAgICAgICAgICByZXR1cm4gZGlyIDwgMCA/IHtmcm9tOiBvdGhlciwgdG86IHJhbmdlJCQxLmhlYWR9IDoge2Zyb206IHJhbmdlJCQxLmhlYWQsIHRvOiBvdGhlcn0NCiAgICAgICAgICB9KTsgfQ0KICAgICAgfSksDQoNCiAgICAgIGZpbmRQb3NWOiBmdW5jdGlvbihmcm9tLCBhbW91bnQsIHVuaXQsIGdvYWxDb2x1bW4pIHsNCiAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICAgICAgdmFyIGRpciA9IDEsIHggPSBnb2FsQ29sdW1uOw0KICAgICAgICBpZiAoYW1vdW50IDwgMCkgeyBkaXIgPSAtMTsgYW1vdW50ID0gLWFtb3VudDsgfQ0KICAgICAgICB2YXIgY3VyID0gY2xpcFBvcyh0aGlzLmRvYywgZnJvbSk7DQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYW1vdW50OyArK2kpIHsNCiAgICAgICAgICB2YXIgY29vcmRzID0gY3Vyc29yQ29vcmRzKHRoaXMkMSwgY3VyLCAiZGl2Iik7DQogICAgICAgICAgaWYgKHggPT0gbnVsbCkgeyB4ID0gY29vcmRzLmxlZnQ7IH0NCiAgICAgICAgICBlbHNlIHsgY29vcmRzLmxlZnQgPSB4OyB9DQogICAgICAgICAgY3VyID0gZmluZFBvc1YodGhpcyQxLCBjb29yZHMsIGRpciwgdW5pdCk7DQogICAgICAgICAgaWYgKGN1ci5oaXRTaWRlKSB7IGJyZWFrIH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gY3VyDQogICAgICB9LA0KDQogICAgICBtb3ZlVjogbWV0aG9kT3AoZnVuY3Rpb24oZGlyLCB1bml0KSB7DQogICAgICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgICAgIHZhciBkb2MgPSB0aGlzLmRvYywgZ29hbHMgPSBbXTsNCiAgICAgICAgdmFyIGNvbGxhcHNlID0gIXRoaXMuZGlzcGxheS5zaGlmdCAmJiAhZG9jLmV4dGVuZCAmJiBkb2Muc2VsLnNvbWV0aGluZ1NlbGVjdGVkKCk7DQogICAgICAgIGRvYy5leHRlbmRTZWxlY3Rpb25zQnkoZnVuY3Rpb24gKHJhbmdlJCQxKSB7DQogICAgICAgICAgaWYgKGNvbGxhcHNlKQ0KICAgICAgICAgICAgeyByZXR1cm4gZGlyIDwgMCA/IHJhbmdlJCQxLmZyb20oKSA6IHJhbmdlJCQxLnRvKCkgfQ0KICAgICAgICAgIHZhciBoZWFkUG9zID0gY3Vyc29yQ29vcmRzKHRoaXMkMSwgcmFuZ2UkJDEuaGVhZCwgImRpdiIpOw0KICAgICAgICAgIGlmIChyYW5nZSQkMS5nb2FsQ29sdW1uICE9IG51bGwpIHsgaGVhZFBvcy5sZWZ0ID0gcmFuZ2UkJDEuZ29hbENvbHVtbjsgfQ0KICAgICAgICAgIGdvYWxzLnB1c2goaGVhZFBvcy5sZWZ0KTsNCiAgICAgICAgICB2YXIgcG9zID0gZmluZFBvc1YodGhpcyQxLCBoZWFkUG9zLCBkaXIsIHVuaXQpOw0KICAgICAgICAgIGlmICh1bml0ID09ICJwYWdlIiAmJiByYW5nZSQkMSA9PSBkb2Muc2VsLnByaW1hcnkoKSkNCiAgICAgICAgICAgIHsgYWRkVG9TY3JvbGxUb3AodGhpcyQxLCBjaGFyQ29vcmRzKHRoaXMkMSwgcG9zLCAiZGl2IikudG9wIC0gaGVhZFBvcy50b3ApOyB9DQogICAgICAgICAgcmV0dXJuIHBvcw0KICAgICAgICB9LCBzZWxfbW92ZSk7DQogICAgICAgIGlmIChnb2Fscy5sZW5ndGgpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBkb2Muc2VsLnJhbmdlcy5sZW5ndGg7IGkrKykNCiAgICAgICAgICB7IGRvYy5zZWwucmFuZ2VzW2ldLmdvYWxDb2x1bW4gPSBnb2Fsc1tpXTsgfSB9DQogICAgICB9KSwNCg0KICAgICAgLy8gRmluZCB0aGUgd29yZCBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24gKGFzIHJldHVybmVkIGJ5IGNvb3Jkc0NoYXIpLg0KICAgICAgZmluZFdvcmRBdDogZnVuY3Rpb24ocG9zKSB7DQogICAgICAgIHZhciBkb2MgPSB0aGlzLmRvYywgbGluZSA9IGdldExpbmUoZG9jLCBwb3MubGluZSkudGV4dDsNCiAgICAgICAgdmFyIHN0YXJ0ID0gcG9zLmNoLCBlbmQgPSBwb3MuY2g7DQogICAgICAgIGlmIChsaW5lKSB7DQogICAgICAgICAgdmFyIGhlbHBlciA9IHRoaXMuZ2V0SGVscGVyKHBvcywgIndvcmRDaGFycyIpOw0KICAgICAgICAgIGlmICgocG9zLnN0aWNreSA9PSAiYmVmb3JlIiB8fCBlbmQgPT0gbGluZS5sZW5ndGgpICYmIHN0YXJ0KSB7IC0tc3RhcnQ7IH0gZWxzZSB7ICsrZW5kOyB9DQogICAgICAgICAgdmFyIHN0YXJ0Q2hhciA9IGxpbmUuY2hhckF0KHN0YXJ0KTsNCiAgICAgICAgICB2YXIgY2hlY2sgPSBpc1dvcmRDaGFyKHN0YXJ0Q2hhciwgaGVscGVyKQ0KICAgICAgICAgICAgPyBmdW5jdGlvbiAoY2gpIHsgcmV0dXJuIGlzV29yZENoYXIoY2gsIGhlbHBlcik7IH0NCiAgICAgICAgICAgIDogL1xzLy50ZXN0KHN0YXJ0Q2hhcikgPyBmdW5jdGlvbiAoY2gpIHsgcmV0dXJuIC9ccy8udGVzdChjaCk7IH0NCiAgICAgICAgICAgIDogZnVuY3Rpb24gKGNoKSB7IHJldHVybiAoIS9ccy8udGVzdChjaCkgJiYgIWlzV29yZENoYXIoY2gpKTsgfTsNCiAgICAgICAgICB3aGlsZSAoc3RhcnQgPiAwICYmIGNoZWNrKGxpbmUuY2hhckF0KHN0YXJ0IC0gMSkpKSB7IC0tc3RhcnQ7IH0NCiAgICAgICAgICB3aGlsZSAoZW5kIDwgbGluZS5sZW5ndGggJiYgY2hlY2sobGluZS5jaGFyQXQoZW5kKSkpIHsgKytlbmQ7IH0NCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gbmV3IFJhbmdlKFBvcyhwb3MubGluZSwgc3RhcnQpLCBQb3MocG9zLmxpbmUsIGVuZCkpDQogICAgICB9LA0KDQogICAgICB0b2dnbGVPdmVyd3JpdGU6IGZ1bmN0aW9uKHZhbHVlKSB7DQogICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIHZhbHVlID09IHRoaXMuc3RhdGUub3ZlcndyaXRlKSB7IHJldHVybiB9DQogICAgICAgIGlmICh0aGlzLnN0YXRlLm92ZXJ3cml0ZSA9ICF0aGlzLnN0YXRlLm92ZXJ3cml0ZSkNCiAgICAgICAgICB7IGFkZENsYXNzKHRoaXMuZGlzcGxheS5jdXJzb3JEaXYsICJDb2RlTWlycm9yLW92ZXJ3cml0ZSIpOyB9DQogICAgICAgIGVsc2UNCiAgICAgICAgICB7IHJtQ2xhc3ModGhpcy5kaXNwbGF5LmN1cnNvckRpdiwgIkNvZGVNaXJyb3Itb3ZlcndyaXRlIik7IH0NCg0KICAgICAgICBzaWduYWwodGhpcywgIm92ZXJ3cml0ZVRvZ2dsZSIsIHRoaXMsIHRoaXMuc3RhdGUub3ZlcndyaXRlKTsNCiAgICAgIH0sDQogICAgICBoYXNGb2N1czogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmRpc3BsYXkuaW5wdXQuZ2V0RmllbGQoKSA9PSBhY3RpdmVFbHQoKSB9LA0KICAgICAgaXNSZWFkT25seTogZnVuY3Rpb24oKSB7IHJldHVybiAhISh0aGlzLm9wdGlvbnMucmVhZE9ubHkgfHwgdGhpcy5kb2MuY2FudEVkaXQpIH0sDQoNCiAgICAgIHNjcm9sbFRvOiBtZXRob2RPcChmdW5jdGlvbiAoeCwgeSkgeyBzY3JvbGxUb0Nvb3Jkcyh0aGlzLCB4LCB5KTsgfSksDQogICAgICBnZXRTY3JvbGxJbmZvOiBmdW5jdGlvbigpIHsNCiAgICAgICAgdmFyIHNjcm9sbGVyID0gdGhpcy5kaXNwbGF5LnNjcm9sbGVyOw0KICAgICAgICByZXR1cm4ge2xlZnQ6IHNjcm9sbGVyLnNjcm9sbExlZnQsIHRvcDogc2Nyb2xsZXIuc2Nyb2xsVG9wLA0KICAgICAgICAgICAgICAgIGhlaWdodDogc2Nyb2xsZXIuc2Nyb2xsSGVpZ2h0IC0gc2Nyb2xsR2FwKHRoaXMpIC0gdGhpcy5kaXNwbGF5LmJhckhlaWdodCwNCiAgICAgICAgICAgICAgICB3aWR0aDogc2Nyb2xsZXIuc2Nyb2xsV2lkdGggLSBzY3JvbGxHYXAodGhpcykgLSB0aGlzLmRpc3BsYXkuYmFyV2lkdGgsDQogICAgICAgICAgICAgICAgY2xpZW50SGVpZ2h0OiBkaXNwbGF5SGVpZ2h0KHRoaXMpLCBjbGllbnRXaWR0aDogZGlzcGxheVdpZHRoKHRoaXMpfQ0KICAgICAgfSwNCg0KICAgICAgc2Nyb2xsSW50b1ZpZXc6IG1ldGhvZE9wKGZ1bmN0aW9uKHJhbmdlJCQxLCBtYXJnaW4pIHsNCiAgICAgICAgaWYgKHJhbmdlJCQxID09IG51bGwpIHsNCiAgICAgICAgICByYW5nZSQkMSA9IHtmcm9tOiB0aGlzLmRvYy5zZWwucHJpbWFyeSgpLmhlYWQsIHRvOiBudWxsfTsNCiAgICAgICAgICBpZiAobWFyZ2luID09IG51bGwpIHsgbWFyZ2luID0gdGhpcy5vcHRpb25zLmN1cnNvclNjcm9sbE1hcmdpbjsgfQ0KICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByYW5nZSQkMSA9PSAibnVtYmVyIikgew0KICAgICAgICAgIHJhbmdlJCQxID0ge2Zyb206IFBvcyhyYW5nZSQkMSwgMCksIHRvOiBudWxsfTsNCiAgICAgICAgfSBlbHNlIGlmIChyYW5nZSQkMS5mcm9tID09IG51bGwpIHsNCiAgICAgICAgICByYW5nZSQkMSA9IHtmcm9tOiByYW5nZSQkMSwgdG86IG51bGx9Ow0KICAgICAgICB9DQogICAgICAgIGlmICghcmFuZ2UkJDEudG8pIHsgcmFuZ2UkJDEudG8gPSByYW5nZSQkMS5mcm9tOyB9DQogICAgICAgIHJhbmdlJCQxLm1hcmdpbiA9IG1hcmdpbiB8fCAwOw0KDQogICAgICAgIGlmIChyYW5nZSQkMS5mcm9tLmxpbmUgIT0gbnVsbCkgew0KICAgICAgICAgIHNjcm9sbFRvUmFuZ2UodGhpcywgcmFuZ2UkJDEpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIHNjcm9sbFRvQ29vcmRzUmFuZ2UodGhpcywgcmFuZ2UkJDEuZnJvbSwgcmFuZ2UkJDEudG8sIHJhbmdlJCQxLm1hcmdpbik7DQogICAgICAgIH0NCiAgICAgIH0pLA0KDQogICAgICBzZXRTaXplOiBtZXRob2RPcChmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7DQogICAgICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgICAgIHZhciBpbnRlcnByZXQgPSBmdW5jdGlvbiAodmFsKSB7IHJldHVybiB0eXBlb2YgdmFsID09ICJudW1iZXIiIHx8IC9eXGQrJC8udGVzdChTdHJpbmcodmFsKSkgPyB2YWwgKyAicHgiIDogdmFsOyB9Ow0KICAgICAgICBpZiAod2lkdGggIT0gbnVsbCkgeyB0aGlzLmRpc3BsYXkud3JhcHBlci5zdHlsZS53aWR0aCA9IGludGVycHJldCh3aWR0aCk7IH0NCiAgICAgICAgaWYgKGhlaWdodCAhPSBudWxsKSB7IHRoaXMuZGlzcGxheS53cmFwcGVyLnN0eWxlLmhlaWdodCA9IGludGVycHJldChoZWlnaHQpOyB9DQogICAgICAgIGlmICh0aGlzLm9wdGlvbnMubGluZVdyYXBwaW5nKSB7IGNsZWFyTGluZU1lYXN1cmVtZW50Q2FjaGUodGhpcyk7IH0NCiAgICAgICAgdmFyIGxpbmVObyQkMSA9IHRoaXMuZGlzcGxheS52aWV3RnJvbTsNCiAgICAgICAgdGhpcy5kb2MuaXRlcihsaW5lTm8kJDEsIHRoaXMuZGlzcGxheS52aWV3VG8sIGZ1bmN0aW9uIChsaW5lKSB7DQogICAgICAgICAgaWYgKGxpbmUud2lkZ2V0cykgeyBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmUud2lkZ2V0cy5sZW5ndGg7IGkrKykNCiAgICAgICAgICAgIHsgaWYgKGxpbmUud2lkZ2V0c1tpXS5ub0hTY3JvbGwpIHsgcmVnTGluZUNoYW5nZSh0aGlzJDEsIGxpbmVObyQkMSwgIndpZGdldCIpOyBicmVhayB9IH0gfQ0KICAgICAgICAgICsrbGluZU5vJCQxOw0KICAgICAgICB9KTsNCiAgICAgICAgdGhpcy5jdXJPcC5mb3JjZVVwZGF0ZSA9IHRydWU7DQogICAgICAgIHNpZ25hbCh0aGlzLCAicmVmcmVzaCIsIHRoaXMpOw0KICAgICAgfSksDQoNCiAgICAgIG9wZXJhdGlvbjogZnVuY3Rpb24oZil7cmV0dXJuIHJ1bkluT3AodGhpcywgZil9LA0KICAgICAgc3RhcnRPcGVyYXRpb246IGZ1bmN0aW9uKCl7cmV0dXJuIHN0YXJ0T3BlcmF0aW9uKHRoaXMpfSwNCiAgICAgIGVuZE9wZXJhdGlvbjogZnVuY3Rpb24oKXtyZXR1cm4gZW5kT3BlcmF0aW9uKHRoaXMpfSwNCg0KICAgICAgcmVmcmVzaDogbWV0aG9kT3AoZnVuY3Rpb24oKSB7DQogICAgICAgIHZhciBvbGRIZWlnaHQgPSB0aGlzLmRpc3BsYXkuY2FjaGVkVGV4dEhlaWdodDsNCiAgICAgICAgcmVnQ2hhbmdlKHRoaXMpOw0KICAgICAgICB0aGlzLmN1ck9wLmZvcmNlVXBkYXRlID0gdHJ1ZTsNCiAgICAgICAgY2xlYXJDYWNoZXModGhpcyk7DQogICAgICAgIHNjcm9sbFRvQ29vcmRzKHRoaXMsIHRoaXMuZG9jLnNjcm9sbExlZnQsIHRoaXMuZG9jLnNjcm9sbFRvcCk7DQogICAgICAgIHVwZGF0ZUd1dHRlclNwYWNlKHRoaXMuZGlzcGxheSk7DQogICAgICAgIGlmIChvbGRIZWlnaHQgPT0gbnVsbCB8fCBNYXRoLmFicyhvbGRIZWlnaHQgLSB0ZXh0SGVpZ2h0KHRoaXMuZGlzcGxheSkpID4gLjUgfHwgdGhpcy5vcHRpb25zLmxpbmVXcmFwcGluZykNCiAgICAgICAgICB7IGVzdGltYXRlTGluZUhlaWdodHModGhpcyk7IH0NCiAgICAgICAgc2lnbmFsKHRoaXMsICJyZWZyZXNoIiwgdGhpcyk7DQogICAgICB9KSwNCg0KICAgICAgc3dhcERvYzogbWV0aG9kT3AoZnVuY3Rpb24oZG9jKSB7DQogICAgICAgIHZhciBvbGQgPSB0aGlzLmRvYzsNCiAgICAgICAgb2xkLmNtID0gbnVsbDsNCiAgICAgICAgLy8gQ2FuY2VsIHRoZSBjdXJyZW50IHRleHQgc2VsZWN0aW9uIGlmIGFueSAoIzU4MjEpDQogICAgICAgIGlmICh0aGlzLnN0YXRlLnNlbGVjdGluZ1RleHQpIHsgdGhpcy5zdGF0ZS5zZWxlY3RpbmdUZXh0KCk7IH0NCiAgICAgICAgYXR0YWNoRG9jKHRoaXMsIGRvYyk7DQogICAgICAgIGNsZWFyQ2FjaGVzKHRoaXMpOw0KICAgICAgICB0aGlzLmRpc3BsYXkuaW5wdXQucmVzZXQoKTsNCiAgICAgICAgc2Nyb2xsVG9Db29yZHModGhpcywgZG9jLnNjcm9sbExlZnQsIGRvYy5zY3JvbGxUb3ApOw0KICAgICAgICB0aGlzLmN1ck9wLmZvcmNlU2Nyb2xsID0gdHJ1ZTsNCiAgICAgICAgc2lnbmFsTGF0ZXIodGhpcywgInN3YXBEb2MiLCB0aGlzLCBvbGQpOw0KICAgICAgICByZXR1cm4gb2xkDQogICAgICB9KSwNCg0KICAgICAgcGhyYXNlOiBmdW5jdGlvbihwaHJhc2VUZXh0KSB7DQogICAgICAgIHZhciBwaHJhc2VzID0gdGhpcy5vcHRpb25zLnBocmFzZXM7DQogICAgICAgIHJldHVybiBwaHJhc2VzICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwaHJhc2VzLCBwaHJhc2VUZXh0KSA/IHBocmFzZXNbcGhyYXNlVGV4dF0gOiBwaHJhc2VUZXh0DQogICAgICB9LA0KDQogICAgICBnZXRJbnB1dEZpZWxkOiBmdW5jdGlvbigpe3JldHVybiB0aGlzLmRpc3BsYXkuaW5wdXQuZ2V0RmllbGQoKX0sDQogICAgICBnZXRXcmFwcGVyRWxlbWVudDogZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kaXNwbGF5LndyYXBwZXJ9LA0KICAgICAgZ2V0U2Nyb2xsZXJFbGVtZW50OiBmdW5jdGlvbigpe3JldHVybiB0aGlzLmRpc3BsYXkuc2Nyb2xsZXJ9LA0KICAgICAgZ2V0R3V0dGVyRWxlbWVudDogZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kaXNwbGF5Lmd1dHRlcnN9DQogICAgfTsNCiAgICBldmVudE1peGluKENvZGVNaXJyb3IpOw0KDQogICAgQ29kZU1pcnJvci5yZWdpc3RlckhlbHBlciA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHZhbHVlKSB7DQogICAgICBpZiAoIWhlbHBlcnMuaGFzT3duUHJvcGVydHkodHlwZSkpIHsgaGVscGVyc1t0eXBlXSA9IENvZGVNaXJyb3JbdHlwZV0gPSB7X2dsb2JhbDogW119OyB9DQogICAgICBoZWxwZXJzW3R5cGVdW25hbWVdID0gdmFsdWU7DQogICAgfTsNCiAgICBDb2RlTWlycm9yLnJlZ2lzdGVyR2xvYmFsSGVscGVyID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgcHJlZGljYXRlLCB2YWx1ZSkgew0KICAgICAgQ29kZU1pcnJvci5yZWdpc3RlckhlbHBlcih0eXBlLCBuYW1lLCB2YWx1ZSk7DQogICAgICBoZWxwZXJzW3R5cGVdLl9nbG9iYWwucHVzaCh7cHJlZDogcHJlZGljYXRlLCB2YWw6IHZhbHVlfSk7DQogICAgfTsNCiAgfQ0KDQogIC8vIFVzZWQgZm9yIGhvcml6b250YWwgcmVsYXRpdmUgbW90aW9uLiBEaXIgaXMgLTEgb3IgMSAobGVmdCBvcg0KICAvLyByaWdodCksIHVuaXQgY2FuIGJlICJjaGFyIiwgImNvbHVtbiIgKGxpa2UgY2hhciwgYnV0IGRvZXNuJ3QNCiAgLy8gY3Jvc3MgbGluZSBib3VuZGFyaWVzKSwgIndvcmQiIChhY3Jvc3MgbmV4dCB3b3JkKSwgb3IgImdyb3VwIiAodG8NCiAgLy8gdGhlIHN0YXJ0IG9mIG5leHQgZ3JvdXAgb2Ygd29yZCBvciBub24td29yZC1ub24td2hpdGVzcGFjZQ0KICAvLyBjaGFycykuIFRoZSB2aXN1YWxseSBwYXJhbSBjb250cm9scyB3aGV0aGVyLCBpbiByaWdodC10by1sZWZ0DQogIC8vIHRleHQsIGRpcmVjdGlvbiAxIG1lYW5zIHRvIG1vdmUgdG93YXJkcyB0aGUgbmV4dCBpbmRleCBpbiB0aGUNCiAgLy8gc3RyaW5nLCBvciB0b3dhcmRzIHRoZSBjaGFyYWN0ZXIgdG8gdGhlIHJpZ2h0IG9mIHRoZSBjdXJyZW50DQogIC8vIHBvc2l0aW9uLiBUaGUgcmVzdWx0aW5nIHBvc2l0aW9uIHdpbGwgaGF2ZSBhIGhpdFNpZGU9dHJ1ZQ0KICAvLyBwcm9wZXJ0eSBpZiBpdCByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIGRvY3VtZW50Lg0KICBmdW5jdGlvbiBmaW5kUG9zSChkb2MsIHBvcywgZGlyLCB1bml0LCB2aXN1YWxseSkgew0KICAgIHZhciBvbGRQb3MgPSBwb3M7DQogICAgdmFyIG9yaWdEaXIgPSBkaXI7DQogICAgdmFyIGxpbmVPYmogPSBnZXRMaW5lKGRvYywgcG9zLmxpbmUpOw0KICAgIHZhciBsaW5lRGlyID0gdmlzdWFsbHkgJiYgZG9jLmRpcmVjdGlvbiA9PSAicnRsIiA/IC1kaXIgOiBkaXI7DQogICAgZnVuY3Rpb24gZmluZE5leHRMaW5lKCkgew0KICAgICAgdmFyIGwgPSBwb3MubGluZSArIGxpbmVEaXI7DQogICAgICBpZiAobCA8IGRvYy5maXJzdCB8fCBsID49IGRvYy5maXJzdCArIGRvYy5zaXplKSB7IHJldHVybiBmYWxzZSB9DQogICAgICBwb3MgPSBuZXcgUG9zKGwsIHBvcy5jaCwgcG9zLnN0aWNreSk7DQogICAgICByZXR1cm4gbGluZU9iaiA9IGdldExpbmUoZG9jLCBsKQ0KICAgIH0NCiAgICBmdW5jdGlvbiBtb3ZlT25jZShib3VuZFRvTGluZSkgew0KICAgICAgdmFyIG5leHQ7DQogICAgICBpZiAodmlzdWFsbHkpIHsNCiAgICAgICAgbmV4dCA9IG1vdmVWaXN1YWxseShkb2MuY20sIGxpbmVPYmosIHBvcywgZGlyKTsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIG5leHQgPSBtb3ZlTG9naWNhbGx5KGxpbmVPYmosIHBvcywgZGlyKTsNCiAgICAgIH0NCiAgICAgIGlmIChuZXh0ID09IG51bGwpIHsNCiAgICAgICAgaWYgKCFib3VuZFRvTGluZSAmJiBmaW5kTmV4dExpbmUoKSkNCiAgICAgICAgICB7IHBvcyA9IGVuZE9mTGluZSh2aXN1YWxseSwgZG9jLmNtLCBsaW5lT2JqLCBwb3MubGluZSwgbGluZURpcik7IH0NCiAgICAgICAgZWxzZQ0KICAgICAgICAgIHsgcmV0dXJuIGZhbHNlIH0NCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHBvcyA9IG5leHQ7DQogICAgICB9DQogICAgICByZXR1cm4gdHJ1ZQ0KICAgIH0NCg0KICAgIGlmICh1bml0ID09ICJjaGFyIikgew0KICAgICAgbW92ZU9uY2UoKTsNCiAgICB9IGVsc2UgaWYgKHVuaXQgPT0gImNvbHVtbiIpIHsNCiAgICAgIG1vdmVPbmNlKHRydWUpOw0KICAgIH0gZWxzZSBpZiAodW5pdCA9PSAid29yZCIgfHwgdW5pdCA9PSAiZ3JvdXAiKSB7DQogICAgICB2YXIgc2F3VHlwZSA9IG51bGwsIGdyb3VwID0gdW5pdCA9PSAiZ3JvdXAiOw0KICAgICAgdmFyIGhlbHBlciA9IGRvYy5jbSAmJiBkb2MuY20uZ2V0SGVscGVyKHBvcywgIndvcmRDaGFycyIpOw0KICAgICAgZm9yICh2YXIgZmlyc3QgPSB0cnVlOzsgZmlyc3QgPSBmYWxzZSkgew0KICAgICAgICBpZiAoZGlyIDwgMCAmJiAhbW92ZU9uY2UoIWZpcnN0KSkgeyBicmVhayB9DQogICAgICAgIHZhciBjdXIgPSBsaW5lT2JqLnRleHQuY2hhckF0KHBvcy5jaCkgfHwgIlxuIjsNCiAgICAgICAgdmFyIHR5cGUgPSBpc1dvcmRDaGFyKGN1ciwgaGVscGVyKSA/ICJ3Ig0KICAgICAgICAgIDogZ3JvdXAgJiYgY3VyID09ICJcbiIgPyAibiINCiAgICAgICAgICA6ICFncm91cCB8fCAvXHMvLnRlc3QoY3VyKSA/IG51bGwNCiAgICAgICAgICA6ICJwIjsNCiAgICAgICAgaWYgKGdyb3VwICYmICFmaXJzdCAmJiAhdHlwZSkgeyB0eXBlID0gInMiOyB9DQogICAgICAgIGlmIChzYXdUeXBlICYmIHNhd1R5cGUgIT0gdHlwZSkgew0KICAgICAgICAgIGlmIChkaXIgPCAwKSB7ZGlyID0gMTsgbW92ZU9uY2UoKTsgcG9zLnN0aWNreSA9ICJhZnRlciI7fQ0KICAgICAgICAgIGJyZWFrDQogICAgICAgIH0NCg0KICAgICAgICBpZiAodHlwZSkgeyBzYXdUeXBlID0gdHlwZTsgfQ0KICAgICAgICBpZiAoZGlyID4gMCAmJiAhbW92ZU9uY2UoIWZpcnN0KSkgeyBicmVhayB9DQogICAgICB9DQogICAgfQ0KICAgIHZhciByZXN1bHQgPSBza2lwQXRvbWljKGRvYywgcG9zLCBvbGRQb3MsIG9yaWdEaXIsIHRydWUpOw0KICAgIGlmIChlcXVhbEN1cnNvclBvcyhvbGRQb3MsIHJlc3VsdCkpIHsgcmVzdWx0LmhpdFNpZGUgPSB0cnVlOyB9DQogICAgcmV0dXJuIHJlc3VsdA0KICB9DQoNCiAgLy8gRm9yIHJlbGF0aXZlIHZlcnRpY2FsIG1vdmVtZW50LiBEaXIgbWF5IGJlIC0xIG9yIDEuIFVuaXQgY2FuIGJlDQogIC8vICJwYWdlIiBvciAibGluZSIuIFRoZSByZXN1bHRpbmcgcG9zaXRpb24gd2lsbCBoYXZlIGEgaGl0U2lkZT10cnVlDQogIC8vIHByb3BlcnR5IGlmIGl0IHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgZG9jdW1lbnQuDQogIGZ1bmN0aW9uIGZpbmRQb3NWKGNtLCBwb3MsIGRpciwgdW5pdCkgew0KICAgIHZhciBkb2MgPSBjbS5kb2MsIHggPSBwb3MubGVmdCwgeTsNCiAgICBpZiAodW5pdCA9PSAicGFnZSIpIHsNCiAgICAgIHZhciBwYWdlU2l6ZSA9IE1hdGgubWluKGNtLmRpc3BsYXkud3JhcHBlci5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KTsNCiAgICAgIHZhciBtb3ZlQW1vdW50ID0gTWF0aC5tYXgocGFnZVNpemUgLSAuNSAqIHRleHRIZWlnaHQoY20uZGlzcGxheSksIDMpOw0KICAgICAgeSA9IChkaXIgPiAwID8gcG9zLmJvdHRvbSA6IHBvcy50b3ApICsgZGlyICogbW92ZUFtb3VudDsNCg0KICAgIH0gZWxzZSBpZiAodW5pdCA9PSAibGluZSIpIHsNCiAgICAgIHkgPSBkaXIgPiAwID8gcG9zLmJvdHRvbSArIDMgOiBwb3MudG9wIC0gMzsNCiAgICB9DQogICAgdmFyIHRhcmdldDsNCiAgICBmb3IgKDs7KSB7DQogICAgICB0YXJnZXQgPSBjb29yZHNDaGFyKGNtLCB4LCB5KTsNCiAgICAgIGlmICghdGFyZ2V0Lm91dHNpZGUpIHsgYnJlYWsgfQ0KICAgICAgaWYgKGRpciA8IDAgPyB5IDw9IDAgOiB5ID49IGRvYy5oZWlnaHQpIHsgdGFyZ2V0LmhpdFNpZGUgPSB0cnVlOyBicmVhayB9DQogICAgICB5ICs9IGRpciAqIDU7DQogICAgfQ0KICAgIHJldHVybiB0YXJnZXQNCiAgfQ0KDQogIC8vIENPTlRFTlRFRElUQUJMRSBJTlBVVCBTVFlMRQ0KDQogIHZhciBDb250ZW50RWRpdGFibGVJbnB1dCA9IGZ1bmN0aW9uKGNtKSB7DQogICAgdGhpcy5jbSA9IGNtOw0KICAgIHRoaXMubGFzdEFuY2hvck5vZGUgPSB0aGlzLmxhc3RBbmNob3JPZmZzZXQgPSB0aGlzLmxhc3RGb2N1c05vZGUgPSB0aGlzLmxhc3RGb2N1c09mZnNldCA9IG51bGw7DQogICAgdGhpcy5wb2xsaW5nID0gbmV3IERlbGF5ZWQoKTsNCiAgICB0aGlzLmNvbXBvc2luZyA9IG51bGw7DQogICAgdGhpcy5ncmFjZVBlcmlvZCA9IGZhbHNlOw0KICAgIHRoaXMucmVhZERPTVRpbWVvdXQgPSBudWxsOw0KICB9Ow0KDQogIENvbnRlbnRFZGl0YWJsZUlucHV0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGRpc3BsYXkpIHsNCiAgICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgdmFyIGlucHV0ID0gdGhpcywgY20gPSBpbnB1dC5jbTsNCiAgICB2YXIgZGl2ID0gaW5wdXQuZGl2ID0gZGlzcGxheS5saW5lRGl2Ow0KICAgIGRpc2FibGVCcm93c2VyTWFnaWMoZGl2LCBjbS5vcHRpb25zLnNwZWxsY2hlY2ssIGNtLm9wdGlvbnMuYXV0b2NvcnJlY3QsIGNtLm9wdGlvbnMuYXV0b2NhcGl0YWxpemUpOw0KDQogICAgb24oZGl2LCAicGFzdGUiLCBmdW5jdGlvbiAoZSkgew0KICAgICAgaWYgKHNpZ25hbERPTUV2ZW50KGNtLCBlKSB8fCBoYW5kbGVQYXN0ZShlLCBjbSkpIHsgcmV0dXJuIH0NCiAgICAgIC8vIElFIGRvZXNuJ3QgZmlyZSBpbnB1dCBldmVudHMsIHNvIHdlIHNjaGVkdWxlIGEgcmVhZCBmb3IgdGhlIHBhc3RlZCBjb250ZW50IGluIHRoaXMgd2F5DQogICAgICBpZiAoaWVfdmVyc2lvbiA8PSAxMSkgeyBzZXRUaW1lb3V0KG9wZXJhdGlvbihjbSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLnVwZGF0ZUZyb21ET00oKTsgfSksIDIwKTsgfQ0KICAgIH0pOw0KDQogICAgb24oZGl2LCAiY29tcG9zaXRpb25zdGFydCIsIGZ1bmN0aW9uIChlKSB7DQogICAgICB0aGlzJDEuY29tcG9zaW5nID0ge2RhdGE6IGUuZGF0YSwgZG9uZTogZmFsc2V9Ow0KICAgIH0pOw0KICAgIG9uKGRpdiwgImNvbXBvc2l0aW9udXBkYXRlIiwgZnVuY3Rpb24gKGUpIHsNCiAgICAgIGlmICghdGhpcyQxLmNvbXBvc2luZykgeyB0aGlzJDEuY29tcG9zaW5nID0ge2RhdGE6IGUuZGF0YSwgZG9uZTogZmFsc2V9OyB9DQogICAgfSk7DQogICAgb24oZGl2LCAiY29tcG9zaXRpb25lbmQiLCBmdW5jdGlvbiAoZSkgew0KICAgICAgaWYgKHRoaXMkMS5jb21wb3NpbmcpIHsNCiAgICAgICAgaWYgKGUuZGF0YSAhPSB0aGlzJDEuY29tcG9zaW5nLmRhdGEpIHsgdGhpcyQxLnJlYWRGcm9tRE9NU29vbigpOyB9DQogICAgICAgIHRoaXMkMS5jb21wb3NpbmcuZG9uZSA9IHRydWU7DQogICAgICB9DQogICAgfSk7DQoNCiAgICBvbihkaXYsICJ0b3VjaHN0YXJ0IiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5wdXQuZm9yY2VDb21wb3NpdGlvbkVuZCgpOyB9KTsNCg0KICAgIG9uKGRpdiwgImlucHV0IiwgZnVuY3Rpb24gKCkgew0KICAgICAgaWYgKCF0aGlzJDEuY29tcG9zaW5nKSB7IHRoaXMkMS5yZWFkRnJvbURPTVNvb24oKTsgfQ0KICAgIH0pOw0KDQogICAgZnVuY3Rpb24gb25Db3B5Q3V0KGUpIHsNCiAgICAgIGlmIChzaWduYWxET01FdmVudChjbSwgZSkpIHsgcmV0dXJuIH0NCiAgICAgIGlmIChjbS5zb21ldGhpbmdTZWxlY3RlZCgpKSB7DQogICAgICAgIHNldExhc3RDb3BpZWQoe2xpbmVXaXNlOiBmYWxzZSwgdGV4dDogY20uZ2V0U2VsZWN0aW9ucygpfSk7DQogICAgICAgIGlmIChlLnR5cGUgPT0gImN1dCIpIHsgY20ucmVwbGFjZVNlbGVjdGlvbigiIiwgbnVsbCwgImN1dCIpOyB9DQogICAgICB9IGVsc2UgaWYgKCFjbS5vcHRpb25zLmxpbmVXaXNlQ29weUN1dCkgew0KICAgICAgICByZXR1cm4NCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHZhciByYW5nZXMgPSBjb3B5YWJsZVJhbmdlcyhjbSk7DQogICAgICAgIHNldExhc3RDb3BpZWQoe2xpbmVXaXNlOiB0cnVlLCB0ZXh0OiByYW5nZXMudGV4dH0pOw0KICAgICAgICBpZiAoZS50eXBlID09ICJjdXQiKSB7DQogICAgICAgICAgY20ub3BlcmF0aW9uKGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIGNtLnNldFNlbGVjdGlvbnMocmFuZ2VzLnJhbmdlcywgMCwgc2VsX2RvbnRTY3JvbGwpOw0KICAgICAgICAgICAgY20ucmVwbGFjZVNlbGVjdGlvbigiIiwgbnVsbCwgImN1dCIpOw0KICAgICAgICAgIH0pOw0KICAgICAgICB9DQogICAgICB9DQogICAgICBpZiAoZS5jbGlwYm9hcmREYXRhKSB7DQogICAgICAgIGUuY2xpcGJvYXJkRGF0YS5jbGVhckRhdGEoKTsNCiAgICAgICAgdmFyIGNvbnRlbnQgPSBsYXN0Q29waWVkLnRleHQuam9pbigiXG4iKTsNCiAgICAgICAgLy8gaU9TIGV4cG9zZXMgdGhlIGNsaXBib2FyZCBBUEksIGJ1dCBzZWVtcyB0byBkaXNjYXJkIGNvbnRlbnQgaW5zZXJ0ZWQgaW50byBpdA0KICAgICAgICBlLmNsaXBib2FyZERhdGEuc2V0RGF0YSgiVGV4dCIsIGNvbnRlbnQpOw0KICAgICAgICBpZiAoZS5jbGlwYm9hcmREYXRhLmdldERhdGEoIlRleHQiKSA9PSBjb250ZW50KSB7DQogICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOw0KICAgICAgICAgIHJldHVybg0KICAgICAgICB9DQogICAgICB9DQogICAgICAvLyBPbGQtZmFzaGlvbmVkIGJyaWVmbHktZm9jdXMtYS10ZXh0YXJlYSBoYWNrDQogICAgICB2YXIga2x1ZGdlID0gaGlkZGVuVGV4dGFyZWEoKSwgdGUgPSBrbHVkZ2UuZmlyc3RDaGlsZDsNCiAgICAgIGNtLmRpc3BsYXkubGluZVNwYWNlLmluc2VydEJlZm9yZShrbHVkZ2UsIGNtLmRpc3BsYXkubGluZVNwYWNlLmZpcnN0Q2hpbGQpOw0KICAgICAgdGUudmFsdWUgPSBsYXN0Q29waWVkLnRleHQuam9pbigiXG4iKTsNCiAgICAgIHZhciBoYWRGb2N1cyA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7DQogICAgICBzZWxlY3RJbnB1dCh0ZSk7DQogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgICAgY20uZGlzcGxheS5saW5lU3BhY2UucmVtb3ZlQ2hpbGQoa2x1ZGdlKTsNCiAgICAgICAgaGFkRm9jdXMuZm9jdXMoKTsNCiAgICAgICAgaWYgKGhhZEZvY3VzID09IGRpdikgeyBpbnB1dC5zaG93UHJpbWFyeVNlbGVjdGlvbigpOyB9DQogICAgICB9LCA1MCk7DQogICAgfQ0KICAgIG9uKGRpdiwgImNvcHkiLCBvbkNvcHlDdXQpOw0KICAgIG9uKGRpdiwgImN1dCIsIG9uQ29weUN1dCk7DQogIH07DQoNCiAgQ29udGVudEVkaXRhYmxlSW5wdXQucHJvdG90eXBlLnNjcmVlblJlYWRlckxhYmVsQ2hhbmdlZCA9IGZ1bmN0aW9uIChsYWJlbCkgew0KICAgIC8vIExhYmVsIGZvciBzY3JlZW5yZWFkZXJzLCBhY2Nlc3NpYmlsaXR5DQogICAgaWYobGFiZWwpIHsNCiAgICAgIHRoaXMuZGl2LnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGxhYmVsKTsNCiAgICB9IGVsc2Ugew0KICAgICAgdGhpcy5kaXYucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWxhYmVsJyk7DQogICAgfQ0KICB9Ow0KDQogIENvbnRlbnRFZGl0YWJsZUlucHV0LnByb3RvdHlwZS5wcmVwYXJlU2VsZWN0aW9uID0gZnVuY3Rpb24gKCkgew0KICAgIHZhciByZXN1bHQgPSBwcmVwYXJlU2VsZWN0aW9uKHRoaXMuY20sIGZhbHNlKTsNCiAgICByZXN1bHQuZm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09IHRoaXMuZGl2Ow0KICAgIHJldHVybiByZXN1bHQNCiAgfTsNCg0KICBDb250ZW50RWRpdGFibGVJbnB1dC5wcm90b3R5cGUuc2hvd1NlbGVjdGlvbiA9IGZ1bmN0aW9uIChpbmZvLCB0YWtlRm9jdXMpIHsNCiAgICBpZiAoIWluZm8gfHwgIXRoaXMuY20uZGlzcGxheS52aWV3Lmxlbmd0aCkgeyByZXR1cm4gfQ0KICAgIGlmIChpbmZvLmZvY3VzIHx8IHRha2VGb2N1cykgeyB0aGlzLnNob3dQcmltYXJ5U2VsZWN0aW9uKCk7IH0NCiAgICB0aGlzLnNob3dNdWx0aXBsZVNlbGVjdGlvbnMoaW5mbyk7DQogIH07DQoNCiAgQ29udGVudEVkaXRhYmxlSW5wdXQucHJvdG90eXBlLmdldFNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHsNCiAgICByZXR1cm4gdGhpcy5jbS5kaXNwbGF5LndyYXBwZXIub3duZXJEb2N1bWVudC5nZXRTZWxlY3Rpb24oKQ0KICB9Ow0KDQogIENvbnRlbnRFZGl0YWJsZUlucHV0LnByb3RvdHlwZS5zaG93UHJpbWFyeVNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHsNCiAgICB2YXIgc2VsID0gdGhpcy5nZXRTZWxlY3Rpb24oKSwgY20gPSB0aGlzLmNtLCBwcmltID0gY20uZG9jLnNlbC5wcmltYXJ5KCk7DQogICAgdmFyIGZyb20gPSBwcmltLmZyb20oKSwgdG8gPSBwcmltLnRvKCk7DQoNCiAgICBpZiAoY20uZGlzcGxheS52aWV3VG8gPT0gY20uZGlzcGxheS52aWV3RnJvbSB8fCBmcm9tLmxpbmUgPj0gY20uZGlzcGxheS52aWV3VG8gfHwgdG8ubGluZSA8IGNtLmRpc3BsYXkudmlld0Zyb20pIHsNCiAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTsNCiAgICAgIHJldHVybg0KICAgIH0NCg0KICAgIHZhciBjdXJBbmNob3IgPSBkb21Ub1BvcyhjbSwgc2VsLmFuY2hvck5vZGUsIHNlbC5hbmNob3JPZmZzZXQpOw0KICAgIHZhciBjdXJGb2N1cyA9IGRvbVRvUG9zKGNtLCBzZWwuZm9jdXNOb2RlLCBzZWwuZm9jdXNPZmZzZXQpOw0KICAgIGlmIChjdXJBbmNob3IgJiYgIWN1ckFuY2hvci5iYWQgJiYgY3VyRm9jdXMgJiYgIWN1ckZvY3VzLmJhZCAmJg0KICAgICAgICBjbXAobWluUG9zKGN1ckFuY2hvciwgY3VyRm9jdXMpLCBmcm9tKSA9PSAwICYmDQogICAgICAgIGNtcChtYXhQb3MoY3VyQW5jaG9yLCBjdXJGb2N1cyksIHRvKSA9PSAwKQ0KICAgICAgeyByZXR1cm4gfQ0KDQogICAgdmFyIHZpZXcgPSBjbS5kaXNwbGF5LnZpZXc7DQogICAgdmFyIHN0YXJ0ID0gKGZyb20ubGluZSA+PSBjbS5kaXNwbGF5LnZpZXdGcm9tICYmIHBvc1RvRE9NKGNtLCBmcm9tKSkgfHwNCiAgICAgICAge25vZGU6IHZpZXdbMF0ubWVhc3VyZS5tYXBbMl0sIG9mZnNldDogMH07DQogICAgdmFyIGVuZCA9IHRvLmxpbmUgPCBjbS5kaXNwbGF5LnZpZXdUbyAmJiBwb3NUb0RPTShjbSwgdG8pOw0KICAgIGlmICghZW5kKSB7DQogICAgICB2YXIgbWVhc3VyZSA9IHZpZXdbdmlldy5sZW5ndGggLSAxXS5tZWFzdXJlOw0KICAgICAgdmFyIG1hcCQkMSA9IG1lYXN1cmUubWFwcyA/IG1lYXN1cmUubWFwc1ttZWFzdXJlLm1hcHMubGVuZ3RoIC0gMV0gOiBtZWFzdXJlLm1hcDsNCiAgICAgIGVuZCA9IHtub2RlOiBtYXAkJDFbbWFwJCQxLmxlbmd0aCAtIDFdLCBvZmZzZXQ6IG1hcCQkMVttYXAkJDEubGVuZ3RoIC0gMl0gLSBtYXAkJDFbbWFwJCQxLmxlbmd0aCAtIDNdfTsNCiAgICB9DQoNCiAgICBpZiAoIXN0YXJ0IHx8ICFlbmQpIHsNCiAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTsNCiAgICAgIHJldHVybg0KICAgIH0NCg0KICAgIHZhciBvbGQgPSBzZWwucmFuZ2VDb3VudCAmJiBzZWwuZ2V0UmFuZ2VBdCgwKSwgcm5nOw0KICAgIHRyeSB7IHJuZyA9IHJhbmdlKHN0YXJ0Lm5vZGUsIHN0YXJ0Lm9mZnNldCwgZW5kLm9mZnNldCwgZW5kLm5vZGUpOyB9DQogICAgY2F0Y2goZSkge30gLy8gT3VyIG1vZGVsIG9mIHRoZSBET00gbWlnaHQgYmUgb3V0ZGF0ZWQsIGluIHdoaWNoIGNhc2UgdGhlIHJhbmdlIHdlIHRyeSB0byBzZXQgY2FuIGJlIGltcG9zc2libGUNCiAgICBpZiAocm5nKSB7DQogICAgICBpZiAoIWdlY2tvICYmIGNtLnN0YXRlLmZvY3VzZWQpIHsNCiAgICAgICAgc2VsLmNvbGxhcHNlKHN0YXJ0Lm5vZGUsIHN0YXJ0Lm9mZnNldCk7DQogICAgICAgIGlmICghcm5nLmNvbGxhcHNlZCkgew0KICAgICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTsNCiAgICAgICAgICBzZWwuYWRkUmFuZ2Uocm5nKTsNCiAgICAgICAgfQ0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpOw0KICAgICAgICBzZWwuYWRkUmFuZ2Uocm5nKTsNCiAgICAgIH0NCiAgICAgIGlmIChvbGQgJiYgc2VsLmFuY2hvck5vZGUgPT0gbnVsbCkgeyBzZWwuYWRkUmFuZ2Uob2xkKTsgfQ0KICAgICAgZWxzZSBpZiAoZ2Vja28pIHsgdGhpcy5zdGFydEdyYWNlUGVyaW9kKCk7IH0NCiAgICB9DQogICAgdGhpcy5yZW1lbWJlclNlbGVjdGlvbigpOw0KICB9Ow0KDQogIENvbnRlbnRFZGl0YWJsZUlucHV0LnByb3RvdHlwZS5zdGFydEdyYWNlUGVyaW9kID0gZnVuY3Rpb24gKCkgew0KICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7DQoNCiAgICBjbGVhclRpbWVvdXQodGhpcy5ncmFjZVBlcmlvZCk7DQogICAgdGhpcy5ncmFjZVBlcmlvZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgdGhpcyQxLmdyYWNlUGVyaW9kID0gZmFsc2U7DQogICAgICBpZiAodGhpcyQxLnNlbGVjdGlvbkNoYW5nZWQoKSkNCiAgICAgICAgeyB0aGlzJDEuY20ub3BlcmF0aW9uKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS5jbS5jdXJPcC5zZWxlY3Rpb25DaGFuZ2VkID0gdHJ1ZTsgfSk7IH0NCiAgICB9LCAyMCk7DQogIH07DQoNCiAgQ29udGVudEVkaXRhYmxlSW5wdXQucHJvdG90eXBlLnNob3dNdWx0aXBsZVNlbGVjdGlvbnMgPSBmdW5jdGlvbiAoaW5mbykgew0KICAgIHJlbW92ZUNoaWxkcmVuQW5kQWRkKHRoaXMuY20uZGlzcGxheS5jdXJzb3JEaXYsIGluZm8uY3Vyc29ycyk7DQogICAgcmVtb3ZlQ2hpbGRyZW5BbmRBZGQodGhpcy5jbS5kaXNwbGF5LnNlbGVjdGlvbkRpdiwgaW5mby5zZWxlY3Rpb24pOw0KICB9Ow0KDQogIENvbnRlbnRFZGl0YWJsZUlucHV0LnByb3RvdHlwZS5yZW1lbWJlclNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHsNCiAgICB2YXIgc2VsID0gdGhpcy5nZXRTZWxlY3Rpb24oKTsNCiAgICB0aGlzLmxhc3RBbmNob3JOb2RlID0gc2VsLmFuY2hvck5vZGU7IHRoaXMubGFzdEFuY2hvck9mZnNldCA9IHNlbC5hbmNob3JPZmZzZXQ7DQogICAgdGhpcy5sYXN0Rm9jdXNOb2RlID0gc2VsLmZvY3VzTm9kZTsgdGhpcy5sYXN0Rm9jdXNPZmZzZXQgPSBzZWwuZm9jdXNPZmZzZXQ7DQogIH07DQoNCiAgQ29udGVudEVkaXRhYmxlSW5wdXQucHJvdG90eXBlLnNlbGVjdGlvbkluRWRpdG9yID0gZnVuY3Rpb24gKCkgew0KICAgIHZhciBzZWwgPSB0aGlzLmdldFNlbGVjdGlvbigpOw0KICAgIGlmICghc2VsLnJhbmdlQ291bnQpIHsgcmV0dXJuIGZhbHNlIH0NCiAgICB2YXIgbm9kZSA9IHNlbC5nZXRSYW5nZUF0KDApLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyOw0KICAgIHJldHVybiBjb250YWlucyh0aGlzLmRpdiwgbm9kZSkNCiAgfTsNCg0KICBDb250ZW50RWRpdGFibGVJbnB1dC5wcm90b3R5cGUuZm9jdXMgPSBmdW5jdGlvbiAoKSB7DQogICAgaWYgKHRoaXMuY20ub3B0aW9ucy5yZWFkT25seSAhPSAibm9jdXJzb3IiKSB7DQogICAgICBpZiAoIXRoaXMuc2VsZWN0aW9uSW5FZGl0b3IoKSB8fCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9IHRoaXMuZGl2KQ0KICAgICAgICB7IHRoaXMuc2hvd1NlbGVjdGlvbih0aGlzLnByZXBhcmVTZWxlY3Rpb24oKSwgdHJ1ZSk7IH0NCiAgICAgIHRoaXMuZGl2LmZvY3VzKCk7DQogICAgfQ0KICB9Ow0KICBDb250ZW50RWRpdGFibGVJbnB1dC5wcm90b3R5cGUuYmx1ciA9IGZ1bmN0aW9uICgpIHsgdGhpcy5kaXYuYmx1cigpOyB9Ow0KICBDb250ZW50RWRpdGFibGVJbnB1dC5wcm90b3R5cGUuZ2V0RmllbGQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmRpdiB9Ow0KDQogIENvbnRlbnRFZGl0YWJsZUlucHV0LnByb3RvdHlwZS5zdXBwb3J0c1RvdWNoID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZSB9Ow0KDQogIENvbnRlbnRFZGl0YWJsZUlucHV0LnByb3RvdHlwZS5yZWNlaXZlZEZvY3VzID0gZnVuY3Rpb24gKCkgew0KICAgIHZhciBpbnB1dCA9IHRoaXM7DQogICAgaWYgKHRoaXMuc2VsZWN0aW9uSW5FZGl0b3IoKSkNCiAgICAgIHsgdGhpcy5wb2xsU2VsZWN0aW9uKCk7IH0NCiAgICBlbHNlDQogICAgICB7IHJ1bkluT3AodGhpcy5jbSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5wdXQuY20uY3VyT3Auc2VsZWN0aW9uQ2hhbmdlZCA9IHRydWU7IH0pOyB9DQoNCiAgICBmdW5jdGlvbiBwb2xsKCkgew0KICAgICAgaWYgKGlucHV0LmNtLnN0YXRlLmZvY3VzZWQpIHsNCiAgICAgICAgaW5wdXQucG9sbFNlbGVjdGlvbigpOw0KICAgICAgICBpbnB1dC5wb2xsaW5nLnNldChpbnB1dC5jbS5vcHRpb25zLnBvbGxJbnRlcnZhbCwgcG9sbCk7DQogICAgICB9DQogICAgfQ0KICAgIHRoaXMucG9sbGluZy5zZXQodGhpcy5jbS5vcHRpb25zLnBvbGxJbnRlcnZhbCwgcG9sbCk7DQogIH07DQoNCiAgQ29udGVudEVkaXRhYmxlSW5wdXQucHJvdG90eXBlLnNlbGVjdGlvbkNoYW5nZWQgPSBmdW5jdGlvbiAoKSB7DQogICAgdmFyIHNlbCA9IHRoaXMuZ2V0U2VsZWN0aW9uKCk7DQogICAgcmV0dXJuIHNlbC5hbmNob3JOb2RlICE9IHRoaXMubGFzdEFuY2hvck5vZGUgfHwgc2VsLmFuY2hvck9mZnNldCAhPSB0aGlzLmxhc3RBbmNob3JPZmZzZXQgfHwNCiAgICAgIHNlbC5mb2N1c05vZGUgIT0gdGhpcy5sYXN0Rm9jdXNOb2RlIHx8IHNlbC5mb2N1c09mZnNldCAhPSB0aGlzLmxhc3RGb2N1c09mZnNldA0KICB9Ow0KDQogIENvbnRlbnRFZGl0YWJsZUlucHV0LnByb3RvdHlwZS5wb2xsU2VsZWN0aW9uID0gZnVuY3Rpb24gKCkgew0KICAgIGlmICh0aGlzLnJlYWRET01UaW1lb3V0ICE9IG51bGwgfHwgdGhpcy5ncmFjZVBlcmlvZCB8fCAhdGhpcy5zZWxlY3Rpb25DaGFuZ2VkKCkpIHsgcmV0dXJuIH0NCiAgICB2YXIgc2VsID0gdGhpcy5nZXRTZWxlY3Rpb24oKSwgY20gPSB0aGlzLmNtOw0KICAgIC8vIE9uIEFuZHJvaWQgQ2hyb21lICh2ZXJzaW9uIDU2LCBhdCBsZWFzdCksIGJhY2tzcGFjaW5nIGludG8gYW4NCiAgICAvLyB1bmVkaXRhYmxlIGJsb2NrIGVsZW1lbnQgd2lsbCBwdXQgdGhlIGN1cnNvciBpbiB0aGF0IGVsZW1lbnQsDQogICAgLy8gYW5kIHRoZW4sIGJlY2F1c2UgaXQncyBub3QgZWRpdGFibGUsIGhpZGUgdGhlIHZpcnR1YWwga2V5Ym9hcmQuDQogICAgLy8gQmVjYXVzZSBBbmRyb2lkIGRvZXNuJ3QgYWxsb3cgdXMgdG8gYWN0dWFsbHkgZGV0ZWN0IGJhY2tzcGFjZQ0KICAgIC8vIHByZXNzZXMgaW4gYSBzYW5lIHdheSwgdGhpcyBjb2RlIGNoZWNrcyBmb3Igd2hlbiB0aGF0IGhhcHBlbnMNCiAgICAvLyBhbmQgc2ltdWxhdGVzIGEgYmFja3NwYWNlIHByZXNzIGluIHRoaXMgY2FzZS4NCiAgICBpZiAoYW5kcm9pZCAmJiBjaHJvbWUgJiYgdGhpcy5jbS5kaXNwbGF5Lmd1dHRlclNwZWNzLmxlbmd0aCAmJiBpc0luR3V0dGVyKHNlbC5hbmNob3JOb2RlKSkgew0KICAgICAgdGhpcy5jbS50cmlnZ2VyT25LZXlEb3duKHt0eXBlOiAia2V5ZG93biIsIGtleUNvZGU6IDgsIHByZXZlbnREZWZhdWx0OiBNYXRoLmFic30pOw0KICAgICAgdGhpcy5ibHVyKCk7DQogICAgICB0aGlzLmZvY3VzKCk7DQogICAgICByZXR1cm4NCiAgICB9DQogICAgaWYgKHRoaXMuY29tcG9zaW5nKSB7IHJldHVybiB9DQogICAgdGhpcy5yZW1lbWJlclNlbGVjdGlvbigpOw0KICAgIHZhciBhbmNob3IgPSBkb21Ub1BvcyhjbSwgc2VsLmFuY2hvck5vZGUsIHNlbC5hbmNob3JPZmZzZXQpOw0KICAgIHZhciBoZWFkID0gZG9tVG9Qb3MoY20sIHNlbC5mb2N1c05vZGUsIHNlbC5mb2N1c09mZnNldCk7DQogICAgaWYgKGFuY2hvciAmJiBoZWFkKSB7IHJ1bkluT3AoY20sIGZ1bmN0aW9uICgpIHsNCiAgICAgIHNldFNlbGVjdGlvbihjbS5kb2MsIHNpbXBsZVNlbGVjdGlvbihhbmNob3IsIGhlYWQpLCBzZWxfZG9udFNjcm9sbCk7DQogICAgICBpZiAoYW5jaG9yLmJhZCB8fCBoZWFkLmJhZCkgeyBjbS5jdXJPcC5zZWxlY3Rpb25DaGFuZ2VkID0gdHJ1ZTsgfQ0KICAgIH0pOyB9DQogIH07DQoNCiAgQ29udGVudEVkaXRhYmxlSW5wdXQucHJvdG90eXBlLnBvbGxDb250ZW50ID0gZnVuY3Rpb24gKCkgew0KICAgIGlmICh0aGlzLnJlYWRET01UaW1lb3V0ICE9IG51bGwpIHsNCiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJlYWRET01UaW1lb3V0KTsNCiAgICAgIHRoaXMucmVhZERPTVRpbWVvdXQgPSBudWxsOw0KICAgIH0NCg0KICAgIHZhciBjbSA9IHRoaXMuY20sIGRpc3BsYXkgPSBjbS5kaXNwbGF5LCBzZWwgPSBjbS5kb2Muc2VsLnByaW1hcnkoKTsNCiAgICB2YXIgZnJvbSA9IHNlbC5mcm9tKCksIHRvID0gc2VsLnRvKCk7DQogICAgaWYgKGZyb20uY2ggPT0gMCAmJiBmcm9tLmxpbmUgPiBjbS5maXJzdExpbmUoKSkNCiAgICAgIHsgZnJvbSA9IFBvcyhmcm9tLmxpbmUgLSAxLCBnZXRMaW5lKGNtLmRvYywgZnJvbS5saW5lIC0gMSkubGVuZ3RoKTsgfQ0KICAgIGlmICh0by5jaCA9PSBnZXRMaW5lKGNtLmRvYywgdG8ubGluZSkudGV4dC5sZW5ndGggJiYgdG8ubGluZSA8IGNtLmxhc3RMaW5lKCkpDQogICAgICB7IHRvID0gUG9zKHRvLmxpbmUgKyAxLCAwKTsgfQ0KICAgIGlmIChmcm9tLmxpbmUgPCBkaXNwbGF5LnZpZXdGcm9tIHx8IHRvLmxpbmUgPiBkaXNwbGF5LnZpZXdUbyAtIDEpIHsgcmV0dXJuIGZhbHNlIH0NCg0KICAgIHZhciBmcm9tSW5kZXgsIGZyb21MaW5lLCBmcm9tTm9kZTsNCiAgICBpZiAoZnJvbS5saW5lID09IGRpc3BsYXkudmlld0Zyb20gfHwgKGZyb21JbmRleCA9IGZpbmRWaWV3SW5kZXgoY20sIGZyb20ubGluZSkpID09IDApIHsNCiAgICAgIGZyb21MaW5lID0gbGluZU5vKGRpc3BsYXkudmlld1swXS5saW5lKTsNCiAgICAgIGZyb21Ob2RlID0gZGlzcGxheS52aWV3WzBdLm5vZGU7DQogICAgfSBlbHNlIHsNCiAgICAgIGZyb21MaW5lID0gbGluZU5vKGRpc3BsYXkudmlld1tmcm9tSW5kZXhdLmxpbmUpOw0KICAgICAgZnJvbU5vZGUgPSBkaXNwbGF5LnZpZXdbZnJvbUluZGV4IC0gMV0ubm9kZS5uZXh0U2libGluZzsNCiAgICB9DQogICAgdmFyIHRvSW5kZXggPSBmaW5kVmlld0luZGV4KGNtLCB0by5saW5lKTsNCiAgICB2YXIgdG9MaW5lLCB0b05vZGU7DQogICAgaWYgKHRvSW5kZXggPT0gZGlzcGxheS52aWV3Lmxlbmd0aCAtIDEpIHsNCiAgICAgIHRvTGluZSA9IGRpc3BsYXkudmlld1RvIC0gMTsNCiAgICAgIHRvTm9kZSA9IGRpc3BsYXkubGluZURpdi5sYXN0Q2hpbGQ7DQogICAgfSBlbHNlIHsNCiAgICAgIHRvTGluZSA9IGxpbmVObyhkaXNwbGF5LnZpZXdbdG9JbmRleCArIDFdLmxpbmUpIC0gMTsNCiAgICAgIHRvTm9kZSA9IGRpc3BsYXkudmlld1t0b0luZGV4ICsgMV0ubm9kZS5wcmV2aW91c1NpYmxpbmc7DQogICAgfQ0KDQogICAgaWYgKCFmcm9tTm9kZSkgeyByZXR1cm4gZmFsc2UgfQ0KICAgIHZhciBuZXdUZXh0ID0gY20uZG9jLnNwbGl0TGluZXMoZG9tVGV4dEJldHdlZW4oY20sIGZyb21Ob2RlLCB0b05vZGUsIGZyb21MaW5lLCB0b0xpbmUpKTsNCiAgICB2YXIgb2xkVGV4dCA9IGdldEJldHdlZW4oY20uZG9jLCBQb3MoZnJvbUxpbmUsIDApLCBQb3ModG9MaW5lLCBnZXRMaW5lKGNtLmRvYywgdG9MaW5lKS50ZXh0Lmxlbmd0aCkpOw0KICAgIHdoaWxlIChuZXdUZXh0Lmxlbmd0aCA+IDEgJiYgb2xkVGV4dC5sZW5ndGggPiAxKSB7DQogICAgICBpZiAobHN0KG5ld1RleHQpID09IGxzdChvbGRUZXh0KSkgeyBuZXdUZXh0LnBvcCgpOyBvbGRUZXh0LnBvcCgpOyB0b0xpbmUtLTsgfQ0KICAgICAgZWxzZSBpZiAobmV3VGV4dFswXSA9PSBvbGRUZXh0WzBdKSB7IG5ld1RleHQuc2hpZnQoKTsgb2xkVGV4dC5zaGlmdCgpOyBmcm9tTGluZSsrOyB9DQogICAgICBlbHNlIHsgYnJlYWsgfQ0KICAgIH0NCg0KICAgIHZhciBjdXRGcm9udCA9IDAsIGN1dEVuZCA9IDA7DQogICAgdmFyIG5ld1RvcCA9IG5ld1RleHRbMF0sIG9sZFRvcCA9IG9sZFRleHRbMF0sIG1heEN1dEZyb250ID0gTWF0aC5taW4obmV3VG9wLmxlbmd0aCwgb2xkVG9wLmxlbmd0aCk7DQogICAgd2hpbGUgKGN1dEZyb250IDwgbWF4Q3V0RnJvbnQgJiYgbmV3VG9wLmNoYXJDb2RlQXQoY3V0RnJvbnQpID09IG9sZFRvcC5jaGFyQ29kZUF0KGN1dEZyb250KSkNCiAgICAgIHsgKytjdXRGcm9udDsgfQ0KICAgIHZhciBuZXdCb3QgPSBsc3QobmV3VGV4dCksIG9sZEJvdCA9IGxzdChvbGRUZXh0KTsNCiAgICB2YXIgbWF4Q3V0RW5kID0gTWF0aC5taW4obmV3Qm90Lmxlbmd0aCAtIChuZXdUZXh0Lmxlbmd0aCA9PSAxID8gY3V0RnJvbnQgOiAwKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkQm90Lmxlbmd0aCAtIChvbGRUZXh0Lmxlbmd0aCA9PSAxID8gY3V0RnJvbnQgOiAwKSk7DQogICAgd2hpbGUgKGN1dEVuZCA8IG1heEN1dEVuZCAmJg0KICAgICAgICAgICBuZXdCb3QuY2hhckNvZGVBdChuZXdCb3QubGVuZ3RoIC0gY3V0RW5kIC0gMSkgPT0gb2xkQm90LmNoYXJDb2RlQXQob2xkQm90Lmxlbmd0aCAtIGN1dEVuZCAtIDEpKQ0KICAgICAgeyArK2N1dEVuZDsgfQ0KICAgIC8vIFRyeSB0byBtb3ZlIHN0YXJ0IG9mIGNoYW5nZSB0byBzdGFydCBvZiBzZWxlY3Rpb24gaWYgYW1iaWd1b3VzDQogICAgaWYgKG5ld1RleHQubGVuZ3RoID09IDEgJiYgb2xkVGV4dC5sZW5ndGggPT0gMSAmJiBmcm9tTGluZSA9PSBmcm9tLmxpbmUpIHsNCiAgICAgIHdoaWxlIChjdXRGcm9udCAmJiBjdXRGcm9udCA+IGZyb20uY2ggJiYNCiAgICAgICAgICAgICBuZXdCb3QuY2hhckNvZGVBdChuZXdCb3QubGVuZ3RoIC0gY3V0RW5kIC0gMSkgPT0gb2xkQm90LmNoYXJDb2RlQXQob2xkQm90Lmxlbmd0aCAtIGN1dEVuZCAtIDEpKSB7DQogICAgICAgIGN1dEZyb250LS07DQogICAgICAgIGN1dEVuZCsrOw0KICAgICAgfQ0KICAgIH0NCg0KICAgIG5ld1RleHRbbmV3VGV4dC5sZW5ndGggLSAxXSA9IG5ld0JvdC5zbGljZSgwLCBuZXdCb3QubGVuZ3RoIC0gY3V0RW5kKS5yZXBsYWNlKC9eXHUyMDBiKy8sICIiKTsNCiAgICBuZXdUZXh0WzBdID0gbmV3VGV4dFswXS5zbGljZShjdXRGcm9udCkucmVwbGFjZSgvXHUyMDBiKyQvLCAiIik7DQoNCiAgICB2YXIgY2hGcm9tID0gUG9zKGZyb21MaW5lLCBjdXRGcm9udCk7DQogICAgdmFyIGNoVG8gPSBQb3ModG9MaW5lLCBvbGRUZXh0Lmxlbmd0aCA/IGxzdChvbGRUZXh0KS5sZW5ndGggLSBjdXRFbmQgOiAwKTsNCiAgICBpZiAobmV3VGV4dC5sZW5ndGggPiAxIHx8IG5ld1RleHRbMF0gfHwgY21wKGNoRnJvbSwgY2hUbykpIHsNCiAgICAgIHJlcGxhY2VSYW5nZShjbS5kb2MsIG5ld1RleHQsIGNoRnJvbSwgY2hUbywgIitpbnB1dCIpOw0KICAgICAgcmV0dXJuIHRydWUNCiAgICB9DQogIH07DQoNCiAgQ29udGVudEVkaXRhYmxlSW5wdXQucHJvdG90eXBlLmVuc3VyZVBvbGxlZCA9IGZ1bmN0aW9uICgpIHsNCiAgICB0aGlzLmZvcmNlQ29tcG9zaXRpb25FbmQoKTsNCiAgfTsNCiAgQ29udGVudEVkaXRhYmxlSW5wdXQucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkgew0KICAgIHRoaXMuZm9yY2VDb21wb3NpdGlvbkVuZCgpOw0KICB9Ow0KICBDb250ZW50RWRpdGFibGVJbnB1dC5wcm90b3R5cGUuZm9yY2VDb21wb3NpdGlvbkVuZCA9IGZ1bmN0aW9uICgpIHsNCiAgICBpZiAoIXRoaXMuY29tcG9zaW5nKSB7IHJldHVybiB9DQogICAgY2xlYXJUaW1lb3V0KHRoaXMucmVhZERPTVRpbWVvdXQpOw0KICAgIHRoaXMuY29tcG9zaW5nID0gbnVsbDsNCiAgICB0aGlzLnVwZGF0ZUZyb21ET00oKTsNCiAgICB0aGlzLmRpdi5ibHVyKCk7DQogICAgdGhpcy5kaXYuZm9jdXMoKTsNCiAgfTsNCiAgQ29udGVudEVkaXRhYmxlSW5wdXQucHJvdG90eXBlLnJlYWRGcm9tRE9NU29vbiA9IGZ1bmN0aW9uICgpIHsNCiAgICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgaWYgKHRoaXMucmVhZERPTVRpbWVvdXQgIT0gbnVsbCkgeyByZXR1cm4gfQ0KICAgIHRoaXMucmVhZERPTVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgIHRoaXMkMS5yZWFkRE9NVGltZW91dCA9IG51bGw7DQogICAgICBpZiAodGhpcyQxLmNvbXBvc2luZykgew0KICAgICAgICBpZiAodGhpcyQxLmNvbXBvc2luZy5kb25lKSB7IHRoaXMkMS5jb21wb3NpbmcgPSBudWxsOyB9DQogICAgICAgIGVsc2UgeyByZXR1cm4gfQ0KICAgICAgfQ0KICAgICAgdGhpcyQxLnVwZGF0ZUZyb21ET00oKTsNCiAgICB9LCA4MCk7DQogIH07DQoNCiAgQ29udGVudEVkaXRhYmxlSW5wdXQucHJvdG90eXBlLnVwZGF0ZUZyb21ET00gPSBmdW5jdGlvbiAoKSB7DQogICAgICB2YXIgdGhpcyQxID0gdGhpczsNCg0KICAgIGlmICh0aGlzLmNtLmlzUmVhZE9ubHkoKSB8fCAhdGhpcy5wb2xsQ29udGVudCgpKQ0KICAgICAgeyBydW5Jbk9wKHRoaXMuY20sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlZ0NoYW5nZSh0aGlzJDEuY20pOyB9KTsgfQ0KICB9Ow0KDQogIENvbnRlbnRFZGl0YWJsZUlucHV0LnByb3RvdHlwZS5zZXRVbmVkaXRhYmxlID0gZnVuY3Rpb24gKG5vZGUpIHsNCiAgICBub2RlLmNvbnRlbnRFZGl0YWJsZSA9ICJmYWxzZSI7DQogIH07DQoNCiAgQ29udGVudEVkaXRhYmxlSW5wdXQucHJvdG90eXBlLm9uS2V5UHJlc3MgPSBmdW5jdGlvbiAoZSkgew0KICAgIGlmIChlLmNoYXJDb2RlID09IDAgfHwgdGhpcy5jb21wb3NpbmcpIHsgcmV0dXJuIH0NCiAgICBlLnByZXZlbnREZWZhdWx0KCk7DQogICAgaWYgKCF0aGlzLmNtLmlzUmVhZE9ubHkoKSkNCiAgICAgIHsgb3BlcmF0aW9uKHRoaXMuY20sIGFwcGx5VGV4dElucHV0KSh0aGlzLmNtLCBTdHJpbmcuZnJvbUNoYXJDb2RlKGUuY2hhckNvZGUgPT0gbnVsbCA/IGUua2V5Q29kZSA6IGUuY2hhckNvZGUpLCAwKTsgfQ0KICB9Ow0KDQogIENvbnRlbnRFZGl0YWJsZUlucHV0LnByb3RvdHlwZS5yZWFkT25seUNoYW5nZWQgPSBmdW5jdGlvbiAodmFsKSB7DQogICAgdGhpcy5kaXYuY29udGVudEVkaXRhYmxlID0gU3RyaW5nKHZhbCAhPSAibm9jdXJzb3IiKTsNCiAgfTsNCg0KICBDb250ZW50RWRpdGFibGVJbnB1dC5wcm90b3R5cGUub25Db250ZXh0TWVudSA9IGZ1bmN0aW9uICgpIHt9Ow0KICBDb250ZW50RWRpdGFibGVJbnB1dC5wcm90b3R5cGUucmVzZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHt9Ow0KDQogIENvbnRlbnRFZGl0YWJsZUlucHV0LnByb3RvdHlwZS5uZWVkc0NvbnRlbnRBdHRyaWJ1dGUgPSB0cnVlOw0KDQogIGZ1bmN0aW9uIHBvc1RvRE9NKGNtLCBwb3MpIHsNCiAgICB2YXIgdmlldyA9IGZpbmRWaWV3Rm9yTGluZShjbSwgcG9zLmxpbmUpOw0KICAgIGlmICghdmlldyB8fCB2aWV3LmhpZGRlbikgeyByZXR1cm4gbnVsbCB9DQogICAgdmFyIGxpbmUgPSBnZXRMaW5lKGNtLmRvYywgcG9zLmxpbmUpOw0KICAgIHZhciBpbmZvID0gbWFwRnJvbUxpbmVWaWV3KHZpZXcsIGxpbmUsIHBvcy5saW5lKTsNCg0KICAgIHZhciBvcmRlciA9IGdldE9yZGVyKGxpbmUsIGNtLmRvYy5kaXJlY3Rpb24pLCBzaWRlID0gImxlZnQiOw0KICAgIGlmIChvcmRlcikgew0KICAgICAgdmFyIHBhcnRQb3MgPSBnZXRCaWRpUGFydEF0KG9yZGVyLCBwb3MuY2gpOw0KICAgICAgc2lkZSA9IHBhcnRQb3MgJSAyID8gInJpZ2h0IiA6ICJsZWZ0IjsNCiAgICB9DQogICAgdmFyIHJlc3VsdCA9IG5vZGVBbmRPZmZzZXRJbkxpbmVNYXAoaW5mby5tYXAsIHBvcy5jaCwgc2lkZSk7DQogICAgcmVzdWx0Lm9mZnNldCA9IHJlc3VsdC5jb2xsYXBzZSA9PSAicmlnaHQiID8gcmVzdWx0LmVuZCA6IHJlc3VsdC5zdGFydDsNCiAgICByZXR1cm4gcmVzdWx0DQogIH0NCg0KICBmdW5jdGlvbiBpc0luR3V0dGVyKG5vZGUpIHsNCiAgICBmb3IgKHZhciBzY2FuID0gbm9kZTsgc2Nhbjsgc2NhbiA9IHNjYW4ucGFyZW50Tm9kZSkNCiAgICAgIHsgaWYgKC9Db2RlTWlycm9yLWd1dHRlci13cmFwcGVyLy50ZXN0KHNjYW4uY2xhc3NOYW1lKSkgeyByZXR1cm4gdHJ1ZSB9IH0NCiAgICByZXR1cm4gZmFsc2UNCiAgfQ0KDQogIGZ1bmN0aW9uIGJhZFBvcyhwb3MsIGJhZCkgeyBpZiAoYmFkKSB7IHBvcy5iYWQgPSB0cnVlOyB9IHJldHVybiBwb3MgfQ0KDQogIGZ1bmN0aW9uIGRvbVRleHRCZXR3ZWVuKGNtLCBmcm9tLCB0bywgZnJvbUxpbmUsIHRvTGluZSkgew0KICAgIHZhciB0ZXh0ID0gIiIsIGNsb3NpbmcgPSBmYWxzZSwgbGluZVNlcCA9IGNtLmRvYy5saW5lU2VwYXJhdG9yKCksIGV4dHJhTGluZWJyZWFrID0gZmFsc2U7DQogICAgZnVuY3Rpb24gcmVjb2duaXplTWFya2VyKGlkKSB7IHJldHVybiBmdW5jdGlvbiAobWFya2VyKSB7IHJldHVybiBtYXJrZXIuaWQgPT0gaWQ7IH0gfQ0KICAgIGZ1bmN0aW9uIGNsb3NlKCkgew0KICAgICAgaWYgKGNsb3NpbmcpIHsNCiAgICAgICAgdGV4dCArPSBsaW5lU2VwOw0KICAgICAgICBpZiAoZXh0cmFMaW5lYnJlYWspIHsgdGV4dCArPSBsaW5lU2VwOyB9DQogICAgICAgIGNsb3NpbmcgPSBleHRyYUxpbmVicmVhayA9IGZhbHNlOw0KICAgICAgfQ0KICAgIH0NCiAgICBmdW5jdGlvbiBhZGRUZXh0KHN0cikgew0KICAgICAgaWYgKHN0cikgew0KICAgICAgICBjbG9zZSgpOw0KICAgICAgICB0ZXh0ICs9IHN0cjsNCiAgICAgIH0NCiAgICB9DQogICAgZnVuY3Rpb24gd2Fsayhub2RlKSB7DQogICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB7DQogICAgICAgIHZhciBjbVRleHQgPSBub2RlLmdldEF0dHJpYnV0ZSgiY20tdGV4dCIpOw0KICAgICAgICBpZiAoY21UZXh0KSB7DQogICAgICAgICAgYWRkVGV4dChjbVRleHQpOw0KICAgICAgICAgIHJldHVybg0KICAgICAgICB9DQogICAgICAgIHZhciBtYXJrZXJJRCA9IG5vZGUuZ2V0QXR0cmlidXRlKCJjbS1tYXJrZXIiKSwgcmFuZ2UkJDE7DQogICAgICAgIGlmIChtYXJrZXJJRCkgew0KICAgICAgICAgIHZhciBmb3VuZCA9IGNtLmZpbmRNYXJrcyhQb3MoZnJvbUxpbmUsIDApLCBQb3ModG9MaW5lICsgMSwgMCksIHJlY29nbml6ZU1hcmtlcigrbWFya2VySUQpKTsNCiAgICAgICAgICBpZiAoZm91bmQubGVuZ3RoICYmIChyYW5nZSQkMSA9IGZvdW5kWzBdLmZpbmQoMCkpKQ0KICAgICAgICAgICAgeyBhZGRUZXh0KGdldEJldHdlZW4oY20uZG9jLCByYW5nZSQkMS5mcm9tLCByYW5nZSQkMS50bykuam9pbihsaW5lU2VwKSk7IH0NCiAgICAgICAgICByZXR1cm4NCiAgICAgICAgfQ0KICAgICAgICBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoImNvbnRlbnRlZGl0YWJsZSIpID09ICJmYWxzZSIpIHsgcmV0dXJuIH0NCiAgICAgICAgdmFyIGlzQmxvY2sgPSAvXihwcmV8ZGl2fHB8bGl8dGFibGV8YnIpJC9pLnRlc3Qobm9kZS5ub2RlTmFtZSk7DQogICAgICAgIGlmICghL15iciQvaS50ZXN0KG5vZGUubm9kZU5hbWUpICYmIG5vZGUudGV4dENvbnRlbnQubGVuZ3RoID09IDApIHsgcmV0dXJuIH0NCg0KICAgICAgICBpZiAoaXNCbG9jaykgeyBjbG9zZSgpOyB9DQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKQ0KICAgICAgICAgIHsgd2Fsayhub2RlLmNoaWxkTm9kZXNbaV0pOyB9DQoNCiAgICAgICAgaWYgKC9eKHByZXxwKSQvaS50ZXN0KG5vZGUubm9kZU5hbWUpKSB7IGV4dHJhTGluZWJyZWFrID0gdHJ1ZTsgfQ0KICAgICAgICBpZiAoaXNCbG9jaykgeyBjbG9zaW5nID0gdHJ1ZTsgfQ0KICAgICAgfSBlbHNlIGlmIChub2RlLm5vZGVUeXBlID09IDMpIHsNCiAgICAgICAgYWRkVGV4dChub2RlLm5vZGVWYWx1ZS5yZXBsYWNlKC9cdTIwMGIvZywgIiIpLnJlcGxhY2UoL1x1MDBhMC9nLCAiICIpKTsNCiAgICAgIH0NCiAgICB9DQogICAgZm9yICg7Oykgew0KICAgICAgd2Fsayhmcm9tKTsNCiAgICAgIGlmIChmcm9tID09IHRvKSB7IGJyZWFrIH0NCiAgICAgIGZyb20gPSBmcm9tLm5leHRTaWJsaW5nOw0KICAgICAgZXh0cmFMaW5lYnJlYWsgPSBmYWxzZTsNCiAgICB9DQogICAgcmV0dXJuIHRleHQNCiAgfQ0KDQogIGZ1bmN0aW9uIGRvbVRvUG9zKGNtLCBub2RlLCBvZmZzZXQpIHsNCiAgICB2YXIgbGluZU5vZGU7DQogICAgaWYgKG5vZGUgPT0gY20uZGlzcGxheS5saW5lRGl2KSB7DQogICAgICBsaW5lTm9kZSA9IGNtLmRpc3BsYXkubGluZURpdi5jaGlsZE5vZGVzW29mZnNldF07DQogICAgICBpZiAoIWxpbmVOb2RlKSB7IHJldHVybiBiYWRQb3MoY20uY2xpcFBvcyhQb3MoY20uZGlzcGxheS52aWV3VG8gLSAxKSksIHRydWUpIH0NCiAgICAgIG5vZGUgPSBudWxsOyBvZmZzZXQgPSAwOw0KICAgIH0gZWxzZSB7DQogICAgICBmb3IgKGxpbmVOb2RlID0gbm9kZTs7IGxpbmVOb2RlID0gbGluZU5vZGUucGFyZW50Tm9kZSkgew0KICAgICAgICBpZiAoIWxpbmVOb2RlIHx8IGxpbmVOb2RlID09IGNtLmRpc3BsYXkubGluZURpdikgeyByZXR1cm4gbnVsbCB9DQogICAgICAgIGlmIChsaW5lTm9kZS5wYXJlbnROb2RlICYmIGxpbmVOb2RlLnBhcmVudE5vZGUgPT0gY20uZGlzcGxheS5saW5lRGl2KSB7IGJyZWFrIH0NCiAgICAgIH0NCiAgICB9DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbS5kaXNwbGF5LnZpZXcubGVuZ3RoOyBpKyspIHsNCiAgICAgIHZhciBsaW5lVmlldyA9IGNtLmRpc3BsYXkudmlld1tpXTsNCiAgICAgIGlmIChsaW5lVmlldy5ub2RlID09IGxpbmVOb2RlKQ0KICAgICAgICB7IHJldHVybiBsb2NhdGVOb2RlSW5MaW5lVmlldyhsaW5lVmlldywgbm9kZSwgb2Zmc2V0KSB9DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gbG9jYXRlTm9kZUluTGluZVZpZXcobGluZVZpZXcsIG5vZGUsIG9mZnNldCkgew0KICAgIHZhciB3cmFwcGVyID0gbGluZVZpZXcudGV4dC5maXJzdENoaWxkLCBiYWQgPSBmYWxzZTsNCiAgICBpZiAoIW5vZGUgfHwgIWNvbnRhaW5zKHdyYXBwZXIsIG5vZGUpKSB7IHJldHVybiBiYWRQb3MoUG9zKGxpbmVObyhsaW5lVmlldy5saW5lKSwgMCksIHRydWUpIH0NCiAgICBpZiAobm9kZSA9PSB3cmFwcGVyKSB7DQogICAgICBiYWQgPSB0cnVlOw0KICAgICAgbm9kZSA9IHdyYXBwZXIuY2hpbGROb2Rlc1tvZmZzZXRdOw0KICAgICAgb2Zmc2V0ID0gMDsNCiAgICAgIGlmICghbm9kZSkgew0KICAgICAgICB2YXIgbGluZSA9IGxpbmVWaWV3LnJlc3QgPyBsc3QobGluZVZpZXcucmVzdCkgOiBsaW5lVmlldy5saW5lOw0KICAgICAgICByZXR1cm4gYmFkUG9zKFBvcyhsaW5lTm8obGluZSksIGxpbmUudGV4dC5sZW5ndGgpLCBiYWQpDQogICAgICB9DQogICAgfQ0KDQogICAgdmFyIHRleHROb2RlID0gbm9kZS5ub2RlVHlwZSA9PSAzID8gbm9kZSA6IG51bGwsIHRvcE5vZGUgPSBub2RlOw0KICAgIGlmICghdGV4dE5vZGUgJiYgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA9PSAxICYmIG5vZGUuZmlyc3RDaGlsZC5ub2RlVHlwZSA9PSAzKSB7DQogICAgICB0ZXh0Tm9kZSA9IG5vZGUuZmlyc3RDaGlsZDsNCiAgICAgIGlmIChvZmZzZXQpIHsgb2Zmc2V0ID0gdGV4dE5vZGUubm9kZVZhbHVlLmxlbmd0aDsgfQ0KICAgIH0NCiAgICB3aGlsZSAodG9wTm9kZS5wYXJlbnROb2RlICE9IHdyYXBwZXIpIHsgdG9wTm9kZSA9IHRvcE5vZGUucGFyZW50Tm9kZTsgfQ0KICAgIHZhciBtZWFzdXJlID0gbGluZVZpZXcubWVhc3VyZSwgbWFwcyA9IG1lYXN1cmUubWFwczsNCg0KICAgIGZ1bmN0aW9uIGZpbmQodGV4dE5vZGUsIHRvcE5vZGUsIG9mZnNldCkgew0KICAgICAgZm9yICh2YXIgaSA9IC0xOyBpIDwgKG1hcHMgPyBtYXBzLmxlbmd0aCA6IDApOyBpKyspIHsNCiAgICAgICAgdmFyIG1hcCQkMSA9IGkgPCAwID8gbWVhc3VyZS5tYXAgOiBtYXBzW2ldOw0KICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1hcCQkMS5sZW5ndGg7IGogKz0gMykgew0KICAgICAgICAgIHZhciBjdXJOb2RlID0gbWFwJCQxW2ogKyAyXTsNCiAgICAgICAgICBpZiAoY3VyTm9kZSA9PSB0ZXh0Tm9kZSB8fCBjdXJOb2RlID09IHRvcE5vZGUpIHsNCiAgICAgICAgICAgIHZhciBsaW5lID0gbGluZU5vKGkgPCAwID8gbGluZVZpZXcubGluZSA6IGxpbmVWaWV3LnJlc3RbaV0pOw0KICAgICAgICAgICAgdmFyIGNoID0gbWFwJCQxW2pdICsgb2Zmc2V0Ow0KICAgICAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgY3VyTm9kZSAhPSB0ZXh0Tm9kZSkgeyBjaCA9IG1hcCQkMVtqICsgKG9mZnNldCA/IDEgOiAwKV07IH0NCiAgICAgICAgICAgIHJldHVybiBQb3MobGluZSwgY2gpDQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9DQogICAgfQ0KICAgIHZhciBmb3VuZCA9IGZpbmQodGV4dE5vZGUsIHRvcE5vZGUsIG9mZnNldCk7DQogICAgaWYgKGZvdW5kKSB7IHJldHVybiBiYWRQb3MoZm91bmQsIGJhZCkgfQ0KDQogICAgLy8gRklYTUUgdGhpcyBpcyBhbGwgcmVhbGx5IHNoYWt5LiBtaWdodCBoYW5kbGUgdGhlIGZldyBjYXNlcyBpdCBuZWVkcyB0byBoYW5kbGUsIGJ1dCBsaWtlbHkgdG8gY2F1c2UgcHJvYmxlbXMNCiAgICBmb3IgKHZhciBhZnRlciA9IHRvcE5vZGUubmV4dFNpYmxpbmcsIGRpc3QgPSB0ZXh0Tm9kZSA/IHRleHROb2RlLm5vZGVWYWx1ZS5sZW5ndGggLSBvZmZzZXQgOiAwOyBhZnRlcjsgYWZ0ZXIgPSBhZnRlci5uZXh0U2libGluZykgew0KICAgICAgZm91bmQgPSBmaW5kKGFmdGVyLCBhZnRlci5maXJzdENoaWxkLCAwKTsNCiAgICAgIGlmIChmb3VuZCkNCiAgICAgICAgeyByZXR1cm4gYmFkUG9zKFBvcyhmb3VuZC5saW5lLCBmb3VuZC5jaCAtIGRpc3QpLCBiYWQpIH0NCiAgICAgIGVsc2UNCiAgICAgICAgeyBkaXN0ICs9IGFmdGVyLnRleHRDb250ZW50Lmxlbmd0aDsgfQ0KICAgIH0NCiAgICBmb3IgKHZhciBiZWZvcmUgPSB0b3BOb2RlLnByZXZpb3VzU2libGluZywgZGlzdCQxID0gb2Zmc2V0OyBiZWZvcmU7IGJlZm9yZSA9IGJlZm9yZS5wcmV2aW91c1NpYmxpbmcpIHsNCiAgICAgIGZvdW5kID0gZmluZChiZWZvcmUsIGJlZm9yZS5maXJzdENoaWxkLCAtMSk7DQogICAgICBpZiAoZm91bmQpDQogICAgICAgIHsgcmV0dXJuIGJhZFBvcyhQb3MoZm91bmQubGluZSwgZm91bmQuY2ggKyBkaXN0JDEpLCBiYWQpIH0NCiAgICAgIGVsc2UNCiAgICAgICAgeyBkaXN0JDEgKz0gYmVmb3JlLnRleHRDb250ZW50Lmxlbmd0aDsgfQ0KICAgIH0NCiAgfQ0KDQogIC8vIFRFWFRBUkVBIElOUFVUIFNUWUxFDQoNCiAgdmFyIFRleHRhcmVhSW5wdXQgPSBmdW5jdGlvbihjbSkgew0KICAgIHRoaXMuY20gPSBjbTsNCiAgICAvLyBTZWUgaW5wdXQucG9sbCBhbmQgaW5wdXQucmVzZXQNCiAgICB0aGlzLnByZXZJbnB1dCA9ICIiOw0KDQogICAgLy8gRmxhZyB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHdlIGV4cGVjdCBpbnB1dCB0byBhcHBlYXIgcmVhbCBzb29uDQogICAgLy8gbm93IChhZnRlciBzb21lIGV2ZW50IGxpa2UgJ2tleXByZXNzJyBvciAnaW5wdXQnKSBhbmQgYXJlDQogICAgLy8gcG9sbGluZyBpbnRlbnNpdmVseS4NCiAgICB0aGlzLnBvbGxpbmdGYXN0ID0gZmFsc2U7DQogICAgLy8gU2VsZi1yZXNldHRpbmcgdGltZW91dCBmb3IgdGhlIHBvbGxlcg0KICAgIHRoaXMucG9sbGluZyA9IG5ldyBEZWxheWVkKCk7DQogICAgLy8gVXNlZCB0byB3b3JrIGFyb3VuZCBJRSBpc3N1ZSB3aXRoIHNlbGVjdGlvbiBiZWluZyBmb3Jnb3R0ZW4gd2hlbiBmb2N1cyBtb3ZlcyBhd2F5IGZyb20gdGV4dGFyZWENCiAgICB0aGlzLmhhc1NlbGVjdGlvbiA9IGZhbHNlOw0KICAgIHRoaXMuY29tcG9zaW5nID0gbnVsbDsNCiAgfTsNCg0KICBUZXh0YXJlYUlucHV0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGRpc3BsYXkpIHsNCiAgICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgdmFyIGlucHV0ID0gdGhpcywgY20gPSB0aGlzLmNtOw0KICAgIHRoaXMuY3JlYXRlRmllbGQoZGlzcGxheSk7DQogICAgdmFyIHRlID0gdGhpcy50ZXh0YXJlYTsNCg0KICAgIGRpc3BsYXkud3JhcHBlci5pbnNlcnRCZWZvcmUodGhpcy53cmFwcGVyLCBkaXNwbGF5LndyYXBwZXIuZmlyc3RDaGlsZCk7DQoNCiAgICAvLyBOZWVkZWQgdG8gaGlkZSBiaWcgYmx1ZSBibGlua2luZyBjdXJzb3Igb24gTW9iaWxlIFNhZmFyaSAoZG9lc24ndCBzZWVtIHRvIHdvcmsgaW4gaU9TIDggYW55bW9yZSkNCiAgICBpZiAoaW9zKSB7IHRlLnN0eWxlLndpZHRoID0gIjBweCI7IH0NCg0KICAgIG9uKHRlLCAiaW5wdXQiLCBmdW5jdGlvbiAoKSB7DQogICAgICBpZiAoaWUgJiYgaWVfdmVyc2lvbiA+PSA5ICYmIHRoaXMkMS5oYXNTZWxlY3Rpb24pIHsgdGhpcyQxLmhhc1NlbGVjdGlvbiA9IG51bGw7IH0NCiAgICAgIGlucHV0LnBvbGwoKTsNCiAgICB9KTsNCg0KICAgIG9uKHRlLCAicGFzdGUiLCBmdW5jdGlvbiAoZSkgew0KICAgICAgaWYgKHNpZ25hbERPTUV2ZW50KGNtLCBlKSB8fCBoYW5kbGVQYXN0ZShlLCBjbSkpIHsgcmV0dXJuIH0NCg0KICAgICAgY20uc3RhdGUucGFzdGVJbmNvbWluZyA9ICtuZXcgRGF0ZTsNCiAgICAgIGlucHV0LmZhc3RQb2xsKCk7DQogICAgfSk7DQoNCiAgICBmdW5jdGlvbiBwcmVwYXJlQ29weUN1dChlKSB7DQogICAgICBpZiAoc2lnbmFsRE9NRXZlbnQoY20sIGUpKSB7IHJldHVybiB9DQogICAgICBpZiAoY20uc29tZXRoaW5nU2VsZWN0ZWQoKSkgew0KICAgICAgICBzZXRMYXN0Q29waWVkKHtsaW5lV2lzZTogZmFsc2UsIHRleHQ6IGNtLmdldFNlbGVjdGlvbnMoKX0pOw0KICAgICAgfSBlbHNlIGlmICghY20ub3B0aW9ucy5saW5lV2lzZUNvcHlDdXQpIHsNCiAgICAgICAgcmV0dXJuDQogICAgICB9IGVsc2Ugew0KICAgICAgICB2YXIgcmFuZ2VzID0gY29weWFibGVSYW5nZXMoY20pOw0KICAgICAgICBzZXRMYXN0Q29waWVkKHtsaW5lV2lzZTogdHJ1ZSwgdGV4dDogcmFuZ2VzLnRleHR9KTsNCiAgICAgICAgaWYgKGUudHlwZSA9PSAiY3V0Iikgew0KICAgICAgICAgIGNtLnNldFNlbGVjdGlvbnMocmFuZ2VzLnJhbmdlcywgbnVsbCwgc2VsX2RvbnRTY3JvbGwpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIGlucHV0LnByZXZJbnB1dCA9ICIiOw0KICAgICAgICAgIHRlLnZhbHVlID0gcmFuZ2VzLnRleHQuam9pbigiXG4iKTsNCiAgICAgICAgICBzZWxlY3RJbnB1dCh0ZSk7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICAgIGlmIChlLnR5cGUgPT0gImN1dCIpIHsgY20uc3RhdGUuY3V0SW5jb21pbmcgPSArbmV3IERhdGU7IH0NCiAgICB9DQogICAgb24odGUsICJjdXQiLCBwcmVwYXJlQ29weUN1dCk7DQogICAgb24odGUsICJjb3B5IiwgcHJlcGFyZUNvcHlDdXQpOw0KDQogICAgb24oZGlzcGxheS5zY3JvbGxlciwgInBhc3RlIiwgZnVuY3Rpb24gKGUpIHsNCiAgICAgIGlmIChldmVudEluV2lkZ2V0KGRpc3BsYXksIGUpIHx8IHNpZ25hbERPTUV2ZW50KGNtLCBlKSkgeyByZXR1cm4gfQ0KICAgICAgaWYgKCF0ZS5kaXNwYXRjaEV2ZW50KSB7DQogICAgICAgIGNtLnN0YXRlLnBhc3RlSW5jb21pbmcgPSArbmV3IERhdGU7DQogICAgICAgIGlucHV0LmZvY3VzKCk7DQogICAgICAgIHJldHVybg0KICAgICAgfQ0KDQogICAgICAvLyBQYXNzIHRoZSBgcGFzdGVgIGV2ZW50IHRvIHRoZSB0ZXh0YXJlYSBzbyBpdCdzIGhhbmRsZWQgYnkgaXRzIGV2ZW50IGxpc3RlbmVyLg0KICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCJwYXN0ZSIpOw0KICAgICAgZXZlbnQuY2xpcGJvYXJkRGF0YSA9IGUuY2xpcGJvYXJkRGF0YTsNCiAgICAgIHRlLmRpc3BhdGNoRXZlbnQoZXZlbnQpOw0KICAgIH0pOw0KDQogICAgLy8gUHJldmVudCBub3JtYWwgc2VsZWN0aW9uIGluIHRoZSBlZGl0b3IgKHdlIGhhbmRsZSBvdXIgb3duKQ0KICAgIG9uKGRpc3BsYXkubGluZVNwYWNlLCAic2VsZWN0c3RhcnQiLCBmdW5jdGlvbiAoZSkgew0KICAgICAgaWYgKCFldmVudEluV2lkZ2V0KGRpc3BsYXksIGUpKSB7IGVfcHJldmVudERlZmF1bHQoZSk7IH0NCiAgICB9KTsNCg0KICAgIG9uKHRlLCAiY29tcG9zaXRpb25zdGFydCIsIGZ1bmN0aW9uICgpIHsNCiAgICAgIHZhciBzdGFydCA9IGNtLmdldEN1cnNvcigiZnJvbSIpOw0KICAgICAgaWYgKGlucHV0LmNvbXBvc2luZykgeyBpbnB1dC5jb21wb3NpbmcucmFuZ2UuY2xlYXIoKTsgfQ0KICAgICAgaW5wdXQuY29tcG9zaW5nID0gew0KICAgICAgICBzdGFydDogc3RhcnQsDQogICAgICAgIHJhbmdlOiBjbS5tYXJrVGV4dChzdGFydCwgY20uZ2V0Q3Vyc29yKCJ0byIpLCB7Y2xhc3NOYW1lOiAiQ29kZU1pcnJvci1jb21wb3NpbmcifSkNCiAgICAgIH07DQogICAgfSk7DQogICAgb24odGUsICJjb21wb3NpdGlvbmVuZCIsIGZ1bmN0aW9uICgpIHsNCiAgICAgIGlmIChpbnB1dC5jb21wb3NpbmcpIHsNCiAgICAgICAgaW5wdXQucG9sbCgpOw0KICAgICAgICBpbnB1dC5jb21wb3NpbmcucmFuZ2UuY2xlYXIoKTsNCiAgICAgICAgaW5wdXQuY29tcG9zaW5nID0gbnVsbDsNCiAgICAgIH0NCiAgICB9KTsNCiAgfTsNCg0KICBUZXh0YXJlYUlucHV0LnByb3RvdHlwZS5jcmVhdGVGaWVsZCA9IGZ1bmN0aW9uIChfZGlzcGxheSkgew0KICAgIC8vIFdyYXBzIGFuZCBoaWRlcyBpbnB1dCB0ZXh0YXJlYQ0KICAgIHRoaXMud3JhcHBlciA9IGhpZGRlblRleHRhcmVhKCk7DQogICAgLy8gVGhlIHNlbWloaWRkZW4gdGV4dGFyZWEgdGhhdCBpcyBmb2N1c2VkIHdoZW4gdGhlIGVkaXRvciBpcw0KICAgIC8vIGZvY3VzZWQsIGFuZCByZWNlaXZlcyBpbnB1dC4NCiAgICB0aGlzLnRleHRhcmVhID0gdGhpcy53cmFwcGVyLmZpcnN0Q2hpbGQ7DQogIH07DQoNCiAgVGV4dGFyZWFJbnB1dC5wcm90b3R5cGUuc2NyZWVuUmVhZGVyTGFiZWxDaGFuZ2VkID0gZnVuY3Rpb24gKGxhYmVsKSB7DQogICAgLy8gTGFiZWwgZm9yIHNjcmVlbnJlYWRlcnMsIGFjY2Vzc2liaWxpdHkNCiAgICBpZihsYWJlbCkgew0KICAgICAgdGhpcy50ZXh0YXJlYS5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBsYWJlbCk7DQogICAgfSBlbHNlIHsNCiAgICAgIHRoaXMudGV4dGFyZWEucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWxhYmVsJyk7DQogICAgfQ0KICB9Ow0KDQogIFRleHRhcmVhSW5wdXQucHJvdG90eXBlLnByZXBhcmVTZWxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7DQogICAgLy8gUmVkcmF3IHRoZSBzZWxlY3Rpb24gYW5kL29yIGN1cnNvcg0KICAgIHZhciBjbSA9IHRoaXMuY20sIGRpc3BsYXkgPSBjbS5kaXNwbGF5LCBkb2MgPSBjbS5kb2M7DQogICAgdmFyIHJlc3VsdCA9IHByZXBhcmVTZWxlY3Rpb24oY20pOw0KDQogICAgLy8gTW92ZSB0aGUgaGlkZGVuIHRleHRhcmVhIG5lYXIgdGhlIGN1cnNvciB0byBwcmV2ZW50IHNjcm9sbGluZyBhcnRpZmFjdHMNCiAgICBpZiAoY20ub3B0aW9ucy5tb3ZlSW5wdXRXaXRoQ3Vyc29yKSB7DQogICAgICB2YXIgaGVhZFBvcyA9IGN1cnNvckNvb3JkcyhjbSwgZG9jLnNlbC5wcmltYXJ5KCkuaGVhZCwgImRpdiIpOw0KICAgICAgdmFyIHdyYXBPZmYgPSBkaXNwbGF5LndyYXBwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGxpbmVPZmYgPSBkaXNwbGF5LmxpbmVEaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7DQogICAgICByZXN1bHQudGVUb3AgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihkaXNwbGF5LndyYXBwZXIuY2xpZW50SGVpZ2h0IC0gMTAsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkUG9zLnRvcCArIGxpbmVPZmYudG9wIC0gd3JhcE9mZi50b3ApKTsNCiAgICAgIHJlc3VsdC50ZUxlZnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihkaXNwbGF5LndyYXBwZXIuY2xpZW50V2lkdGggLSAxMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkUG9zLmxlZnQgKyBsaW5lT2ZmLmxlZnQgLSB3cmFwT2ZmLmxlZnQpKTsNCiAgICB9DQoNCiAgICByZXR1cm4gcmVzdWx0DQogIH07DQoNCiAgVGV4dGFyZWFJbnB1dC5wcm90b3R5cGUuc2hvd1NlbGVjdGlvbiA9IGZ1bmN0aW9uIChkcmF3bikgew0KICAgIHZhciBjbSA9IHRoaXMuY20sIGRpc3BsYXkgPSBjbS5kaXNwbGF5Ow0KICAgIHJlbW92ZUNoaWxkcmVuQW5kQWRkKGRpc3BsYXkuY3Vyc29yRGl2LCBkcmF3bi5jdXJzb3JzKTsNCiAgICByZW1vdmVDaGlsZHJlbkFuZEFkZChkaXNwbGF5LnNlbGVjdGlvbkRpdiwgZHJhd24uc2VsZWN0aW9uKTsNCiAgICBpZiAoZHJhd24udGVUb3AgIT0gbnVsbCkgew0KICAgICAgdGhpcy53cmFwcGVyLnN0eWxlLnRvcCA9IGRyYXduLnRlVG9wICsgInB4IjsNCiAgICAgIHRoaXMud3JhcHBlci5zdHlsZS5sZWZ0ID0gZHJhd24udGVMZWZ0ICsgInB4IjsNCiAgICB9DQogIH07DQoNCiAgLy8gUmVzZXQgdGhlIGlucHV0IHRvIGNvcnJlc3BvbmQgdG8gdGhlIHNlbGVjdGlvbiAob3IgdG8gYmUgZW1wdHksDQogIC8vIHdoZW4gbm90IHR5cGluZyBhbmQgbm90aGluZyBpcyBzZWxlY3RlZCkNCiAgVGV4dGFyZWFJbnB1dC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAodHlwaW5nKSB7DQogICAgaWYgKHRoaXMuY29udGV4dE1lbnVQZW5kaW5nIHx8IHRoaXMuY29tcG9zaW5nKSB7IHJldHVybiB9DQogICAgdmFyIGNtID0gdGhpcy5jbTsNCiAgICBpZiAoY20uc29tZXRoaW5nU2VsZWN0ZWQoKSkgew0KICAgICAgdGhpcy5wcmV2SW5wdXQgPSAiIjsNCiAgICAgIHZhciBjb250ZW50ID0gY20uZ2V0U2VsZWN0aW9uKCk7DQogICAgICB0aGlzLnRleHRhcmVhLnZhbHVlID0gY29udGVudDsNCiAgICAgIGlmIChjbS5zdGF0ZS5mb2N1c2VkKSB7IHNlbGVjdElucHV0KHRoaXMudGV4dGFyZWEpOyB9DQogICAgICBpZiAoaWUgJiYgaWVfdmVyc2lvbiA+PSA5KSB7IHRoaXMuaGFzU2VsZWN0aW9uID0gY29udGVudDsgfQ0KICAgIH0gZWxzZSBpZiAoIXR5cGluZykgew0KICAgICAgdGhpcy5wcmV2SW5wdXQgPSB0aGlzLnRleHRhcmVhLnZhbHVlID0gIiI7DQogICAgICBpZiAoaWUgJiYgaWVfdmVyc2lvbiA+PSA5KSB7IHRoaXMuaGFzU2VsZWN0aW9uID0gbnVsbDsgfQ0KICAgIH0NCiAgfTsNCg0KICBUZXh0YXJlYUlucHV0LnByb3RvdHlwZS5nZXRGaWVsZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMudGV4dGFyZWEgfTsNCg0KICBUZXh0YXJlYUlucHV0LnByb3RvdHlwZS5zdXBwb3J0c1RvdWNoID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2UgfTsNCg0KICBUZXh0YXJlYUlucHV0LnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uICgpIHsNCiAgICBpZiAodGhpcy5jbS5vcHRpb25zLnJlYWRPbmx5ICE9ICJub2N1cnNvciIgJiYgKCFtb2JpbGUgfHwgYWN0aXZlRWx0KCkgIT0gdGhpcy50ZXh0YXJlYSkpIHsNCiAgICAgIHRyeSB7IHRoaXMudGV4dGFyZWEuZm9jdXMoKTsgfQ0KICAgICAgY2F0Y2ggKGUpIHt9IC8vIElFOCB3aWxsIHRocm93IGlmIHRoZSB0ZXh0YXJlYSBpcyBkaXNwbGF5OiBub25lIG9yIG5vdCBpbiBET00NCiAgICB9DQogIH07DQoNCiAgVGV4dGFyZWFJbnB1dC5wcm90b3R5cGUuYmx1ciA9IGZ1bmN0aW9uICgpIHsgdGhpcy50ZXh0YXJlYS5ibHVyKCk7IH07DQoNCiAgVGV4dGFyZWFJbnB1dC5wcm90b3R5cGUucmVzZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHsNCiAgICB0aGlzLndyYXBwZXIuc3R5bGUudG9wID0gdGhpcy53cmFwcGVyLnN0eWxlLmxlZnQgPSAwOw0KICB9Ow0KDQogIFRleHRhcmVhSW5wdXQucHJvdG90eXBlLnJlY2VpdmVkRm9jdXMgPSBmdW5jdGlvbiAoKSB7IHRoaXMuc2xvd1BvbGwoKTsgfTsNCg0KICAvLyBQb2xsIGZvciBpbnB1dCBjaGFuZ2VzLCB1c2luZyB0aGUgbm9ybWFsIHJhdGUgb2YgcG9sbGluZy4gVGhpcw0KICAvLyBydW5zIGFzIGxvbmcgYXMgdGhlIGVkaXRvciBpcyBmb2N1c2VkLg0KICBUZXh0YXJlYUlucHV0LnByb3RvdHlwZS5zbG93UG9sbCA9IGZ1bmN0aW9uICgpIHsNCiAgICAgIHZhciB0aGlzJDEgPSB0aGlzOw0KDQogICAgaWYgKHRoaXMucG9sbGluZ0Zhc3QpIHsgcmV0dXJuIH0NCiAgICB0aGlzLnBvbGxpbmcuc2V0KHRoaXMuY20ub3B0aW9ucy5wb2xsSW50ZXJ2YWwsIGZ1bmN0aW9uICgpIHsNCiAgICAgIHRoaXMkMS5wb2xsKCk7DQogICAgICBpZiAodGhpcyQxLmNtLnN0YXRlLmZvY3VzZWQpIHsgdGhpcyQxLnNsb3dQb2xsKCk7IH0NCiAgICB9KTsNCiAgfTsNCg0KICAvLyBXaGVuIGFuIGV2ZW50IGhhcyBqdXN0IGNvbWUgaW4gdGhhdCBpcyBsaWtlbHkgdG8gYWRkIG9yIGNoYW5nZQ0KICAvLyBzb21ldGhpbmcgaW4gdGhlIGlucHV0IHRleHRhcmVhLCB3ZSBwb2xsIGZhc3RlciwgdG8gZW5zdXJlIHRoYXQNCiAgLy8gdGhlIGNoYW5nZSBhcHBlYXJzIG9uIHRoZSBzY3JlZW4gcXVpY2tseS4NCiAgVGV4dGFyZWFJbnB1dC5wcm90b3R5cGUuZmFzdFBvbGwgPSBmdW5jdGlvbiAoKSB7DQogICAgdmFyIG1pc3NlZCA9IGZhbHNlLCBpbnB1dCA9IHRoaXM7DQogICAgaW5wdXQucG9sbGluZ0Zhc3QgPSB0cnVlOw0KICAgIGZ1bmN0aW9uIHAoKSB7DQogICAgICB2YXIgY2hhbmdlZCA9IGlucHV0LnBvbGwoKTsNCiAgICAgIGlmICghY2hhbmdlZCAmJiAhbWlzc2VkKSB7bWlzc2VkID0gdHJ1ZTsgaW5wdXQucG9sbGluZy5zZXQoNjAsIHApO30NCiAgICAgIGVsc2Uge2lucHV0LnBvbGxpbmdGYXN0ID0gZmFsc2U7IGlucHV0LnNsb3dQb2xsKCk7fQ0KICAgIH0NCiAgICBpbnB1dC5wb2xsaW5nLnNldCgyMCwgcCk7DQogIH07DQoNCiAgLy8gUmVhZCBpbnB1dCBmcm9tIHRoZSB0ZXh0YXJlYSwgYW5kIHVwZGF0ZSB0aGUgZG9jdW1lbnQgdG8gbWF0Y2guDQogIC8vIFdoZW4gc29tZXRoaW5nIGlzIHNlbGVjdGVkLCBpdCBpcyBwcmVzZW50IGluIHRoZSB0ZXh0YXJlYSwgYW5kDQogIC8vIHNlbGVjdGVkICh1bmxlc3MgaXQgaXMgaHVnZSwgaW4gd2hpY2ggY2FzZSBhIHBsYWNlaG9sZGVyIGlzDQogIC8vIHVzZWQpLiBXaGVuIG5vdGhpbmcgaXMgc2VsZWN0ZWQsIHRoZSBjdXJzb3Igc2l0cyBhZnRlciBwcmV2aW91c2x5DQogIC8vIHNlZW4gdGV4dCAoY2FuIGJlIGVtcHR5KSwgd2hpY2ggaXMgc3RvcmVkIGluIHByZXZJbnB1dCAod2UgbXVzdA0KICAvLyBub3QgcmVzZXQgdGhlIHRleHRhcmVhIHdoZW4gdHlwaW5nLCBiZWNhdXNlIHRoYXQgYnJlYWtzIElNRSkuDQogIFRleHRhcmVhSW5wdXQucHJvdG90eXBlLnBvbGwgPSBmdW5jdGlvbiAoKSB7DQogICAgICB2YXIgdGhpcyQxID0gdGhpczsNCg0KICAgIHZhciBjbSA9IHRoaXMuY20sIGlucHV0ID0gdGhpcy50ZXh0YXJlYSwgcHJldklucHV0ID0gdGhpcy5wcmV2SW5wdXQ7DQogICAgLy8gU2luY2UgdGhpcyBpcyBjYWxsZWQgYSAqbG90KiwgdHJ5IHRvIGJhaWwgb3V0IGFzIGNoZWFwbHkgYXMNCiAgICAvLyBwb3NzaWJsZSB3aGVuIGl0IGlzIGNsZWFyIHRoYXQgbm90aGluZyBoYXBwZW5lZC4gaGFzU2VsZWN0aW9uDQogICAgLy8gd2lsbCBiZSB0aGUgY2FzZSB3aGVuIHRoZXJlIGlzIGEgbG90IG9mIHRleHQgaW4gdGhlIHRleHRhcmVhLA0KICAgIC8vIGluIHdoaWNoIGNhc2UgcmVhZGluZyBpdHMgdmFsdWUgd291bGQgYmUgZXhwZW5zaXZlLg0KICAgIGlmICh0aGlzLmNvbnRleHRNZW51UGVuZGluZyB8fCAhY20uc3RhdGUuZm9jdXNlZCB8fA0KICAgICAgICAoaGFzU2VsZWN0aW9uKGlucHV0KSAmJiAhcHJldklucHV0ICYmICF0aGlzLmNvbXBvc2luZykgfHwNCiAgICAgICAgY20uaXNSZWFkT25seSgpIHx8IGNtLm9wdGlvbnMuZGlzYWJsZUlucHV0IHx8IGNtLnN0YXRlLmtleVNlcSkNCiAgICAgIHsgcmV0dXJuIGZhbHNlIH0NCg0KICAgIHZhciB0ZXh0ID0gaW5wdXQudmFsdWU7DQogICAgLy8gSWYgbm90aGluZyBjaGFuZ2VkLCBiYWlsLg0KICAgIGlmICh0ZXh0ID09IHByZXZJbnB1dCAmJiAhY20uc29tZXRoaW5nU2VsZWN0ZWQoKSkgeyByZXR1cm4gZmFsc2UgfQ0KICAgIC8vIFdvcmsgYXJvdW5kIG5vbnNlbnNpY2FsIHNlbGVjdGlvbiByZXNldHRpbmcgaW4gSUU5LzEwLCBhbmQNCiAgICAvLyBpbmV4cGxpY2FibGUgYXBwZWFyYW5jZSBvZiBwcml2YXRlIGFyZWEgdW5pY29kZSBjaGFyYWN0ZXJzIG9uDQogICAgLy8gc29tZSBrZXkgY29tYm9zIGluIE1hYyAoIzI2ODkpLg0KICAgIGlmIChpZSAmJiBpZV92ZXJzaW9uID49IDkgJiYgdGhpcy5oYXNTZWxlY3Rpb24gPT09IHRleHQgfHwNCiAgICAgICAgbWFjICYmIC9bXHVmNzAwLVx1ZjdmZl0vLnRlc3QodGV4dCkpIHsNCiAgICAgIGNtLmRpc3BsYXkuaW5wdXQucmVzZXQoKTsNCiAgICAgIHJldHVybiBmYWxzZQ0KICAgIH0NCg0KICAgIGlmIChjbS5kb2Muc2VsID09IGNtLmRpc3BsYXkuc2VsRm9yQ29udGV4dE1lbnUpIHsNCiAgICAgIHZhciBmaXJzdCA9IHRleHQuY2hhckNvZGVBdCgwKTsNCiAgICAgIGlmIChmaXJzdCA9PSAweDIwMGIgJiYgIXByZXZJbnB1dCkgeyBwcmV2SW5wdXQgPSAiXHUyMDBiIjsgfQ0KICAgICAgaWYgKGZpcnN0ID09IDB4MjFkYSkgeyB0aGlzLnJlc2V0KCk7IHJldHVybiB0aGlzLmNtLmV4ZWNDb21tYW5kKCJ1bmRvIikgfQ0KICAgIH0NCiAgICAvLyBGaW5kIHRoZSBwYXJ0IG9mIHRoZSBpbnB1dCB0aGF0IGlzIGFjdHVhbGx5IG5ldw0KICAgIHZhciBzYW1lID0gMCwgbCA9IE1hdGgubWluKHByZXZJbnB1dC5sZW5ndGgsIHRleHQubGVuZ3RoKTsNCiAgICB3aGlsZSAoc2FtZSA8IGwgJiYgcHJldklucHV0LmNoYXJDb2RlQXQoc2FtZSkgPT0gdGV4dC5jaGFyQ29kZUF0KHNhbWUpKSB7ICsrc2FtZTsgfQ0KDQogICAgcnVuSW5PcChjbSwgZnVuY3Rpb24gKCkgew0KICAgICAgYXBwbHlUZXh0SW5wdXQoY20sIHRleHQuc2xpY2Uoc2FtZSksIHByZXZJbnB1dC5sZW5ndGggLSBzYW1lLA0KICAgICAgICAgICAgICAgICAgICAgbnVsbCwgdGhpcyQxLmNvbXBvc2luZyA/ICIqY29tcG9zZSIgOiBudWxsKTsNCg0KICAgICAgLy8gRG9uJ3QgbGVhdmUgbG9uZyB0ZXh0IGluIHRoZSB0ZXh0YXJlYSwgc2luY2UgaXQgbWFrZXMgZnVydGhlciBwb2xsaW5nIHNsb3cNCiAgICAgIGlmICh0ZXh0Lmxlbmd0aCA+IDEwMDAgfHwgdGV4dC5pbmRleE9mKCJcbiIpID4gLTEpIHsgaW5wdXQudmFsdWUgPSB0aGlzJDEucHJldklucHV0ID0gIiI7IH0NCiAgICAgIGVsc2UgeyB0aGlzJDEucHJldklucHV0ID0gdGV4dDsgfQ0KDQogICAgICBpZiAodGhpcyQxLmNvbXBvc2luZykgew0KICAgICAgICB0aGlzJDEuY29tcG9zaW5nLnJhbmdlLmNsZWFyKCk7DQogICAgICAgIHRoaXMkMS5jb21wb3NpbmcucmFuZ2UgPSBjbS5tYXJrVGV4dCh0aGlzJDEuY29tcG9zaW5nLnN0YXJ0LCBjbS5nZXRDdXJzb3IoInRvIiksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2NsYXNzTmFtZTogIkNvZGVNaXJyb3ItY29tcG9zaW5nIn0pOw0KICAgICAgfQ0KICAgIH0pOw0KICAgIHJldHVybiB0cnVlDQogIH07DQoNCiAgVGV4dGFyZWFJbnB1dC5wcm90b3R5cGUuZW5zdXJlUG9sbGVkID0gZnVuY3Rpb24gKCkgew0KICAgIGlmICh0aGlzLnBvbGxpbmdGYXN0ICYmIHRoaXMucG9sbCgpKSB7IHRoaXMucG9sbGluZ0Zhc3QgPSBmYWxzZTsgfQ0KICB9Ow0KDQogIFRleHRhcmVhSW5wdXQucHJvdG90eXBlLm9uS2V5UHJlc3MgPSBmdW5jdGlvbiAoKSB7DQogICAgaWYgKGllICYmIGllX3ZlcnNpb24gPj0gOSkgeyB0aGlzLmhhc1NlbGVjdGlvbiA9IG51bGw7IH0NCiAgICB0aGlzLmZhc3RQb2xsKCk7DQogIH07DQoNCiAgVGV4dGFyZWFJbnB1dC5wcm90b3R5cGUub25Db250ZXh0TWVudSA9IGZ1bmN0aW9uIChlKSB7DQogICAgdmFyIGlucHV0ID0gdGhpcywgY20gPSBpbnB1dC5jbSwgZGlzcGxheSA9IGNtLmRpc3BsYXksIHRlID0gaW5wdXQudGV4dGFyZWE7DQogICAgaWYgKGlucHV0LmNvbnRleHRNZW51UGVuZGluZykgeyBpbnB1dC5jb250ZXh0TWVudVBlbmRpbmcoKTsgfQ0KICAgIHZhciBwb3MgPSBwb3NGcm9tTW91c2UoY20sIGUpLCBzY3JvbGxQb3MgPSBkaXNwbGF5LnNjcm9sbGVyLnNjcm9sbFRvcDsNCiAgICBpZiAoIXBvcyB8fCBwcmVzdG8pIHsgcmV0dXJuIH0gLy8gT3BlcmEgaXMgZGlmZmljdWx0Lg0KDQogICAgLy8gUmVzZXQgdGhlIGN1cnJlbnQgdGV4dCBzZWxlY3Rpb24gb25seSBpZiB0aGUgY2xpY2sgaXMgZG9uZSBvdXRzaWRlIG9mIHRoZSBzZWxlY3Rpb24NCiAgICAvLyBhbmQgJ3Jlc2V0U2VsZWN0aW9uT25Db250ZXh0TWVudScgb3B0aW9uIGlzIHRydWUuDQogICAgdmFyIHJlc2V0ID0gY20ub3B0aW9ucy5yZXNldFNlbGVjdGlvbk9uQ29udGV4dE1lbnU7DQogICAgaWYgKHJlc2V0ICYmIGNtLmRvYy5zZWwuY29udGFpbnMocG9zKSA9PSAtMSkNCiAgICAgIHsgb3BlcmF0aW9uKGNtLCBzZXRTZWxlY3Rpb24pKGNtLmRvYywgc2ltcGxlU2VsZWN0aW9uKHBvcyksIHNlbF9kb250U2Nyb2xsKTsgfQ0KDQogICAgdmFyIG9sZENTUyA9IHRlLnN0eWxlLmNzc1RleHQsIG9sZFdyYXBwZXJDU1MgPSBpbnB1dC53cmFwcGVyLnN0eWxlLmNzc1RleHQ7DQogICAgdmFyIHdyYXBwZXJCb3ggPSBpbnB1dC53cmFwcGVyLm9mZnNldFBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsNCiAgICBpbnB1dC53cmFwcGVyLnN0eWxlLmNzc1RleHQgPSAicG9zaXRpb246IHN0YXRpYyI7DQogICAgdGUuc3R5bGUuY3NzVGV4dCA9ICJwb3NpdGlvbjogYWJzb2x1dGU7IHdpZHRoOiAzMHB4OyBoZWlnaHQ6IDMwcHg7XG4gICAgICB0b3A6ICIgKyAoZS5jbGllbnRZIC0gd3JhcHBlckJveC50b3AgLSA1KSArICJweDsgbGVmdDogIiArIChlLmNsaWVudFggLSB3cmFwcGVyQm94LmxlZnQgLSA1KSArICJweDtcbiAgICAgIHotaW5kZXg6IDEwMDA7IGJhY2tncm91bmQ6ICIgKyAoaWUgPyAicmdiYSgyNTUsIDI1NSwgMjU1LCAuMDUpIiA6ICJ0cmFuc3BhcmVudCIpICsgIjtcbiAgICAgIG91dGxpbmU6IG5vbmU7IGJvcmRlci13aWR0aDogMDsgb3V0bGluZTogbm9uZTsgb3ZlcmZsb3c6IGhpZGRlbjsgb3BhY2l0eTogLjA1OyBmaWx0ZXI6IGFscGhhKG9wYWNpdHk9NSk7IjsNCiAgICB2YXIgb2xkU2Nyb2xsWTsNCiAgICBpZiAod2Via2l0KSB7IG9sZFNjcm9sbFkgPSB3aW5kb3cuc2Nyb2xsWTsgfSAvLyBXb3JrIGFyb3VuZCBDaHJvbWUgaXNzdWUgKCMyNzEyKQ0KICAgIGRpc3BsYXkuaW5wdXQuZm9jdXMoKTsNCiAgICBpZiAod2Via2l0KSB7IHdpbmRvdy5zY3JvbGxUbyhudWxsLCBvbGRTY3JvbGxZKTsgfQ0KICAgIGRpc3BsYXkuaW5wdXQucmVzZXQoKTsNCiAgICAvLyBBZGRzICJTZWxlY3QgYWxsIiB0byBjb250ZXh0IG1lbnUgaW4gRkYNCiAgICBpZiAoIWNtLnNvbWV0aGluZ1NlbGVjdGVkKCkpIHsgdGUudmFsdWUgPSBpbnB1dC5wcmV2SW5wdXQgPSAiICI7IH0NCiAgICBpbnB1dC5jb250ZXh0TWVudVBlbmRpbmcgPSByZWhpZGU7DQogICAgZGlzcGxheS5zZWxGb3JDb250ZXh0TWVudSA9IGNtLmRvYy5zZWw7DQogICAgY2xlYXJUaW1lb3V0KGRpc3BsYXkuZGV0ZWN0aW5nU2VsZWN0QWxsKTsNCg0KICAgIC8vIFNlbGVjdC1hbGwgd2lsbCBiZSBncmV5ZWQgb3V0IGlmIHRoZXJlJ3Mgbm90aGluZyB0byBzZWxlY3QsIHNvDQogICAgLy8gdGhpcyBhZGRzIGEgemVyby13aWR0aCBzcGFjZSBzbyB0aGF0IHdlIGNhbiBsYXRlciBjaGVjayB3aGV0aGVyDQogICAgLy8gaXQgZ290IHNlbGVjdGVkLg0KICAgIGZ1bmN0aW9uIHByZXBhcmVTZWxlY3RBbGxIYWNrKCkgew0KICAgICAgaWYgKHRlLnNlbGVjdGlvblN0YXJ0ICE9IG51bGwpIHsNCiAgICAgICAgdmFyIHNlbGVjdGVkID0gY20uc29tZXRoaW5nU2VsZWN0ZWQoKTsNCiAgICAgICAgdmFyIGV4dHZhbCA9ICJcdTIwMGIiICsgKHNlbGVjdGVkID8gdGUudmFsdWUgOiAiIik7DQogICAgICAgIHRlLnZhbHVlID0gIlx1MjFkYSI7IC8vIFVzZWQgdG8gY2F0Y2ggY29udGV4dC1tZW51IHVuZG8NCiAgICAgICAgdGUudmFsdWUgPSBleHR2YWw7DQogICAgICAgIGlucHV0LnByZXZJbnB1dCA9IHNlbGVjdGVkID8gIiIgOiAiXHUyMDBiIjsNCiAgICAgICAgdGUuc2VsZWN0aW9uU3RhcnQgPSAxOyB0ZS5zZWxlY3Rpb25FbmQgPSBleHR2YWwubGVuZ3RoOw0KICAgICAgICAvLyBSZS1zZXQgdGhpcywgaW4gY2FzZSBzb21lIG90aGVyIGhhbmRsZXIgdG91Y2hlZCB0aGUNCiAgICAgICAgLy8gc2VsZWN0aW9uIGluIHRoZSBtZWFudGltZS4NCiAgICAgICAgZGlzcGxheS5zZWxGb3JDb250ZXh0TWVudSA9IGNtLmRvYy5zZWw7DQogICAgICB9DQogICAgfQ0KICAgIGZ1bmN0aW9uIHJlaGlkZSgpIHsNCiAgICAgIGlmIChpbnB1dC5jb250ZXh0TWVudVBlbmRpbmcgIT0gcmVoaWRlKSB7IHJldHVybiB9DQogICAgICBpbnB1dC5jb250ZXh0TWVudVBlbmRpbmcgPSBmYWxzZTsNCiAgICAgIGlucHV0LndyYXBwZXIuc3R5bGUuY3NzVGV4dCA9IG9sZFdyYXBwZXJDU1M7DQogICAgICB0ZS5zdHlsZS5jc3NUZXh0ID0gb2xkQ1NTOw0KICAgICAgaWYgKGllICYmIGllX3ZlcnNpb24gPCA5KSB7IGRpc3BsYXkuc2Nyb2xsYmFycy5zZXRTY3JvbGxUb3AoZGlzcGxheS5zY3JvbGxlci5zY3JvbGxUb3AgPSBzY3JvbGxQb3MpOyB9DQoNCiAgICAgIC8vIFRyeSB0byBkZXRlY3QgdGhlIHVzZXIgY2hvb3Npbmcgc2VsZWN0LWFsbA0KICAgICAgaWYgKHRlLnNlbGVjdGlvblN0YXJ0ICE9IG51bGwpIHsNCiAgICAgICAgaWYgKCFpZSB8fCAoaWUgJiYgaWVfdmVyc2lvbiA8IDkpKSB7IHByZXBhcmVTZWxlY3RBbGxIYWNrKCk7IH0NCiAgICAgICAgdmFyIGkgPSAwLCBwb2xsID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgIGlmIChkaXNwbGF5LnNlbEZvckNvbnRleHRNZW51ID09IGNtLmRvYy5zZWwgJiYgdGUuc2VsZWN0aW9uU3RhcnQgPT0gMCAmJg0KICAgICAgICAgICAgICB0ZS5zZWxlY3Rpb25FbmQgPiAwICYmIGlucHV0LnByZXZJbnB1dCA9PSAiXHUyMDBiIikgew0KICAgICAgICAgICAgb3BlcmF0aW9uKGNtLCBzZWxlY3RBbGwpKGNtKTsNCiAgICAgICAgICB9IGVsc2UgaWYgKGkrKyA8IDEwKSB7DQogICAgICAgICAgICBkaXNwbGF5LmRldGVjdGluZ1NlbGVjdEFsbCA9IHNldFRpbWVvdXQocG9sbCwgNTAwKTsNCiAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgZGlzcGxheS5zZWxGb3JDb250ZXh0TWVudSA9IG51bGw7DQogICAgICAgICAgICBkaXNwbGF5LmlucHV0LnJlc2V0KCk7DQogICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgICAgICBkaXNwbGF5LmRldGVjdGluZ1NlbGVjdEFsbCA9IHNldFRpbWVvdXQocG9sbCwgMjAwKTsNCiAgICAgIH0NCiAgICB9DQoNCiAgICBpZiAoaWUgJiYgaWVfdmVyc2lvbiA+PSA5KSB7IHByZXBhcmVTZWxlY3RBbGxIYWNrKCk7IH0NCiAgICBpZiAoY2FwdHVyZVJpZ2h0Q2xpY2spIHsNCiAgICAgIGVfc3RvcChlKTsNCiAgICAgIHZhciBtb3VzZXVwID0gZnVuY3Rpb24gKCkgew0KICAgICAgICBvZmYod2luZG93LCAibW91c2V1cCIsIG1vdXNldXApOw0KICAgICAgICBzZXRUaW1lb3V0KHJlaGlkZSwgMjApOw0KICAgICAgfTsNCiAgICAgIG9uKHdpbmRvdywgIm1vdXNldXAiLCBtb3VzZXVwKTsNCiAgICB9IGVsc2Ugew0KICAgICAgc2V0VGltZW91dChyZWhpZGUsIDUwKTsNCiAgICB9DQogIH07DQoNCiAgVGV4dGFyZWFJbnB1dC5wcm90b3R5cGUucmVhZE9ubHlDaGFuZ2VkID0gZnVuY3Rpb24gKHZhbCkgew0KICAgIGlmICghdmFsKSB7IHRoaXMucmVzZXQoKTsgfQ0KICAgIHRoaXMudGV4dGFyZWEuZGlzYWJsZWQgPSB2YWwgPT0gIm5vY3Vyc29yIjsNCiAgfTsNCg0KICBUZXh0YXJlYUlucHV0LnByb3RvdHlwZS5zZXRVbmVkaXRhYmxlID0gZnVuY3Rpb24gKCkge307DQoNCiAgVGV4dGFyZWFJbnB1dC5wcm90b3R5cGUubmVlZHNDb250ZW50QXR0cmlidXRlID0gZmFsc2U7DQoNCiAgZnVuY3Rpb24gZnJvbVRleHRBcmVhKHRleHRhcmVhLCBvcHRpb25zKSB7DQogICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBjb3B5T2JqKG9wdGlvbnMpIDoge307DQogICAgb3B0aW9ucy52YWx1ZSA9IHRleHRhcmVhLnZhbHVlOw0KICAgIGlmICghb3B0aW9ucy50YWJpbmRleCAmJiB0ZXh0YXJlYS50YWJJbmRleCkNCiAgICAgIHsgb3B0aW9ucy50YWJpbmRleCA9IHRleHRhcmVhLnRhYkluZGV4OyB9DQogICAgaWYgKCFvcHRpb25zLnBsYWNlaG9sZGVyICYmIHRleHRhcmVhLnBsYWNlaG9sZGVyKQ0KICAgICAgeyBvcHRpb25zLnBsYWNlaG9sZGVyID0gdGV4dGFyZWEucGxhY2Vob2xkZXI7IH0NCiAgICAvLyBTZXQgYXV0b2ZvY3VzIHRvIHRydWUgaWYgdGhpcyB0ZXh0YXJlYSBpcyBmb2N1c2VkLCBvciBpZiBpdCBoYXMNCiAgICAvLyBhdXRvZm9jdXMgYW5kIG5vIG90aGVyIGVsZW1lbnQgaXMgZm9jdXNlZC4NCiAgICBpZiAob3B0aW9ucy5hdXRvZm9jdXMgPT0gbnVsbCkgew0KICAgICAgdmFyIGhhc0ZvY3VzID0gYWN0aXZlRWx0KCk7DQogICAgICBvcHRpb25zLmF1dG9mb2N1cyA9IGhhc0ZvY3VzID09IHRleHRhcmVhIHx8DQogICAgICAgIHRleHRhcmVhLmdldEF0dHJpYnV0ZSgiYXV0b2ZvY3VzIikgIT0gbnVsbCAmJiBoYXNGb2N1cyA9PSBkb2N1bWVudC5ib2R5Ow0KICAgIH0NCg0KICAgIGZ1bmN0aW9uIHNhdmUoKSB7dGV4dGFyZWEudmFsdWUgPSBjbS5nZXRWYWx1ZSgpO30NCg0KICAgIHZhciByZWFsU3VibWl0Ow0KICAgIGlmICh0ZXh0YXJlYS5mb3JtKSB7DQogICAgICBvbih0ZXh0YXJlYS5mb3JtLCAic3VibWl0Iiwgc2F2ZSk7DQogICAgICAvLyBEZXBsb3JhYmxlIGhhY2sgdG8gbWFrZSB0aGUgc3VibWl0IG1ldGhvZCBkbyB0aGUgcmlnaHQgdGhpbmcuDQogICAgICBpZiAoIW9wdGlvbnMubGVhdmVTdWJtaXRNZXRob2RBbG9uZSkgew0KICAgICAgICB2YXIgZm9ybSA9IHRleHRhcmVhLmZvcm07DQogICAgICAgIHJlYWxTdWJtaXQgPSBmb3JtLnN1Ym1pdDsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICB2YXIgd3JhcHBlZFN1Ym1pdCA9IGZvcm0uc3VibWl0ID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgc2F2ZSgpOw0KICAgICAgICAgICAgZm9ybS5zdWJtaXQgPSByZWFsU3VibWl0Ow0KICAgICAgICAgICAgZm9ybS5zdWJtaXQoKTsNCiAgICAgICAgICAgIGZvcm0uc3VibWl0ID0gd3JhcHBlZFN1Ym1pdDsNCiAgICAgICAgICB9Ow0KICAgICAgICB9IGNhdGNoKGUpIHt9DQogICAgICB9DQogICAgfQ0KDQogICAgb3B0aW9ucy5maW5pc2hJbml0ID0gZnVuY3Rpb24gKGNtKSB7DQogICAgICBjbS5zYXZlID0gc2F2ZTsNCiAgICAgIGNtLmdldFRleHRBcmVhID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGV4dGFyZWE7IH07DQogICAgICBjbS50b1RleHRBcmVhID0gZnVuY3Rpb24gKCkgew0KICAgICAgICBjbS50b1RleHRBcmVhID0gaXNOYU47IC8vIFByZXZlbnQgdGhpcyBmcm9tIGJlaW5nIHJhbiB0d2ljZQ0KICAgICAgICBzYXZlKCk7DQogICAgICAgIHRleHRhcmVhLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY20uZ2V0V3JhcHBlckVsZW1lbnQoKSk7DQogICAgICAgIHRleHRhcmVhLnN0eWxlLmRpc3BsYXkgPSAiIjsNCiAgICAgICAgaWYgKHRleHRhcmVhLmZvcm0pIHsNCiAgICAgICAgICBvZmYodGV4dGFyZWEuZm9ybSwgInN1Ym1pdCIsIHNhdmUpOw0KICAgICAgICAgIGlmICghb3B0aW9ucy5sZWF2ZVN1Ym1pdE1ldGhvZEFsb25lICYmIHR5cGVvZiB0ZXh0YXJlYS5mb3JtLnN1Ym1pdCA9PSAiZnVuY3Rpb24iKQ0KICAgICAgICAgICAgeyB0ZXh0YXJlYS5mb3JtLnN1Ym1pdCA9IHJlYWxTdWJtaXQ7IH0NCiAgICAgICAgfQ0KICAgICAgfTsNCiAgICB9Ow0KDQogICAgdGV4dGFyZWEuc3R5bGUuZGlzcGxheSA9ICJub25lIjsNCiAgICB2YXIgY20gPSBDb2RlTWlycm9yKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiB0ZXh0YXJlYS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCB0ZXh0YXJlYS5uZXh0U2libGluZyk7IH0sDQogICAgICBvcHRpb25zKTsNCiAgICByZXR1cm4gY20NCiAgfQ0KDQogIGZ1bmN0aW9uIGFkZExlZ2FjeVByb3BzKENvZGVNaXJyb3IpIHsNCiAgICBDb2RlTWlycm9yLm9mZiA9IG9mZjsNCiAgICBDb2RlTWlycm9yLm9uID0gb247DQogICAgQ29kZU1pcnJvci53aGVlbEV2ZW50UGl4ZWxzID0gd2hlZWxFdmVudFBpeGVsczsNCiAgICBDb2RlTWlycm9yLkRvYyA9IERvYzsNCiAgICBDb2RlTWlycm9yLnNwbGl0TGluZXMgPSBzcGxpdExpbmVzQXV0bzsNCiAgICBDb2RlTWlycm9yLmNvdW50Q29sdW1uID0gY291bnRDb2x1bW47DQogICAgQ29kZU1pcnJvci5maW5kQ29sdW1uID0gZmluZENvbHVtbjsNCiAgICBDb2RlTWlycm9yLmlzV29yZENoYXIgPSBpc1dvcmRDaGFyQmFzaWM7DQogICAgQ29kZU1pcnJvci5QYXNzID0gUGFzczsNCiAgICBDb2RlTWlycm9yLnNpZ25hbCA9IHNpZ25hbDsNCiAgICBDb2RlTWlycm9yLkxpbmUgPSBMaW5lOw0KICAgIENvZGVNaXJyb3IuY2hhbmdlRW5kID0gY2hhbmdlRW5kOw0KICAgIENvZGVNaXJyb3Iuc2Nyb2xsYmFyTW9kZWwgPSBzY3JvbGxiYXJNb2RlbDsNCiAgICBDb2RlTWlycm9yLlBvcyA9IFBvczsNCiAgICBDb2RlTWlycm9yLmNtcFBvcyA9IGNtcDsNCiAgICBDb2RlTWlycm9yLm1vZGVzID0gbW9kZXM7DQogICAgQ29kZU1pcnJvci5taW1lTW9kZXMgPSBtaW1lTW9kZXM7DQogICAgQ29kZU1pcnJvci5yZXNvbHZlTW9kZSA9IHJlc29sdmVNb2RlOw0KICAgIENvZGVNaXJyb3IuZ2V0TW9kZSA9IGdldE1vZGU7DQogICAgQ29kZU1pcnJvci5tb2RlRXh0ZW5zaW9ucyA9IG1vZGVFeHRlbnNpb25zOw0KICAgIENvZGVNaXJyb3IuZXh0ZW5kTW9kZSA9IGV4dGVuZE1vZGU7DQogICAgQ29kZU1pcnJvci5jb3B5U3RhdGUgPSBjb3B5U3RhdGU7DQogICAgQ29kZU1pcnJvci5zdGFydFN0YXRlID0gc3RhcnRTdGF0ZTsNCiAgICBDb2RlTWlycm9yLmlubmVyTW9kZSA9IGlubmVyTW9kZTsNCiAgICBDb2RlTWlycm9yLmNvbW1hbmRzID0gY29tbWFuZHM7DQogICAgQ29kZU1pcnJvci5rZXlNYXAgPSBrZXlNYXA7DQogICAgQ29kZU1pcnJvci5rZXlOYW1lID0ga2V5TmFtZTsNCiAgICBDb2RlTWlycm9yLmlzTW9kaWZpZXJLZXkgPSBpc01vZGlmaWVyS2V5Ow0KICAgIENvZGVNaXJyb3IubG9va3VwS2V5ID0gbG9va3VwS2V5Ow0KICAgIENvZGVNaXJyb3Iubm9ybWFsaXplS2V5TWFwID0gbm9ybWFsaXplS2V5TWFwOw0KICAgIENvZGVNaXJyb3IuU3RyaW5nU3RyZWFtID0gU3RyaW5nU3RyZWFtOw0KICAgIENvZGVNaXJyb3IuU2hhcmVkVGV4dE1hcmtlciA9IFNoYXJlZFRleHRNYXJrZXI7DQogICAgQ29kZU1pcnJvci5UZXh0TWFya2VyID0gVGV4dE1hcmtlcjsNCiAgICBDb2RlTWlycm9yLkxpbmVXaWRnZXQgPSBMaW5lV2lkZ2V0Ow0KICAgIENvZGVNaXJyb3IuZV9wcmV2ZW50RGVmYXVsdCA9IGVfcHJldmVudERlZmF1bHQ7DQogICAgQ29kZU1pcnJvci5lX3N0b3BQcm9wYWdhdGlvbiA9IGVfc3RvcFByb3BhZ2F0aW9uOw0KICAgIENvZGVNaXJyb3IuZV9zdG9wID0gZV9zdG9wOw0KICAgIENvZGVNaXJyb3IuYWRkQ2xhc3MgPSBhZGRDbGFzczsNCiAgICBDb2RlTWlycm9yLmNvbnRhaW5zID0gY29udGFpbnM7DQogICAgQ29kZU1pcnJvci5ybUNsYXNzID0gcm1DbGFzczsNCiAgICBDb2RlTWlycm9yLmtleU5hbWVzID0ga2V5TmFtZXM7DQogIH0NCg0KICAvLyBFRElUT1IgQ09OU1RSVUNUT1INCg0KICBkZWZpbmVPcHRpb25zKENvZGVNaXJyb3IpOw0KDQogIGFkZEVkaXRvck1ldGhvZHMoQ29kZU1pcnJvcik7DQoNCiAgLy8gU2V0IHVwIG1ldGhvZHMgb24gQ29kZU1pcnJvcidzIHByb3RvdHlwZSB0byByZWRpcmVjdCB0byB0aGUgZWRpdG9yJ3MgZG9jdW1lbnQuDQogIHZhciBkb250RGVsZWdhdGUgPSAiaXRlciBpbnNlcnQgcmVtb3ZlIGNvcHkgZ2V0RWRpdG9yIGNvbnN0cnVjdG9yIi5zcGxpdCgiICIpOw0KICBmb3IgKHZhciBwcm9wIGluIERvYy5wcm90b3R5cGUpIHsgaWYgKERvYy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkocHJvcCkgJiYgaW5kZXhPZihkb250RGVsZWdhdGUsIHByb3ApIDwgMCkNCiAgICB7IENvZGVNaXJyb3IucHJvdG90eXBlW3Byb3BdID0gKGZ1bmN0aW9uKG1ldGhvZCkgew0KICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge3JldHVybiBtZXRob2QuYXBwbHkodGhpcy5kb2MsIGFyZ3VtZW50cyl9DQogICAgfSkoRG9jLnByb3RvdHlwZVtwcm9wXSk7IH0gfQ0KDQogIGV2ZW50TWl4aW4oRG9jKTsNCiAgQ29kZU1pcnJvci5pbnB1dFN0eWxlcyA9IHsidGV4dGFyZWEiOiBUZXh0YXJlYUlucHV0LCAiY29udGVudGVkaXRhYmxlIjogQ29udGVudEVkaXRhYmxlSW5wdXR9Ow0KDQogIC8vIEV4dHJhIGFyZ3VtZW50cyBhcmUgc3RvcmVkIGFzIHRoZSBtb2RlJ3MgZGVwZW5kZW5jaWVzLCB3aGljaCBpcw0KICAvLyB1c2VkIGJ5IChsZWdhY3kpIG1lY2hhbmlzbXMgbGlrZSBsb2FkbW9kZS5qcyB0byBhdXRvbWF0aWNhbGx5DQogIC8vIGxvYWQgYSBtb2RlLiAoUHJlZmVycmVkIG1lY2hhbmlzbSBpcyB0aGUgcmVxdWlyZS9kZWZpbmUgY2FsbHMuKQ0KICBDb2RlTWlycm9yLmRlZmluZU1vZGUgPSBmdW5jdGlvbihuYW1lLyosIG1vZGUsIMOi4oKswqYqLykgew0KICAgIGlmICghQ29kZU1pcnJvci5kZWZhdWx0cy5tb2RlICYmIG5hbWUgIT0gIm51bGwiKSB7IENvZGVNaXJyb3IuZGVmYXVsdHMubW9kZSA9IG5hbWU7IH0NCiAgICBkZWZpbmVNb2RlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7DQogIH07DQoNCiAgQ29kZU1pcnJvci5kZWZpbmVNSU1FID0gZGVmaW5lTUlNRTsNCg0KICAvLyBNaW5pbWFsIGRlZmF1bHQgbW9kZS4NCiAgQ29kZU1pcnJvci5kZWZpbmVNb2RlKCJudWxsIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gKHt0b2tlbjogZnVuY3Rpb24gKHN0cmVhbSkgeyByZXR1cm4gc3RyZWFtLnNraXBUb0VuZCgpOyB9fSk7IH0pOw0KICBDb2RlTWlycm9yLmRlZmluZU1JTUUoInRleHQvcGxhaW4iLCAibnVsbCIpOw0KDQogIC8vIEVYVEVOU0lPTlMNCg0KICBDb2RlTWlycm9yLmRlZmluZUV4dGVuc2lvbiA9IGZ1bmN0aW9uIChuYW1lLCBmdW5jKSB7DQogICAgQ29kZU1pcnJvci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jOw0KICB9Ow0KICBDb2RlTWlycm9yLmRlZmluZURvY0V4dGVuc2lvbiA9IGZ1bmN0aW9uIChuYW1lLCBmdW5jKSB7DQogICAgRG9jLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmM7DQogIH07DQoNCiAgQ29kZU1pcnJvci5mcm9tVGV4dEFyZWEgPSBmcm9tVGV4dEFyZWE7DQoNCiAgYWRkTGVnYWN5UHJvcHMoQ29kZU1pcnJvcik7DQoNCiAgQ29kZU1pcnJvci52ZXJzaW9uID0gIjUuNTMuMiI7DQoNCiAgcmV0dXJuIENvZGVNaXJyb3I7DQoNCn0pKSk7]]></Resource>
    <Resource ID="2a2d2448-2e13-b0bb-8a81-17014fba35bd" Name="Icon" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
			bWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdp
			bj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6
			eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0
			NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJo
			dHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlw
			dGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAv
			IiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RS
			ZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpD
			cmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNl
			SUQ9InhtcC5paWQ6MkNGM0JEMURGRDhCMTFFMTgyOTJFMzAxM0NFMjgxMDciIHhtcE1NOkRvY3Vt
			ZW50SUQ9InhtcC5kaWQ6MkNGM0JEMUVGRDhCMTFFMTgyOTJFMzAxM0NFMjgxMDciPiA8eG1wTU06
			RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDoyQ0YzQkQxQkZEOEIxMUUxODI5
			MkUzMDEzQ0UyODEwNyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDoyQ0YzQkQxQ0ZEOEIxMUUx
			ODI5MkUzMDEzQ0UyODEwNyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1w
			bWV0YT4gPD94cGFja2V0IGVuZD0iciI/PvPxTuMAAAUKSURBVHja7JpPaCNVHMd/L50k/U+73Vqa
			GC91jeBS2LQ1qbWuhe0lJw8LHjwI4kWLh6Kr0ENLCxbWdU+yelFREGFhBS/1siK4PbSFUqSIYNZA
			yV9Lu9u60abpv/F9X/omMyGbpklIpksePCbzZubl95nf+/1+7zfvMdKViYmJ5xwOxzcul+tSR0dH
			vcViIVVVRa1mYYyJenR0RJubm8lwOLwcj8ffnp2dDWj3yB8zMzM3+vv7308kEmxra4t2dnbo4ODA
			VCCKolBTUxO1t7dTc3Ozury8fHNycvKaBjI1NXWjt7f3g0gkQqlUivb39wXE4eGheAtmAMHoqKur
			EzBWq5Xq6+vJ6XTS6urqp9PT09fY+Pj48x6P54/19XW2t7dHsgLCjCCodrtdwNhsNurq6lJXVlYu
			Kq2trV/qIXZ3d2lhYYGCwaA4N1OB4D09PTQ4OKi9XMje1tb2lcLp+jGcMJRQl5aWaG1tTaiuoaHB
			VCAQHrJBGz6fT2gKbXy4ebjGLHb98InFYoIcN5mtQCbIFgqFNDAMfz7cbAoMWw+CCzkhnnUTvXLF
			2Pbfv0S3vz1ZgtffJGpqNrbd+5norz+LAoK8EgQVDIpslAaVD0L1v0YUvJ9uO9dBlNwh9neM6Ne7
			j//Xy6OkDr1K1NBI9PBBuq3nQsbvFwGTLSsYFBDJBlzMWSQEOvno3XTbW2OiTX3vQ2J5QHBdPPfT
			j0Rf30q33bkrnmVFgmTLCgaLnjKnINc/1zTBro5mLnCh2Gef5NfEnTSguO8YQpyjH96feBG8/1Js
			RgMryfp+/y0/TAVLaSAPNvLbx5kBMVGpgTxZIB5vSV6noiBsZSkdBBEAeewwuNcrfhHccpZoKB07
			4MK9L4v7tYJ+0B9cOvovQ1FOvINPQeCtEZ1FEAsGMsL1XspE+uyCQIfqfkHcp+qyOBGXYpE0RCFT
			nLKASBg+FUGUlpFaFLxRGekfp1F+XQy/F18ilVet/Yfvy+q6lYLv5H/Kivzjk2BrXqsGUgM5ZUqL
			af7xzFn/uzzGXsmU9jhdAIAhdSgJJFeaeppUVx9Ei+2jHCAqn4aI6L2b5NE6krlQYKorM0vaephJ
			dfUlvEbl+MxR+NDiEIZ4UGCqqw2XhXuGLNE8xq5LdYUxXh6tql09Me63Yl5L5ZNHlm34mICWab5V
			OffLnQNgDHYDj3XWNGJeY69NUcwGglQXWSIdfw6Nhs6I18JaiS5WGFLdAsa+ev4pYrliTeIRURny
			9sJBHE8b09wCU12tZKW6hj7KDZLrQ3apaWqhs9dT95slq6K/YJZVKu0r/tVRw2+DcWftARALPWiU
			1Uz5SD6NQlbILqsFy1aSDBppbGw0vauFjHIhFBWLuZbt7W1Vrqej9PX1mR7E6/WKI2SG7IlEQrXE
			4/F/cCKXp4eGhmhkZERslTBbgUyQbWBgQJMXssdisUfM7XZ/5/f738BuAmyPwPKvy+Wizs5OoULs
			NJC2U2lnIA0Zbx5CJ5NJ2tjYoHA4LDYzoA3Dam5u7jZzOBzPcMHvDw8P2+TGFVklRDU9mrQDOYyk
			JuSGn/n5+T0OdkFI193d/Y7T6bzl8/kYNKP3YhKgmiDyqPdS0MTi4qIajUbHuHl8oUnHYcasVutN
			PtTs2HXT0tIiNFJNiGwYeFhu2GJ3RiAQSPHzcUAIGfUPcAAnV9/H/MERXp28qc5U37sYS/FDjB9/
			4S95imsjKq/9L8AAJ/6bZaasazgAAAAASUVORK5CYII=]]></Resource>
    <Resource ID="3b92e99a-bae2-fecd-a5fc-39bcf6e535bf" Name="codemirror.js" Type="js"><![CDATA[Ly8gQ29kZU1pcnJvciB2ZXJzaW9uIDIuMjIKLy8KLy8gQWxsIGZ1bmN0aW9ucyB0aGF0IG5lZWQg
			YWNjZXNzIHRvIHRoZSBlZGl0b3IncyBzdGF0ZSBsaXZlIGluc2lkZQovLyB0aGUgQ29kZU1pcnJv
			ciBmdW5jdGlvbi4gQmVsb3cgdGhhdCwgYXQgdGhlIGJvdHRvbSBvZiB0aGUgZmlsZSwKLy8gc29t
			ZSB1dGlsaXRpZXMgYXJlIGRlZmluZWQuCgovLyBDb2RlTWlycm9yIGlzIHRoZSBvbmx5IGdsb2Jh
			bCB2YXIgd2UgY2xhaW0KdmFyIENvZGVNaXJyb3IgPSAoZnVuY3Rpb24oKSB7CiAgLy8gVGhpcyBp
			cyB0aGUgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhbiBlZGl0b3IgaW5zdGFuY2UuIEl0cwogIC8v
			IGNsb3N1cmUgaXMgdXNlZCB0byBzdG9yZSB0aGUgZWRpdG9yIHN0YXRlLgogIGZ1bmN0aW9uIENv
			ZGVNaXJyb3IocGxhY2UsIGdpdmVuT3B0aW9ucykgewogICAgLy8gRGV0ZXJtaW5lIGVmZmVjdGl2
			ZSBvcHRpb25zIGJhc2VkIG9uIGdpdmVuIHZhbHVlcyBhbmQgZGVmYXVsdHMuCiAgICB2YXIgb3B0
			aW9ucyA9IHt9LCBkZWZhdWx0cyA9IENvZGVNaXJyb3IuZGVmYXVsdHM7CiAgICBmb3IgKHZhciBv
			cHQgaW4gZGVmYXVsdHMpCiAgICAgIGlmIChkZWZhdWx0cy5oYXNPd25Qcm9wZXJ0eShvcHQpKQog
			ICAgICAgIG9wdGlvbnNbb3B0XSA9IChnaXZlbk9wdGlvbnMgJiYgZ2l2ZW5PcHRpb25zLmhhc093
			blByb3BlcnR5KG9wdCkgPyBnaXZlbk9wdGlvbnMgOiBkZWZhdWx0cylbb3B0XTsKCiAgICB2YXIg
			dGFyZ2V0RG9jdW1lbnQgPSBvcHRpb25zWyJkb2N1bWVudCJdOwogICAgLy8gVGhlIGVsZW1lbnQg
			aW4gd2hpY2ggdGhlIGVkaXRvciBsaXZlcy4KICAgIHZhciB3cmFwcGVyID0gdGFyZ2V0RG9jdW1l
			bnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICB3cmFwcGVyLmNsYXNzTmFtZSA9ICJDb2RlTWly
			cm9yIiArIChvcHRpb25zLmxpbmVXcmFwcGluZyA/ICIgQ29kZU1pcnJvci13cmFwIiA6ICIiKTsK
			ICAgIC8vIFRoaXMgbWVzcyBjcmVhdGVzIHRoZSBiYXNlIERPTSBzdHJ1Y3R1cmUgZm9yIHRoZSBl
			ZGl0b3IuCiAgICB3cmFwcGVyLmlubmVySFRNTCA9CiAgICAgICc8ZGl2IHN0eWxlPSJvdmVyZmxv
			dzogaGlkZGVuOyBwb3NpdGlvbjogcmVsYXRpdmU7IHdpZHRoOiAzcHg7IGhlaWdodDogMHB4OyI+
			JyArIC8vIFdyYXBzIGFuZCBoaWRlcyBpbnB1dCB0ZXh0YXJlYQogICAgICAgICc8dGV4dGFyZWEg
			c3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgcGFkZGluZzogMDsgd2lkdGg6IDFweDsgaGVpZ2h0
			OiAxZW0iIHdyYXA9Im9mZiIgJyArCiAgICAgICAgICAnYXV0b2NvcnJlY3Q9Im9mZiIgYXV0b2Nh
			cGl0YWxpemU9Im9mZiI+PC90ZXh0YXJlYT48L2Rpdj4nICsKICAgICAgJzxkaXYgY2xhc3M9IkNv
			ZGVNaXJyb3Itc2Nyb2xsIiB0YWJpbmRleD0iLTEiPicgKwogICAgICAgICc8ZGl2IHN0eWxlPSJw
			b3NpdGlvbjogcmVsYXRpdmUiPicgKyAvLyBTZXQgdG8gdGhlIGhlaWdodCBvZiB0aGUgdGV4dCwg
			Y2F1c2VzIHNjcm9sbGluZwogICAgICAgICAgJzxkaXYgc3R5bGU9InBvc2l0aW9uOiByZWxhdGl2
			ZSI+JyArIC8vIE1vdmVkIGFyb3VuZCBpdHMgcGFyZW50IHRvIGNvdmVyIHZpc2libGUgdmlldwog
			ICAgICAgICAgICAnPGRpdiBjbGFzcz0iQ29kZU1pcnJvci1ndXR0ZXIiPjxkaXYgY2xhc3M9IkNv
			ZGVNaXJyb3ItZ3V0dGVyLXRleHQiPjwvZGl2PjwvZGl2PicgKwogICAgICAgICAgICAvLyBQcm92
			aWRlcyBwb3NpdGlvbmluZyByZWxhdGl2ZSB0byAodmlzaWJsZSkgdGV4dCBvcmlnaW4KICAgICAg
			ICAgICAgJzxkaXYgY2xhc3M9IkNvZGVNaXJyb3ItbGluZXMiPjxkaXYgc3R5bGU9InBvc2l0aW9u
			OiByZWxhdGl2ZTsgei1pbmRleDogMCI+JyArCiAgICAgICAgICAgICAgJzxkaXYgc3R5bGU9InBv
			c2l0aW9uOiBhYnNvbHV0ZTsgd2lkdGg6IDEwMCU7IGhlaWdodDogMDsgb3ZlcmZsb3c6IGhpZGRl
			bjsgdmlzaWJpbGl0eTogaGlkZGVuOyI+PC9kaXY+JyArCiAgICAgICAgICAgICAgJzxwcmUgY2xh
			c3M9IkNvZGVNaXJyb3ItY3Vyc29yIj4mIzE2MDs8L3ByZT4nICsgLy8gQWJzb2x1dGVseSBwb3Np
			dGlvbmVkIGJsaW5reSBjdXJzb3IKICAgICAgICAgICAgICAnPGRpdiBzdHlsZT0icG9zaXRpb246
			IHJlbGF0aXZlOyB6LWluZGV4OiAtMSI+PC9kaXY+PGRpdj48L2Rpdj4nICsgLy8gRElWcyBjb250
			YWluaW5nIHRoZSBzZWxlY3Rpb24gYW5kIHRoZSBhY3R1YWwgY29kZQogICAgICAgICAgICAnPC9k
			aXY+PC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+JzsKICAgIGlmIChwbGFjZS5hcHBlbmRDaGlsZCkg
			cGxhY2UuYXBwZW5kQ2hpbGQod3JhcHBlcik7IGVsc2UgcGxhY2Uod3JhcHBlcik7CiAgICAvLyBJ
			J3ZlIG5ldmVyIHNlZW4gbW9yZSBlbGVnYW50IGNvZGUgaW4gbXkgbGlmZS4KICAgIHZhciBpbnB1
			dERpdiA9IHdyYXBwZXIuZmlyc3RDaGlsZCwgaW5wdXQgPSBpbnB1dERpdi5maXJzdENoaWxkLAog
			ICAgICAgIHNjcm9sbGVyID0gd3JhcHBlci5sYXN0Q2hpbGQsIGNvZGUgPSBzY3JvbGxlci5maXJz
			dENoaWxkLAogICAgICAgIG1vdmVyID0gY29kZS5maXJzdENoaWxkLCBndXR0ZXIgPSBtb3Zlci5m
			aXJzdENoaWxkLCBndXR0ZXJUZXh0ID0gZ3V0dGVyLmZpcnN0Q2hpbGQsCiAgICAgICAgbGluZVNw
			YWNlID0gZ3V0dGVyLm5leHRTaWJsaW5nLmZpcnN0Q2hpbGQsIG1lYXN1cmUgPSBsaW5lU3BhY2Uu
			Zmlyc3RDaGlsZCwKICAgICAgICBjdXJzb3IgPSBtZWFzdXJlLm5leHRTaWJsaW5nLCBzZWxlY3Rp
			b25EaXYgPSBjdXJzb3IubmV4dFNpYmxpbmcsCiAgICAgICAgbGluZURpdiA9IHNlbGVjdGlvbkRp
			di5uZXh0U2libGluZzsKICAgIHRoZW1lQ2hhbmdlZCgpOwogICAgLy8gTmVlZGVkIHRvIGhpZGUg
			YmlnIGJsdWUgYmxpbmtpbmcgY3Vyc29yIG9uIE1vYmlsZSBTYWZhcmkKICAgIGlmIChpb3MpIGlu
			cHV0LnN0eWxlLndpZHRoID0gIjBweCI7CiAgICBpZiAoIXdlYmtpdCkgbGluZVNwYWNlLmRyYWdn
			YWJsZSA9IHRydWU7CiAgICBsaW5lU3BhY2Uuc3R5bGUub3V0bGluZSA9ICJub25lIjsKICAgIGlm
			IChvcHRpb25zLnRhYmluZGV4ICE9IG51bGwpIGlucHV0LnRhYkluZGV4ID0gb3B0aW9ucy50YWJp
			bmRleDsKICAgIGlmICghb3B0aW9ucy5ndXR0ZXIgJiYgIW9wdGlvbnMubGluZU51bWJlcnMpIGd1
			dHRlci5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwoKICAgIC8vIENoZWNrIGZvciBwcm9ibGVtIHdp
			dGggSUUgaW5uZXJIVE1MIG5vdCB3b3JraW5nIHdoZW4gd2UgaGF2ZSBhCiAgICAvLyBQIChvciBz
			aW1pbGFyKSBwYXJlbnQgbm9kZS4KICAgIHRyeSB7IHN0cmluZ1dpZHRoKCJ4Iik7IH0KICAgIGNh
			dGNoIChlKSB7CiAgICAgIGlmIChlLm1lc3NhZ2UubWF0Y2goL3J1bnRpbWUvaSkpCiAgICAgICAg
			ZSA9IG5ldyBFcnJvcigiQSBDb2RlTWlycm9yIGluc2lkZSBhIFAtc3R5bGUgZWxlbWVudCBkb2Vz
			IG5vdCB3b3JrIGluIEludGVybmV0IEV4cGxvcmVyLiAoaW5uZXJIVE1MIGJ1ZykiKTsKICAgICAg
			dGhyb3cgZTsKICAgIH0KCiAgICAvLyBEZWxheWVkIG9iamVjdCB3cmFwIHRpbWVvdXRzLCBtYWtp
			bmcgc3VyZSBvbmx5IG9uZSBpcyBhY3RpdmUuIGJsaW5rZXIgaG9sZHMgYW4gaW50ZXJ2YWwuCiAg
			ICB2YXIgcG9sbCA9IG5ldyBEZWxheWVkKCksIGhpZ2hsaWdodCA9IG5ldyBEZWxheWVkKCksIGJs
			aW5rZXI7CgogICAgLy8gbW9kZSBob2xkcyBhIG1vZGUgQVBJIG9iamVjdC4gZG9jIGlzIHRoZSB0
			cmVlIG9mIExpbmUgb2JqZWN0cywKICAgIC8vIHdvcmsgYW4gYXJyYXkgb2YgbGluZXMgdGhhdCBz
			aG91bGQgYmUgcGFyc2VkLCBhbmQgaGlzdG9yeSB0aGUKICAgIC8vIHVuZG8gaGlzdG9yeSAoaW5z
			dGFuY2Ugb2YgSGlzdG9yeSBjb25zdHJ1Y3RvcikuCiAgICB2YXIgbW9kZSwgZG9jID0gbmV3IEJy
			YW5jaENodW5rKFtuZXcgTGVhZkNodW5rKFtuZXcgTGluZSgiIildKV0pLCB3b3JrLCBmb2N1c2Vk
			OwogICAgbG9hZE1vZGUoKTsKICAgIC8vIFRoZSBzZWxlY3Rpb24uIFRoZXNlIGFyZSBhbHdheXMg
			bWFpbnRhaW5lZCB0byBwb2ludCBhdCB2YWxpZAogICAgLy8gcG9zaXRpb25zLiBJbnZlcnRlZCBp
			cyB1c2VkIHRvIHJlbWVtYmVyIHRoYXQgdGhlIHVzZXIgaXMKICAgIC8vIHNlbGVjdGluZyBib3R0
			b20tdG8tdG9wLgogICAgdmFyIHNlbCA9IHtmcm9tOiB7bGluZTogMCwgY2g6IDB9LCB0bzoge2xp
			bmU6IDAsIGNoOiAwfSwgaW52ZXJ0ZWQ6IGZhbHNlfTsKICAgIC8vIFNlbGVjdGlvbi1yZWxhdGVk
			IGZsYWdzLiBzaGlmdFNlbGVjdGluZyBvYnZpb3VzbHkgdHJhY2tzCiAgICAvLyB3aGV0aGVyIHRo
			ZSB1c2VyIGlzIGhvbGRpbmcgc2hpZnQuCiAgICB2YXIgc2hpZnRTZWxlY3RpbmcsIGxhc3RDbGlj
			aywgbGFzdERvdWJsZUNsaWNrLCBsYXN0U2Nyb2xsUG9zID0gMCwgZHJhZ2dpbmdUZXh0LAogICAg
			ICAgIG92ZXJ3cml0ZSA9IGZhbHNlLCBzdXBwcmVzc0VkaXRzID0gZmFsc2U7CiAgICAvLyBWYXJp
			YWJsZXMgdXNlZCBieSBzdGFydE9wZXJhdGlvbi9lbmRPcGVyYXRpb24gdG8gdHJhY2sgd2hhdAog
			ICAgLy8gaGFwcGVuZWQgZHVyaW5nIHRoZSBvcGVyYXRpb24uCiAgICB2YXIgdXBkYXRlSW5wdXQs
			IHVzZXJTZWxDaGFuZ2UsIGNoYW5nZXMsIHRleHRDaGFuZ2VkLCBzZWxlY3Rpb25DaGFuZ2VkLCBs
			ZWF2ZUlucHV0QWxvbmUsCiAgICAgICAgZ3V0dGVyRGlydHksIGNhbGxiYWNrczsKICAgIC8vIEN1
			cnJlbnQgdmlzaWJsZSByYW5nZSAobWF5IGJlIGJpZ2dlciB0aGFuIHRoZSB2aWV3IHdpbmRvdyku
			CiAgICB2YXIgZGlzcGxheU9mZnNldCA9IDAsIHNob3dpbmdGcm9tID0gMCwgc2hvd2luZ1RvID0g
			MCwgbGFzdFNpemVDID0gMDsKICAgIC8vIGJyYWNrZXRIaWdobGlnaHRlZCBpcyB1c2VkIHRvIHJl
			bWVtYmVyIHRoYXQgYSBiYWNrZXQgaGFzIGJlZW4KICAgIC8vIG1hcmtlZC4KICAgIHZhciBicmFj
			a2V0SGlnaGxpZ2h0ZWQ7CiAgICAvLyBUcmFja3MgdGhlIG1heGltdW0gbGluZSBsZW5ndGggc28g
			dGhhdCB0aGUgaG9yaXpvbnRhbCBzY3JvbGxiYXIKICAgIC8vIGNhbiBiZSBrZXB0IHN0YXRpYyB3
			aGVuIHNjcm9sbGluZy4KICAgIHZhciBtYXhMaW5lID0gIiIsIG1heFdpZHRoOwoKICAgIC8vIElu
			aXRpYWxpemUgdGhlIGNvbnRlbnQuCiAgICBvcGVyYXRpb24oZnVuY3Rpb24oKXtzZXRWYWx1ZShv
			cHRpb25zLnZhbHVlIHx8ICIiKTsgdXBkYXRlSW5wdXQgPSBmYWxzZTt9KSgpOwogICAgdmFyIGhp
			c3RvcnkgPSBuZXcgSGlzdG9yeSgpOwoKICAgIC8vIFJlZ2lzdGVyIG91ciBldmVudCBoYW5kbGVy
			cy4KICAgIGNvbm5lY3Qoc2Nyb2xsZXIsICJtb3VzZWRvd24iLCBvcGVyYXRpb24ob25Nb3VzZURv
			d24pKTsKICAgIGNvbm5lY3Qoc2Nyb2xsZXIsICJkYmxjbGljayIsIG9wZXJhdGlvbihvbkRvdWJs
			ZUNsaWNrKSk7CiAgICBjb25uZWN0KGxpbmVTcGFjZSwgImRyYWdzdGFydCIsIG9uRHJhZ1N0YXJ0
			KTsKICAgIGNvbm5lY3QobGluZVNwYWNlLCAic2VsZWN0c3RhcnQiLCBlX3ByZXZlbnREZWZhdWx0
			KTsKICAgIC8vIEdlY2tvIGJyb3dzZXJzIGZpcmUgY29udGV4dG1lbnUgKmFmdGVyKiBvcGVuaW5n
			IHRoZSBtZW51LCBhdAogICAgLy8gd2hpY2ggcG9pbnQgd2UgY2FuJ3QgbWVzcyB3aXRoIGl0IGFu
			eW1vcmUuIENvbnRleHQgbWVudSBpcwogICAgLy8gaGFuZGxlZCBpbiBvbk1vdXNlRG93biBmb3Ig
			R2Vja28uCiAgICBpZiAoIWdlY2tvKSBjb25uZWN0KHNjcm9sbGVyLCAiY29udGV4dG1lbnUiLCBv
			bkNvbnRleHRNZW51KTsKICAgIGNvbm5lY3Qoc2Nyb2xsZXIsICJzY3JvbGwiLCBmdW5jdGlvbigp
			IHsKICAgICAgbGFzdFNjcm9sbFBvcyA9IHNjcm9sbGVyLnNjcm9sbFRvcDsKICAgICAgdXBkYXRl
			RGlzcGxheShbXSk7CiAgICAgIGlmIChvcHRpb25zLmZpeGVkR3V0dGVyKSBndXR0ZXIuc3R5bGUu
			bGVmdCA9IHNjcm9sbGVyLnNjcm9sbExlZnQgKyAicHgiOwogICAgICBpZiAob3B0aW9ucy5vblNj
			cm9sbCkgb3B0aW9ucy5vblNjcm9sbChpbnN0YW5jZSk7CiAgICB9KTsKICAgIGNvbm5lY3Qod2lu
			ZG93LCAicmVzaXplIiwgZnVuY3Rpb24oKSB7dXBkYXRlRGlzcGxheSh0cnVlKTt9KTsKICAgIGNv
			bm5lY3QoaW5wdXQsICJrZXl1cCIsIG9wZXJhdGlvbihvbktleVVwKSk7CiAgICBjb25uZWN0KGlu
			cHV0LCAiaW5wdXQiLCBmYXN0UG9sbCk7CiAgICBjb25uZWN0KGlucHV0LCAia2V5ZG93biIsIG9w
			ZXJhdGlvbihvbktleURvd24pKTsKICAgIGNvbm5lY3QoaW5wdXQsICJrZXlwcmVzcyIsIG9wZXJh
			dGlvbihvbktleVByZXNzKSk7CiAgICBjb25uZWN0KGlucHV0LCAiZm9jdXMiLCBvbkZvY3VzKTsK
			ICAgIGNvbm5lY3QoaW5wdXQsICJibHVyIiwgb25CbHVyKTsKCiAgICBjb25uZWN0KHNjcm9sbGVy
			LCAiZHJhZ2VudGVyIiwgZV9zdG9wKTsKICAgIGNvbm5lY3Qoc2Nyb2xsZXIsICJkcmFnb3ZlciIs
			IGVfc3RvcCk7CiAgICBjb25uZWN0KHNjcm9sbGVyLCAiZHJvcCIsIG9wZXJhdGlvbihvbkRyb3Ap
			KTsKICAgIGNvbm5lY3Qoc2Nyb2xsZXIsICJwYXN0ZSIsIGZ1bmN0aW9uKCl7Zm9jdXNJbnB1dCgp
			OyBmYXN0UG9sbCgpO30pOwogICAgY29ubmVjdChpbnB1dCwgInBhc3RlIiwgZmFzdFBvbGwpOwog
			ICAgY29ubmVjdChpbnB1dCwgImN1dCIsIG9wZXJhdGlvbihmdW5jdGlvbigpewogICAgICBpZiAo
			IW9wdGlvbnMucmVhZE9ubHkpIHJlcGxhY2VTZWxlY3Rpb24oIiIpOwogICAgfSkpOwoKICAgIC8v
			IElFIHRocm93cyB1bnNwZWNpZmllZCBlcnJvciBpbiBjZXJ0YWluIGNhc2VzLCB3aGVuCiAgICAv
			LyB0cnlpbmcgdG8gYWNjZXNzIGFjdGl2ZUVsZW1lbnQgYmVmb3JlIG9ubG9hZAogICAgdmFyIGhh
			c0ZvY3VzOyB0cnkgeyBoYXNGb2N1cyA9ICh0YXJnZXREb2N1bWVudC5hY3RpdmVFbGVtZW50ID09
			IGlucHV0KTsgfSBjYXRjaChlKSB7IH0KICAgIGlmIChoYXNGb2N1cykgc2V0VGltZW91dChvbkZv
			Y3VzLCAyMCk7CiAgICBlbHNlIG9uQmx1cigpOwoKICAgIGZ1bmN0aW9uIGlzTGluZShsKSB7cmV0
			dXJuIGwgPj0gMCAmJiBsIDwgZG9jLnNpemU7fQogICAgLy8gVGhlIGluc3RhbmNlIG9iamVjdCB0
			aGF0IHdlJ2xsIHJldHVybi4gTW9zdGx5IGNhbGxzIG91dCB0bwogICAgLy8gbG9jYWwgZnVuY3Rp
			b25zIGluIHRoZSBDb2RlTWlycm9yIGZ1bmN0aW9uLiBTb21lIGRvIHNvbWUgZXh0cmEKICAgIC8v
			IHJhbmdlIGNoZWNraW5nIGFuZC9vciBjbGlwcGluZy4gb3BlcmF0aW9uIGlzIHVzZWQgdG8gd3Jh
			cCB0aGUKICAgIC8vIGNhbGwgc28gdGhhdCBjaGFuZ2VzIGl0IG1ha2VzIGFyZSB0cmFja2VkLCBh
			bmQgdGhlIGRpc3BsYXkgaXMKICAgIC8vIHVwZGF0ZWQgYWZ0ZXJ3YXJkcy4KICAgIHZhciBpbnN0
			YW5jZSA9IHdyYXBwZXIuQ29kZU1pcnJvciA9IHsKICAgICAgZ2V0VmFsdWU6IGdldFZhbHVlLAog
			ICAgICBzZXRWYWx1ZTogb3BlcmF0aW9uKHNldFZhbHVlKSwKICAgICAgZ2V0U2VsZWN0aW9uOiBn
			ZXRTZWxlY3Rpb24sCiAgICAgIHJlcGxhY2VTZWxlY3Rpb246IG9wZXJhdGlvbihyZXBsYWNlU2Vs
			ZWN0aW9uKSwKICAgICAgZm9jdXM6IGZ1bmN0aW9uKCl7d2luZG93LmZvY3VzKCk7IGZvY3VzSW5w
			dXQoKTsgb25Gb2N1cygpOyBmYXN0UG9sbCgpO30sCiAgICAgIHNldE9wdGlvbjogZnVuY3Rpb24o
			b3B0aW9uLCB2YWx1ZSkgewogICAgICAgIHZhciBvbGRWYWwgPSBvcHRpb25zW29wdGlvbl07CiAg
			ICAgICAgb3B0aW9uc1tvcHRpb25dID0gdmFsdWU7CiAgICAgICAgaWYgKG9wdGlvbiA9PSAibW9k
			ZSIgfHwgb3B0aW9uID09ICJpbmRlbnRVbml0IikgbG9hZE1vZGUoKTsKICAgICAgICBlbHNlIGlm
			IChvcHRpb24gPT0gInJlYWRPbmx5IiAmJiB2YWx1ZSA9PSAibm9jdXJzb3IiKSB7b25CbHVyKCk7
			IGlucHV0LmJsdXIoKTt9CiAgICAgICAgZWxzZSBpZiAob3B0aW9uID09ICJyZWFkT25seSIgJiYg
			IXZhbHVlKSB7cmVzZXRJbnB1dCh0cnVlKTt9CiAgICAgICAgZWxzZSBpZiAob3B0aW9uID09ICJ0
			aGVtZSIpIHRoZW1lQ2hhbmdlZCgpOwogICAgICAgIGVsc2UgaWYgKG9wdGlvbiA9PSAibGluZVdy
			YXBwaW5nIiAmJiBvbGRWYWwgIT0gdmFsdWUpIG9wZXJhdGlvbih3cmFwcGluZ0NoYW5nZWQpKCk7
			CiAgICAgICAgZWxzZSBpZiAob3B0aW9uID09ICJ0YWJTaXplIikgdXBkYXRlRGlzcGxheSh0cnVl
			KTsKICAgICAgICBpZiAob3B0aW9uID09ICJsaW5lTnVtYmVycyIgfHwgb3B0aW9uID09ICJndXR0
			ZXIiIHx8IG9wdGlvbiA9PSAiZmlyc3RMaW5lTnVtYmVyIiB8fCBvcHRpb24gPT0gInRoZW1lIikg
			ewogICAgICAgICAgZ3V0dGVyQ2hhbmdlZCgpOwogICAgICAgICAgdXBkYXRlRGlzcGxheSh0cnVl
			KTsKICAgICAgICB9CiAgICAgIH0sCiAgICAgIGdldE9wdGlvbjogZnVuY3Rpb24ob3B0aW9uKSB7
			cmV0dXJuIG9wdGlvbnNbb3B0aW9uXTt9LAogICAgICB1bmRvOiBvcGVyYXRpb24odW5kbyksCiAg
			ICAgIHJlZG86IG9wZXJhdGlvbihyZWRvKSwKICAgICAgaW5kZW50TGluZTogb3BlcmF0aW9uKGZ1
			bmN0aW9uKG4sIGRpcikgewogICAgICAgIGlmICh0eXBlb2YgZGlyICE9ICJzdHJpbmciKSB7CiAg
			ICAgICAgICBpZiAoZGlyID09IG51bGwpIGRpciA9IG9wdGlvbnMuc21hcnRJbmRlbnQgPyAic21h
			cnQiIDogInByZXYiOwogICAgICAgICAgZWxzZSBkaXIgPSBkaXIgPyAiYWRkIiA6ICJzdWJ0cmFj
			dCI7CiAgICAgICAgfQogICAgICAgIGlmIChpc0xpbmUobikpIGluZGVudExpbmUobiwgZGlyKTsK
			ICAgICAgfSksCiAgICAgIGluZGVudFNlbGVjdGlvbjogb3BlcmF0aW9uKGluZGVudFNlbGVjdGVk
			KSwKICAgICAgaGlzdG9yeVNpemU6IGZ1bmN0aW9uKCkge3JldHVybiB7dW5kbzogaGlzdG9yeS5k
			b25lLmxlbmd0aCwgcmVkbzogaGlzdG9yeS51bmRvbmUubGVuZ3RofTt9LAogICAgICBjbGVhckhp
			c3Rvcnk6IGZ1bmN0aW9uKCkge2hpc3RvcnkgPSBuZXcgSGlzdG9yeSgpO30sCiAgICAgIG1hdGNo
			QnJhY2tldHM6IG9wZXJhdGlvbihmdW5jdGlvbigpe21hdGNoQnJhY2tldHModHJ1ZSk7fSksCiAg
			ICAgIGdldFRva2VuQXQ6IG9wZXJhdGlvbihmdW5jdGlvbihwb3MpIHsKICAgICAgICBwb3MgPSBj
			bGlwUG9zKHBvcyk7CiAgICAgICAgcmV0dXJuIGdldExpbmUocG9zLmxpbmUpLmdldFRva2VuQXQo
			bW9kZSwgZ2V0U3RhdGVCZWZvcmUocG9zLmxpbmUpLCBwb3MuY2gpOwogICAgICB9KSwKICAgICAg
			Z2V0U3RhdGVBZnRlcjogZnVuY3Rpb24obGluZSkgewogICAgICAgIGxpbmUgPSBjbGlwTGluZShs
			aW5lID09IG51bGwgPyBkb2Muc2l6ZSAtIDE6IGxpbmUpOwogICAgICAgIHJldHVybiBnZXRTdGF0
			ZUJlZm9yZShsaW5lICsgMSk7CiAgICAgIH0sCiAgICAgIGN1cnNvckNvb3JkczogZnVuY3Rpb24o
			c3RhcnQpewogICAgICAgIGlmIChzdGFydCA9PSBudWxsKSBzdGFydCA9IHNlbC5pbnZlcnRlZDsK
			ICAgICAgICByZXR1cm4gcGFnZUNvb3JkcyhzdGFydCA/IHNlbC5mcm9tIDogc2VsLnRvKTsKICAg
			ICAgfSwKICAgICAgY2hhckNvb3JkczogZnVuY3Rpb24ocG9zKXtyZXR1cm4gcGFnZUNvb3Jkcyhj
			bGlwUG9zKHBvcykpO30sCiAgICAgIGNvb3Jkc0NoYXI6IGZ1bmN0aW9uKGNvb3JkcykgewogICAg
			ICAgIHZhciBvZmYgPSBlbHRPZmZzZXQobGluZVNwYWNlKTsKICAgICAgICByZXR1cm4gY29vcmRz
			Q2hhcihjb29yZHMueCAtIG9mZi5sZWZ0LCBjb29yZHMueSAtIG9mZi50b3ApOwogICAgICB9LAog
			ICAgICBtYXJrVGV4dDogb3BlcmF0aW9uKG1hcmtUZXh0KSwKICAgICAgc2V0Qm9va21hcms6IHNl
			dEJvb2ttYXJrLAogICAgICBzZXRNYXJrZXI6IG9wZXJhdGlvbihhZGRHdXR0ZXJNYXJrZXIpLAog
			ICAgICBjbGVhck1hcmtlcjogb3BlcmF0aW9uKHJlbW92ZUd1dHRlck1hcmtlciksCiAgICAgIHNl
			dExpbmVDbGFzczogb3BlcmF0aW9uKHNldExpbmVDbGFzcyksCiAgICAgIGhpZGVMaW5lOiBvcGVy
			YXRpb24oZnVuY3Rpb24oaCkge3JldHVybiBzZXRMaW5lSGlkZGVuKGgsIHRydWUpO30pLAogICAg
			ICBzaG93TGluZTogb3BlcmF0aW9uKGZ1bmN0aW9uKGgpIHtyZXR1cm4gc2V0TGluZUhpZGRlbiho
			LCBmYWxzZSk7fSksCiAgICAgIG9uRGVsZXRlTGluZTogZnVuY3Rpb24obGluZSwgZikgewogICAg
			ICAgIGlmICh0eXBlb2YgbGluZSA9PSAibnVtYmVyIikgewogICAgICAgICAgaWYgKCFpc0xpbmUo
			bGluZSkpIHJldHVybiBudWxsOwogICAgICAgICAgbGluZSA9IGdldExpbmUobGluZSk7CiAgICAg
			ICAgfQogICAgICAgIChsaW5lLmhhbmRsZXJzIHx8IChsaW5lLmhhbmRsZXJzID0gW10pKS5wdXNo
			KGYpOwogICAgICAgIHJldHVybiBsaW5lOwogICAgICB9LAogICAgICBsaW5lSW5mbzogbGluZUlu
			Zm8sCiAgICAgIGFkZFdpZGdldDogZnVuY3Rpb24ocG9zLCBub2RlLCBzY3JvbGwsIHZlcnQsIGhv
			cml6KSB7CiAgICAgICAgcG9zID0gbG9jYWxDb29yZHMoY2xpcFBvcyhwb3MpKTsKICAgICAgICB2
			YXIgdG9wID0gcG9zLnlCb3QsIGxlZnQgPSBwb3MueDsKICAgICAgICBub2RlLnN0eWxlLnBvc2l0
			aW9uID0gImFic29sdXRlIjsKICAgICAgICBjb2RlLmFwcGVuZENoaWxkKG5vZGUpOwogICAgICAg
			IGlmICh2ZXJ0ID09ICJvdmVyIikgdG9wID0gcG9zLnk7CiAgICAgICAgZWxzZSBpZiAodmVydCA9
			PSAibmVhciIpIHsKICAgICAgICAgIHZhciB2c3BhY2UgPSBNYXRoLm1heChzY3JvbGxlci5vZmZz
			ZXRIZWlnaHQsIGRvYy5oZWlnaHQgKiB0ZXh0SGVpZ2h0KCkpLAogICAgICAgICAgICAgIGhzcGFj
			ZSA9IE1hdGgubWF4KGNvZGUuY2xpZW50V2lkdGgsIGxpbmVTcGFjZS5jbGllbnRXaWR0aCkgLSBw
			YWRkaW5nTGVmdCgpOwogICAgICAgICAgaWYgKHBvcy55Qm90ICsgbm9kZS5vZmZzZXRIZWlnaHQg
			PiB2c3BhY2UgJiYgcG9zLnkgPiBub2RlLm9mZnNldEhlaWdodCkKICAgICAgICAgICAgdG9wID0g
			cG9zLnkgLSBub2RlLm9mZnNldEhlaWdodDsKICAgICAgICAgIGlmIChsZWZ0ICsgbm9kZS5vZmZz
			ZXRXaWR0aCA+IGhzcGFjZSkKICAgICAgICAgICAgbGVmdCA9IGhzcGFjZSAtIG5vZGUub2Zmc2V0
			V2lkdGg7CiAgICAgICAgfQogICAgICAgIG5vZGUuc3R5bGUudG9wID0gKHRvcCArIHBhZGRpbmdU
			b3AoKSkgKyAicHgiOwogICAgICAgIG5vZGUuc3R5bGUubGVmdCA9IG5vZGUuc3R5bGUucmlnaHQg
			PSAiIjsKICAgICAgICBpZiAoaG9yaXogPT0gInJpZ2h0IikgewogICAgICAgICAgbGVmdCA9IGNv
			ZGUuY2xpZW50V2lkdGggLSBub2RlLm9mZnNldFdpZHRoOwogICAgICAgICAgbm9kZS5zdHlsZS5y
			aWdodCA9ICIwcHgiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoaG9yaXogPT0gImxl
			ZnQiKSBsZWZ0ID0gMDsKICAgICAgICAgIGVsc2UgaWYgKGhvcml6ID09ICJtaWRkbGUiKSBsZWZ0
			ID0gKGNvZGUuY2xpZW50V2lkdGggLSBub2RlLm9mZnNldFdpZHRoKSAvIDI7CiAgICAgICAgICBu
			b2RlLnN0eWxlLmxlZnQgPSAobGVmdCArIHBhZGRpbmdMZWZ0KCkpICsgInB4IjsKICAgICAgICB9
			CiAgICAgICAgaWYgKHNjcm9sbCkKICAgICAgICAgIHNjcm9sbEludG9WaWV3KGxlZnQsIHRvcCwg
			bGVmdCArIG5vZGUub2Zmc2V0V2lkdGgsIHRvcCArIG5vZGUub2Zmc2V0SGVpZ2h0KTsKICAgICAg
			fSwKCiAgICAgIGxpbmVDb3VudDogZnVuY3Rpb24oKSB7cmV0dXJuIGRvYy5zaXplO30sCiAgICAg
			IGNsaXBQb3M6IGNsaXBQb3MsCiAgICAgIGdldEN1cnNvcjogZnVuY3Rpb24oc3RhcnQpIHsKICAg
			ICAgICBpZiAoc3RhcnQgPT0gbnVsbCkgc3RhcnQgPSBzZWwuaW52ZXJ0ZWQ7CiAgICAgICAgcmV0
			dXJuIGNvcHlQb3Moc3RhcnQgPyBzZWwuZnJvbSA6IHNlbC50byk7CiAgICAgIH0sCiAgICAgIHNv
			bWV0aGluZ1NlbGVjdGVkOiBmdW5jdGlvbigpIHtyZXR1cm4gIXBvc0VxKHNlbC5mcm9tLCBzZWwu
			dG8pO30sCiAgICAgIHNldEN1cnNvcjogb3BlcmF0aW9uKGZ1bmN0aW9uKGxpbmUsIGNoLCB1c2Vy
			KSB7CiAgICAgICAgaWYgKGNoID09IG51bGwgJiYgdHlwZW9mIGxpbmUubGluZSA9PSAibnVtYmVy
			Iikgc2V0Q3Vyc29yKGxpbmUubGluZSwgbGluZS5jaCwgdXNlcik7CiAgICAgICAgZWxzZSBzZXRD
			dXJzb3IobGluZSwgY2gsIHVzZXIpOwogICAgICB9KSwKICAgICAgc2V0U2VsZWN0aW9uOiBvcGVy
			YXRpb24oZnVuY3Rpb24oZnJvbSwgdG8sIHVzZXIpIHsKICAgICAgICAodXNlciA/IHNldFNlbGVj
			dGlvblVzZXIgOiBzZXRTZWxlY3Rpb24pKGNsaXBQb3MoZnJvbSksIGNsaXBQb3ModG8gfHwgZnJv
			bSkpOwogICAgICB9KSwKICAgICAgZ2V0TGluZTogZnVuY3Rpb24obGluZSkge2lmIChpc0xpbmUo
			bGluZSkpIHJldHVybiBnZXRMaW5lKGxpbmUpLnRleHQ7fSwKICAgICAgZ2V0TGluZUhhbmRsZTog
			ZnVuY3Rpb24obGluZSkge2lmIChpc0xpbmUobGluZSkpIHJldHVybiBnZXRMaW5lKGxpbmUpO30s
			CiAgICAgIHNldExpbmU6IG9wZXJhdGlvbihmdW5jdGlvbihsaW5lLCB0ZXh0KSB7CiAgICAgICAg
			aWYgKGlzTGluZShsaW5lKSkgcmVwbGFjZVJhbmdlKHRleHQsIHtsaW5lOiBsaW5lLCBjaDogMH0s
			IHtsaW5lOiBsaW5lLCBjaDogZ2V0TGluZShsaW5lKS50ZXh0Lmxlbmd0aH0pOwogICAgICB9KSwK
			ICAgICAgcmVtb3ZlTGluZTogb3BlcmF0aW9uKGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICBpZiAo
			aXNMaW5lKGxpbmUpKSByZXBsYWNlUmFuZ2UoIiIsIHtsaW5lOiBsaW5lLCBjaDogMH0sIGNsaXBQ
			b3Moe2xpbmU6IGxpbmUrMSwgY2g6IDB9KSk7CiAgICAgIH0pLAogICAgICByZXBsYWNlUmFuZ2U6
			IG9wZXJhdGlvbihyZXBsYWNlUmFuZ2UpLAogICAgICBnZXRSYW5nZTogZnVuY3Rpb24oZnJvbSwg
			dG8pIHtyZXR1cm4gZ2V0UmFuZ2UoY2xpcFBvcyhmcm9tKSwgY2xpcFBvcyh0bykpO30sCgogICAg
			ICBleGVjQ29tbWFuZDogZnVuY3Rpb24oY21kKSB7cmV0dXJuIGNvbW1hbmRzW2NtZF0oaW5zdGFu
			Y2UpO30sCiAgICAgIC8vIFN0dWZmIHVzZWQgYnkgY29tbWFuZHMsIHByb2JhYmx5IG5vdCBtdWNo
			IHVzZSB0byBvdXRzaWRlIGNvZGUuCiAgICAgIG1vdmVIOiBvcGVyYXRpb24obW92ZUgpLAogICAg
			ICBkZWxldGVIOiBvcGVyYXRpb24oZGVsZXRlSCksCiAgICAgIG1vdmVWOiBvcGVyYXRpb24obW92
			ZVYpLAogICAgICB0b2dnbGVPdmVyd3JpdGU6IGZ1bmN0aW9uKCkgewogICAgICAgIGlmKG92ZXJ3
			cml0ZSl7CiAgICAgICAgICBvdmVyd3JpdGUgPSBmYWxzZTsKICAgICAgICAgIGN1cnNvci5jbGFz
			c05hbWUgPSBjdXJzb3IuY2xhc3NOYW1lLnJlcGxhY2UoIiBDb2RlTWlycm9yLW92ZXJ3cml0ZSIs
			ICIiKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgb3ZlcndyaXRlID0gdHJ1ZTsKICAgICAg
			ICAgIGN1cnNvci5jbGFzc05hbWUgKz0gIiBDb2RlTWlycm9yLW92ZXJ3cml0ZSI7CiAgICAgICAg
			fQogICAgICB9LAoKICAgICAgcG9zRnJvbUluZGV4OiBmdW5jdGlvbihvZmYpIHsKICAgICAgICB2
			YXIgbGluZU5vID0gMCwgY2g7CiAgICAgICAgZG9jLml0ZXIoMCwgZG9jLnNpemUsIGZ1bmN0aW9u
			KGxpbmUpIHsKICAgICAgICAgIHZhciBzeiA9IGxpbmUudGV4dC5sZW5ndGggKyAxOwogICAgICAg
			ICAgaWYgKHN6ID4gb2ZmKSB7IGNoID0gb2ZmOyByZXR1cm4gdHJ1ZTsgfQogICAgICAgICAgb2Zm
			IC09IHN6OwogICAgICAgICAgKytsaW5lTm87CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIGNs
			aXBQb3Moe2xpbmU6IGxpbmVObywgY2g6IGNofSk7CiAgICAgIH0sCiAgICAgIGluZGV4RnJvbVBv
			czogZnVuY3Rpb24gKGNvb3JkcykgewogICAgICAgIGlmIChjb29yZHMubGluZSA8IDAgfHwgY29v
			cmRzLmNoIDwgMCkgcmV0dXJuIDA7CiAgICAgICAgdmFyIGluZGV4ID0gY29vcmRzLmNoOwogICAg
			ICAgIGRvYy5pdGVyKDAsIGNvb3Jkcy5saW5lLCBmdW5jdGlvbiAobGluZSkgewogICAgICAgICAg
			aW5kZXggKz0gbGluZS50ZXh0Lmxlbmd0aCArIDE7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJu
			IGluZGV4OwogICAgICB9LAogICAgICBzY3JvbGxUbzogZnVuY3Rpb24oeCwgeSkgewogICAgICAg
			IGlmICh4ICE9IG51bGwpIHNjcm9sbGVyLnNjcm9sbExlZnQgPSB4OwogICAgICAgIGlmICh5ICE9
			IG51bGwpIHNjcm9sbGVyLnNjcm9sbFRvcCA9IHk7CiAgICAgICAgdXBkYXRlRGlzcGxheShbXSk7
			CiAgICAgIH0sCgogICAgICBvcGVyYXRpb246IGZ1bmN0aW9uKGYpe3JldHVybiBvcGVyYXRpb24o
			ZikoKTt9LAogICAgICByZWZyZXNoOiBmdW5jdGlvbigpewogICAgICAgIHVwZGF0ZURpc3BsYXko
			dHJ1ZSk7CiAgICAgICAgaWYgKHNjcm9sbGVyLnNjcm9sbEhlaWdodCA+IGxhc3RTY3JvbGxQb3Mp
			CiAgICAgICAgICBzY3JvbGxlci5zY3JvbGxUb3AgPSBsYXN0U2Nyb2xsUG9zOwogICAgICB9LAog
			ICAgICBnZXRJbnB1dEZpZWxkOiBmdW5jdGlvbigpe3JldHVybiBpbnB1dDt9LAogICAgICBnZXRX
			cmFwcGVyRWxlbWVudDogZnVuY3Rpb24oKXtyZXR1cm4gd3JhcHBlcjt9LAogICAgICBnZXRTY3Jv
			bGxlckVsZW1lbnQ6IGZ1bmN0aW9uKCl7cmV0dXJuIHNjcm9sbGVyO30sCiAgICAgIGdldEd1dHRl
			ckVsZW1lbnQ6IGZ1bmN0aW9uKCl7cmV0dXJuIGd1dHRlcjt9CiAgICB9OwoKICAgIGZ1bmN0aW9u
			IGdldExpbmUobikgeyByZXR1cm4gZ2V0TGluZUF0KGRvYywgbik7IH0KICAgIGZ1bmN0aW9uIHVw
			ZGF0ZUxpbmVIZWlnaHQobGluZSwgaGVpZ2h0KSB7CiAgICAgIGd1dHRlckRpcnR5ID0gdHJ1ZTsK
			ICAgICAgdmFyIGRpZmYgPSBoZWlnaHQgLSBsaW5lLmhlaWdodDsKICAgICAgZm9yICh2YXIgbiA9
			IGxpbmU7IG47IG4gPSBuLnBhcmVudCkgbi5oZWlnaHQgKz0gZGlmZjsKICAgIH0KCiAgICBmdW5j
			dGlvbiBzZXRWYWx1ZShjb2RlKSB7CiAgICAgIHZhciB0b3AgPSB7bGluZTogMCwgY2g6IDB9Owog
			ICAgICB1cGRhdGVMaW5lcyh0b3AsIHtsaW5lOiBkb2Muc2l6ZSAtIDEsIGNoOiBnZXRMaW5lKGRv
			Yy5zaXplLTEpLnRleHQubGVuZ3RofSwKICAgICAgICAgICAgICAgICAgc3BsaXRMaW5lcyhjb2Rl
			KSwgdG9wLCB0b3ApOwogICAgICB1cGRhdGVJbnB1dCA9IHRydWU7CiAgICB9CiAgICBmdW5jdGlv
			biBnZXRWYWx1ZShjb2RlKSB7CiAgICAgIHZhciB0ZXh0ID0gW107CiAgICAgIGRvYy5pdGVyKDAs
			IGRvYy5zaXplLCBmdW5jdGlvbihsaW5lKSB7IHRleHQucHVzaChsaW5lLnRleHQpOyB9KTsKICAg
			ICAgcmV0dXJuIHRleHQuam9pbigiXG4iKTsKICAgIH0KCiAgICBmdW5jdGlvbiBvbk1vdXNlRG93
			bihlKSB7CiAgICAgIHNldFNoaWZ0KGVfcHJvcChlLCAic2hpZnRLZXkiKSk7CiAgICAgIC8vIENo
			ZWNrIHdoZXRoZXIgdGhpcyBpcyBhIGNsaWNrIGluIGEgd2lkZ2V0CiAgICAgIGZvciAodmFyIG4g
			PSBlX3RhcmdldChlKTsgbiAhPSB3cmFwcGVyOyBuID0gbi5wYXJlbnROb2RlKQogICAgICAgIGlm
			IChuLnBhcmVudE5vZGUgPT0gY29kZSAmJiBuICE9IG1vdmVyKSByZXR1cm47CgogICAgICAvLyBT
			ZWUgaWYgdGhpcyBpcyBhIGNsaWNrIGluIHRoZSBndXR0ZXIKICAgICAgZm9yICh2YXIgbiA9IGVf
			dGFyZ2V0KGUpOyBuICE9IHdyYXBwZXI7IG4gPSBuLnBhcmVudE5vZGUpCiAgICAgICAgaWYgKG4u
			cGFyZW50Tm9kZSA9PSBndXR0ZXJUZXh0KSB7CiAgICAgICAgICBpZiAob3B0aW9ucy5vbkd1dHRl
			ckNsaWNrKQogICAgICAgICAgICBvcHRpb25zLm9uR3V0dGVyQ2xpY2soaW5zdGFuY2UsIGluZGV4
			T2YoZ3V0dGVyVGV4dC5jaGlsZE5vZGVzLCBuKSArIHNob3dpbmdGcm9tLCBlKTsKICAgICAgICAg
			IHJldHVybiBlX3ByZXZlbnREZWZhdWx0KGUpOwogICAgICAgIH0KCiAgICAgIHZhciBzdGFydCA9
			IHBvc0Zyb21Nb3VzZShlKTsKCiAgICAgIHN3aXRjaCAoZV9idXR0b24oZSkpIHsKICAgICAgY2Fz
			ZSAzOgogICAgICAgIGlmIChnZWNrbyAmJiAhbWFjKSBvbkNvbnRleHRNZW51KGUpOwogICAgICAg
			IHJldHVybjsKICAgICAgY2FzZSAyOgogICAgICAgIGlmIChzdGFydCkgc2V0Q3Vyc29yKHN0YXJ0
			LmxpbmUsIHN0YXJ0LmNoLCB0cnVlKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgLy8g
			Rm9yIGJ1dHRvbiAxLCBpZiBpdCB3YXMgY2xpY2tlZCBpbnNpZGUgdGhlIGVkaXRvcgogICAgICAv
			LyAocG9zRnJvbU1vdXNlIHJldHVybmluZyBub24tbnVsbCksIHdlIGhhdmUgdG8gYWRqdXN0IHRo
			ZQogICAgICAvLyBzZWxlY3Rpb24uCiAgICAgIGlmICghc3RhcnQpIHtpZiAoZV90YXJnZXQoZSkg
			PT0gc2Nyb2xsZXIpIGVfcHJldmVudERlZmF1bHQoZSk7IHJldHVybjt9CgogICAgICBpZiAoIWZv
			Y3VzZWQpIG9uRm9jdXMoKTsKCiAgICAgIHZhciBub3cgPSArbmV3IERhdGU7CiAgICAgIGlmIChs
			YXN0RG91YmxlQ2xpY2sgJiYgbGFzdERvdWJsZUNsaWNrLnRpbWUgPiBub3cgLSA0MDAgJiYgcG9z
			RXEobGFzdERvdWJsZUNsaWNrLnBvcywgc3RhcnQpKSB7CiAgICAgICAgZV9wcmV2ZW50RGVmYXVs
			dChlKTsKICAgICAgICBzZXRUaW1lb3V0KGZvY3VzSW5wdXQsIDIwKTsKICAgICAgICByZXR1cm4g
			c2VsZWN0TGluZShzdGFydC5saW5lKTsKICAgICAgfSBlbHNlIGlmIChsYXN0Q2xpY2sgJiYgbGFz
			dENsaWNrLnRpbWUgPiBub3cgLSA0MDAgJiYgcG9zRXEobGFzdENsaWNrLnBvcywgc3RhcnQpKSB7
			CiAgICAgICAgbGFzdERvdWJsZUNsaWNrID0ge3RpbWU6IG5vdywgcG9zOiBzdGFydH07CiAgICAg
			ICAgZV9wcmV2ZW50RGVmYXVsdChlKTsKICAgICAgICByZXR1cm4gc2VsZWN0V29yZEF0KHN0YXJ0
			KTsKICAgICAgfSBlbHNlIHsgbGFzdENsaWNrID0ge3RpbWU6IG5vdywgcG9zOiBzdGFydH07IH0K
			CiAgICAgIHZhciBsYXN0ID0gc3RhcnQsIGdvaW5nOwogICAgICBpZiAoZHJhZ0FuZERyb3AgJiYg
			IW9wdGlvbnMucmVhZE9ubHkgJiYgIXBvc0VxKHNlbC5mcm9tLCBzZWwudG8pICYmCiAgICAgICAg
			ICAhcG9zTGVzcyhzdGFydCwgc2VsLmZyb20pICYmICFwb3NMZXNzKHNlbC50bywgc3RhcnQpKSB7
			CiAgICAgICAgLy8gTGV0IHRoZSBkcmFnIGhhbmRsZXIgaGFuZGxlIHRoaXMuCiAgICAgICAgaWYg
			KHdlYmtpdCkgbGluZVNwYWNlLmRyYWdnYWJsZSA9IHRydWU7CiAgICAgICAgdmFyIHVwID0gY29u
			bmVjdCh0YXJnZXREb2N1bWVudCwgIm1vdXNldXAiLCBvcGVyYXRpb24oZnVuY3Rpb24oZTIpIHsK
			ICAgICAgICAgIGlmICh3ZWJraXQpIGxpbmVTcGFjZS5kcmFnZ2FibGUgPSBmYWxzZTsKICAgICAg
			ICAgIGRyYWdnaW5nVGV4dCA9IGZhbHNlOwogICAgICAgICAgdXAoKTsKICAgICAgICAgIGlmIChN
			YXRoLmFicyhlLmNsaWVudFggLSBlMi5jbGllbnRYKSArIE1hdGguYWJzKGUuY2xpZW50WSAtIGUy
			LmNsaWVudFkpIDwgMTApIHsKICAgICAgICAgICAgZV9wcmV2ZW50RGVmYXVsdChlMik7CiAgICAg
			ICAgICAgIHNldEN1cnNvcihzdGFydC5saW5lLCBzdGFydC5jaCwgdHJ1ZSk7CiAgICAgICAgICAg
			IGZvY3VzSW5wdXQoKTsKICAgICAgICAgIH0KICAgICAgICB9KSwgdHJ1ZSk7CiAgICAgICAgZHJh
			Z2dpbmdUZXh0ID0gdHJ1ZTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgZV9wcmV2ZW50
			RGVmYXVsdChlKTsKICAgICAgc2V0Q3Vyc29yKHN0YXJ0LmxpbmUsIHN0YXJ0LmNoLCB0cnVlKTsK
			CiAgICAgIGZ1bmN0aW9uIGV4dGVuZChlKSB7CiAgICAgICAgdmFyIGN1ciA9IHBvc0Zyb21Nb3Vz
			ZShlLCB0cnVlKTsKICAgICAgICBpZiAoY3VyICYmICFwb3NFcShjdXIsIGxhc3QpKSB7CiAgICAg
			ICAgICBpZiAoIWZvY3VzZWQpIG9uRm9jdXMoKTsKICAgICAgICAgIGxhc3QgPSBjdXI7CiAgICAg
			ICAgICBzZXRTZWxlY3Rpb25Vc2VyKHN0YXJ0LCBjdXIpOwogICAgICAgICAgdXBkYXRlSW5wdXQg
			PSBmYWxzZTsKICAgICAgICAgIHZhciB2aXNpYmxlID0gdmlzaWJsZUxpbmVzKCk7CiAgICAgICAg
			ICBpZiAoY3VyLmxpbmUgPj0gdmlzaWJsZS50byB8fCBjdXIubGluZSA8IHZpc2libGUuZnJvbSkK
			ICAgICAgICAgICAgZ29pbmcgPSBzZXRUaW1lb3V0KG9wZXJhdGlvbihmdW5jdGlvbigpe2V4dGVu
			ZChlKTt9KSwgMTUwKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHZhciBtb3ZlID0gY29ubmVj
			dCh0YXJnZXREb2N1bWVudCwgIm1vdXNlbW92ZSIsIG9wZXJhdGlvbihmdW5jdGlvbihlKSB7CiAg
			ICAgICAgY2xlYXJUaW1lb3V0KGdvaW5nKTsKICAgICAgICBlX3ByZXZlbnREZWZhdWx0KGUpOwog
			ICAgICAgIGV4dGVuZChlKTsKICAgICAgfSksIHRydWUpOwogICAgICB2YXIgdXAgPSBjb25uZWN0
			KHRhcmdldERvY3VtZW50LCAibW91c2V1cCIsIG9wZXJhdGlvbihmdW5jdGlvbihlKSB7CiAgICAg
			ICAgY2xlYXJUaW1lb3V0KGdvaW5nKTsKICAgICAgICB2YXIgY3VyID0gcG9zRnJvbU1vdXNlKGUp
			OwogICAgICAgIGlmIChjdXIpIHNldFNlbGVjdGlvblVzZXIoc3RhcnQsIGN1cik7CiAgICAgICAg
			ZV9wcmV2ZW50RGVmYXVsdChlKTsKICAgICAgICBmb2N1c0lucHV0KCk7CiAgICAgICAgdXBkYXRl
			SW5wdXQgPSB0cnVlOwogICAgICAgIG1vdmUoKTsgdXAoKTsKICAgICAgfSksIHRydWUpOwogICAg
			fQogICAgZnVuY3Rpb24gb25Eb3VibGVDbGljayhlKSB7CiAgICAgIGZvciAodmFyIG4gPSBlX3Rh
			cmdldChlKTsgbiAhPSB3cmFwcGVyOyBuID0gbi5wYXJlbnROb2RlKQogICAgICAgIGlmIChuLnBh
			cmVudE5vZGUgPT0gZ3V0dGVyVGV4dCkgcmV0dXJuIGVfcHJldmVudERlZmF1bHQoZSk7CiAgICAg
			IHZhciBzdGFydCA9IHBvc0Zyb21Nb3VzZShlKTsKICAgICAgaWYgKCFzdGFydCkgcmV0dXJuOwog
			ICAgICBsYXN0RG91YmxlQ2xpY2sgPSB7dGltZTogK25ldyBEYXRlLCBwb3M6IHN0YXJ0fTsKICAg
			ICAgZV9wcmV2ZW50RGVmYXVsdChlKTsKICAgICAgc2VsZWN0V29yZEF0KHN0YXJ0KTsKICAgIH0K
			ICAgIGZ1bmN0aW9uIG9uRHJvcChlKSB7CiAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAg
			dmFyIHBvcyA9IHBvc0Zyb21Nb3VzZShlLCB0cnVlKSwgZmlsZXMgPSBlLmRhdGFUcmFuc2Zlci5m
			aWxlczsKICAgICAgaWYgKCFwb3MgfHwgb3B0aW9ucy5yZWFkT25seSkgcmV0dXJuOwogICAgICBp
			ZiAoZmlsZXMgJiYgZmlsZXMubGVuZ3RoICYmIHdpbmRvdy5GaWxlUmVhZGVyICYmIHdpbmRvdy5G
			aWxlKSB7CiAgICAgICAgZnVuY3Rpb24gbG9hZEZpbGUoZmlsZSwgaSkgewogICAgICAgICAgdmFy
			IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyOwogICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0
			aW9uKCkgewogICAgICAgICAgICB0ZXh0W2ldID0gcmVhZGVyLnJlc3VsdDsKICAgICAgICAgICAg
			aWYgKCsrcmVhZCA9PSBuKSB7CgkgICAgICBwb3MgPSBjbGlwUG9zKHBvcyk7CgkgICAgICBvcGVy
			YXRpb24oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgZW5kID0gcmVwbGFjZVJhbmdl
			KHRleHQuam9pbigiIiksIHBvcywgcG9zKTsKICAgICAgICAgICAgICAgIHNldFNlbGVjdGlvblVz
			ZXIocG9zLCBlbmQpOwogICAgICAgICAgICAgIH0pKCk7CgkgICAgfQogICAgICAgICAgfTsKICAg
			ICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpOwogICAgICAgIH0KICAgICAgICB2YXIgbiA9
			IGZpbGVzLmxlbmd0aCwgdGV4dCA9IEFycmF5KG4pLCByZWFkID0gMDsKICAgICAgICBmb3IgKHZh
			ciBpID0gMDsgaSA8IG47ICsraSkgbG9hZEZpbGUoZmlsZXNbaV0sIGkpOwogICAgICB9CiAgICAg
			IGVsc2UgewogICAgICAgIHRyeSB7CiAgICAgICAgICB2YXIgdGV4dCA9IGUuZGF0YVRyYW5zZmVy
			LmdldERhdGEoIlRleHQiKTsKICAgICAgICAgIGlmICh0ZXh0KSB7CiAgICAgICAgICAgIHZhciBj
			dXJGcm9tID0gc2VsLmZyb20sIGN1clRvID0gc2VsLnRvOwogICAgICAgICAgICBzZXRTZWxlY3Rp
			b25Vc2VyKHBvcywgcG9zKTsKICAgICAgICAgICAgaWYgKGRyYWdnaW5nVGV4dCkgcmVwbGFjZVJh
			bmdlKCIiLCBjdXJGcm9tLCBjdXJUbyk7CiAgICAgICAgICAgIHJlcGxhY2VTZWxlY3Rpb24odGV4
			dCk7CgkgICAgZm9jdXNJbnB1dCgpOwoJICB9CiAgICAgICAgfQogICAgICAgIGNhdGNoKGUpe30K
			ICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gb25EcmFnU3RhcnQoZSkgewogICAgICB2YXIgdHh0
			ID0gZ2V0U2VsZWN0aW9uKCk7CiAgICAgIC8vIERpc2FibGVkIHVudGlsIGZ1cnRoZXIgbm90aWNl
			LiBEb2Vzbid0IHdvcmsgb24gbW9zdCBicm93c2VycywKICAgICAgLy8gYW5kIGNyYXNoZXMgU2Fm
			YXJpIChpc3N1ZSAjMzMyKS4KICAgICAgLy9odG1sRXNjYXBlKHR4dCk7CiAgICAgIC8vZS5kYXRh
			VHJhbnNmZXIuc2V0RHJhZ0ltYWdlKGVzY2FwZUVsZW1lbnQsIDAsIDApOwogICAgICBlLmRhdGFU
			cmFuc2Zlci5zZXREYXRhKCJUZXh0IiwgdHh0KTsKICAgIH0KCiAgICBmdW5jdGlvbiBkb0hhbmRs
			ZUJpbmRpbmcoYm91bmQsIGRyb3BTaGlmdCkgewogICAgICBpZiAodHlwZW9mIGJvdW5kID09ICJz
			dHJpbmciKSB7CiAgICAgICAgYm91bmQgPSBjb21tYW5kc1tib3VuZF07CiAgICAgICAgaWYgKCFi
			b3VuZCkgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIHZhciBwcmV2U2hpZnQgPSBzaGlmdFNl
			bGVjdGluZzsKICAgICAgdHJ5IHsKICAgICAgICBpZiAob3B0aW9ucy5yZWFkT25seSkgc3VwcHJl
			c3NFZGl0cyA9IHRydWU7CiAgICAgICAgaWYgKGRyb3BTaGlmdCkgc2hpZnRTZWxlY3RpbmcgPSBu
			dWxsOwogICAgICAgIGJvdW5kKGluc3RhbmNlKTsKICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAg
			aWYgKGUgIT0gUGFzcykgdGhyb3cgZTsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0gZmlu
			YWxseSB7CiAgICAgICAgc2hpZnRTZWxlY3RpbmcgPSBwcmV2U2hpZnQ7CiAgICAgICAgc3VwcHJl
			c3NFZGl0cyA9IGZhbHNlOwogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgZnVu
			Y3Rpb24gaGFuZGxlS2V5QmluZGluZyhlKSB7CiAgICAgIC8vIEhhbmRsZSBhdXRvIGtleW1hcCB0
			cmFuc2l0aW9ucwogICAgICB2YXIgc3RhcnRNYXAgPSBnZXRLZXlNYXAob3B0aW9ucy5rZXlNYXAp
			LCBuZXh0ID0gc3RhcnRNYXAuYXV0bzsKICAgICAgY2xlYXJUaW1lb3V0KG1heWJlVHJhbnNpdGlv
			bik7CiAgICAgIGlmIChuZXh0ICYmICFpc01vZGlmaWVyS2V5KGUpKSBtYXliZVRyYW5zaXRpb24g
			PSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgIGlmIChnZXRLZXlNYXAob3B0aW9ucy5r
			ZXlNYXApID09IHN0YXJ0TWFwKSB7CiAgICAgICAgICBvcHRpb25zLmtleU1hcCA9IChuZXh0LmNh
			bGwgPyBuZXh0LmNhbGwobnVsbCwgaW5zdGFuY2UpIDogbmV4dCk7CiAgICAgICAgfQogICAgICB9
			LCA1MCk7CgogICAgICB2YXIgbmFtZSA9IGtleU5hbWVzW2VfcHJvcChlLCAia2V5Q29kZSIpXSwg
			aGFuZGxlZCA9IGZhbHNlOwogICAgICBpZiAobmFtZSA9PSBudWxsIHx8IGUuYWx0R3JhcGhLZXkp
			IHJldHVybiBmYWxzZTsKICAgICAgaWYgKGVfcHJvcChlLCAiYWx0S2V5IikpIG5hbWUgPSAiQWx0
			LSIgKyBuYW1lOwogICAgICBpZiAoZV9wcm9wKGUsICJjdHJsS2V5IikpIG5hbWUgPSAiQ3RybC0i
			ICsgbmFtZTsKICAgICAgaWYgKGVfcHJvcChlLCAibWV0YUtleSIpKSBuYW1lID0gIkNtZC0iICsg
			bmFtZTsKCiAgICAgIGlmIChlX3Byb3AoZSwgInNoaWZ0S2V5IikpCiAgICAgICAgaGFuZGxlZCA9
			IGxvb2t1cEtleSgiU2hpZnQtIiArIG5hbWUsIG9wdGlvbnMuZXh0cmFLZXlzLCBvcHRpb25zLmtl
			eU1hcCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGIpIHtyZXR1cm4gZG9I
			YW5kbGVCaW5kaW5nKGIsIHRydWUpO30pOwogICAgICBpZiAoIWhhbmRsZWQpCiAgICAgICAgaGFu
			ZGxlZCA9IGxvb2t1cEtleShuYW1lLCBvcHRpb25zLmV4dHJhS2V5cywgb3B0aW9ucy5rZXlNYXAs
			IGRvSGFuZGxlQmluZGluZyk7CgogICAgICBpZiAoaGFuZGxlZCkgZV9wcmV2ZW50RGVmYXVsdChl
			KTsKICAgICAgcmV0dXJuIGhhbmRsZWQ7CiAgICB9CiAgICBmdW5jdGlvbiBoYW5kbGVDaGFyQmlu
			ZGluZyhlLCBjaCkgewogICAgICB2YXIgaGFuZGxlZCA9IGxvb2t1cEtleSgiJyIgKyBjaCArICIn
			Iiwgb3B0aW9ucy5leHRyYUtleXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlv
			bnMua2V5TWFwLCBkb0hhbmRsZUJpbmRpbmcpOwogICAgICBpZiAoaGFuZGxlZCkgZV9wcmV2ZW50
			RGVmYXVsdChlKTsKICAgICAgcmV0dXJuIGhhbmRsZWQ7CiAgICB9CgogICAgdmFyIGxhc3RTdG9w
			cGVkS2V5ID0gbnVsbCwgbWF5YmVUcmFuc2l0aW9uOwogICAgZnVuY3Rpb24gb25LZXlEb3duKGUp
			IHsKICAgICAgaWYgKCFmb2N1c2VkKSBvbkZvY3VzKCk7CiAgICAgIGlmIChpZSAmJiBlLmtleUNv
			ZGUgPT0gMjcpIHsgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlOyB9CiAgICAgIGlmIChwb2xsaW5nRmFz
			dCkgeyBpZiAocmVhZElucHV0KCkpIHBvbGxpbmdGYXN0ID0gZmFsc2U7IH0KICAgICAgaWYgKG9w
			dGlvbnMub25LZXlFdmVudCAmJiBvcHRpb25zLm9uS2V5RXZlbnQoaW5zdGFuY2UsIGFkZFN0b3Ao
			ZSkpKSByZXR1cm47CiAgICAgIHZhciBjb2RlID0gZV9wcm9wKGUsICJrZXlDb2RlIik7CiAgICAg
			IC8vIElFIGRvZXMgc3RyYW5nZSB0aGluZ3Mgd2l0aCBlc2NhcGUuCiAgICAgIHNldFNoaWZ0KGNv
			ZGUgPT0gMTYgfHwgZV9wcm9wKGUsICJzaGlmdEtleSIpKTsKICAgICAgLy8gRmlyc3QgZ2l2ZSBv
			bktleUV2ZW50IG9wdGlvbiBhIGNoYW5jZSB0byBoYW5kbGUgdGhpcy4KICAgICAgdmFyIGhhbmRs
			ZWQgPSBoYW5kbGVLZXlCaW5kaW5nKGUpOwogICAgICBpZiAod2luZG93Lm9wZXJhKSB7CiAgICAg
			ICAgbGFzdFN0b3BwZWRLZXkgPSBoYW5kbGVkID8gY29kZSA6IG51bGw7CiAgICAgICAgLy8gT3Bl
			cmEgaGFzIG5vIGN1dCBldmVudC4uLiB3ZSB0cnkgdG8gYXQgbGVhc3QgY2F0Y2ggdGhlIGtleSBj
			b21ibwogICAgICAgIGlmICghaGFuZGxlZCAmJiBjb2RlID09IDg4ICYmIGVfcHJvcChlLCBtYWMg
			PyAibWV0YUtleSIgOiAiY3RybEtleSIpKQogICAgICAgICAgcmVwbGFjZVNlbGVjdGlvbigiIik7
			CiAgICAgIH0KICAgIH0KICAgIGZ1bmN0aW9uIG9uS2V5UHJlc3MoZSkgewogICAgICBpZiAocG9s
			bGluZ0Zhc3QpIHJlYWRJbnB1dCgpOwogICAgICBpZiAob3B0aW9ucy5vbktleUV2ZW50ICYmIG9w
			dGlvbnMub25LZXlFdmVudChpbnN0YW5jZSwgYWRkU3RvcChlKSkpIHJldHVybjsKICAgICAgdmFy
			IGtleUNvZGUgPSBlX3Byb3AoZSwgImtleUNvZGUiKSwgY2hhckNvZGUgPSBlX3Byb3AoZSwgImNo
			YXJDb2RlIik7CiAgICAgIGlmICh3aW5kb3cub3BlcmEgJiYga2V5Q29kZSA9PSBsYXN0U3RvcHBl
			ZEtleSkge2xhc3RTdG9wcGVkS2V5ID0gbnVsbDsgZV9wcmV2ZW50RGVmYXVsdChlKTsgcmV0dXJu
			O30KICAgICAgaWYgKHdpbmRvdy5vcGVyYSAmJiAhZS53aGljaCAmJiBoYW5kbGVLZXlCaW5kaW5n
			KGUpKSByZXR1cm47CiAgICAgIHZhciBjaCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUg
			PT0gbnVsbCA/IGtleUNvZGUgOiBjaGFyQ29kZSk7CiAgICAgIGlmIChvcHRpb25zLmVsZWN0cmlj
			Q2hhcnMgJiYgbW9kZS5lbGVjdHJpY0NoYXJzICYmIG9wdGlvbnMuc21hcnRJbmRlbnQgJiYgIW9w
			dGlvbnMucmVhZE9ubHkpIHsKICAgICAgICBpZiAobW9kZS5lbGVjdHJpY0NoYXJzLmluZGV4T2Yo
			Y2gpID4gLTEpCiAgICAgICAgICBzZXRUaW1lb3V0KG9wZXJhdGlvbihmdW5jdGlvbigpIHtpbmRl
			bnRMaW5lKHNlbC50by5saW5lLCAic21hcnQiKTt9KSwgNzUpOwogICAgICB9CiAgICAgIGlmICho
			YW5kbGVDaGFyQmluZGluZyhlLCBjaCkpIHJldHVybjsKICAgICAgZmFzdFBvbGwoKTsKICAgIH0K
			ICAgIGZ1bmN0aW9uIG9uS2V5VXAoZSkgewogICAgICBpZiAob3B0aW9ucy5vbktleUV2ZW50ICYm
			IG9wdGlvbnMub25LZXlFdmVudChpbnN0YW5jZSwgYWRkU3RvcChlKSkpIHJldHVybjsKICAgICAg
			aWYgKGVfcHJvcChlLCAia2V5Q29kZSIpID09IDE2KSBzaGlmdFNlbGVjdGluZyA9IG51bGw7CiAg
			ICB9CgogICAgZnVuY3Rpb24gb25Gb2N1cygpIHsKICAgICAgaWYgKG9wdGlvbnMucmVhZE9ubHkg
			PT0gIm5vY3Vyc29yIikgcmV0dXJuOwogICAgICBpZiAoIWZvY3VzZWQpIHsKICAgICAgICBpZiAo
			b3B0aW9ucy5vbkZvY3VzKSBvcHRpb25zLm9uRm9jdXMoaW5zdGFuY2UpOwogICAgICAgIGZvY3Vz
			ZWQgPSB0cnVlOwogICAgICAgIGlmICh3cmFwcGVyLmNsYXNzTmFtZS5zZWFyY2goL1xiQ29kZU1p
			cnJvci1mb2N1c2VkXGIvKSA9PSAtMSkKICAgICAgICAgIHdyYXBwZXIuY2xhc3NOYW1lICs9ICIg
			Q29kZU1pcnJvci1mb2N1c2VkIjsKICAgICAgICBpZiAoIWxlYXZlSW5wdXRBbG9uZSkgcmVzZXRJ
			bnB1dCh0cnVlKTsKICAgICAgfQogICAgICBzbG93UG9sbCgpOwogICAgICByZXN0YXJ0Qmxpbmso
			KTsKICAgIH0KICAgIGZ1bmN0aW9uIG9uQmx1cigpIHsKICAgICAgaWYgKGZvY3VzZWQpIHsKICAg
			ICAgICBpZiAob3B0aW9ucy5vbkJsdXIpIG9wdGlvbnMub25CbHVyKGluc3RhbmNlKTsKICAgICAg
			ICBmb2N1c2VkID0gZmFsc2U7CiAgICAgICAgaWYgKGJyYWNrZXRIaWdobGlnaHRlZCkKICAgICAg
			ICAgIG9wZXJhdGlvbihmdW5jdGlvbigpewogICAgICAgICAgICBpZiAoYnJhY2tldEhpZ2hsaWdo
			dGVkKSB7IGJyYWNrZXRIaWdobGlnaHRlZCgpOyBicmFja2V0SGlnaGxpZ2h0ZWQgPSBudWxsOyB9
			CiAgICAgICAgICB9KSgpOwogICAgICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gd3JhcHBlci5jbGFz
			c05hbWUucmVwbGFjZSgiIENvZGVNaXJyb3ItZm9jdXNlZCIsICIiKTsKICAgICAgfQogICAgICBj
			bGVhckludGVydmFsKGJsaW5rZXIpOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge2lmICgh
			Zm9jdXNlZCkgc2hpZnRTZWxlY3RpbmcgPSBudWxsO30sIDE1MCk7CiAgICB9CgogICAgLy8gUmVw
			bGFjZSB0aGUgcmFuZ2UgZnJvbSBmcm9tIHRvIHRvIGJ5IHRoZSBzdHJpbmdzIGluIG5ld1RleHQu
			CiAgICAvLyBBZnRlcndhcmRzLCBzZXQgdGhlIHNlbGVjdGlvbiB0byBzZWxGcm9tLCBzZWxUby4K
			ICAgIGZ1bmN0aW9uIHVwZGF0ZUxpbmVzKGZyb20sIHRvLCBuZXdUZXh0LCBzZWxGcm9tLCBzZWxU
			bykgewogICAgICBpZiAoc3VwcHJlc3NFZGl0cykgcmV0dXJuOwogICAgICBpZiAoaGlzdG9yeSkg
			ewogICAgICAgIHZhciBvbGQgPSBbXTsKICAgICAgICBkb2MuaXRlcihmcm9tLmxpbmUsIHRvLmxp
			bmUgKyAxLCBmdW5jdGlvbihsaW5lKSB7IG9sZC5wdXNoKGxpbmUudGV4dCk7IH0pOwogICAgICAg
			IGhpc3RvcnkuYWRkQ2hhbmdlKGZyb20ubGluZSwgbmV3VGV4dC5sZW5ndGgsIG9sZCk7CiAgICAg
			ICAgd2hpbGUgKGhpc3RvcnkuZG9uZS5sZW5ndGggPiBvcHRpb25zLnVuZG9EZXB0aCkgaGlzdG9y
			eS5kb25lLnNoaWZ0KCk7CiAgICAgIH0KICAgICAgdXBkYXRlTGluZXNOb1VuZG8oZnJvbSwgdG8s
			IG5ld1RleHQsIHNlbEZyb20sIHNlbFRvKTsKICAgIH0KICAgIGZ1bmN0aW9uIHVucmVkb0hlbHBl
			cihmcm9tLCB0bykgewogICAgICBpZiAoIWZyb20ubGVuZ3RoKSByZXR1cm47CiAgICAgIHZhciBz
			ZXQgPSBmcm9tLnBvcCgpLCBvdXQgPSBbXTsKICAgICAgZm9yICh2YXIgaSA9IHNldC5sZW5ndGgg
			LSAxOyBpID49IDA7IGkgLT0gMSkgewogICAgICAgIHZhciBjaGFuZ2UgPSBzZXRbaV07CiAgICAg
			ICAgdmFyIHJlcGxhY2VkID0gW10sIGVuZCA9IGNoYW5nZS5zdGFydCArIGNoYW5nZS5hZGRlZDsK
			ICAgICAgICBkb2MuaXRlcihjaGFuZ2Uuc3RhcnQsIGVuZCwgZnVuY3Rpb24obGluZSkgeyByZXBs
			YWNlZC5wdXNoKGxpbmUudGV4dCk7IH0pOwogICAgICAgIG91dC5wdXNoKHtzdGFydDogY2hhbmdl
			LnN0YXJ0LCBhZGRlZDogY2hhbmdlLm9sZC5sZW5ndGgsIG9sZDogcmVwbGFjZWR9KTsKICAgICAg
			ICB2YXIgcG9zID0gY2xpcFBvcyh7bGluZTogY2hhbmdlLnN0YXJ0ICsgY2hhbmdlLm9sZC5sZW5n
			dGggLSAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICBjaDogZWRpdEVuZChyZXBsYWNlZFty
			ZXBsYWNlZC5sZW5ndGgtMV0sIGNoYW5nZS5vbGRbY2hhbmdlLm9sZC5sZW5ndGgtMV0pfSk7CiAg
			ICAgICAgdXBkYXRlTGluZXNOb1VuZG8oe2xpbmU6IGNoYW5nZS5zdGFydCwgY2g6IDB9LCB7bGlu
			ZTogZW5kIC0gMSwgY2g6IGdldExpbmUoZW5kLTEpLnRleHQubGVuZ3RofSwgY2hhbmdlLm9sZCwg
			cG9zLCBwb3MpOwogICAgICB9CiAgICAgIHVwZGF0ZUlucHV0ID0gdHJ1ZTsKICAgICAgdG8ucHVz
			aChvdXQpOwogICAgfQogICAgZnVuY3Rpb24gdW5kbygpIHt1bnJlZG9IZWxwZXIoaGlzdG9yeS5k
			b25lLCBoaXN0b3J5LnVuZG9uZSk7fQogICAgZnVuY3Rpb24gcmVkbygpIHt1bnJlZG9IZWxwZXIo
			aGlzdG9yeS51bmRvbmUsIGhpc3RvcnkuZG9uZSk7fQoKICAgIGZ1bmN0aW9uIHVwZGF0ZUxpbmVz
			Tm9VbmRvKGZyb20sIHRvLCBuZXdUZXh0LCBzZWxGcm9tLCBzZWxUbykgewogICAgICBpZiAoc3Vw
			cHJlc3NFZGl0cykgcmV0dXJuOwogICAgICB2YXIgcmVjb21wdXRlTWF4TGVuZ3RoID0gZmFsc2Us
			IG1heExpbmVMZW5ndGggPSBtYXhMaW5lLmxlbmd0aDsKICAgICAgaWYgKCFvcHRpb25zLmxpbmVX
			cmFwcGluZykKICAgICAgICBkb2MuaXRlcihmcm9tLmxpbmUsIHRvLmxpbmUsIGZ1bmN0aW9uKGxp
			bmUpIHsKICAgICAgICAgIGlmIChsaW5lLnRleHQubGVuZ3RoID09IG1heExpbmVMZW5ndGgpIHty
			ZWNvbXB1dGVNYXhMZW5ndGggPSB0cnVlOyByZXR1cm4gdHJ1ZTt9CiAgICAgICAgfSk7CiAgICAg
			IGlmIChmcm9tLmxpbmUgIT0gdG8ubGluZSB8fCBuZXdUZXh0Lmxlbmd0aCA+IDEpIGd1dHRlckRp
			cnR5ID0gdHJ1ZTsKCiAgICAgIHZhciBubGluZXMgPSB0by5saW5lIC0gZnJvbS5saW5lLCBmaXJz
			dExpbmUgPSBnZXRMaW5lKGZyb20ubGluZSksIGxhc3RMaW5lID0gZ2V0TGluZSh0by5saW5lKTsK
			ICAgICAgLy8gRmlyc3QgYWRqdXN0IHRoZSBsaW5lIHN0cnVjdHVyZSwgdGFraW5nIHNvbWUgY2Fy
			ZSB0byBsZWF2ZSBoaWdobGlnaHRpbmcgaW50YWN0LgogICAgICBpZiAoZnJvbS5jaCA9PSAwICYm
			IHRvLmNoID09IDAgJiYgbmV3VGV4dFtuZXdUZXh0Lmxlbmd0aCAtIDFdID09ICIiKSB7CiAgICAg
			ICAgLy8gVGhpcyBpcyBhIHdob2xlLWxpbmUgcmVwbGFjZS4gVHJlYXRlZCBzcGVjaWFsbHkgdG8g
			bWFrZQogICAgICAgIC8vIHN1cmUgbGluZSBvYmplY3RzIG1vdmUgdGhlIHdheSB0aGV5IGFyZSBz
			dXBwb3NlZCB0by4KICAgICAgICB2YXIgYWRkZWQgPSBbXSwgcHJldkxpbmUgPSBudWxsOwogICAg
			ICAgIGlmIChmcm9tLmxpbmUpIHsKICAgICAgICAgIHByZXZMaW5lID0gZ2V0TGluZShmcm9tLmxp
			bmUgLSAxKTsKICAgICAgICAgIHByZXZMaW5lLmZpeE1hcmtFbmRzKGxhc3RMaW5lKTsKICAgICAg
			ICB9IGVsc2UgbGFzdExpbmUuZml4TWFya1N0YXJ0cygpOwogICAgICAgIGZvciAodmFyIGkgPSAw
			LCBlID0gbmV3VGV4dC5sZW5ndGggLSAxOyBpIDwgZTsgKytpKQogICAgICAgICAgYWRkZWQucHVz
			aChMaW5lLmluaGVyaXRNYXJrcyhuZXdUZXh0W2ldLCBwcmV2TGluZSkpOwogICAgICAgIGlmIChu
			bGluZXMpIGRvYy5yZW1vdmUoZnJvbS5saW5lLCBubGluZXMsIGNhbGxiYWNrcyk7CiAgICAgICAg
			aWYgKGFkZGVkLmxlbmd0aCkgZG9jLmluc2VydChmcm9tLmxpbmUsIGFkZGVkKTsKICAgICAgfSBl
			bHNlIGlmIChmaXJzdExpbmUgPT0gbGFzdExpbmUpIHsKICAgICAgICBpZiAobmV3VGV4dC5sZW5n
			dGggPT0gMSkKICAgICAgICAgIGZpcnN0TGluZS5yZXBsYWNlKGZyb20uY2gsIHRvLmNoLCBuZXdU
			ZXh0WzBdKTsKICAgICAgICBlbHNlIHsKICAgICAgICAgIGxhc3RMaW5lID0gZmlyc3RMaW5lLnNw
			bGl0KHRvLmNoLCBuZXdUZXh0W25ld1RleHQubGVuZ3RoLTFdKTsKICAgICAgICAgIGZpcnN0TGlu
			ZS5yZXBsYWNlKGZyb20uY2gsIG51bGwsIG5ld1RleHRbMF0pOwogICAgICAgICAgZmlyc3RMaW5l
			LmZpeE1hcmtFbmRzKGxhc3RMaW5lKTsKICAgICAgICAgIHZhciBhZGRlZCA9IFtdOwogICAgICAg
			ICAgZm9yICh2YXIgaSA9IDEsIGUgPSBuZXdUZXh0Lmxlbmd0aCAtIDE7IGkgPCBlOyArK2kpCiAg
			ICAgICAgICAgIGFkZGVkLnB1c2goTGluZS5pbmhlcml0TWFya3MobmV3VGV4dFtpXSwgZmlyc3RM
			aW5lKSk7CiAgICAgICAgICBhZGRlZC5wdXNoKGxhc3RMaW5lKTsKICAgICAgICAgIGRvYy5pbnNl
			cnQoZnJvbS5saW5lICsgMSwgYWRkZWQpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChuZXdU
			ZXh0Lmxlbmd0aCA9PSAxKSB7CiAgICAgICAgZmlyc3RMaW5lLnJlcGxhY2UoZnJvbS5jaCwgbnVs
			bCwgbmV3VGV4dFswXSk7CiAgICAgICAgbGFzdExpbmUucmVwbGFjZShudWxsLCB0by5jaCwgIiIp
			OwogICAgICAgIGZpcnN0TGluZS5hcHBlbmQobGFzdExpbmUpOwogICAgICAgIGRvYy5yZW1vdmUo
			ZnJvbS5saW5lICsgMSwgbmxpbmVzLCBjYWxsYmFja3MpOwogICAgICB9IGVsc2UgewogICAgICAg
			IHZhciBhZGRlZCA9IFtdOwogICAgICAgIGZpcnN0TGluZS5yZXBsYWNlKGZyb20uY2gsIG51bGws
			IG5ld1RleHRbMF0pOwogICAgICAgIGxhc3RMaW5lLnJlcGxhY2UobnVsbCwgdG8uY2gsIG5ld1Rl
			eHRbbmV3VGV4dC5sZW5ndGgtMV0pOwogICAgICAgIGZpcnN0TGluZS5maXhNYXJrRW5kcyhsYXN0
			TGluZSk7CiAgICAgICAgZm9yICh2YXIgaSA9IDEsIGUgPSBuZXdUZXh0Lmxlbmd0aCAtIDE7IGkg
			PCBlOyArK2kpCiAgICAgICAgICBhZGRlZC5wdXNoKExpbmUuaW5oZXJpdE1hcmtzKG5ld1RleHRb
			aV0sIGZpcnN0TGluZSkpOwogICAgICAgIGlmIChubGluZXMgPiAxKSBkb2MucmVtb3ZlKGZyb20u
			bGluZSArIDEsIG5saW5lcyAtIDEsIGNhbGxiYWNrcyk7CiAgICAgICAgZG9jLmluc2VydChmcm9t
			LmxpbmUgKyAxLCBhZGRlZCk7CiAgICAgIH0KICAgICAgaWYgKG9wdGlvbnMubGluZVdyYXBwaW5n
			KSB7CiAgICAgICAgdmFyIHBlckxpbmUgPSBzY3JvbGxlci5jbGllbnRXaWR0aCAvIGNoYXJXaWR0
			aCgpIC0gMzsKICAgICAgICBkb2MuaXRlcihmcm9tLmxpbmUsIGZyb20ubGluZSArIG5ld1RleHQu
			bGVuZ3RoLCBmdW5jdGlvbihsaW5lKSB7CiAgICAgICAgICBpZiAobGluZS5oaWRkZW4pIHJldHVy
			bjsKICAgICAgICAgIHZhciBndWVzcyA9IE1hdGguY2VpbChsaW5lLnRleHQubGVuZ3RoIC8gcGVy
			TGluZSkgfHwgMTsKICAgICAgICAgIGlmIChndWVzcyAhPSBsaW5lLmhlaWdodCkgdXBkYXRlTGlu
			ZUhlaWdodChsaW5lLCBndWVzcyk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAg
			ZG9jLml0ZXIoZnJvbS5saW5lLCBpICsgbmV3VGV4dC5sZW5ndGgsIGZ1bmN0aW9uKGxpbmUpIHsK
			ICAgICAgICAgIHZhciBsID0gbGluZS50ZXh0OwogICAgICAgICAgaWYgKGwubGVuZ3RoID4gbWF4
			TGluZUxlbmd0aCkgewogICAgICAgICAgICBtYXhMaW5lID0gbDsgbWF4TGluZUxlbmd0aCA9IGwu
			bGVuZ3RoOyBtYXhXaWR0aCA9IG51bGw7CiAgICAgICAgICAgIHJlY29tcHV0ZU1heExlbmd0aCA9
			IGZhbHNlOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIGlmIChyZWNvbXB1dGVNYXhM
			ZW5ndGgpIHsKICAgICAgICAgIG1heExpbmVMZW5ndGggPSAwOyBtYXhMaW5lID0gIiI7IG1heFdp
			ZHRoID0gbnVsbDsKICAgICAgICAgIGRvYy5pdGVyKDAsIGRvYy5zaXplLCBmdW5jdGlvbihsaW5l
			KSB7CiAgICAgICAgICAgIHZhciBsID0gbGluZS50ZXh0OwogICAgICAgICAgICBpZiAobC5sZW5n
			dGggPiBtYXhMaW5lTGVuZ3RoKSB7CiAgICAgICAgICAgICAgbWF4TGluZUxlbmd0aCA9IGwubGVu
			Z3RoOyBtYXhMaW5lID0gbDsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQog
			ICAgICB9CgogICAgICAvLyBBZGQgdGhlc2UgbGluZXMgdG8gdGhlIHdvcmsgYXJyYXksIHNvIHRo
			YXQgdGhleSB3aWxsIGJlCiAgICAgIC8vIGhpZ2hsaWdodGVkLiBBZGp1c3Qgd29yayBsaW5lcyBp
			ZiBsaW5lcyB3ZXJlIGFkZGVkL3JlbW92ZWQuCiAgICAgIHZhciBuZXdXb3JrID0gW10sIGxlbmRp
			ZmYgPSBuZXdUZXh0Lmxlbmd0aCAtIG5saW5lcyAtIDE7CiAgICAgIGZvciAodmFyIGkgPSAwLCBs
			ID0gd29yay5sZW5ndGg7IGkgPCBsOyArK2kpIHsKICAgICAgICB2YXIgdGFzayA9IHdvcmtbaV07
			CiAgICAgICAgaWYgKHRhc2sgPCBmcm9tLmxpbmUpIG5ld1dvcmsucHVzaCh0YXNrKTsKICAgICAg
			ICBlbHNlIGlmICh0YXNrID4gdG8ubGluZSkgbmV3V29yay5wdXNoKHRhc2sgKyBsZW5kaWZmKTsK
			ICAgICAgfQogICAgICB2YXIgaGxFbmQgPSBmcm9tLmxpbmUgKyBNYXRoLm1pbihuZXdUZXh0Lmxl
			bmd0aCwgNTAwKTsKICAgICAgaGlnaGxpZ2h0TGluZXMoZnJvbS5saW5lLCBobEVuZCk7CiAgICAg
			IG5ld1dvcmsucHVzaChobEVuZCk7CiAgICAgIHdvcmsgPSBuZXdXb3JrOwogICAgICBzdGFydFdv
			cmtlcigxMDApOwogICAgICAvLyBSZW1lbWJlciB0aGF0IHRoZXNlIGxpbmVzIGNoYW5nZWQsIGZv
			ciB1cGRhdGluZyB0aGUgZGlzcGxheQogICAgICBjaGFuZ2VzLnB1c2goe2Zyb206IGZyb20ubGlu
			ZSwgdG86IHRvLmxpbmUgKyAxLCBkaWZmOiBsZW5kaWZmfSk7CiAgICAgIHZhciBjaGFuZ2VPYmog
			PSB7ZnJvbTogZnJvbSwgdG86IHRvLCB0ZXh0OiBuZXdUZXh0fTsKICAgICAgaWYgKHRleHRDaGFu
			Z2VkKSB7CiAgICAgICAgZm9yICh2YXIgY3VyID0gdGV4dENoYW5nZWQ7IGN1ci5uZXh0OyBjdXIg
			PSBjdXIubmV4dCkge30KICAgICAgICBjdXIubmV4dCA9IGNoYW5nZU9iajsKICAgICAgfSBlbHNl
			IHRleHRDaGFuZ2VkID0gY2hhbmdlT2JqOwoKICAgICAgLy8gVXBkYXRlIHRoZSBzZWxlY3Rpb24K
			ICAgICAgZnVuY3Rpb24gdXBkYXRlTGluZShuKSB7cmV0dXJuIG4gPD0gTWF0aC5taW4odG8ubGlu
			ZSwgdG8ubGluZSArIGxlbmRpZmYpID8gbiA6IG4gKyBsZW5kaWZmO30KICAgICAgc2V0U2VsZWN0
			aW9uKHNlbEZyb20sIHNlbFRvLCB1cGRhdGVMaW5lKHNlbC5mcm9tLmxpbmUpLCB1cGRhdGVMaW5l
			KHNlbC50by5saW5lKSk7CgogICAgICAvLyBNYWtlIHN1cmUgdGhlIHNjcm9sbC1zaXplIGRpdiBo
			YXMgdGhlIGNvcnJlY3QgaGVpZ2h0LgogICAgICBpZiAoc2Nyb2xsZXIuY2xpZW50SGVpZ2h0KQog
			ICAgICAgIGNvZGUuc3R5bGUuaGVpZ2h0ID0gKGRvYy5oZWlnaHQgKiB0ZXh0SGVpZ2h0KCkgKyAy
			ICogcGFkZGluZ1RvcCgpKSArICJweCI7CiAgICB9CgogICAgZnVuY3Rpb24gcmVwbGFjZVJhbmdl
			KGNvZGUsIGZyb20sIHRvKSB7CiAgICAgIGZyb20gPSBjbGlwUG9zKGZyb20pOwogICAgICBpZiAo
			IXRvKSB0byA9IGZyb207IGVsc2UgdG8gPSBjbGlwUG9zKHRvKTsKICAgICAgY29kZSA9IHNwbGl0
			TGluZXMoY29kZSk7CiAgICAgIGZ1bmN0aW9uIGFkanVzdFBvcyhwb3MpIHsKICAgICAgICBpZiAo
			cG9zTGVzcyhwb3MsIGZyb20pKSByZXR1cm4gcG9zOwogICAgICAgIGlmICghcG9zTGVzcyh0bywg
			cG9zKSkgcmV0dXJuIGVuZDsKICAgICAgICB2YXIgbGluZSA9IHBvcy5saW5lICsgY29kZS5sZW5n
			dGggLSAodG8ubGluZSAtIGZyb20ubGluZSkgLSAxOwogICAgICAgIHZhciBjaCA9IHBvcy5jaDsK
			ICAgICAgICBpZiAocG9zLmxpbmUgPT0gdG8ubGluZSkKICAgICAgICAgIGNoICs9IGNvZGVbY29k
			ZS5sZW5ndGgtMV0ubGVuZ3RoIC0gKHRvLmNoIC0gKHRvLmxpbmUgPT0gZnJvbS5saW5lID8gZnJv
			bS5jaCA6IDApKTsKICAgICAgICByZXR1cm4ge2xpbmU6IGxpbmUsIGNoOiBjaH07CiAgICAgIH0K
			ICAgICAgdmFyIGVuZDsKICAgICAgcmVwbGFjZVJhbmdlMShjb2RlLCBmcm9tLCB0bywgZnVuY3Rp
			b24oZW5kMSkgewogICAgICAgIGVuZCA9IGVuZDE7CiAgICAgICAgcmV0dXJuIHtmcm9tOiBhZGp1
			c3RQb3Moc2VsLmZyb20pLCB0bzogYWRqdXN0UG9zKHNlbC50byl9OwogICAgICB9KTsKICAgICAg
			cmV0dXJuIGVuZDsKICAgIH0KICAgIGZ1bmN0aW9uIHJlcGxhY2VTZWxlY3Rpb24oY29kZSwgY29s
			bGFwc2UpIHsKICAgICAgcmVwbGFjZVJhbmdlMShzcGxpdExpbmVzKGNvZGUpLCBzZWwuZnJvbSwg
			c2VsLnRvLCBmdW5jdGlvbihlbmQpIHsKICAgICAgICBpZiAoY29sbGFwc2UgPT0gImVuZCIpIHJl
			dHVybiB7ZnJvbTogZW5kLCB0bzogZW5kfTsKICAgICAgICBlbHNlIGlmIChjb2xsYXBzZSA9PSAi
			c3RhcnQiKSByZXR1cm4ge2Zyb206IHNlbC5mcm9tLCB0bzogc2VsLmZyb219OwogICAgICAgIGVs
			c2UgcmV0dXJuIHtmcm9tOiBzZWwuZnJvbSwgdG86IGVuZH07CiAgICAgIH0pOwogICAgfQogICAg
			ZnVuY3Rpb24gcmVwbGFjZVJhbmdlMShjb2RlLCBmcm9tLCB0bywgY29tcHV0ZVNlbCkgewogICAg
			ICB2YXIgZW5kY2ggPSBjb2RlLmxlbmd0aCA9PSAxID8gY29kZVswXS5sZW5ndGggKyBmcm9tLmNo
			IDogY29kZVtjb2RlLmxlbmd0aC0xXS5sZW5ndGg7CiAgICAgIHZhciBuZXdTZWwgPSBjb21wdXRl
			U2VsKHtsaW5lOiBmcm9tLmxpbmUgKyBjb2RlLmxlbmd0aCAtIDEsIGNoOiBlbmRjaH0pOwogICAg
			ICB1cGRhdGVMaW5lcyhmcm9tLCB0bywgY29kZSwgbmV3U2VsLmZyb20sIG5ld1NlbC50byk7CiAg
			ICB9CgogICAgZnVuY3Rpb24gZ2V0UmFuZ2UoZnJvbSwgdG8pIHsKICAgICAgdmFyIGwxID0gZnJv
			bS5saW5lLCBsMiA9IHRvLmxpbmU7CiAgICAgIGlmIChsMSA9PSBsMikgcmV0dXJuIGdldExpbmUo
			bDEpLnRleHQuc2xpY2UoZnJvbS5jaCwgdG8uY2gpOwogICAgICB2YXIgY29kZSA9IFtnZXRMaW5l
			KGwxKS50ZXh0LnNsaWNlKGZyb20uY2gpXTsKICAgICAgZG9jLml0ZXIobDEgKyAxLCBsMiwgZnVu
			Y3Rpb24obGluZSkgeyBjb2RlLnB1c2gobGluZS50ZXh0KTsgfSk7CiAgICAgIGNvZGUucHVzaChn
			ZXRMaW5lKGwyKS50ZXh0LnNsaWNlKDAsIHRvLmNoKSk7CiAgICAgIHJldHVybiBjb2RlLmpvaW4o
			IlxuIik7CiAgICB9CiAgICBmdW5jdGlvbiBnZXRTZWxlY3Rpb24oKSB7CiAgICAgIHJldHVybiBn
			ZXRSYW5nZShzZWwuZnJvbSwgc2VsLnRvKTsKICAgIH0KCiAgICB2YXIgcG9sbGluZ0Zhc3QgPSBm
			YWxzZTsgLy8gRW5zdXJlcyBzbG93UG9sbCBkb2Vzbid0IGNhbmNlbCBmYXN0UG9sbAogICAgZnVu
			Y3Rpb24gc2xvd1BvbGwoKSB7CiAgICAgIGlmIChwb2xsaW5nRmFzdCkgcmV0dXJuOwogICAgICBw
			b2xsLnNldChvcHRpb25zLnBvbGxJbnRlcnZhbCwgZnVuY3Rpb24oKSB7CiAgICAgICAgc3RhcnRP
			cGVyYXRpb24oKTsKICAgICAgICByZWFkSW5wdXQoKTsKICAgICAgICBpZiAoZm9jdXNlZCkgc2xv
			d1BvbGwoKTsKICAgICAgICBlbmRPcGVyYXRpb24oKTsKICAgICAgfSk7CiAgICB9CiAgICBmdW5j
			dGlvbiBmYXN0UG9sbCgpIHsKICAgICAgdmFyIG1pc3NlZCA9IGZhbHNlOwogICAgICBwb2xsaW5n
			RmFzdCA9IHRydWU7CiAgICAgIGZ1bmN0aW9uIHAoKSB7CiAgICAgICAgc3RhcnRPcGVyYXRpb24o
			KTsKICAgICAgICB2YXIgY2hhbmdlZCA9IHJlYWRJbnB1dCgpOwogICAgICAgIGlmICghY2hhbmdl
			ZCAmJiAhbWlzc2VkKSB7bWlzc2VkID0gdHJ1ZTsgcG9sbC5zZXQoNjAsIHApO30KICAgICAgICBl
			bHNlIHtwb2xsaW5nRmFzdCA9IGZhbHNlOyBzbG93UG9sbCgpO30KICAgICAgICBlbmRPcGVyYXRp
			b24oKTsKICAgICAgfQogICAgICBwb2xsLnNldCgyMCwgcCk7CiAgICB9CgogICAgLy8gUHJldmlu
			cHV0IGlzIGEgaGFjayB0byB3b3JrIHdpdGggSU1FLiBJZiB3ZSByZXNldCB0aGUgdGV4dGFyZWEK
			ICAgIC8vIG9uIGV2ZXJ5IGNoYW5nZSwgdGhhdCBicmVha3MgSU1FLiBTbyB3ZSBsb29rIGZvciBj
			aGFuZ2VzCiAgICAvLyBjb21wYXJlZCB0byB0aGUgcHJldmlvdXMgY29udGVudCBpbnN0ZWFkLiAo
			TW9kZXJuIGJyb3dzZXJzIGhhdmUKICAgIC8vIGV2ZW50cyB0aGF0IGluZGljYXRlIElNRSB0YWtp
			bmcgcGxhY2UsIGJ1dCB0aGVzZSBhcmUgbm90IHdpZGVseQogICAgLy8gc3VwcG9ydGVkIG9yIGNv
			bXBhdGlibGUgZW5vdWdoIHlldCB0byByZWx5IG9uLikKICAgIHZhciBwcmV2SW5wdXQgPSAiIjsK
			ICAgIGZ1bmN0aW9uIHJlYWRJbnB1dCgpIHsKICAgICAgaWYgKGxlYXZlSW5wdXRBbG9uZSB8fCAh
			Zm9jdXNlZCB8fCBoYXNTZWxlY3Rpb24oaW5wdXQpIHx8IG9wdGlvbnMucmVhZE9ubHkpIHJldHVy
			biBmYWxzZTsKICAgICAgdmFyIHRleHQgPSBpbnB1dC52YWx1ZTsKICAgICAgaWYgKHRleHQgPT0g
			cHJldklucHV0KSByZXR1cm4gZmFsc2U7CiAgICAgIHNoaWZ0U2VsZWN0aW5nID0gbnVsbDsKICAg
			ICAgdmFyIHNhbWUgPSAwLCBsID0gTWF0aC5taW4ocHJldklucHV0Lmxlbmd0aCwgdGV4dC5sZW5n
			dGgpOwogICAgICB3aGlsZSAoc2FtZSA8IGwgJiYgcHJldklucHV0W3NhbWVdID09IHRleHRbc2Ft
			ZV0pICsrc2FtZTsKICAgICAgaWYgKHNhbWUgPCBwcmV2SW5wdXQubGVuZ3RoKQogICAgICAgIHNl
			bC5mcm9tID0ge2xpbmU6IHNlbC5mcm9tLmxpbmUsIGNoOiBzZWwuZnJvbS5jaCAtIChwcmV2SW5w
			dXQubGVuZ3RoIC0gc2FtZSl9OwogICAgICBlbHNlIGlmIChvdmVyd3JpdGUgJiYgcG9zRXEoc2Vs
			LmZyb20sIHNlbC50bykpCiAgICAgICAgc2VsLnRvID0ge2xpbmU6IHNlbC50by5saW5lLCBjaDog
			TWF0aC5taW4oZ2V0TGluZShzZWwudG8ubGluZSkudGV4dC5sZW5ndGgsIHNlbC50by5jaCArICh0
			ZXh0Lmxlbmd0aCAtIHNhbWUpKX07CiAgICAgIHJlcGxhY2VTZWxlY3Rpb24odGV4dC5zbGljZShz
			YW1lKSwgImVuZCIpOwogICAgICBwcmV2SW5wdXQgPSB0ZXh0OwogICAgICByZXR1cm4gdHJ1ZTsK
			ICAgIH0KICAgIGZ1bmN0aW9uIHJlc2V0SW5wdXQodXNlcikgewogICAgICBpZiAoIXBvc0VxKHNl
			bC5mcm9tLCBzZWwudG8pKSB7CiAgICAgICAgcHJldklucHV0ID0gIiI7CiAgICAgICAgaW5wdXQu
			dmFsdWUgPSBnZXRTZWxlY3Rpb24oKTsKICAgICAgICBzZWxlY3RJbnB1dChpbnB1dCk7CiAgICAg
			IH0gZWxzZSBpZiAodXNlcikgcHJldklucHV0ID0gaW5wdXQudmFsdWUgPSAiIjsKICAgIH0KCiAg
			ICBmdW5jdGlvbiBmb2N1c0lucHV0KCkgewogICAgICBpZiAob3B0aW9ucy5yZWFkT25seSAhPSAi
			bm9jdXJzb3IiKSBpbnB1dC5mb2N1cygpOwogICAgfQoKICAgIGZ1bmN0aW9uIHNjcm9sbEVkaXRv
			ckludG9WaWV3KCkgewogICAgICBpZiAoIWN1cnNvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QpIHJl
			dHVybjsKICAgICAgdmFyIHJlY3QgPSBjdXJzb3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAg
			ICAgIC8vIElFIHJldHVybnMgYm9ndXMgY29vcmRpbmF0ZXMgd2hlbiB0aGUgaW5zdGFuY2Ugc2l0
			cyBpbnNpZGUgb2YgYW4gaWZyYW1lIGFuZCB0aGUgY3Vyc29yIGlzIGhpZGRlbgogICAgICBpZiAo
			aWUgJiYgcmVjdC50b3AgPT0gcmVjdC5ib3R0b20pIHJldHVybjsKICAgICAgdmFyIHdpbkggPSB3
			aW5kb3cuaW5uZXJIZWlnaHQgfHwgTWF0aC5tYXgoZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQs
			IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRIZWlnaHQpOwogICAgICBpZiAocmVjdC50
			b3AgPCAwIHx8IHJlY3QuYm90dG9tID4gd2luSCkgY3Vyc29yLnNjcm9sbEludG9WaWV3KCk7CiAg
			ICB9CiAgICBmdW5jdGlvbiBzY3JvbGxDdXJzb3JJbnRvVmlldygpIHsKICAgICAgdmFyIGN1cnNv
			ciA9IGxvY2FsQ29vcmRzKHNlbC5pbnZlcnRlZCA/IHNlbC5mcm9tIDogc2VsLnRvKTsKICAgICAg
			dmFyIHggPSBvcHRpb25zLmxpbmVXcmFwcGluZyA/IE1hdGgubWluKGN1cnNvci54LCBsaW5lU3Bh
			Y2Uub2Zmc2V0V2lkdGgpIDogY3Vyc29yLng7CiAgICAgIHJldHVybiBzY3JvbGxJbnRvVmlldyh4
			LCBjdXJzb3IueSwgeCwgY3Vyc29yLnlCb3QpOwogICAgfQogICAgZnVuY3Rpb24gc2Nyb2xsSW50
			b1ZpZXcoeDEsIHkxLCB4MiwgeTIpIHsKICAgICAgdmFyIHBsID0gcGFkZGluZ0xlZnQoKSwgcHQg
			PSBwYWRkaW5nVG9wKCksIGxoID0gdGV4dEhlaWdodCgpOwogICAgICB5MSArPSBwdDsgeTIgKz0g
			cHQ7IHgxICs9IHBsOyB4MiArPSBwbDsKICAgICAgdmFyIHNjcmVlbiA9IHNjcm9sbGVyLmNsaWVu
			dEhlaWdodCwgc2NyZWVudG9wID0gc2Nyb2xsZXIuc2Nyb2xsVG9wLCBzY3JvbGxlZCA9IGZhbHNl
			LCByZXN1bHQgPSB0cnVlOwogICAgICBpZiAoeTEgPCBzY3JlZW50b3ApIHtzY3JvbGxlci5zY3Jv
			bGxUb3AgPSBNYXRoLm1heCgwLCB5MSAtIDIqbGgpOyBzY3JvbGxlZCA9IHRydWU7fQogICAgICBl
			bHNlIGlmICh5MiA+IHNjcmVlbnRvcCArIHNjcmVlbikge3Njcm9sbGVyLnNjcm9sbFRvcCA9IHky
			ICsgbGggLSBzY3JlZW47IHNjcm9sbGVkID0gdHJ1ZTt9CgogICAgICB2YXIgc2NyZWVudyA9IHNj
			cm9sbGVyLmNsaWVudFdpZHRoLCBzY3JlZW5sZWZ0ID0gc2Nyb2xsZXIuc2Nyb2xsTGVmdDsKICAg
			ICAgdmFyIGd1dHRlcncgPSBvcHRpb25zLmZpeGVkR3V0dGVyID8gZ3V0dGVyLmNsaWVudFdpZHRo
			IDogMDsKICAgICAgaWYgKHgxIDwgc2NyZWVubGVmdCArIGd1dHRlcncpIHsKICAgICAgICBpZiAo
			eDEgPCA1MCkgeDEgPSAwOwogICAgICAgIHNjcm9sbGVyLnNjcm9sbExlZnQgPSBNYXRoLm1heCgw
			LCB4MSAtIDEwIC0gZ3V0dGVydyk7CiAgICAgICAgc2Nyb2xsZWQgPSB0cnVlOwogICAgICB9CiAg
			ICAgIGVsc2UgaWYgKHgyID4gc2NyZWVudyArIHNjcmVlbmxlZnQgLSAzKSB7CiAgICAgICAgc2Ny
			b2xsZXIuc2Nyb2xsTGVmdCA9IHgyICsgMTAgLSBzY3JlZW53OwogICAgICAgIHNjcm9sbGVkID0g
			dHJ1ZTsKICAgICAgICBpZiAoeDIgPiBjb2RlLmNsaWVudFdpZHRoKSByZXN1bHQgPSBmYWxzZTsK
			ICAgICAgfQogICAgICBpZiAoc2Nyb2xsZWQgJiYgb3B0aW9ucy5vblNjcm9sbCkgb3B0aW9ucy5v
			blNjcm9sbChpbnN0YW5jZSk7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgZnVuY3Rp
			b24gdmlzaWJsZUxpbmVzKCkgewogICAgICB2YXIgbGggPSB0ZXh0SGVpZ2h0KCksIHRvcCA9IHNj
			cm9sbGVyLnNjcm9sbFRvcCAtIHBhZGRpbmdUb3AoKTsKICAgICAgdmFyIGZyb21faGVpZ2h0ID0g
			TWF0aC5tYXgoMCwgTWF0aC5mbG9vcih0b3AgLyBsaCkpOwogICAgICB2YXIgdG9faGVpZ2h0ID0g
			TWF0aC5jZWlsKCh0b3AgKyBzY3JvbGxlci5jbGllbnRIZWlnaHQpIC8gbGgpOwogICAgICByZXR1
			cm4ge2Zyb206IGxpbmVBdEhlaWdodChkb2MsIGZyb21faGVpZ2h0KSwKICAgICAgICAgICAgICB0
			bzogbGluZUF0SGVpZ2h0KGRvYywgdG9faGVpZ2h0KX07CiAgICB9CiAgICAvLyBVc2VzIGEgc2V0
			IG9mIGNoYW5nZXMgcGx1cyB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24gdG8KICAgIC8vIGRl
			dGVybWluZSB3aGljaCBET00gdXBkYXRlcyBoYXZlIHRvIGJlIG1hZGUsIGFuZCBtYWtlcyB0aGUK
			ICAgIC8vIHVwZGF0ZXMuCiAgICBmdW5jdGlvbiB1cGRhdGVEaXNwbGF5KGNoYW5nZXMsIHN1cHBy
			ZXNzQ2FsbGJhY2spIHsKICAgICAgaWYgKCFzY3JvbGxlci5jbGllbnRXaWR0aCkgewogICAgICAg
			IHNob3dpbmdGcm9tID0gc2hvd2luZ1RvID0gZGlzcGxheU9mZnNldCA9IDA7CiAgICAgICAgcmV0
			dXJuOwogICAgICB9CiAgICAgIC8vIENvbXB1dGUgdGhlIG5ldyB2aXNpYmxlIHdpbmRvdwogICAg
			ICB2YXIgdmlzaWJsZSA9IHZpc2libGVMaW5lcygpOwogICAgICAvLyBCYWlsIG91dCBpZiB0aGUg
			dmlzaWJsZSBhcmVhIGlzIGFscmVhZHkgcmVuZGVyZWQgYW5kIG5vdGhpbmcgY2hhbmdlZC4KICAg
			ICAgaWYgKGNoYW5nZXMgIT09IHRydWUgJiYgY2hhbmdlcy5sZW5ndGggPT0gMCAmJiB2aXNpYmxl
			LmZyb20gPiBzaG93aW5nRnJvbSAmJiB2aXNpYmxlLnRvIDwgc2hvd2luZ1RvKSByZXR1cm47CiAg
			ICAgIHZhciBmcm9tID0gTWF0aC5tYXgodmlzaWJsZS5mcm9tIC0gMTAwLCAwKSwgdG8gPSBNYXRo
			Lm1pbihkb2Muc2l6ZSwgdmlzaWJsZS50byArIDEwMCk7CiAgICAgIGlmIChzaG93aW5nRnJvbSA8
			IGZyb20gJiYgZnJvbSAtIHNob3dpbmdGcm9tIDwgMjApIGZyb20gPSBzaG93aW5nRnJvbTsKICAg
			ICAgaWYgKHNob3dpbmdUbyA+IHRvICYmIHNob3dpbmdUbyAtIHRvIDwgMjApIHRvID0gTWF0aC5t
			aW4oZG9jLnNpemUsIHNob3dpbmdUbyk7CgogICAgICAvLyBDcmVhdGUgYSByYW5nZSBvZiB0aGVv
			cmV0aWNhbGx5IGludGFjdCBsaW5lcywgYW5kIHB1bmNoIGhvbGVzCiAgICAgIC8vIGluIHRoYXQg
			dXNpbmcgdGhlIGNoYW5nZSBpbmZvLgogICAgICB2YXIgaW50YWN0ID0gY2hhbmdlcyA9PT0gdHJ1
			ZSA/IFtdIDoKICAgICAgICBjb21wdXRlSW50YWN0KFt7ZnJvbTogc2hvd2luZ0Zyb20sIHRvOiBz
			aG93aW5nVG8sIGRvbVN0YXJ0OiAwfV0sIGNoYW5nZXMpOwogICAgICAvLyBDbGlwIG9mZiB0aGUg
			cGFydHMgdGhhdCB3b24ndCBiZSB2aXNpYmxlCiAgICAgIHZhciBpbnRhY3RMaW5lcyA9IDA7CiAg
			ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW50YWN0Lmxlbmd0aDsgKytpKSB7CiAgICAgICAgdmFy
			IHJhbmdlID0gaW50YWN0W2ldOwogICAgICAgIGlmIChyYW5nZS5mcm9tIDwgZnJvbSkge3Jhbmdl
			LmRvbVN0YXJ0ICs9IChmcm9tIC0gcmFuZ2UuZnJvbSk7IHJhbmdlLmZyb20gPSBmcm9tO30KICAg
			ICAgICBpZiAocmFuZ2UudG8gPiB0bykgcmFuZ2UudG8gPSB0bzsKICAgICAgICBpZiAocmFuZ2Uu
			ZnJvbSA+PSByYW5nZS50bykgaW50YWN0LnNwbGljZShpLS0sIDEpOwogICAgICAgIGVsc2UgaW50
			YWN0TGluZXMgKz0gcmFuZ2UudG8gLSByYW5nZS5mcm9tOwogICAgICB9CiAgICAgIGlmIChpbnRh
			Y3RMaW5lcyA9PSB0byAtIGZyb20pIHJldHVybjsKICAgICAgaW50YWN0LnNvcnQoZnVuY3Rpb24o
			YSwgYikge3JldHVybiBhLmRvbVN0YXJ0IC0gYi5kb21TdGFydDt9KTsKCiAgICAgIHZhciB0aCA9
			IHRleHRIZWlnaHQoKSwgZ3V0dGVyRGlzcGxheSA9IGd1dHRlci5zdHlsZS5kaXNwbGF5OwogICAg
			ICBsaW5lRGl2LnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICAgIHBhdGNoRGlzcGxheShmcm9t
			LCB0bywgaW50YWN0KTsKICAgICAgbGluZURpdi5zdHlsZS5kaXNwbGF5ID0gZ3V0dGVyLnN0eWxl
			LmRpc3BsYXkgPSAiIjsKCiAgICAgIC8vIFBvc2l0aW9uIHRoZSBtb3ZlciBkaXYgdG8gYWxpZ24g
			d2l0aCB0aGUgbGluZXMgaXQncyBzdXBwb3NlZAogICAgICAvLyB0byBiZSBzaG93aW5nICh3aGlj
			aCB3aWxsIGNvdmVyIHRoZSB2aXNpYmxlIGRpc3BsYXkpCiAgICAgIHZhciBkaWZmZXJlbnQgPSBm
			cm9tICE9IHNob3dpbmdGcm9tIHx8IHRvICE9IHNob3dpbmdUbyB8fCBsYXN0U2l6ZUMgIT0gc2Ny
			b2xsZXIuY2xpZW50SGVpZ2h0ICsgdGg7CiAgICAgIC8vIFRoaXMgaXMganVzdCBhIGJvZ3VzIGZv
			cm11bGEgdGhhdCBkZXRlY3RzIHdoZW4gdGhlIGVkaXRvciBpcwogICAgICAvLyByZXNpemVkIG9y
			IHRoZSBmb250IHNpemUgY2hhbmdlcy4KICAgICAgaWYgKGRpZmZlcmVudCkgbGFzdFNpemVDID0g
			c2Nyb2xsZXIuY2xpZW50SGVpZ2h0ICsgdGg7CiAgICAgIHNob3dpbmdGcm9tID0gZnJvbTsgc2hv
			d2luZ1RvID0gdG87CiAgICAgIGRpc3BsYXlPZmZzZXQgPSBoZWlnaHRBdExpbmUoZG9jLCBmcm9t
			KTsKICAgICAgbW92ZXIuc3R5bGUudG9wID0gKGRpc3BsYXlPZmZzZXQgKiB0aCkgKyAicHgiOwog
			ICAgICBpZiAoc2Nyb2xsZXIuY2xpZW50SGVpZ2h0KQogICAgICAgIGNvZGUuc3R5bGUuaGVpZ2h0
			ID0gKGRvYy5oZWlnaHQgKiB0aCArIDIgKiBwYWRkaW5nVG9wKCkpICsgInB4IjsKCiAgICAgIC8v
			IFNpbmNlIHRoaXMgaXMgYWxsIHJhdGhlciBlcnJvciBwcm9uZSwgaXQgaXMgaG9ub3VyZWQgd2l0
			aCB0aGUKICAgICAgLy8gb25seSBhc3NlcnRpb24gaW4gdGhlIHdob2xlIGZpbGUuCiAgICAgIGlm
			IChsaW5lRGl2LmNoaWxkTm9kZXMubGVuZ3RoICE9IHNob3dpbmdUbyAtIHNob3dpbmdGcm9tKQog
			ICAgICAgIHRocm93IG5ldyBFcnJvcigiQkFEIFBBVENIISAiICsgSlNPTi5zdHJpbmdpZnkoaW50
			YWN0KSArICIgc2l6ZT0iICsgKHNob3dpbmdUbyAtIHNob3dpbmdGcm9tKSArCiAgICAgICAgICAg
			ICAgICAgICAgICAgICIgbm9kZXM9IiArIGxpbmVEaXYuY2hpbGROb2Rlcy5sZW5ndGgpOwoKICAg
			ICAgaWYgKG9wdGlvbnMubGluZVdyYXBwaW5nKSB7CiAgICAgICAgbWF4V2lkdGggPSBzY3JvbGxl
			ci5jbGllbnRXaWR0aDsKICAgICAgICB2YXIgY3VyTm9kZSA9IGxpbmVEaXYuZmlyc3RDaGlsZCwg
			aGVpZ2h0Q2hhbmdlZCA9IGZhbHNlOwogICAgICAgIGRvYy5pdGVyKHNob3dpbmdGcm9tLCBzaG93
			aW5nVG8sIGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICAgIGlmICghbGluZS5oaWRkZW4pIHsKICAg
			ICAgICAgICAgdmFyIGhlaWdodCA9IE1hdGgucm91bmQoY3VyTm9kZS5vZmZzZXRIZWlnaHQgLyB0
			aCkgfHwgMTsKICAgICAgICAgICAgaWYgKGxpbmUuaGVpZ2h0ICE9IGhlaWdodCkgewogICAgICAg
			ICAgICAgIHVwZGF0ZUxpbmVIZWlnaHQobGluZSwgaGVpZ2h0KTsKICAgICAgICAgICAgICBndXR0
			ZXJEaXJ0eSA9IGhlaWdodENoYW5nZWQgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9
			CiAgICAgICAgICBjdXJOb2RlID0gY3VyTm9kZS5uZXh0U2libGluZzsKICAgICAgICB9KTsKICAg
			ICAgICBpZiAoaGVpZ2h0Q2hhbmdlZCkKICAgICAgICAgIGNvZGUuc3R5bGUuaGVpZ2h0ID0gKGRv
			Yy5oZWlnaHQgKiB0aCArIDIgKiBwYWRkaW5nVG9wKCkpICsgInB4IjsKICAgICAgfSBlbHNlIHsK
			ICAgICAgICBpZiAobWF4V2lkdGggPT0gbnVsbCkgbWF4V2lkdGggPSBzdHJpbmdXaWR0aChtYXhM
			aW5lKTsKICAgICAgICBpZiAobWF4V2lkdGggPiBzY3JvbGxlci5jbGllbnRXaWR0aCkgewogICAg
			ICAgICAgbGluZVNwYWNlLnN0eWxlLndpZHRoID0gbWF4V2lkdGggKyAicHgiOwogICAgICAgICAg
			Ly8gTmVlZGVkIHRvIHByZXZlbnQgb2RkIHdyYXBwaW5nL2hpZGluZyBvZiB3aWRnZXRzIHBsYWNl
			ZCBpbiBoZXJlLgogICAgICAgICAgY29kZS5zdHlsZS53aWR0aCA9ICIiOwogICAgICAgICAgY29k
			ZS5zdHlsZS53aWR0aCA9IHNjcm9sbGVyLnNjcm9sbFdpZHRoICsgInB4IjsKICAgICAgICB9IGVs
			c2UgewogICAgICAgICAgbGluZVNwYWNlLnN0eWxlLndpZHRoID0gY29kZS5zdHlsZS53aWR0aCA9
			ICIiOwogICAgICAgIH0KICAgICAgfQogICAgICBndXR0ZXIuc3R5bGUuZGlzcGxheSA9IGd1dHRl
			ckRpc3BsYXk7CiAgICAgIGlmIChkaWZmZXJlbnQgfHwgZ3V0dGVyRGlydHkpIHVwZGF0ZUd1dHRl
			cigpOwogICAgICB1cGRhdGVTZWxlY3Rpb24oKTsKICAgICAgaWYgKCFzdXBwcmVzc0NhbGxiYWNr
			ICYmIG9wdGlvbnMub25VcGRhdGUpIG9wdGlvbnMub25VcGRhdGUoaW5zdGFuY2UpOwogICAgICBy
			ZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICBmdW5jdGlvbiBjb21wdXRlSW50YWN0KGludGFjdCwgY2hh
			bmdlcykgewogICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoYW5nZXMubGVuZ3RoIHx8IDA7IGkg
			PCBsOyArK2kpIHsKICAgICAgICB2YXIgY2hhbmdlID0gY2hhbmdlc1tpXSwgaW50YWN0MiA9IFtd
			LCBkaWZmID0gY2hhbmdlLmRpZmYgfHwgMDsKICAgICAgICBmb3IgKHZhciBqID0gMCwgbDIgPSBp
			bnRhY3QubGVuZ3RoOyBqIDwgbDI7ICsraikgewogICAgICAgICAgdmFyIHJhbmdlID0gaW50YWN0
			W2pdOwogICAgICAgICAgaWYgKGNoYW5nZS50byA8PSByYW5nZS5mcm9tICYmIGNoYW5nZS5kaWZm
			KQogICAgICAgICAgICBpbnRhY3QyLnB1c2goe2Zyb206IHJhbmdlLmZyb20gKyBkaWZmLCB0bzog
			cmFuZ2UudG8gKyBkaWZmLAogICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVN0YXJ0OiByYW5n
			ZS5kb21TdGFydH0pOwogICAgICAgICAgZWxzZSBpZiAoY2hhbmdlLnRvIDw9IHJhbmdlLmZyb20g
			fHwgY2hhbmdlLmZyb20gPj0gcmFuZ2UudG8pCiAgICAgICAgICAgIGludGFjdDIucHVzaChyYW5n
			ZSk7CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgaWYgKGNoYW5nZS5mcm9tID4gcmFuZ2Uu
			ZnJvbSkKICAgICAgICAgICAgICBpbnRhY3QyLnB1c2goe2Zyb206IHJhbmdlLmZyb20sIHRvOiBj
			aGFuZ2UuZnJvbSwgZG9tU3RhcnQ6IHJhbmdlLmRvbVN0YXJ0fSk7CiAgICAgICAgICAgIGlmIChj
			aGFuZ2UudG8gPCByYW5nZS50bykKICAgICAgICAgICAgICBpbnRhY3QyLnB1c2goe2Zyb206IGNo
			YW5nZS50byArIGRpZmYsIHRvOiByYW5nZS50byArIGRpZmYsCiAgICAgICAgICAgICAgICAgICAg
			ICAgICAgICBkb21TdGFydDogcmFuZ2UuZG9tU3RhcnQgKyAoY2hhbmdlLnRvIC0gcmFuZ2UuZnJv
			bSl9KTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgaW50YWN0ID0gaW50YWN0MjsKICAg
			ICAgfQogICAgICByZXR1cm4gaW50YWN0OwogICAgfQoKICAgIGZ1bmN0aW9uIHBhdGNoRGlzcGxh
			eShmcm9tLCB0bywgaW50YWN0KSB7CiAgICAgIC8vIFRoZSBmaXJzdCBwYXNzIHJlbW92ZXMgdGhl
			IERPTSBub2RlcyB0aGF0IGFyZW4ndCBpbnRhY3QuCiAgICAgIGlmICghaW50YWN0Lmxlbmd0aCkg
			bGluZURpdi5pbm5lckhUTUwgPSAiIjsKICAgICAgZWxzZSB7CiAgICAgICAgZnVuY3Rpb24ga2ls
			bE5vZGUobm9kZSkgewogICAgICAgICAgdmFyIHRtcCA9IG5vZGUubmV4dFNpYmxpbmc7CiAgICAg
			ICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7CiAgICAgICAgICByZXR1cm4g
			dG1wOwogICAgICAgIH0KICAgICAgICB2YXIgZG9tUG9zID0gMCwgY3VyTm9kZSA9IGxpbmVEaXYu
			Zmlyc3RDaGlsZCwgbjsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGludGFjdC5sZW5ndGg7
			ICsraSkgewogICAgICAgICAgdmFyIGN1ciA9IGludGFjdFtpXTsKICAgICAgICAgIHdoaWxlIChj
			dXIuZG9tU3RhcnQgPiBkb21Qb3MpIHtjdXJOb2RlID0ga2lsbE5vZGUoY3VyTm9kZSk7IGRvbVBv
			cysrO30KICAgICAgICAgIGZvciAodmFyIGogPSAwLCBlID0gY3VyLnRvIC0gY3VyLmZyb207IGog
			PCBlOyArK2opIHtjdXJOb2RlID0gY3VyTm9kZS5uZXh0U2libGluZzsgZG9tUG9zKys7fQogICAg
			ICAgIH0KICAgICAgICB3aGlsZSAoY3VyTm9kZSkgY3VyTm9kZSA9IGtpbGxOb2RlKGN1ck5vZGUp
			OwogICAgICB9CiAgICAgIC8vIFRoaXMgcGFzcyBmaWxscyBpbiB0aGUgbGluZXMgdGhhdCBhY3R1
			YWxseSBjaGFuZ2VkLgogICAgICB2YXIgbmV4dEludGFjdCA9IGludGFjdC5zaGlmdCgpLCBjdXJO
			b2RlID0gbGluZURpdi5maXJzdENoaWxkLCBqID0gZnJvbTsKICAgICAgdmFyIHNjcmF0Y2ggPSB0
			YXJnZXREb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSwgbmV3RWx0OwogICAgICBkb2MuaXRl
			cihmcm9tLCB0bywgZnVuY3Rpb24obGluZSkgewogICAgICAgIGlmIChuZXh0SW50YWN0ICYmIG5l
			eHRJbnRhY3QudG8gPT0gaikgbmV4dEludGFjdCA9IGludGFjdC5zaGlmdCgpOwogICAgICAgIGlm
			ICghbmV4dEludGFjdCB8fCBuZXh0SW50YWN0LmZyb20gPiBqKSB7CiAgICAgICAgICBpZiAobGlu
			ZS5oaWRkZW4pIHZhciBodG1sID0gc2NyYXRjaC5pbm5lckhUTUwgPSAiPHByZT48L3ByZT4iOwog
			ICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIHZhciBodG1sID0gJzxwcmU+JyArIGxpbmUuZ2V0
			SFRNTChtYWtlVGFiKSArICc8L3ByZT4nOwogICAgICAgICAgICAvLyBLbHVkZ2UgdG8gbWFrZSBz
			dXJlIHRoZSBzdHlsZWQgZWxlbWVudCBsaWVzIGJlaGluZCB0aGUgc2VsZWN0aW9uIChieSB6LWlu
			ZGV4KQogICAgICAgICAgICBpZiAobGluZS5jbGFzc05hbWUpCiAgICAgICAgICAgICAgaHRtbCA9
			ICc8ZGl2IHN0eWxlPSJwb3NpdGlvbjogcmVsYXRpdmUiPjxwcmUgY2xhc3M9IicgKyBsaW5lLmNs
			YXNzTmFtZSArCiAgICAgICAgICAgICAgJyIgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVm
			dDogMDsgcmlnaHQ6IDA7IHRvcDogMDsgYm90dG9tOiAwOyB6LWluZGV4OiAtMiI+JiMxNjA7PC9w
			cmU+JyArIGh0bWwgKyAiPC9kaXY+IjsKICAgICAgICAgIH0KICAgICAgICAgIHNjcmF0Y2guaW5u
			ZXJIVE1MID0gaHRtbDsKICAgICAgICAgIGxpbmVEaXYuaW5zZXJ0QmVmb3JlKHNjcmF0Y2guZmly
			c3RDaGlsZCwgY3VyTm9kZSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGN1ck5vZGUgPSBj
			dXJOb2RlLm5leHRTaWJsaW5nOwogICAgICAgIH0KICAgICAgICArK2o7CiAgICAgIH0pOwogICAg
			fQoKICAgIGZ1bmN0aW9uIHVwZGF0ZUd1dHRlcigpIHsKICAgICAgaWYgKCFvcHRpb25zLmd1dHRl
			ciAmJiAhb3B0aW9ucy5saW5lTnVtYmVycykgcmV0dXJuOwogICAgICB2YXIgaFRleHQgPSBtb3Zl
			ci5vZmZzZXRIZWlnaHQsIGhFZGl0b3IgPSBzY3JvbGxlci5jbGllbnRIZWlnaHQ7CiAgICAgIGd1
			dHRlci5zdHlsZS5oZWlnaHQgPSAoaFRleHQgLSBoRWRpdG9yIDwgMiA/IGhFZGl0b3IgOiBoVGV4
			dCkgKyAicHgiOwogICAgICB2YXIgaHRtbCA9IFtdLCBpID0gc2hvd2luZ0Zyb207CiAgICAgIGRv
			Yy5pdGVyKHNob3dpbmdGcm9tLCBNYXRoLm1heChzaG93aW5nVG8sIHNob3dpbmdGcm9tICsgMSks
			IGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICBpZiAobGluZS5oaWRkZW4pIHsKICAgICAgICAgIGh0
			bWwucHVzaCgiPHByZT48L3ByZT4iKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdmFyIG1h
			cmtlciA9IGxpbmUuZ3V0dGVyTWFya2VyOwogICAgICAgICAgdmFyIHRleHQgPSBvcHRpb25zLmxp
			bmVOdW1iZXJzID8gaSArIG9wdGlvbnMuZmlyc3RMaW5lTnVtYmVyIDogbnVsbDsKICAgICAgICAg
			IGlmIChtYXJrZXIgJiYgbWFya2VyLnRleHQpCiAgICAgICAgICAgIHRleHQgPSBtYXJrZXIudGV4
			dC5yZXBsYWNlKCIlTiUiLCB0ZXh0ICE9IG51bGwgPyB0ZXh0IDogIiIpOwogICAgICAgICAgZWxz
			ZSBpZiAodGV4dCA9PSBudWxsKQogICAgICAgICAgICB0ZXh0ID0gIlx1MDBhMCI7CiAgICAgICAg
			ICBodG1sLnB1c2goKG1hcmtlciAmJiBtYXJrZXIuc3R5bGUgPyAnPHByZSBjbGFzcz0iJyArIG1h
			cmtlci5zdHlsZSArICciPicgOiAiPHByZT4iKSwgdGV4dCk7CiAgICAgICAgICBmb3IgKHZhciBq
			ID0gMTsgaiA8IGxpbmUuaGVpZ2h0OyArK2opIGh0bWwucHVzaCgiPGJyLz4mIzE2MDsiKTsKICAg
			ICAgICAgIGh0bWwucHVzaCgiPC9wcmU+Iik7CiAgICAgICAgfQogICAgICAgICsraTsKICAgICAg
			fSk7CiAgICAgIGd1dHRlci5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICBndXR0ZXJUZXh0
			LmlubmVySFRNTCA9IGh0bWwuam9pbigiIik7CiAgICAgIHZhciBtaW53aWR0aCA9IFN0cmluZyhk
			b2Muc2l6ZSkubGVuZ3RoLCBmaXJzdE5vZGUgPSBndXR0ZXJUZXh0LmZpcnN0Q2hpbGQsIHZhbCA9
			IGVsdFRleHQoZmlyc3ROb2RlKSwgcGFkID0gIiI7CiAgICAgIHdoaWxlICh2YWwubGVuZ3RoICsg
			cGFkLmxlbmd0aCA8IG1pbndpZHRoKSBwYWQgKz0gIlx1MDBhMCI7CiAgICAgIGlmIChwYWQpIGZp
			cnN0Tm9kZS5pbnNlcnRCZWZvcmUodGFyZ2V0RG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUocGFkKSwg
			Zmlyc3ROb2RlLmZpcnN0Q2hpbGQpOwogICAgICBndXR0ZXIuc3R5bGUuZGlzcGxheSA9ICIiOwog
			ICAgICBsaW5lU3BhY2Uuc3R5bGUubWFyZ2luTGVmdCA9IGd1dHRlci5vZmZzZXRXaWR0aCArICJw
			eCI7CiAgICAgIGd1dHRlckRpcnR5ID0gZmFsc2U7CiAgICB9CiAgICBmdW5jdGlvbiB1cGRhdGVT
			ZWxlY3Rpb24oKSB7CiAgICAgIHZhciBjb2xsYXBzZWQgPSBwb3NFcShzZWwuZnJvbSwgc2VsLnRv
			KTsKICAgICAgdmFyIGZyb21Qb3MgPSBsb2NhbENvb3JkcyhzZWwuZnJvbSwgdHJ1ZSk7CiAgICAg
			IHZhciB0b1BvcyA9IGNvbGxhcHNlZCA/IGZyb21Qb3MgOiBsb2NhbENvb3JkcyhzZWwudG8sIHRy
			dWUpOwogICAgICB2YXIgaGVhZFBvcyA9IHNlbC5pbnZlcnRlZCA/IGZyb21Qb3MgOiB0b1Bvcywg
			dGggPSB0ZXh0SGVpZ2h0KCk7CiAgICAgIHZhciB3cmFwT2ZmID0gZWx0T2Zmc2V0KHdyYXBwZXIp
			LCBsaW5lT2ZmID0gZWx0T2Zmc2V0KGxpbmVEaXYpOwogICAgICBpbnB1dERpdi5zdHlsZS50b3Ag
			PSBNYXRoLm1heCgwLCBNYXRoLm1pbihzY3JvbGxlci5vZmZzZXRIZWlnaHQsIGhlYWRQb3MueSAr
			IGxpbmVPZmYudG9wIC0gd3JhcE9mZi50b3ApKSArICJweCI7CiAgICAgIGlucHV0RGl2LnN0eWxl
			LmxlZnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihzY3JvbGxlci5vZmZzZXRXaWR0aCwgaGVhZFBv
			cy54ICsgbGluZU9mZi5sZWZ0IC0gd3JhcE9mZi5sZWZ0KSkgKyAicHgiOwogICAgICBpZiAoY29s
			bGFwc2VkKSB7CiAgICAgICAgY3Vyc29yLnN0eWxlLnRvcCA9IGhlYWRQb3MueSArICJweCI7CiAg
			ICAgICAgY3Vyc29yLnN0eWxlLmxlZnQgPSAob3B0aW9ucy5saW5lV3JhcHBpbmcgPyBNYXRoLm1p
			bihoZWFkUG9zLngsIGxpbmVTcGFjZS5vZmZzZXRXaWR0aCkgOiBoZWFkUG9zLngpICsgInB4IjsK
			ICAgICAgICBjdXJzb3Iuc3R5bGUuZGlzcGxheSA9ICIiOwogICAgICAgIHNlbGVjdGlvbkRpdi5z
			dHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBzYW1lTGlu
			ZSA9IGZyb21Qb3MueSA9PSB0b1Bvcy55LCBodG1sID0gIiI7CiAgICAgICAgZnVuY3Rpb24gYWRk
			KGxlZnQsIHRvcCwgcmlnaHQsIGhlaWdodCkgewogICAgICAgICAgaHRtbCArPSAnPGRpdiBjbGFz
			cz0iQ29kZU1pcnJvci1zZWxlY3RlZCIgc3R5bGU9InBvc2l0aW9uOiBhYnNvbHV0ZTsgbGVmdDog
			JyArIGxlZnQgKwogICAgICAgICAgICAncHg7IHRvcDogJyArIHRvcCArICdweDsgcmlnaHQ6ICcg
			KyByaWdodCArICdweDsgaGVpZ2h0OiAnICsgaGVpZ2h0ICsgJ3B4Ij48L2Rpdj4nOwogICAgICAg
			IH0KICAgICAgICBpZiAoc2VsLmZyb20uY2ggJiYgZnJvbVBvcy55ID49IDApIHsKICAgICAgICAg
			IHZhciByaWdodCA9IHNhbWVMaW5lID8gbGluZVNwYWNlLmNsaWVudFdpZHRoIC0gdG9Qb3MueCA6
			IDA7CiAgICAgICAgICBhZGQoZnJvbVBvcy54LCBmcm9tUG9zLnksIHJpZ2h0LCB0aCk7CiAgICAg
			ICAgfQogICAgICAgIHZhciBtaWRkbGVTdGFydCA9IE1hdGgubWF4KDAsIGZyb21Qb3MueSArIChz
			ZWwuZnJvbS5jaCA/IHRoIDogMCkpOwogICAgICAgIHZhciBtaWRkbGVIZWlnaHQgPSBNYXRoLm1p
			bih0b1Bvcy55LCBsaW5lU3BhY2UuY2xpZW50SGVpZ2h0KSAtIG1pZGRsZVN0YXJ0OwogICAgICAg
			IGlmIChtaWRkbGVIZWlnaHQgPiAwLjIgKiB0aCkKICAgICAgICAgIGFkZCgwLCBtaWRkbGVTdGFy
			dCwgMCwgbWlkZGxlSGVpZ2h0KTsKICAgICAgICBpZiAoKCFzYW1lTGluZSB8fCAhc2VsLmZyb20u
			Y2gpICYmIHRvUG9zLnkgPCBsaW5lU3BhY2UuY2xpZW50SGVpZ2h0IC0gLjUgKiB0aCkKICAgICAg
			ICAgIGFkZCgwLCB0b1Bvcy55LCBsaW5lU3BhY2UuY2xpZW50V2lkdGggLSB0b1Bvcy54LCB0aCk7
			CiAgICAgICAgc2VsZWN0aW9uRGl2LmlubmVySFRNTCA9IGh0bWw7CiAgICAgICAgY3Vyc29yLnN0
			eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICAgICAgc2VsZWN0aW9uRGl2LnN0eWxlLmRpc3BsYXkg
			PSAiIjsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHNldFNoaWZ0KHZhbCkgewogICAgICBp
			ZiAodmFsKSBzaGlmdFNlbGVjdGluZyA9IHNoaWZ0U2VsZWN0aW5nIHx8IChzZWwuaW52ZXJ0ZWQg
			PyBzZWwudG8gOiBzZWwuZnJvbSk7CiAgICAgIGVsc2Ugc2hpZnRTZWxlY3RpbmcgPSBudWxsOwog
			ICAgfQogICAgZnVuY3Rpb24gc2V0U2VsZWN0aW9uVXNlcihmcm9tLCB0bykgewogICAgICB2YXIg
			c2ggPSBzaGlmdFNlbGVjdGluZyAmJiBjbGlwUG9zKHNoaWZ0U2VsZWN0aW5nKTsKICAgICAgaWYg
			KHNoKSB7CiAgICAgICAgaWYgKHBvc0xlc3Moc2gsIGZyb20pKSBmcm9tID0gc2g7CiAgICAgICAg
			ZWxzZSBpZiAocG9zTGVzcyh0bywgc2gpKSB0byA9IHNoOwogICAgICB9CiAgICAgIHNldFNlbGVj
			dGlvbihmcm9tLCB0byk7CiAgICAgIHVzZXJTZWxDaGFuZ2UgPSB0cnVlOwogICAgfQogICAgLy8g
			VXBkYXRlIHRoZSBzZWxlY3Rpb24uIExhc3QgdHdvIGFyZ3MgYXJlIG9ubHkgdXNlZCBieQogICAg
			Ly8gdXBkYXRlTGluZXMsIHNpbmNlIHRoZXkgaGF2ZSB0byBiZSBleHByZXNzZWQgaW4gdGhlIGxp
			bmUKICAgIC8vIG51bWJlcnMgYmVmb3JlIHRoZSB1cGRhdGUuCiAgICBmdW5jdGlvbiBzZXRTZWxl
			Y3Rpb24oZnJvbSwgdG8sIG9sZEZyb20sIG9sZFRvKSB7CiAgICAgIGdvYWxDb2x1bW4gPSBudWxs
			OwogICAgICBpZiAob2xkRnJvbSA9PSBudWxsKSB7b2xkRnJvbSA9IHNlbC5mcm9tLmxpbmU7IG9s
			ZFRvID0gc2VsLnRvLmxpbmU7fQogICAgICBpZiAocG9zRXEoc2VsLmZyb20sIGZyb20pICYmIHBv
			c0VxKHNlbC50bywgdG8pKSByZXR1cm47CiAgICAgIGlmIChwb3NMZXNzKHRvLCBmcm9tKSkge3Zh
			ciB0bXAgPSB0bzsgdG8gPSBmcm9tOyBmcm9tID0gdG1wO30KCiAgICAgIC8vIFNraXAgb3ZlciBo
			aWRkZW4gbGluZXMuCiAgICAgIGlmIChmcm9tLmxpbmUgIT0gb2xkRnJvbSkgZnJvbSA9IHNraXBI
			aWRkZW4oZnJvbSwgb2xkRnJvbSwgc2VsLmZyb20uY2gpOwogICAgICBpZiAodG8ubGluZSAhPSBv
			bGRUbykgdG8gPSBza2lwSGlkZGVuKHRvLCBvbGRUbywgc2VsLnRvLmNoKTsKCiAgICAgIGlmIChw
			b3NFcShmcm9tLCB0bykpIHNlbC5pbnZlcnRlZCA9IGZhbHNlOwogICAgICBlbHNlIGlmIChwb3NF
			cShmcm9tLCBzZWwudG8pKSBzZWwuaW52ZXJ0ZWQgPSBmYWxzZTsKICAgICAgZWxzZSBpZiAocG9z
			RXEodG8sIHNlbC5mcm9tKSkgc2VsLmludmVydGVkID0gdHJ1ZTsKCiAgICAgIGlmIChvcHRpb25z
			LmF1dG9DbGVhckVtcHR5TGluZXMgJiYgcG9zRXEoc2VsLmZyb20sIHNlbC50bykpIHsKICAgICAg
			ICB2YXIgaGVhZCA9IHNlbC5pbnZlcnRlZCA/IGZyb20gOiB0bzsKICAgICAgICBpZiAoaGVhZC5s
			aW5lICE9IHNlbC5mcm9tLmxpbmUpIHsKICAgICAgICAgIHZhciBvbGRMaW5lID0gZ2V0TGluZShz
			ZWwuZnJvbS5saW5lKTsKICAgICAgICAgIGlmICgvXlxzKyQvLnRlc3Qob2xkTGluZS50ZXh0KSkK
			ICAgICAgICAgICAgc2V0VGltZW91dChvcGVyYXRpb24oZnVuY3Rpb24oKSB7CiAgICAgICAgICAg
			ICAgaWYgKG9sZExpbmUucGFyZW50ICYmIC9eXHMrJC8udGVzdChvbGRMaW5lLnRleHQpKSB7CiAg
			ICAgICAgICAgICAgICB2YXIgbm8gPSBsaW5lTm8ob2xkTGluZSk7CiAgICAgICAgICAgICAgICBy
			ZXBsYWNlUmFuZ2UoIiIsIHtsaW5lOiBubywgY2g6IDB9LCB7bGluZTogbm8sIGNoOiBvbGRMaW5l
			LnRleHQubGVuZ3RofSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCAxMCkpOwogICAg
			ICAgIH0KICAgICAgfQoKICAgICAgc2VsLmZyb20gPSBmcm9tOyBzZWwudG8gPSB0bzsKICAgICAg
			c2VsZWN0aW9uQ2hhbmdlZCA9IHRydWU7CiAgICB9CiAgICBmdW5jdGlvbiBza2lwSGlkZGVuKHBv
			cywgb2xkTGluZSwgb2xkQ2gpIHsKICAgICAgZnVuY3Rpb24gZ2V0Tm9uSGlkZGVuKGRpcikgewog
			ICAgICAgIHZhciBsTm8gPSBwb3MubGluZSArIGRpciwgZW5kID0gZGlyID09IDEgPyBkb2Muc2l6
			ZSA6IC0xOwogICAgICAgIHdoaWxlIChsTm8gIT0gZW5kKSB7CiAgICAgICAgICB2YXIgbGluZSA9
			IGdldExpbmUobE5vKTsKICAgICAgICAgIGlmICghbGluZS5oaWRkZW4pIHsKICAgICAgICAgICAg
			dmFyIGNoID0gcG9zLmNoOwogICAgICAgICAgICBpZiAoY2ggPiBvbGRDaCB8fCBjaCA+IGxpbmUu
			dGV4dC5sZW5ndGgpIGNoID0gbGluZS50ZXh0Lmxlbmd0aDsKICAgICAgICAgICAgcmV0dXJuIHts
			aW5lOiBsTm8sIGNoOiBjaH07CiAgICAgICAgICB9CiAgICAgICAgICBsTm8gKz0gZGlyOwogICAg
			ICAgIH0KICAgICAgfQogICAgICB2YXIgbGluZSA9IGdldExpbmUocG9zLmxpbmUpOwogICAgICBp
			ZiAoIWxpbmUuaGlkZGVuKSByZXR1cm4gcG9zOwogICAgICBpZiAocG9zLmxpbmUgPj0gb2xkTGlu
			ZSkgcmV0dXJuIGdldE5vbkhpZGRlbigxKSB8fCBnZXROb25IaWRkZW4oLTEpOwogICAgICBlbHNl
			IHJldHVybiBnZXROb25IaWRkZW4oLTEpIHx8IGdldE5vbkhpZGRlbigxKTsKICAgIH0KICAgIGZ1
			bmN0aW9uIHNldEN1cnNvcihsaW5lLCBjaCwgdXNlcikgewogICAgICB2YXIgcG9zID0gY2xpcFBv
			cyh7bGluZTogbGluZSwgY2g6IGNoIHx8IDB9KTsKICAgICAgKHVzZXIgPyBzZXRTZWxlY3Rpb25V
			c2VyIDogc2V0U2VsZWN0aW9uKShwb3MsIHBvcyk7CiAgICB9CgogICAgZnVuY3Rpb24gY2xpcExp
			bmUobikge3JldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbihuLCBkb2Muc2l6ZS0xKSk7fQogICAg
			ZnVuY3Rpb24gY2xpcFBvcyhwb3MpIHsKICAgICAgaWYgKHBvcy5saW5lIDwgMCkgcmV0dXJuIHts
			aW5lOiAwLCBjaDogMH07CiAgICAgIGlmIChwb3MubGluZSA+PSBkb2Muc2l6ZSkgcmV0dXJuIHts
			aW5lOiBkb2Muc2l6ZS0xLCBjaDogZ2V0TGluZShkb2Muc2l6ZS0xKS50ZXh0Lmxlbmd0aH07CiAg
			ICAgIHZhciBjaCA9IHBvcy5jaCwgbGluZWxlbiA9IGdldExpbmUocG9zLmxpbmUpLnRleHQubGVu
			Z3RoOwogICAgICBpZiAoY2ggPT0gbnVsbCB8fCBjaCA+IGxpbmVsZW4pIHJldHVybiB7bGluZTog
			cG9zLmxpbmUsIGNoOiBsaW5lbGVufTsKICAgICAgZWxzZSBpZiAoY2ggPCAwKSByZXR1cm4ge2xp
			bmU6IHBvcy5saW5lLCBjaDogMH07CiAgICAgIGVsc2UgcmV0dXJuIHBvczsKICAgIH0KCiAgICBm
			dW5jdGlvbiBmaW5kUG9zSChkaXIsIHVuaXQpIHsKICAgICAgdmFyIGVuZCA9IHNlbC5pbnZlcnRl
			ZCA/IHNlbC5mcm9tIDogc2VsLnRvLCBsaW5lID0gZW5kLmxpbmUsIGNoID0gZW5kLmNoOwogICAg
			ICB2YXIgbGluZU9iaiA9IGdldExpbmUobGluZSk7CiAgICAgIGZ1bmN0aW9uIGZpbmROZXh0TGlu
			ZSgpIHsKICAgICAgICBmb3IgKHZhciBsID0gbGluZSArIGRpciwgZSA9IGRpciA8IDAgPyAtMSA6
			IGRvYy5zaXplOyBsICE9IGU7IGwgKz0gZGlyKSB7CiAgICAgICAgICB2YXIgbG8gPSBnZXRMaW5l
			KGwpOwogICAgICAgICAgaWYgKCFsby5oaWRkZW4pIHsgbGluZSA9IGw7IGxpbmVPYmogPSBsbzsg
			cmV0dXJuIHRydWU7IH0KICAgICAgICB9CiAgICAgIH0KICAgICAgZnVuY3Rpb24gbW92ZU9uY2Uo
			Ym91bmRUb0xpbmUpIHsKICAgICAgICBpZiAoY2ggPT0gKGRpciA8IDAgPyAwIDogbGluZU9iai50
			ZXh0Lmxlbmd0aCkpIHsKICAgICAgICAgIGlmICghYm91bmRUb0xpbmUgJiYgZmluZE5leHRMaW5l
			KCkpIGNoID0gZGlyIDwgMCA/IGxpbmVPYmoudGV4dC5sZW5ndGggOiAwOwogICAgICAgICAgZWxz
			ZSByZXR1cm4gZmFsc2U7CiAgICAgICAgfSBlbHNlIGNoICs9IGRpcjsKICAgICAgICByZXR1cm4g
			dHJ1ZTsKICAgICAgfQogICAgICBpZiAodW5pdCA9PSAiY2hhciIpIG1vdmVPbmNlKCk7CiAgICAg
			IGVsc2UgaWYgKHVuaXQgPT0gImNvbHVtbiIpIG1vdmVPbmNlKHRydWUpOwogICAgICBlbHNlIGlm
			ICh1bml0ID09ICJ3b3JkIikgewogICAgICAgIHZhciBzYXdXb3JkID0gZmFsc2U7CiAgICAgICAg
			Zm9yICg7OykgewogICAgICAgICAgaWYgKGRpciA8IDApIGlmICghbW92ZU9uY2UoKSkgYnJlYWs7
			CiAgICAgICAgICBpZiAoaXNXb3JkQ2hhcihsaW5lT2JqLnRleHQuY2hhckF0KGNoKSkpIHNhd1dv
			cmQgPSB0cnVlOwogICAgICAgICAgZWxzZSBpZiAoc2F3V29yZCkge2lmIChkaXIgPCAwKSB7ZGly
			ID0gMTsgbW92ZU9uY2UoKTt9IGJyZWFrO30KICAgICAgICAgIGlmIChkaXIgPiAwKSBpZiAoIW1v
			dmVPbmNlKCkpIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4ge2xpbmU6IGxp
			bmUsIGNoOiBjaH07CiAgICB9CiAgICBmdW5jdGlvbiBtb3ZlSChkaXIsIHVuaXQpIHsKICAgICAg
			dmFyIHBvcyA9IGRpciA8IDAgPyBzZWwuZnJvbSA6IHNlbC50bzsKICAgICAgaWYgKHNoaWZ0U2Vs
			ZWN0aW5nIHx8IHBvc0VxKHNlbC5mcm9tLCBzZWwudG8pKSBwb3MgPSBmaW5kUG9zSChkaXIsIHVu
			aXQpOwogICAgICBzZXRDdXJzb3IocG9zLmxpbmUsIHBvcy5jaCwgdHJ1ZSk7CiAgICB9CiAgICBm
			dW5jdGlvbiBkZWxldGVIKGRpciwgdW5pdCkgewogICAgICBpZiAoIXBvc0VxKHNlbC5mcm9tLCBz
			ZWwudG8pKSByZXBsYWNlUmFuZ2UoIiIsIHNlbC5mcm9tLCBzZWwudG8pOwogICAgICBlbHNlIGlm
			IChkaXIgPCAwKSByZXBsYWNlUmFuZ2UoIiIsIGZpbmRQb3NIKGRpciwgdW5pdCksIHNlbC50byk7
			CiAgICAgIGVsc2UgcmVwbGFjZVJhbmdlKCIiLCBzZWwuZnJvbSwgZmluZFBvc0goZGlyLCB1bml0
			KSk7CiAgICAgIHVzZXJTZWxDaGFuZ2UgPSB0cnVlOwogICAgfQogICAgdmFyIGdvYWxDb2x1bW4g
			PSBudWxsOwogICAgZnVuY3Rpb24gbW92ZVYoZGlyLCB1bml0KSB7CiAgICAgIHZhciBkaXN0ID0g
			MCwgcG9zID0gbG9jYWxDb29yZHMoc2VsLmludmVydGVkID8gc2VsLmZyb20gOiBzZWwudG8sIHRy
			dWUpOwogICAgICBpZiAoZ29hbENvbHVtbiAhPSBudWxsKSBwb3MueCA9IGdvYWxDb2x1bW47CiAg
			ICAgIGlmICh1bml0ID09ICJwYWdlIikgZGlzdCA9IE1hdGgubWluKHNjcm9sbGVyLmNsaWVudEhl
			aWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGll
			bnRIZWlnaHQpOwogICAgICBlbHNlIGlmICh1bml0ID09ICJsaW5lIikgZGlzdCA9IHRleHRIZWln
			aHQoKTsKICAgICAgdmFyIHRhcmdldCA9IGNvb3Jkc0NoYXIocG9zLngsIHBvcy55ICsgZGlzdCAq
			IGRpciArIDIpOwogICAgICBzZXRDdXJzb3IodGFyZ2V0LmxpbmUsIHRhcmdldC5jaCwgdHJ1ZSk7
			CiAgICAgIGdvYWxDb2x1bW4gPSBwb3MueDsKICAgIH0KCiAgICBmdW5jdGlvbiBzZWxlY3RXb3Jk
			QXQocG9zKSB7CiAgICAgIHZhciBsaW5lID0gZ2V0TGluZShwb3MubGluZSkudGV4dDsKICAgICAg
			dmFyIHN0YXJ0ID0gcG9zLmNoLCBlbmQgPSBwb3MuY2g7CiAgICAgIHdoaWxlIChzdGFydCA+IDAg
			JiYgaXNXb3JkQ2hhcihsaW5lLmNoYXJBdChzdGFydCAtIDEpKSkgLS1zdGFydDsKICAgICAgd2hp
			bGUgKGVuZCA8IGxpbmUubGVuZ3RoICYmIGlzV29yZENoYXIobGluZS5jaGFyQXQoZW5kKSkpICsr
			ZW5kOwogICAgICBzZXRTZWxlY3Rpb25Vc2VyKHtsaW5lOiBwb3MubGluZSwgY2g6IHN0YXJ0fSwg
			e2xpbmU6IHBvcy5saW5lLCBjaDogZW5kfSk7CiAgICB9CiAgICBmdW5jdGlvbiBzZWxlY3RMaW5l
			KGxpbmUpIHsKICAgICAgc2V0U2VsZWN0aW9uVXNlcih7bGluZTogbGluZSwgY2g6IDB9LCBjbGlw
			UG9zKHtsaW5lOiBsaW5lICsgMSwgY2g6IDB9KSk7CiAgICB9CiAgICBmdW5jdGlvbiBpbmRlbnRT
			ZWxlY3RlZChtb2RlKSB7CiAgICAgIGlmIChwb3NFcShzZWwuZnJvbSwgc2VsLnRvKSkgcmV0dXJu
			IGluZGVudExpbmUoc2VsLmZyb20ubGluZSwgbW9kZSk7CiAgICAgIHZhciBlID0gc2VsLnRvLmxp
			bmUgLSAoc2VsLnRvLmNoID8gMCA6IDEpOwogICAgICBmb3IgKHZhciBpID0gc2VsLmZyb20ubGlu
			ZTsgaSA8PSBlOyArK2kpIGluZGVudExpbmUoaSwgbW9kZSk7CiAgICB9CgogICAgZnVuY3Rpb24g
			aW5kZW50TGluZShuLCBob3cpIHsKICAgICAgaWYgKCFob3cpIGhvdyA9ICJhZGQiOwogICAgICBp
			ZiAoaG93ID09ICJzbWFydCIpIHsKICAgICAgICBpZiAoIW1vZGUuaW5kZW50KSBob3cgPSAicHJl
			diI7CiAgICAgICAgZWxzZSB2YXIgc3RhdGUgPSBnZXRTdGF0ZUJlZm9yZShuKTsKICAgICAgfQoK
			ICAgICAgdmFyIGxpbmUgPSBnZXRMaW5lKG4pLCBjdXJTcGFjZSA9IGxpbmUuaW5kZW50YXRpb24o
			b3B0aW9ucy50YWJTaXplKSwKICAgICAgICAgIGN1clNwYWNlU3RyaW5nID0gbGluZS50ZXh0Lm1h
			dGNoKC9eXHMqLylbMF0sIGluZGVudGF0aW9uOwogICAgICBpZiAoaG93ID09ICJwcmV2Iikgewog
			ICAgICAgIGlmIChuKSBpbmRlbnRhdGlvbiA9IGdldExpbmUobi0xKS5pbmRlbnRhdGlvbihvcHRp
			b25zLnRhYlNpemUpOwogICAgICAgIGVsc2UgaW5kZW50YXRpb24gPSAwOwogICAgICB9CiAgICAg
			IGVsc2UgaWYgKGhvdyA9PSAic21hcnQiKSBpbmRlbnRhdGlvbiA9IG1vZGUuaW5kZW50KHN0YXRl
			LCBsaW5lLnRleHQuc2xpY2UoY3VyU3BhY2VTdHJpbmcubGVuZ3RoKSwgbGluZS50ZXh0KTsKICAg
			ICAgZWxzZSBpZiAoaG93ID09ICJhZGQiKSBpbmRlbnRhdGlvbiA9IGN1clNwYWNlICsgb3B0aW9u
			cy5pbmRlbnRVbml0OwogICAgICBlbHNlIGlmIChob3cgPT0gInN1YnRyYWN0IikgaW5kZW50YXRp
			b24gPSBjdXJTcGFjZSAtIG9wdGlvbnMuaW5kZW50VW5pdDsKICAgICAgaW5kZW50YXRpb24gPSBN
			YXRoLm1heCgwLCBpbmRlbnRhdGlvbik7CiAgICAgIHZhciBkaWZmID0gaW5kZW50YXRpb24gLSBj
			dXJTcGFjZTsKCiAgICAgIGlmICghZGlmZikgewogICAgICAgIGlmIChzZWwuZnJvbS5saW5lICE9
			IG4gJiYgc2VsLnRvLmxpbmUgIT0gbikgcmV0dXJuOwogICAgICAgIHZhciBpbmRlbnRTdHJpbmcg
			PSBjdXJTcGFjZVN0cmluZzsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICB2YXIgaW5kZW50
			U3RyaW5nID0gIiIsIHBvcyA9IDA7CiAgICAgICAgaWYgKG9wdGlvbnMuaW5kZW50V2l0aFRhYnMp
			CiAgICAgICAgICBmb3IgKHZhciBpID0gTWF0aC5mbG9vcihpbmRlbnRhdGlvbiAvIG9wdGlvbnMu
			dGFiU2l6ZSk7IGk7IC0taSkge3BvcyArPSBvcHRpb25zLnRhYlNpemU7IGluZGVudFN0cmluZyAr
			PSAiXHQiO30KICAgICAgICB3aGlsZSAocG9zIDwgaW5kZW50YXRpb24pIHsrK3BvczsgaW5kZW50
			U3RyaW5nICs9ICIgIjt9CiAgICAgIH0KCiAgICAgIHJlcGxhY2VSYW5nZShpbmRlbnRTdHJpbmcs
			IHtsaW5lOiBuLCBjaDogMH0sIHtsaW5lOiBuLCBjaDogY3VyU3BhY2VTdHJpbmcubGVuZ3RofSk7
			CiAgICB9CgogICAgZnVuY3Rpb24gbG9hZE1vZGUoKSB7CiAgICAgIG1vZGUgPSBDb2RlTWlycm9y
			LmdldE1vZGUob3B0aW9ucywgb3B0aW9ucy5tb2RlKTsKICAgICAgZG9jLml0ZXIoMCwgZG9jLnNp
			emUsIGZ1bmN0aW9uKGxpbmUpIHsgbGluZS5zdGF0ZUFmdGVyID0gbnVsbDsgfSk7CiAgICAgIHdv
			cmsgPSBbMF07CiAgICAgIHN0YXJ0V29ya2VyKCk7CiAgICB9CiAgICBmdW5jdGlvbiBndXR0ZXJD
			aGFuZ2VkKCkgewogICAgICB2YXIgdmlzaWJsZSA9IG9wdGlvbnMuZ3V0dGVyIHx8IG9wdGlvbnMu
			bGluZU51bWJlcnM7CiAgICAgIGd1dHRlci5zdHlsZS5kaXNwbGF5ID0gdmlzaWJsZSA/ICIiIDog
			Im5vbmUiOwogICAgICBpZiAodmlzaWJsZSkgZ3V0dGVyRGlydHkgPSB0cnVlOwogICAgICBlbHNl
			IGxpbmVEaXYucGFyZW50Tm9kZS5zdHlsZS5tYXJnaW5MZWZ0ID0gMDsKICAgIH0KICAgIGZ1bmN0
			aW9uIHdyYXBwaW5nQ2hhbmdlZChmcm9tLCB0bykgewogICAgICBpZiAob3B0aW9ucy5saW5lV3Jh
			cHBpbmcpIHsKICAgICAgICB3cmFwcGVyLmNsYXNzTmFtZSArPSAiIENvZGVNaXJyb3Itd3JhcCI7
			CiAgICAgICAgdmFyIHBlckxpbmUgPSBzY3JvbGxlci5jbGllbnRXaWR0aCAvIGNoYXJXaWR0aCgp
			IC0gMzsKICAgICAgICBkb2MuaXRlcigwLCBkb2Muc2l6ZSwgZnVuY3Rpb24obGluZSkgewogICAg
			ICAgICAgaWYgKGxpbmUuaGlkZGVuKSByZXR1cm47CiAgICAgICAgICB2YXIgZ3Vlc3MgPSBNYXRo
			LmNlaWwobGluZS50ZXh0Lmxlbmd0aCAvIHBlckxpbmUpIHx8IDE7CiAgICAgICAgICBpZiAoZ3Vl
			c3MgIT0gMSkgdXBkYXRlTGluZUhlaWdodChsaW5lLCBndWVzcyk7CiAgICAgICAgfSk7CiAgICAg
			ICAgbGluZVNwYWNlLnN0eWxlLndpZHRoID0gY29kZS5zdHlsZS53aWR0aCA9ICIiOwogICAgICB9
			IGVsc2UgewogICAgICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gd3JhcHBlci5jbGFzc05hbWUucmVw
			bGFjZSgiIENvZGVNaXJyb3Itd3JhcCIsICIiKTsKICAgICAgICBtYXhXaWR0aCA9IG51bGw7IG1h
			eExpbmUgPSAiIjsKICAgICAgICBkb2MuaXRlcigwLCBkb2Muc2l6ZSwgZnVuY3Rpb24obGluZSkg
			ewogICAgICAgICAgaWYgKGxpbmUuaGVpZ2h0ICE9IDEgJiYgIWxpbmUuaGlkZGVuKSB1cGRhdGVM
			aW5lSGVpZ2h0KGxpbmUsIDEpOwogICAgICAgICAgaWYgKGxpbmUudGV4dC5sZW5ndGggPiBtYXhM
			aW5lLmxlbmd0aCkgbWF4TGluZSA9IGxpbmUudGV4dDsKICAgICAgICB9KTsKICAgICAgfQogICAg
			ICBjaGFuZ2VzLnB1c2goe2Zyb206IDAsIHRvOiBkb2Muc2l6ZX0pOwogICAgfQogICAgZnVuY3Rp
			b24gbWFrZVRhYihjb2wpIHsKICAgICAgdmFyIHcgPSBvcHRpb25zLnRhYlNpemUgLSBjb2wgJSBv
			cHRpb25zLnRhYlNpemU7CiAgICAgIGZvciAodmFyIHN0ciA9ICc8c3BhbiBjbGFzcz0iY20tdGFi
			Ij4nLCBpID0gMDsgaSA8IHc7ICsraSkgc3RyICs9ICIgIjsKICAgICAgcmV0dXJuIHtodG1sOiBz
			dHIgKyAiPC9zcGFuPiIsIHdpZHRoOiB3fTsKICAgIH0KICAgIGZ1bmN0aW9uIHRoZW1lQ2hhbmdl
			ZCgpIHsKICAgICAgc2Nyb2xsZXIuY2xhc3NOYW1lID0gc2Nyb2xsZXIuY2xhc3NOYW1lLnJlcGxh
			Y2UoL1xzKmNtLXMtXHcrL2csICIiKSArCiAgICAgICAgb3B0aW9ucy50aGVtZS5yZXBsYWNlKC8o
			XnxccylccyovZywgIiBjbS1zLSIpOwogICAgfQoKICAgIGZ1bmN0aW9uIFRleHRNYXJrZXIoKSB7
			IHRoaXMuc2V0ID0gW107IH0KICAgIFRleHRNYXJrZXIucHJvdG90eXBlLmNsZWFyID0gb3BlcmF0
			aW9uKGZ1bmN0aW9uKCkgewogICAgICB2YXIgbWluID0gSW5maW5pdHksIG1heCA9IC1JbmZpbml0
			eTsKICAgICAgZm9yICh2YXIgaSA9IDAsIGUgPSB0aGlzLnNldC5sZW5ndGg7IGkgPCBlOyArK2kp
			IHsKICAgICAgICB2YXIgbGluZSA9IHRoaXMuc2V0W2ldLCBtayA9IGxpbmUubWFya2VkOwogICAg
			ICAgIGlmICghbWsgfHwgIWxpbmUucGFyZW50KSBjb250aW51ZTsKICAgICAgICB2YXIgbGluZU4g
			PSBsaW5lTm8obGluZSk7CiAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBsaW5lTik7IG1heCA9
			IE1hdGgubWF4KG1heCwgbGluZU4pOwogICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWsubGVu
			Z3RoOyArK2opCiAgICAgICAgICBpZiAobWtbal0uc2V0ID09IHRoaXMuc2V0KSBtay5zcGxpY2Uo
			ai0tLCAxKTsKICAgICAgfQogICAgICBpZiAobWluICE9IEluZmluaXR5KQogICAgICAgIGNoYW5n
			ZXMucHVzaCh7ZnJvbTogbWluLCB0bzogbWF4ICsgMX0pOwogICAgfSk7CiAgICBUZXh0TWFya2Vy
			LnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBmcm9tLCB0bzsKICAgICAg
			Zm9yICh2YXIgaSA9IDAsIGUgPSB0aGlzLnNldC5sZW5ndGg7IGkgPCBlOyArK2kpIHsKICAgICAg
			ICB2YXIgbGluZSA9IHRoaXMuc2V0W2ldLCBtayA9IGxpbmUubWFya2VkOwogICAgICAgIGZvciAo
			dmFyIGogPSAwOyBqIDwgbWsubGVuZ3RoOyArK2opIHsKICAgICAgICAgIHZhciBtYXJrID0gbWtb
			al07CiAgICAgICAgICBpZiAobWFyay5zZXQgPT0gdGhpcy5zZXQpIHsKICAgICAgICAgICAgaWYg
			KG1hcmsuZnJvbSAhPSBudWxsIHx8IG1hcmsudG8gIT0gbnVsbCkgewogICAgICAgICAgICAgIHZh
			ciBmb3VuZCA9IGxpbmVObyhsaW5lKTsKICAgICAgICAgICAgICBpZiAoZm91bmQgIT0gbnVsbCkg
			ewogICAgICAgICAgICAgICAgaWYgKG1hcmsuZnJvbSAhPSBudWxsKSBmcm9tID0ge2xpbmU6IGZv
			dW5kLCBjaDogbWFyay5mcm9tfTsKICAgICAgICAgICAgICAgIGlmIChtYXJrLnRvICE9IG51bGwp
			IHRvID0ge2xpbmU6IGZvdW5kLCBjaDogbWFyay50b307CiAgICAgICAgICAgICAgfQogICAgICAg
			ICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiB7ZnJvbTog
			ZnJvbSwgdG86IHRvfTsKICAgIH07CgogICAgZnVuY3Rpb24gbWFya1RleHQoZnJvbSwgdG8sIGNs
			YXNzTmFtZSkgewogICAgICBmcm9tID0gY2xpcFBvcyhmcm9tKTsgdG8gPSBjbGlwUG9zKHRvKTsK
			ICAgICAgdmFyIHRtID0gbmV3IFRleHRNYXJrZXIoKTsKICAgICAgZnVuY3Rpb24gYWRkKGxpbmUs
			IGZyb20sIHRvLCBjbGFzc05hbWUpIHsKICAgICAgICBnZXRMaW5lKGxpbmUpLmFkZE1hcmsobmV3
			IE1hcmtlZFRleHQoZnJvbSwgdG8sIGNsYXNzTmFtZSwgdG0uc2V0KSk7CiAgICAgIH0KICAgICAg
			aWYgKGZyb20ubGluZSA9PSB0by5saW5lKSBhZGQoZnJvbS5saW5lLCBmcm9tLmNoLCB0by5jaCwg
			Y2xhc3NOYW1lKTsKICAgICAgZWxzZSB7CiAgICAgICAgYWRkKGZyb20ubGluZSwgZnJvbS5jaCwg
			bnVsbCwgY2xhc3NOYW1lKTsKICAgICAgICBmb3IgKHZhciBpID0gZnJvbS5saW5lICsgMSwgZSA9
			IHRvLmxpbmU7IGkgPCBlOyArK2kpCiAgICAgICAgICBhZGQoaSwgbnVsbCwgbnVsbCwgY2xhc3NO
			YW1lKTsKICAgICAgICBhZGQodG8ubGluZSwgbnVsbCwgdG8uY2gsIGNsYXNzTmFtZSk7CiAgICAg
			IH0KICAgICAgY2hhbmdlcy5wdXNoKHtmcm9tOiBmcm9tLmxpbmUsIHRvOiB0by5saW5lICsgMX0p
			OwogICAgICByZXR1cm4gdG07CiAgICB9CgogICAgZnVuY3Rpb24gc2V0Qm9va21hcmsocG9zKSB7
			CiAgICAgIHBvcyA9IGNsaXBQb3MocG9zKTsKICAgICAgdmFyIGJtID0gbmV3IEJvb2ttYXJrKHBv
			cy5jaCk7CiAgICAgIGdldExpbmUocG9zLmxpbmUpLmFkZE1hcmsoYm0pOwogICAgICByZXR1cm4g
			Ym07CiAgICB9CgogICAgZnVuY3Rpb24gYWRkR3V0dGVyTWFya2VyKGxpbmUsIHRleHQsIGNsYXNz
			TmFtZSkgewogICAgICBpZiAodHlwZW9mIGxpbmUgPT0gIm51bWJlciIpIGxpbmUgPSBnZXRMaW5l
			KGNsaXBMaW5lKGxpbmUpKTsKICAgICAgbGluZS5ndXR0ZXJNYXJrZXIgPSB7dGV4dDogdGV4dCwg
			c3R5bGU6IGNsYXNzTmFtZX07CiAgICAgIGd1dHRlckRpcnR5ID0gdHJ1ZTsKICAgICAgcmV0dXJu
			IGxpbmU7CiAgICB9CiAgICBmdW5jdGlvbiByZW1vdmVHdXR0ZXJNYXJrZXIobGluZSkgewogICAg
			ICBpZiAodHlwZW9mIGxpbmUgPT0gIm51bWJlciIpIGxpbmUgPSBnZXRMaW5lKGNsaXBMaW5lKGxp
			bmUpKTsKICAgICAgbGluZS5ndXR0ZXJNYXJrZXIgPSBudWxsOwogICAgICBndXR0ZXJEaXJ0eSA9
			IHRydWU7CiAgICB9CgogICAgZnVuY3Rpb24gY2hhbmdlTGluZShoYW5kbGUsIG9wKSB7CiAgICAg
			IHZhciBubyA9IGhhbmRsZSwgbGluZSA9IGhhbmRsZTsKICAgICAgaWYgKHR5cGVvZiBoYW5kbGUg
			PT0gIm51bWJlciIpIGxpbmUgPSBnZXRMaW5lKGNsaXBMaW5lKGhhbmRsZSkpOwogICAgICBlbHNl
			IG5vID0gbGluZU5vKGhhbmRsZSk7CiAgICAgIGlmIChubyA9PSBudWxsKSByZXR1cm4gbnVsbDsK
			ICAgICAgaWYgKG9wKGxpbmUsIG5vKSkgY2hhbmdlcy5wdXNoKHtmcm9tOiBubywgdG86IG5vICsg
			MX0pOwogICAgICBlbHNlIHJldHVybiBudWxsOwogICAgICByZXR1cm4gbGluZTsKICAgIH0KICAg
			IGZ1bmN0aW9uIHNldExpbmVDbGFzcyhoYW5kbGUsIGNsYXNzTmFtZSkgewogICAgICByZXR1cm4g
			Y2hhbmdlTGluZShoYW5kbGUsIGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICBpZiAobGluZS5jbGFz
			c05hbWUgIT0gY2xhc3NOYW1lKSB7CiAgICAgICAgICBsaW5lLmNsYXNzTmFtZSA9IGNsYXNzTmFt
			ZTsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgICBm
			dW5jdGlvbiBzZXRMaW5lSGlkZGVuKGhhbmRsZSwgaGlkZGVuKSB7CiAgICAgIHJldHVybiBjaGFu
			Z2VMaW5lKGhhbmRsZSwgZnVuY3Rpb24obGluZSwgbm8pIHsKICAgICAgICBpZiAobGluZS5oaWRk
			ZW4gIT0gaGlkZGVuKSB7CiAgICAgICAgICBsaW5lLmhpZGRlbiA9IGhpZGRlbjsKICAgICAgICAg
			IHVwZGF0ZUxpbmVIZWlnaHQobGluZSwgaGlkZGVuID8gMCA6IDEpOwogICAgICAgICAgdmFyIGZs
			aW5lID0gc2VsLmZyb20ubGluZSwgdGxpbmUgPSBzZWwudG8ubGluZTsKICAgICAgICAgIGlmICho
			aWRkZW4gJiYgKGZsaW5lID09IG5vIHx8IHRsaW5lID09IG5vKSkgewogICAgICAgICAgICB2YXIg
			ZnJvbSA9IGZsaW5lID09IG5vID8gc2tpcEhpZGRlbih7bGluZTogZmxpbmUsIGNoOiAwfSwgZmxp
			bmUsIDApIDogc2VsLmZyb207CiAgICAgICAgICAgIHZhciB0byA9IHRsaW5lID09IG5vID8gc2tp
			cEhpZGRlbih7bGluZTogdGxpbmUsIGNoOiAwfSwgdGxpbmUsIDApIDogc2VsLnRvOwogICAgICAg
			ICAgICBzZXRTZWxlY3Rpb24oZnJvbSwgdG8pOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJu
			IChndXR0ZXJEaXJ0eSA9IHRydWUpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CgogICAgZnVu
			Y3Rpb24gbGluZUluZm8obGluZSkgewogICAgICBpZiAodHlwZW9mIGxpbmUgPT0gIm51bWJlciIp
			IHsKICAgICAgICBpZiAoIWlzTGluZShsaW5lKSkgcmV0dXJuIG51bGw7CiAgICAgICAgdmFyIG4g
			PSBsaW5lOwogICAgICAgIGxpbmUgPSBnZXRMaW5lKGxpbmUpOwogICAgICAgIGlmICghbGluZSkg
			cmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgdmFyIG4gPSBsaW5lTm8o
			bGluZSk7CiAgICAgICAgaWYgKG4gPT0gbnVsbCkgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAg
			dmFyIG1hcmtlciA9IGxpbmUuZ3V0dGVyTWFya2VyOwogICAgICByZXR1cm4ge2xpbmU6IG4sIGhh
			bmRsZTogbGluZSwgdGV4dDogbGluZS50ZXh0LCBtYXJrZXJUZXh0OiBtYXJrZXIgJiYgbWFya2Vy
			LnRleHQsCiAgICAgICAgICAgICAgbWFya2VyQ2xhc3M6IG1hcmtlciAmJiBtYXJrZXIuc3R5bGUs
			IGxpbmVDbGFzczogbGluZS5jbGFzc05hbWV9OwogICAgfQoKICAgIGZ1bmN0aW9uIHN0cmluZ1dp
			ZHRoKHN0cikgewogICAgICBtZWFzdXJlLmlubmVySFRNTCA9ICI8cHJlPjxzcGFuPng8L3NwYW4+
			PC9wcmU+IjsKICAgICAgbWVhc3VyZS5maXJzdENoaWxkLmZpcnN0Q2hpbGQuZmlyc3RDaGlsZC5u
			b2RlVmFsdWUgPSBzdHI7CiAgICAgIHJldHVybiBtZWFzdXJlLmZpcnN0Q2hpbGQuZmlyc3RDaGls
			ZC5vZmZzZXRXaWR0aCB8fCAxMDsKICAgIH0KICAgIC8vIFRoZXNlIGFyZSB1c2VkIHRvIGdvIGZy
			b20gcGl4ZWwgcG9zaXRpb25zIHRvIGNoYXJhY3RlcgogICAgLy8gcG9zaXRpb25zLCB0YWtpbmcg
			dmFyeWluZyBjaGFyYWN0ZXIgd2lkdGhzIGludG8gYWNjb3VudC4KICAgIGZ1bmN0aW9uIGNoYXJG
			cm9tWChsaW5lLCB4KSB7CiAgICAgIGlmICh4IDw9IDApIHJldHVybiAwOwogICAgICB2YXIgbGlu
			ZU9iaiA9IGdldExpbmUobGluZSksIHRleHQgPSBsaW5lT2JqLnRleHQ7CiAgICAgIGZ1bmN0aW9u
			IGdldFgobGVuKSB7CiAgICAgICAgbWVhc3VyZS5pbm5lckhUTUwgPSAiPHByZT48c3Bhbj4iICsg
			bGluZU9iai5nZXRIVE1MKG1ha2VUYWIsIGxlbikgKyAiPC9zcGFuPjwvcHJlPiI7CiAgICAgICAg
			cmV0dXJuIG1lYXN1cmUuZmlyc3RDaGlsZC5maXJzdENoaWxkLm9mZnNldFdpZHRoOwogICAgICB9
			CiAgICAgIHZhciBmcm9tID0gMCwgZnJvbVggPSAwLCB0byA9IHRleHQubGVuZ3RoLCB0b1g7CiAg
			ICAgIC8vIEd1ZXNzIGEgc3VpdGFibGUgdXBwZXIgYm91bmQgZm9yIG91ciBzZWFyY2guCiAgICAg
			IHZhciBlc3RpbWF0ZWQgPSBNYXRoLm1pbih0bywgTWF0aC5jZWlsKHggLyBjaGFyV2lkdGgoKSkp
			OwogICAgICBmb3IgKDs7KSB7CiAgICAgICAgdmFyIGVzdFggPSBnZXRYKGVzdGltYXRlZCk7CiAg
			ICAgICAgaWYgKGVzdFggPD0geCAmJiBlc3RpbWF0ZWQgPCB0bykgZXN0aW1hdGVkID0gTWF0aC5t
			aW4odG8sIE1hdGguY2VpbChlc3RpbWF0ZWQgKiAxLjIpKTsKICAgICAgICBlbHNlIHt0b1ggPSBl
			c3RYOyB0byA9IGVzdGltYXRlZDsgYnJlYWs7fQogICAgICB9CiAgICAgIGlmICh4ID4gdG9YKSBy
			ZXR1cm4gdG87CiAgICAgIC8vIFRyeSB0byBndWVzcyBhIHN1aXRhYmxlIGxvd2VyIGJvdW5kIGFz
			IHdlbGwuCiAgICAgIGVzdGltYXRlZCA9IE1hdGguZmxvb3IodG8gKiAwLjgpOyBlc3RYID0gZ2V0
			WChlc3RpbWF0ZWQpOwogICAgICBpZiAoZXN0WCA8IHgpIHtmcm9tID0gZXN0aW1hdGVkOyBmcm9t
			WCA9IGVzdFg7fQogICAgICAvLyBEbyBhIGJpbmFyeSBzZWFyY2ggYmV0d2VlbiB0aGVzZSBib3Vu
			ZHMuCiAgICAgIGZvciAoOzspIHsKICAgICAgICBpZiAodG8gLSBmcm9tIDw9IDEpIHJldHVybiAo
			dG9YIC0geCA+IHggLSBmcm9tWCkgPyBmcm9tIDogdG87CiAgICAgICAgdmFyIG1pZGRsZSA9IE1h
			dGguY2VpbCgoZnJvbSArIHRvKSAvIDIpLCBtaWRkbGVYID0gZ2V0WChtaWRkbGUpOwogICAgICAg
			IGlmIChtaWRkbGVYID4geCkge3RvID0gbWlkZGxlOyB0b1ggPSBtaWRkbGVYO30KICAgICAgICBl
			bHNlIHtmcm9tID0gbWlkZGxlOyBmcm9tWCA9IG1pZGRsZVg7fQogICAgICB9CiAgICB9CgogICAg
			dmFyIHRlbXBJZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmKS50b1N0cmlu
			ZygxNik7CiAgICBmdW5jdGlvbiBtZWFzdXJlTGluZShsaW5lLCBjaCkgewogICAgICBpZiAoY2gg
			PT0gMCkgcmV0dXJuIHt0b3A6IDAsIGxlZnQ6IDB9OwogICAgICB2YXIgZXh0cmEgPSAiIjsKICAg
			ICAgLy8gSW5jbHVkZSBleHRyYSB0ZXh0IGF0IHRoZSBlbmQgdG8gbWFrZSBzdXJlIHRoZSBtZWFz
			dXJlZCBsaW5lIGlzIHdyYXBwZWQgaW4gdGhlIHJpZ2h0IHdheS4KICAgICAgaWYgKG9wdGlvbnMu
			bGluZVdyYXBwaW5nKSB7CiAgICAgICAgdmFyIGVuZCA9IGxpbmUudGV4dC5pbmRleE9mKCIgIiwg
			Y2ggKyAyKTsKICAgICAgICBleHRyYSA9IGh0bWxFc2NhcGUobGluZS50ZXh0LnNsaWNlKGNoICsg
			MSwgZW5kIDwgMCA/IGxpbmUudGV4dC5sZW5ndGggOiBlbmQgKyAoaWUgPyA1IDogMCkpKTsKICAg
			ICAgfQogICAgICBtZWFzdXJlLmlubmVySFRNTCA9ICI8cHJlPiIgKyBsaW5lLmdldEhUTUwobWFr
			ZVRhYiwgY2gpICsKICAgICAgICAnPHNwYW4gaWQ9IkNvZGVNaXJyb3ItdGVtcC0nICsgdGVtcElk
			ICsgJyI+JyArIGh0bWxFc2NhcGUobGluZS50ZXh0LmNoYXJBdChjaCkgfHwgIiAiKSArICI8L3Nw
			YW4+IiArCiAgICAgICAgZXh0cmEgKyAiPC9wcmU+IjsKICAgICAgdmFyIGVsdCA9IGRvY3VtZW50
			LmdldEVsZW1lbnRCeUlkKCJDb2RlTWlycm9yLXRlbXAtIiArIHRlbXBJZCk7CiAgICAgIHZhciB0
			b3AgPSBlbHQub2Zmc2V0VG9wLCBsZWZ0ID0gZWx0Lm9mZnNldExlZnQ7CiAgICAgIC8vIE9sZGVy
			IElFcyByZXBvcnQgemVybyBvZmZzZXRzIGZvciBzcGFucyBkaXJlY3RseSBhZnRlciBhIHdyYXAK
			ICAgICAgaWYgKGllICYmIHRvcCA9PSAwICYmIGxlZnQgPT0gMCkgewogICAgICAgIHZhciBiYWNr
			dXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7CiAgICAgICAgYmFja3VwLmlubmVy
			SFRNTCA9ICJ4IjsKICAgICAgICBlbHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYmFja3VwLCBl
			bHQubmV4dFNpYmxpbmcpOwogICAgICAgIHRvcCA9IGJhY2t1cC5vZmZzZXRUb3A7CiAgICAgIH0K
			ICAgICAgcmV0dXJuIHt0b3A6IHRvcCwgbGVmdDogbGVmdH07CiAgICB9CiAgICBmdW5jdGlvbiBs
			b2NhbENvb3Jkcyhwb3MsIGluTGluZVdyYXApIHsKICAgICAgdmFyIHgsIGxoID0gdGV4dEhlaWdo
			dCgpLCB5ID0gbGggKiAoaGVpZ2h0QXRMaW5lKGRvYywgcG9zLmxpbmUpIC0gKGluTGluZVdyYXAg
			PyBkaXNwbGF5T2Zmc2V0IDogMCkpOwogICAgICBpZiAocG9zLmNoID09IDApIHggPSAwOwogICAg
			ICBlbHNlIHsKICAgICAgICB2YXIgc3AgPSBtZWFzdXJlTGluZShnZXRMaW5lKHBvcy5saW5lKSwg
			cG9zLmNoKTsKICAgICAgICB4ID0gc3AubGVmdDsKICAgICAgICBpZiAob3B0aW9ucy5saW5lV3Jh
			cHBpbmcpIHkgKz0gTWF0aC5tYXgoMCwgc3AudG9wKTsKICAgICAgfQogICAgICByZXR1cm4ge3g6
			IHgsIHk6IHksIHlCb3Q6IHkgKyBsaH07CiAgICB9CiAgICAvLyBDb29yZHMgbXVzdCBiZSBsaW5l
			U3BhY2UtbG9jYWwKICAgIGZ1bmN0aW9uIGNvb3Jkc0NoYXIoeCwgeSkgewogICAgICBpZiAoeSA8
			IDApIHkgPSAwOwogICAgICB2YXIgdGggPSB0ZXh0SGVpZ2h0KCksIGN3ID0gY2hhcldpZHRoKCks
			IGhlaWdodFBvcyA9IGRpc3BsYXlPZmZzZXQgKyBNYXRoLmZsb29yKHkgLyB0aCk7CiAgICAgIHZh
			ciBsaW5lTm8gPSBsaW5lQXRIZWlnaHQoZG9jLCBoZWlnaHRQb3MpOwogICAgICBpZiAobGluZU5v
			ID49IGRvYy5zaXplKSByZXR1cm4ge2xpbmU6IGRvYy5zaXplIC0gMSwgY2g6IGdldExpbmUoZG9j
			LnNpemUgLSAxKS50ZXh0Lmxlbmd0aH07CiAgICAgIHZhciBsaW5lT2JqID0gZ2V0TGluZShsaW5l
			Tm8pLCB0ZXh0ID0gbGluZU9iai50ZXh0OwogICAgICB2YXIgdHcgPSBvcHRpb25zLmxpbmVXcmFw
			cGluZywgaW5uZXJPZmYgPSB0dyA/IGhlaWdodFBvcyAtIGhlaWdodEF0TGluZShkb2MsIGxpbmVO
			bykgOiAwOwogICAgICBpZiAoeCA8PSAwICYmIGlubmVyT2ZmID09IDApIHJldHVybiB7bGluZTog
			bGluZU5vLCBjaDogMH07CiAgICAgIGZ1bmN0aW9uIGdldFgobGVuKSB7CiAgICAgICAgdmFyIHNw
			ID0gbWVhc3VyZUxpbmUobGluZU9iaiwgbGVuKTsKICAgICAgICBpZiAodHcpIHsKICAgICAgICAg
			IHZhciBvZmYgPSBNYXRoLnJvdW5kKHNwLnRvcCAvIHRoKTsKICAgICAgICAgIHJldHVybiBNYXRo
			Lm1heCgwLCBzcC5sZWZ0ICsgKG9mZiAtIGlubmVyT2ZmKSAqIHNjcm9sbGVyLmNsaWVudFdpZHRo
			KTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHNwLmxlZnQ7CiAgICAgIH0KICAgICAgdmFyIGZy
			b20gPSAwLCBmcm9tWCA9IDAsIHRvID0gdGV4dC5sZW5ndGgsIHRvWDsKICAgICAgLy8gR3Vlc3Mg
			YSBzdWl0YWJsZSB1cHBlciBib3VuZCBmb3Igb3VyIHNlYXJjaC4KICAgICAgdmFyIGVzdGltYXRl
			ZCA9IE1hdGgubWluKHRvLCBNYXRoLmNlaWwoKHggKyBpbm5lck9mZiAqIHNjcm9sbGVyLmNsaWVu
			dFdpZHRoICogLjkpIC8gY3cpKTsKICAgICAgZm9yICg7OykgewogICAgICAgIHZhciBlc3RYID0g
			Z2V0WChlc3RpbWF0ZWQpOwogICAgICAgIGlmIChlc3RYIDw9IHggJiYgZXN0aW1hdGVkIDwgdG8p
			IGVzdGltYXRlZCA9IE1hdGgubWluKHRvLCBNYXRoLmNlaWwoZXN0aW1hdGVkICogMS4yKSk7CiAg
			ICAgICAgZWxzZSB7dG9YID0gZXN0WDsgdG8gPSBlc3RpbWF0ZWQ7IGJyZWFrO30KICAgICAgfQog
			ICAgICBpZiAoeCA+IHRvWCkgcmV0dXJuIHtsaW5lOiBsaW5lTm8sIGNoOiB0b307CiAgICAgIC8v
			IFRyeSB0byBndWVzcyBhIHN1aXRhYmxlIGxvd2VyIGJvdW5kIGFzIHdlbGwuCiAgICAgIGVzdGlt
			YXRlZCA9IE1hdGguZmxvb3IodG8gKiAwLjgpOyBlc3RYID0gZ2V0WChlc3RpbWF0ZWQpOwogICAg
			ICBpZiAoZXN0WCA8IHgpIHtmcm9tID0gZXN0aW1hdGVkOyBmcm9tWCA9IGVzdFg7fQogICAgICAv
			LyBEbyBhIGJpbmFyeSBzZWFyY2ggYmV0d2VlbiB0aGVzZSBib3VuZHMuCiAgICAgIGZvciAoOzsp
			IHsKICAgICAgICBpZiAodG8gLSBmcm9tIDw9IDEpIHJldHVybiB7bGluZTogbGluZU5vLCBjaDog
			KHRvWCAtIHggPiB4IC0gZnJvbVgpID8gZnJvbSA6IHRvfTsKICAgICAgICB2YXIgbWlkZGxlID0g
			TWF0aC5jZWlsKChmcm9tICsgdG8pIC8gMiksIG1pZGRsZVggPSBnZXRYKG1pZGRsZSk7CiAgICAg
			ICAgaWYgKG1pZGRsZVggPiB4KSB7dG8gPSBtaWRkbGU7IHRvWCA9IG1pZGRsZVg7fQogICAgICAg
			IGVsc2Uge2Zyb20gPSBtaWRkbGU7IGZyb21YID0gbWlkZGxlWDt9CiAgICAgIH0KICAgIH0KICAg
			IGZ1bmN0aW9uIHBhZ2VDb29yZHMocG9zKSB7CiAgICAgIHZhciBsb2NhbCA9IGxvY2FsQ29vcmRz
			KHBvcywgdHJ1ZSksIG9mZiA9IGVsdE9mZnNldChsaW5lU3BhY2UpOwogICAgICByZXR1cm4ge3g6
			IG9mZi5sZWZ0ICsgbG9jYWwueCwgeTogb2ZmLnRvcCArIGxvY2FsLnksIHlCb3Q6IG9mZi50b3Ag
			KyBsb2NhbC55Qm90fTsKICAgIH0KCiAgICB2YXIgY2FjaGVkSGVpZ2h0LCBjYWNoZWRIZWlnaHRG
			b3IsIG1lYXN1cmVUZXh0OwogICAgZnVuY3Rpb24gdGV4dEhlaWdodCgpIHsKICAgICAgaWYgKG1l
			YXN1cmVUZXh0ID09IG51bGwpIHsKICAgICAgICBtZWFzdXJlVGV4dCA9ICI8cHJlPiI7CiAgICAg
			ICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OTsgKytpKSBtZWFzdXJlVGV4dCArPSAieDxici8+IjsK
			ICAgICAgICBtZWFzdXJlVGV4dCArPSAieDwvcHJlPiI7CiAgICAgIH0KICAgICAgdmFyIG9mZnNl
			dEhlaWdodCA9IGxpbmVEaXYuY2xpZW50SGVpZ2h0OwogICAgICBpZiAob2Zmc2V0SGVpZ2h0ID09
			IGNhY2hlZEhlaWdodEZvcikgcmV0dXJuIGNhY2hlZEhlaWdodDsKICAgICAgY2FjaGVkSGVpZ2h0
			Rm9yID0gb2Zmc2V0SGVpZ2h0OwogICAgICBtZWFzdXJlLmlubmVySFRNTCA9IG1lYXN1cmVUZXh0
			OwogICAgICBjYWNoZWRIZWlnaHQgPSBtZWFzdXJlLmZpcnN0Q2hpbGQub2Zmc2V0SGVpZ2h0IC8g
			NTAgfHwgMTsKICAgICAgbWVhc3VyZS5pbm5lckhUTUwgPSAiIjsKICAgICAgcmV0dXJuIGNhY2hl
			ZEhlaWdodDsKICAgIH0KICAgIHZhciBjYWNoZWRXaWR0aCwgY2FjaGVkV2lkdGhGb3IgPSAwOwog
			ICAgZnVuY3Rpb24gY2hhcldpZHRoKCkgewogICAgICBpZiAoc2Nyb2xsZXIuY2xpZW50V2lkdGgg
			PT0gY2FjaGVkV2lkdGhGb3IpIHJldHVybiBjYWNoZWRXaWR0aDsKICAgICAgY2FjaGVkV2lkdGhG
			b3IgPSBzY3JvbGxlci5jbGllbnRXaWR0aDsKICAgICAgcmV0dXJuIChjYWNoZWRXaWR0aCA9IHN0
			cmluZ1dpZHRoKCJ4IikpOwogICAgfQogICAgZnVuY3Rpb24gcGFkZGluZ1RvcCgpIHtyZXR1cm4g
			bGluZVNwYWNlLm9mZnNldFRvcDt9CiAgICBmdW5jdGlvbiBwYWRkaW5nTGVmdCgpIHtyZXR1cm4g
			bGluZVNwYWNlLm9mZnNldExlZnQ7fQoKICAgIGZ1bmN0aW9uIHBvc0Zyb21Nb3VzZShlLCBsaWJl
			cmFsKSB7CiAgICAgIHZhciBvZmZXID0gZWx0T2Zmc2V0KHNjcm9sbGVyLCB0cnVlKSwgeCwgeTsK
			ICAgICAgLy8gRmFpbHMgdW5wcmVkaWN0YWJseSBvbiBJRVs2N10gd2hlbiBtb3VzZSBpcyBkcmFn
			Z2VkIGFyb3VuZCBxdWlja2x5LgogICAgICB0cnkgeyB4ID0gZS5jbGllbnRYOyB5ID0gZS5jbGll
			bnRZOyB9IGNhdGNoIChlKSB7IHJldHVybiBudWxsOyB9CiAgICAgIC8vIFRoaXMgaXMgYSBtZXNz
			IG9mIGEgaGV1cmlzdGljIHRvIHRyeSBhbmQgZGV0ZXJtaW5lIHdoZXRoZXIgYQogICAgICAvLyBz
			Y3JvbGwtYmFyIHdhcyBjbGlja2VkIG9yIG5vdCwgYW5kIHRvIHJldHVybiBudWxsIGlmIG9uZSB3
			YXMKICAgICAgLy8gKGFuZCAhbGliZXJhbCkuCiAgICAgIGlmICghbGliZXJhbCAmJiAoeCAtIG9m
			ZlcubGVmdCA+IHNjcm9sbGVyLmNsaWVudFdpZHRoIHx8IHkgLSBvZmZXLnRvcCA+IHNjcm9sbGVy
			LmNsaWVudEhlaWdodCkpCiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIHZhciBvZmZMID0gZWx0
			T2Zmc2V0KGxpbmVTcGFjZSwgdHJ1ZSk7CiAgICAgIHJldHVybiBjb29yZHNDaGFyKHggLSBvZmZM
			LmxlZnQsIHkgLSBvZmZMLnRvcCk7CiAgICB9CiAgICBmdW5jdGlvbiBvbkNvbnRleHRNZW51KGUp
			IHsKICAgICAgdmFyIHBvcyA9IHBvc0Zyb21Nb3VzZShlKSwgc2Nyb2xsUG9zID0gc2Nyb2xsZXIu
			c2Nyb2xsVG9wOwogICAgICBpZiAoIXBvcyB8fCB3aW5kb3cub3BlcmEpIHJldHVybjsgLy8gT3Bl
			cmEgaXMgZGlmZmljdWx0LgogICAgICBpZiAocG9zRXEoc2VsLmZyb20sIHNlbC50bykgfHwgcG9z
			TGVzcyhwb3MsIHNlbC5mcm9tKSB8fCAhcG9zTGVzcyhwb3MsIHNlbC50bykpCiAgICAgICAgb3Bl
			cmF0aW9uKHNldEN1cnNvcikocG9zLmxpbmUsIHBvcy5jaCk7CgogICAgICB2YXIgb2xkQ1NTID0g
			aW5wdXQuc3R5bGUuY3NzVGV4dDsKICAgICAgaW5wdXREaXYuc3R5bGUucG9zaXRpb24gPSAiYWJz
			b2x1dGUiOwogICAgICBpbnB1dC5zdHlsZS5jc3NUZXh0ID0gInBvc2l0aW9uOiBmaXhlZDsgd2lk
			dGg6IDMwcHg7IGhlaWdodDogMzBweDsgdG9wOiAiICsgKGUuY2xpZW50WSAtIDUpICsKICAgICAg
			ICAicHg7IGxlZnQ6ICIgKyAoZS5jbGllbnRYIC0gNSkgKyAicHg7IHotaW5kZXg6IDEwMDA7IGJh
			Y2tncm91bmQ6IHdoaXRlOyAiICsKICAgICAgICAiYm9yZGVyLXdpZHRoOiAwOyBvdXRsaW5lOiBu
			b25lOyBvdmVyZmxvdzogaGlkZGVuOyBvcGFjaXR5OiAuMDU7IGZpbHRlcjogYWxwaGEob3BhY2l0
			eT01KTsiOwogICAgICBsZWF2ZUlucHV0QWxvbmUgPSB0cnVlOwogICAgICB2YXIgdmFsID0gaW5w
			dXQudmFsdWUgPSBnZXRTZWxlY3Rpb24oKTsKICAgICAgZm9jdXNJbnB1dCgpOwogICAgICBzZWxl
			Y3RJbnB1dChpbnB1dCk7CiAgICAgIGZ1bmN0aW9uIHJlaGlkZSgpIHsKICAgICAgICB2YXIgbmV3
			VmFsID0gc3BsaXRMaW5lcyhpbnB1dC52YWx1ZSkuam9pbigiXG4iKTsKICAgICAgICBpZiAobmV3
			VmFsICE9IHZhbCkgb3BlcmF0aW9uKHJlcGxhY2VTZWxlY3Rpb24pKG5ld1ZhbCwgImVuZCIpOwog
			ICAgICAgIGlucHV0RGl2LnN0eWxlLnBvc2l0aW9uID0gInJlbGF0aXZlIjsKICAgICAgICBpbnB1
			dC5zdHlsZS5jc3NUZXh0ID0gb2xkQ1NTOwogICAgICAgIGlmIChpZV9sdDkpIHNjcm9sbGVyLnNj
			cm9sbFRvcCA9IHNjcm9sbFBvczsKICAgICAgICBsZWF2ZUlucHV0QWxvbmUgPSBmYWxzZTsKICAg
			ICAgICByZXNldElucHV0KHRydWUpOwogICAgICAgIHNsb3dQb2xsKCk7CiAgICAgIH0KCiAgICAg
			IGlmIChnZWNrbykgewogICAgICAgIGVfc3RvcChlKTsKICAgICAgICB2YXIgbW91c2V1cCA9IGNv
			bm5lY3Qod2luZG93LCAibW91c2V1cCIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgbW91c2V1cCgp
			OwogICAgICAgICAgc2V0VGltZW91dChyZWhpZGUsIDIwKTsKICAgICAgICB9LCB0cnVlKTsKICAg
			ICAgfSBlbHNlIHsKICAgICAgICBzZXRUaW1lb3V0KHJlaGlkZSwgNTApOwogICAgICB9CiAgICB9
			CgogICAgLy8gQ3Vyc29yLWJsaW5raW5nCiAgICBmdW5jdGlvbiByZXN0YXJ0QmxpbmsoKSB7CiAg
			ICAgIGNsZWFySW50ZXJ2YWwoYmxpbmtlcik7CiAgICAgIHZhciBvbiA9IHRydWU7CiAgICAgIGN1
			cnNvci5zdHlsZS52aXNpYmlsaXR5ID0gIiI7CiAgICAgIGJsaW5rZXIgPSBzZXRJbnRlcnZhbChm
			dW5jdGlvbigpIHsKICAgICAgICBjdXJzb3Iuc3R5bGUudmlzaWJpbGl0eSA9IChvbiA9ICFvbikg
			PyAiIiA6ICJoaWRkZW4iOwogICAgICB9LCA2NTApOwogICAgfQoKICAgIHZhciBtYXRjaGluZyA9
			IHsiKCI6ICIpPiIsICIpIjogIig8IiwgIlsiOiAiXT4iLCAiXSI6ICJbPCIsICJ7IjogIn0+Iiwg
			In0iOiAiezwifTsKICAgIGZ1bmN0aW9uIG1hdGNoQnJhY2tldHMoYXV0b2NsZWFyKSB7CiAgICAg
			IHZhciBoZWFkID0gc2VsLmludmVydGVkID8gc2VsLmZyb20gOiBzZWwudG8sIGxpbmUgPSBnZXRM
			aW5lKGhlYWQubGluZSksIHBvcyA9IGhlYWQuY2ggLSAxOwogICAgICB2YXIgbWF0Y2ggPSAocG9z
			ID49IDAgJiYgbWF0Y2hpbmdbbGluZS50ZXh0LmNoYXJBdChwb3MpXSkgfHwgbWF0Y2hpbmdbbGlu
			ZS50ZXh0LmNoYXJBdCgrK3BvcyldOwogICAgICBpZiAoIW1hdGNoKSByZXR1cm47CiAgICAgIHZh
			ciBjaCA9IG1hdGNoLmNoYXJBdCgwKSwgZm9yd2FyZCA9IG1hdGNoLmNoYXJBdCgxKSA9PSAiPiIs
			IGQgPSBmb3J3YXJkID8gMSA6IC0xLCBzdCA9IGxpbmUuc3R5bGVzOwogICAgICBmb3IgKHZhciBv
			ZmYgPSBwb3MgKyAxLCBpID0gMCwgZSA9IHN0Lmxlbmd0aDsgaSA8IGU7IGkrPTIpCiAgICAgICAg
			aWYgKChvZmYgLT0gc3RbaV0ubGVuZ3RoKSA8PSAwKSB7dmFyIHN0eWxlID0gc3RbaSsxXTsgYnJl
			YWs7fQoKICAgICAgdmFyIHN0YWNrID0gW2xpbmUudGV4dC5jaGFyQXQocG9zKV0sIHJlID0gL1so
			KXt9W1xdXS87CiAgICAgIGZ1bmN0aW9uIHNjYW4obGluZSwgZnJvbSwgdG8pIHsKICAgICAgICBp
			ZiAoIWxpbmUudGV4dCkgcmV0dXJuOwogICAgICAgIHZhciBzdCA9IGxpbmUuc3R5bGVzLCBwb3Mg
			PSBmb3J3YXJkID8gMCA6IGxpbmUudGV4dC5sZW5ndGggLSAxLCBjdXI7CiAgICAgICAgZm9yICh2
			YXIgaSA9IGZvcndhcmQgPyAwIDogc3QubGVuZ3RoIC0gMiwgZSA9IGZvcndhcmQgPyBzdC5sZW5n
			dGggOiAtMjsgaSAhPSBlOyBpICs9IDIqZCkgewogICAgICAgICAgdmFyIHRleHQgPSBzdFtpXTsK
			ICAgICAgICAgIGlmIChzdFtpKzFdICE9IG51bGwgJiYgc3RbaSsxXSAhPSBzdHlsZSkge3BvcyAr
			PSBkICogdGV4dC5sZW5ndGg7IGNvbnRpbnVlO30KICAgICAgICAgIGZvciAodmFyIGogPSBmb3J3
			YXJkID8gMCA6IHRleHQubGVuZ3RoIC0gMSwgdGUgPSBmb3J3YXJkID8gdGV4dC5sZW5ndGggOiAt
			MTsgaiAhPSB0ZTsgaiArPSBkLCBwb3MrPWQpIHsKICAgICAgICAgICAgaWYgKHBvcyA+PSBmcm9t
			ICYmIHBvcyA8IHRvICYmIHJlLnRlc3QoY3VyID0gdGV4dC5jaGFyQXQoaikpKSB7CiAgICAgICAg
			ICAgICAgdmFyIG1hdGNoID0gbWF0Y2hpbmdbY3VyXTsKICAgICAgICAgICAgICBpZiAobWF0Y2gu
			Y2hhckF0KDEpID09ICI+IiA9PSBmb3J3YXJkKSBzdGFjay5wdXNoKGN1cik7CiAgICAgICAgICAg
			ICAgZWxzZSBpZiAoc3RhY2sucG9wKCkgIT0gbWF0Y2guY2hhckF0KDApKSByZXR1cm4ge3Bvczog
			cG9zLCBtYXRjaDogZmFsc2V9OwogICAgICAgICAgICAgIGVsc2UgaWYgKCFzdGFjay5sZW5ndGgp
			IHJldHVybiB7cG9zOiBwb3MsIG1hdGNoOiB0cnVlfTsKICAgICAgICAgICAgfQogICAgICAgICAg
			fQogICAgICAgIH0KICAgICAgfQogICAgICBmb3IgKHZhciBpID0gaGVhZC5saW5lLCBlID0gZm9y
			d2FyZCA/IE1hdGgubWluKGkgKyAxMDAsIGRvYy5zaXplKSA6IE1hdGgubWF4KC0xLCBpIC0gMTAw
			KTsgaSAhPSBlOyBpKz1kKSB7CiAgICAgICAgdmFyIGxpbmUgPSBnZXRMaW5lKGkpLCBmaXJzdCA9
			IGkgPT0gaGVhZC5saW5lOwogICAgICAgIHZhciBmb3VuZCA9IHNjYW4obGluZSwgZmlyc3QgJiYg
			Zm9yd2FyZCA/IHBvcyArIDEgOiAwLCBmaXJzdCAmJiAhZm9yd2FyZCA/IHBvcyA6IGxpbmUudGV4
			dC5sZW5ndGgpOwogICAgICAgIGlmIChmb3VuZCkgYnJlYWs7CiAgICAgIH0KICAgICAgaWYgKCFm
			b3VuZCkgZm91bmQgPSB7cG9zOiBudWxsLCBtYXRjaDogZmFsc2V9OwogICAgICB2YXIgc3R5bGUg
			PSBmb3VuZC5tYXRjaCA/ICJDb2RlTWlycm9yLW1hdGNoaW5nYnJhY2tldCIgOiAiQ29kZU1pcnJv
			ci1ub25tYXRjaGluZ2JyYWNrZXQiOwogICAgICB2YXIgb25lID0gbWFya1RleHQoe2xpbmU6IGhl
			YWQubGluZSwgY2g6IHBvc30sIHtsaW5lOiBoZWFkLmxpbmUsIGNoOiBwb3MrMX0sIHN0eWxlKSwK
			ICAgICAgICAgIHR3byA9IGZvdW5kLnBvcyAhPSBudWxsICYmIG1hcmtUZXh0KHtsaW5lOiBpLCBj
			aDogZm91bmQucG9zfSwge2xpbmU6IGksIGNoOiBmb3VuZC5wb3MgKyAxfSwgc3R5bGUpOwogICAg
			ICB2YXIgY2xlYXIgPSBvcGVyYXRpb24oZnVuY3Rpb24oKXtvbmUuY2xlYXIoKTsgdHdvICYmIHR3
			by5jbGVhcigpO30pOwogICAgICBpZiAoYXV0b2NsZWFyKSBzZXRUaW1lb3V0KGNsZWFyLCA4MDAp
			OwogICAgICBlbHNlIGJyYWNrZXRIaWdobGlnaHRlZCA9IGNsZWFyOwogICAgfQoKICAgIC8vIEZp
			bmRzIHRoZSBsaW5lIHRvIHN0YXJ0IHdpdGggd2hlbiBzdGFydGluZyBhIHBhcnNlLiBUcmllcyB0
			bwogICAgLy8gZmluZCBhIGxpbmUgd2l0aCBhIHN0YXRlQWZ0ZXIsIHNvIHRoYXQgaXQgY2FuIHN0
			YXJ0IHdpdGggYQogICAgLy8gdmFsaWQgc3RhdGUuIElmIHRoYXQgZmFpbHMsIGl0IHJldHVybnMg
			dGhlIGxpbmUgd2l0aCB0aGUKICAgIC8vIHNtYWxsZXN0IGluZGVudGF0aW9uLCB3aGljaCB0ZW5k
			cyB0byBuZWVkIHRoZSBsZWFzdCBjb250ZXh0IHRvCiAgICAvLyBwYXJzZSBjb3JyZWN0bHkuCiAg
			ICBmdW5jdGlvbiBmaW5kU3RhcnRMaW5lKG4pIHsKICAgICAgdmFyIG1pbmluZGVudCwgbWlubGlu
			ZTsKICAgICAgZm9yICh2YXIgc2VhcmNoID0gbiwgbGltID0gbiAtIDQwOyBzZWFyY2ggPiBsaW07
			IC0tc2VhcmNoKSB7CiAgICAgICAgaWYgKHNlYXJjaCA9PSAwKSByZXR1cm4gMDsKICAgICAgICB2
			YXIgbGluZSA9IGdldExpbmUoc2VhcmNoLTEpOwogICAgICAgIGlmIChsaW5lLnN0YXRlQWZ0ZXIp
			IHJldHVybiBzZWFyY2g7CiAgICAgICAgdmFyIGluZGVudGVkID0gbGluZS5pbmRlbnRhdGlvbihv
			cHRpb25zLnRhYlNpemUpOwogICAgICAgIGlmIChtaW5saW5lID09IG51bGwgfHwgbWluaW5kZW50
			ID4gaW5kZW50ZWQpIHsKICAgICAgICAgIG1pbmxpbmUgPSBzZWFyY2ggLSAxOwogICAgICAgICAg
			bWluaW5kZW50ID0gaW5kZW50ZWQ7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBtaW5s
			aW5lOwogICAgfQogICAgZnVuY3Rpb24gZ2V0U3RhdGVCZWZvcmUobikgewogICAgICB2YXIgc3Rh
			cnQgPSBmaW5kU3RhcnRMaW5lKG4pLCBzdGF0ZSA9IHN0YXJ0ICYmIGdldExpbmUoc3RhcnQtMSku
			c3RhdGVBZnRlcjsKICAgICAgaWYgKCFzdGF0ZSkgc3RhdGUgPSBzdGFydFN0YXRlKG1vZGUpOwog
			ICAgICBlbHNlIHN0YXRlID0gY29weVN0YXRlKG1vZGUsIHN0YXRlKTsKICAgICAgZG9jLml0ZXIo
			c3RhcnQsIG4sIGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICBsaW5lLmhpZ2hsaWdodChtb2RlLCBz
			dGF0ZSwgb3B0aW9ucy50YWJTaXplKTsKICAgICAgICBsaW5lLnN0YXRlQWZ0ZXIgPSBjb3B5U3Rh
			dGUobW9kZSwgc3RhdGUpOwogICAgICB9KTsKICAgICAgaWYgKHN0YXJ0IDwgbikgY2hhbmdlcy5w
			dXNoKHtmcm9tOiBzdGFydCwgdG86IG59KTsKICAgICAgaWYgKG4gPCBkb2Muc2l6ZSAmJiAhZ2V0
			TGluZShuKS5zdGF0ZUFmdGVyKSB3b3JrLnB1c2gobik7CiAgICAgIHJldHVybiBzdGF0ZTsKICAg
			IH0KICAgIGZ1bmN0aW9uIGhpZ2hsaWdodExpbmVzKHN0YXJ0LCBlbmQpIHsKICAgICAgdmFyIHN0
			YXRlID0gZ2V0U3RhdGVCZWZvcmUoc3RhcnQpOwogICAgICBkb2MuaXRlcihzdGFydCwgZW5kLCBm
			dW5jdGlvbihsaW5lKSB7CiAgICAgICAgbGluZS5oaWdobGlnaHQobW9kZSwgc3RhdGUsIG9wdGlv
			bnMudGFiU2l6ZSk7CiAgICAgICAgbGluZS5zdGF0ZUFmdGVyID0gY29weVN0YXRlKG1vZGUsIHN0
			YXRlKTsKICAgICAgfSk7CiAgICB9CiAgICBmdW5jdGlvbiBoaWdobGlnaHRXb3JrZXIoKSB7CiAg
			ICAgIHZhciBlbmQgPSArbmV3IERhdGUgKyBvcHRpb25zLndvcmtUaW1lOwogICAgICB2YXIgZm91
			bmRXb3JrID0gd29yay5sZW5ndGg7CiAgICAgIHdoaWxlICh3b3JrLmxlbmd0aCkgewogICAgICAg
			IGlmICghZ2V0TGluZShzaG93aW5nRnJvbSkuc3RhdGVBZnRlcikgdmFyIHRhc2sgPSBzaG93aW5n
			RnJvbTsKICAgICAgICBlbHNlIHZhciB0YXNrID0gd29yay5wb3AoKTsKICAgICAgICBpZiAodGFz
			ayA+PSBkb2Muc2l6ZSkgY29udGludWU7CiAgICAgICAgdmFyIHN0YXJ0ID0gZmluZFN0YXJ0TGlu
			ZSh0YXNrKSwgc3RhdGUgPSBzdGFydCAmJiBnZXRMaW5lKHN0YXJ0LTEpLnN0YXRlQWZ0ZXI7CiAg
			ICAgICAgaWYgKHN0YXRlKSBzdGF0ZSA9IGNvcHlTdGF0ZShtb2RlLCBzdGF0ZSk7CiAgICAgICAg
			ZWxzZSBzdGF0ZSA9IHN0YXJ0U3RhdGUobW9kZSk7CgogICAgICAgIHZhciB1bmNoYW5nZWQgPSAw
			LCBjb21wYXJlID0gbW9kZS5jb21wYXJlU3RhdGVzLCByZWFsQ2hhbmdlID0gZmFsc2UsCiAgICAg
			ICAgICAgIGkgPSBzdGFydCwgYmFpbCA9IGZhbHNlOwogICAgICAgIGRvYy5pdGVyKGksIGRvYy5z
			aXplLCBmdW5jdGlvbihsaW5lKSB7CiAgICAgICAgICB2YXIgaGFkU3RhdGUgPSBsaW5lLnN0YXRl
			QWZ0ZXI7CiAgICAgICAgICBpZiAoK25ldyBEYXRlID4gZW5kKSB7CiAgICAgICAgICAgIHdvcmsu
			cHVzaChpKTsKICAgICAgICAgICAgc3RhcnRXb3JrZXIob3B0aW9ucy53b3JrRGVsYXkpOwogICAg
			ICAgICAgICBpZiAocmVhbENoYW5nZSkgY2hhbmdlcy5wdXNoKHtmcm9tOiB0YXNrLCB0bzogaSAr
			IDF9KTsKICAgICAgICAgICAgcmV0dXJuIChiYWlsID0gdHJ1ZSk7CiAgICAgICAgICB9CiAgICAg
			ICAgICB2YXIgY2hhbmdlZCA9IGxpbmUuaGlnaGxpZ2h0KG1vZGUsIHN0YXRlLCBvcHRpb25zLnRh
			YlNpemUpOwogICAgICAgICAgaWYgKGNoYW5nZWQpIHJlYWxDaGFuZ2UgPSB0cnVlOwogICAgICAg
			ICAgbGluZS5zdGF0ZUFmdGVyID0gY29weVN0YXRlKG1vZGUsIHN0YXRlKTsKICAgICAgICAgIGlm
			IChjb21wYXJlKSB7CiAgICAgICAgICAgIGlmIChoYWRTdGF0ZSAmJiBjb21wYXJlKGhhZFN0YXRl
			LCBzdGF0ZSkpIHJldHVybiB0cnVlOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgaWYg
			KGNoYW5nZWQgIT09IGZhbHNlIHx8ICFoYWRTdGF0ZSkgdW5jaGFuZ2VkID0gMDsKICAgICAgICAg
			ICAgZWxzZSBpZiAoKyt1bmNoYW5nZWQgPiAzICYmICghbW9kZS5pbmRlbnQgfHwgbW9kZS5pbmRl
			bnQoaGFkU3RhdGUsICIiKSA9PSBtb2RlLmluZGVudChzdGF0ZSwgIiIpKSkKICAgICAgICAgICAg
			ICByZXR1cm4gdHJ1ZTsKICAgICAgICAgIH0KICAgICAgICAgICsraTsKICAgICAgICB9KTsKICAg
			ICAgICBpZiAoYmFpbCkgcmV0dXJuOwogICAgICAgIGlmIChyZWFsQ2hhbmdlKSBjaGFuZ2VzLnB1
			c2goe2Zyb206IHRhc2ssIHRvOiBpICsgMX0pOwogICAgICB9CiAgICAgIGlmIChmb3VuZFdvcmsg
			JiYgb3B0aW9ucy5vbkhpZ2hsaWdodENvbXBsZXRlKQogICAgICAgIG9wdGlvbnMub25IaWdobGln
			aHRDb21wbGV0ZShpbnN0YW5jZSk7CiAgICB9CiAgICBmdW5jdGlvbiBzdGFydFdvcmtlcih0aW1l
			KSB7CiAgICAgIGlmICghd29yay5sZW5ndGgpIHJldHVybjsKICAgICAgaGlnaGxpZ2h0LnNldCh0
			aW1lLCBvcGVyYXRpb24oaGlnaGxpZ2h0V29ya2VyKSk7CiAgICB9CgogICAgLy8gT3BlcmF0aW9u
			cyBhcmUgdXNlZCB0byB3cmFwIGNoYW5nZXMgaW4gc3VjaCBhIHdheSB0aGF0IGVhY2gKICAgIC8v
			IGNoYW5nZSB3b24ndCBoYXZlIHRvIHVwZGF0ZSB0aGUgY3Vyc29yIGFuZCBkaXNwbGF5ICh3aGlj
			aCB3b3VsZAogICAgLy8gYmUgYXdrd2FyZCwgc2xvdywgYW5kIGVycm9yLXByb25lKSwgYnV0IGlu
			c3RlYWQgdXBkYXRlcyBhcmUKICAgIC8vIGJhdGNoZWQgYW5kIHRoZW4gYWxsIGNvbWJpbmVkIGFu
			ZCBleGVjdXRlZCBhdCBvbmNlLgogICAgZnVuY3Rpb24gc3RhcnRPcGVyYXRpb24oKSB7CiAgICAg
			IHVwZGF0ZUlucHV0ID0gdXNlclNlbENoYW5nZSA9IHRleHRDaGFuZ2VkID0gbnVsbDsKICAgICAg
			Y2hhbmdlcyA9IFtdOyBzZWxlY3Rpb25DaGFuZ2VkID0gZmFsc2U7IGNhbGxiYWNrcyA9IFtdOwog
			ICAgfQogICAgZnVuY3Rpb24gZW5kT3BlcmF0aW9uKCkgewogICAgICB2YXIgcmVTY3JvbGwgPSBm
			YWxzZSwgdXBkYXRlZDsKICAgICAgaWYgKHNlbGVjdGlvbkNoYW5nZWQpIHJlU2Nyb2xsID0gIXNj
			cm9sbEN1cnNvckludG9WaWV3KCk7CiAgICAgIGlmIChjaGFuZ2VzLmxlbmd0aCkgdXBkYXRlZCA9
			IHVwZGF0ZURpc3BsYXkoY2hhbmdlcywgdHJ1ZSk7CiAgICAgIGVsc2UgewogICAgICAgIGlmIChz
			ZWxlY3Rpb25DaGFuZ2VkKSB1cGRhdGVTZWxlY3Rpb24oKTsKICAgICAgICBpZiAoZ3V0dGVyRGly
			dHkpIHVwZGF0ZUd1dHRlcigpOwogICAgICB9CiAgICAgIGlmIChyZVNjcm9sbCkgc2Nyb2xsQ3Vy
			c29ySW50b1ZpZXcoKTsKICAgICAgaWYgKHNlbGVjdGlvbkNoYW5nZWQpIHtzY3JvbGxFZGl0b3JJ
			bnRvVmlldygpOyByZXN0YXJ0QmxpbmsoKTt9CgogICAgICBpZiAoZm9jdXNlZCAmJiAhbGVhdmVJ
			bnB1dEFsb25lICYmCiAgICAgICAgICAodXBkYXRlSW5wdXQgPT09IHRydWUgfHwgKHVwZGF0ZUlu
			cHV0ICE9PSBmYWxzZSAmJiBzZWxlY3Rpb25DaGFuZ2VkKSkpCiAgICAgICAgcmVzZXRJbnB1dCh1
			c2VyU2VsQ2hhbmdlKTsKCiAgICAgIGlmIChzZWxlY3Rpb25DaGFuZ2VkICYmIG9wdGlvbnMubWF0
			Y2hCcmFja2V0cykKICAgICAgICBzZXRUaW1lb3V0KG9wZXJhdGlvbihmdW5jdGlvbigpIHsKICAg
			ICAgICAgIGlmIChicmFja2V0SGlnaGxpZ2h0ZWQpIHticmFja2V0SGlnaGxpZ2h0ZWQoKTsgYnJh
			Y2tldEhpZ2hsaWdodGVkID0gbnVsbDt9CiAgICAgICAgICBpZiAocG9zRXEoc2VsLmZyb20sIHNl
			bC50bykpIG1hdGNoQnJhY2tldHMoZmFsc2UpOwogICAgICAgIH0pLCAyMCk7CiAgICAgIHZhciB0
			YyA9IHRleHRDaGFuZ2VkLCBjYnMgPSBjYWxsYmFja3M7IC8vIHRoZXNlIGNhbiBiZSByZXNldCBi
			eSBjYWxsYmFja3MKICAgICAgaWYgKHNlbGVjdGlvbkNoYW5nZWQgJiYgb3B0aW9ucy5vbkN1cnNv
			ckFjdGl2aXR5KQogICAgICAgIG9wdGlvbnMub25DdXJzb3JBY3Rpdml0eShpbnN0YW5jZSk7CiAg
			ICAgIGlmICh0YyAmJiBvcHRpb25zLm9uQ2hhbmdlICYmIGluc3RhbmNlKQogICAgICAgIG9wdGlv
			bnMub25DaGFuZ2UoaW5zdGFuY2UsIHRjKTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMu
			bGVuZ3RoOyArK2kpIGNic1tpXShpbnN0YW5jZSk7CiAgICAgIGlmICh1cGRhdGVkICYmIG9wdGlv
			bnMub25VcGRhdGUpIG9wdGlvbnMub25VcGRhdGUoaW5zdGFuY2UpOwogICAgfQogICAgdmFyIG5l
			c3RlZE9wZXJhdGlvbiA9IDA7CiAgICBmdW5jdGlvbiBvcGVyYXRpb24oZikgewogICAgICByZXR1
			cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgaWYgKCFuZXN0ZWRPcGVyYXRpb24rKykgc3RhcnRPcGVy
			YXRpb24oKTsKICAgICAgICB0cnkge3ZhciByZXN1bHQgPSBmLmFwcGx5KHRoaXMsIGFyZ3VtZW50
			cyk7fQogICAgICAgIGZpbmFsbHkge2lmICghLS1uZXN0ZWRPcGVyYXRpb24pIGVuZE9wZXJhdGlv
			bigpO30KICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9OwogICAgfQoKICAgIGZvciAodmFy
			IGV4dCBpbiBleHRlbnNpb25zKQogICAgICBpZiAoZXh0ZW5zaW9ucy5wcm9wZXJ0eUlzRW51bWVy
			YWJsZShleHQpICYmCiAgICAgICAgICAhaW5zdGFuY2UucHJvcGVydHlJc0VudW1lcmFibGUoZXh0
			KSkKICAgICAgICBpbnN0YW5jZVtleHRdID0gZXh0ZW5zaW9uc1tleHRdOwogICAgcmV0dXJuIGlu
			c3RhbmNlOwogIH0gLy8gKGVuZCBvZiBmdW5jdGlvbiBDb2RlTWlycm9yKQoKICAvLyBUaGUgZGVm
			YXVsdCBjb25maWd1cmF0aW9uIG9wdGlvbnMuCiAgQ29kZU1pcnJvci5kZWZhdWx0cyA9IHsKICAg
			IHZhbHVlOiAiIiwKICAgIG1vZGU6IG51bGwsCiAgICB0aGVtZTogImRlZmF1bHQiLAogICAgaW5k
			ZW50VW5pdDogMiwKICAgIGluZGVudFdpdGhUYWJzOiBmYWxzZSwKICAgIHNtYXJ0SW5kZW50OiB0
			cnVlLAogICAgdGFiU2l6ZTogNCwKICAgIGtleU1hcDogImRlZmF1bHQiLAogICAgZXh0cmFLZXlz
			OiBudWxsLAogICAgZWxlY3RyaWNDaGFyczogdHJ1ZSwKICAgIGF1dG9DbGVhckVtcHR5TGluZXM6
			IGZhbHNlLAogICAgb25LZXlFdmVudDogbnVsbCwKICAgIGxpbmVXcmFwcGluZzogZmFsc2UsCiAg
			ICBsaW5lTnVtYmVyczogZmFsc2UsCiAgICBndXR0ZXI6IGZhbHNlLAogICAgZml4ZWRHdXR0ZXI6
			IGZhbHNlLAogICAgZmlyc3RMaW5lTnVtYmVyOiAxLAogICAgcmVhZE9ubHk6IGZhbHNlLAogICAg
			b25DaGFuZ2U6IG51bGwsCiAgICBvbkN1cnNvckFjdGl2aXR5OiBudWxsLAogICAgb25HdXR0ZXJD
			bGljazogbnVsbCwKICAgIG9uSGlnaGxpZ2h0Q29tcGxldGU6IG51bGwsCiAgICBvblVwZGF0ZTog
			bnVsbCwKICAgIG9uRm9jdXM6IG51bGwsIG9uQmx1cjogbnVsbCwgb25TY3JvbGw6IG51bGwsCiAg
			ICBtYXRjaEJyYWNrZXRzOiBmYWxzZSwKICAgIHdvcmtUaW1lOiAxMDAsCiAgICB3b3JrRGVsYXk6
			IDIwMCwKICAgIHBvbGxJbnRlcnZhbDogMTAwLAogICAgdW5kb0RlcHRoOiA0MCwKICAgIHRhYmlu
			ZGV4OiBudWxsLAogICAgZG9jdW1lbnQ6IHdpbmRvdy5kb2N1bWVudAogIH07CgogIHZhciBpb3Mg
			PSAvQXBwbGVXZWJLaXQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgL01vYmlsZVwvXHcr
			Ly50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOwogIHZhciBtYWMgPSBpb3MgfHwgL01hYy8udGVz
			dChuYXZpZ2F0b3IucGxhdGZvcm0pOwogIHZhciB3aW4gPSAvV2luLy50ZXN0KG5hdmlnYXRvci5w
			bGF0Zm9ybSk7CgogIC8vIEtub3duIG1vZGVzLCBieSBuYW1lIGFuZCBieSBNSU1FCiAgdmFyIG1v
			ZGVzID0ge30sIG1pbWVNb2RlcyA9IHt9OwogIENvZGVNaXJyb3IuZGVmaW5lTW9kZSA9IGZ1bmN0
			aW9uKG5hbWUsIG1vZGUpIHsKICAgIGlmICghQ29kZU1pcnJvci5kZWZhdWx0cy5tb2RlICYmIG5h
			bWUgIT0gIm51bGwiKSBDb2RlTWlycm9yLmRlZmF1bHRzLm1vZGUgPSBuYW1lOwogICAgbW9kZXNb
			bmFtZV0gPSBtb2RlOwogIH07CiAgQ29kZU1pcnJvci5kZWZpbmVNSU1FID0gZnVuY3Rpb24obWlt
			ZSwgc3BlYykgewogICAgbWltZU1vZGVzW21pbWVdID0gc3BlYzsKICB9OwogIENvZGVNaXJyb3Iu
			cmVzb2x2ZU1vZGUgPSBmdW5jdGlvbihzcGVjKSB7CiAgICBpZiAodHlwZW9mIHNwZWMgPT0gInN0
			cmluZyIgJiYgbWltZU1vZGVzLmhhc093blByb3BlcnR5KHNwZWMpKQogICAgICBzcGVjID0gbWlt
			ZU1vZGVzW3NwZWNdOwogICAgaWYgKHR5cGVvZiBzcGVjID09ICJzdHJpbmciKSByZXR1cm4ge25h
			bWU6IHNwZWN9OwogICAgZWxzZSByZXR1cm4gc3BlYyB8fCB7bmFtZTogIm51bGwifTsKICB9Owog
			IENvZGVNaXJyb3IuZ2V0TW9kZSA9IGZ1bmN0aW9uKG9wdGlvbnMsIHNwZWMpIHsKICAgIHZhciBz
			cGVjID0gQ29kZU1pcnJvci5yZXNvbHZlTW9kZShzcGVjKTsKICAgIHZhciBtZmFjdG9yeSA9IG1v
			ZGVzW3NwZWMubmFtZV07CiAgICBpZiAoIW1mYWN0b3J5KSB7CiAgICAgIGlmICh3aW5kb3cuY29u
			c29sZSkgY29uc29sZS53YXJuKCJObyBtb2RlICIgKyBzcGVjLm5hbWUgKyAiIGZvdW5kLCBmYWxs
			aW5nIGJhY2sgdG8gcGxhaW4gdGV4dC4iKTsKICAgICAgcmV0dXJuIENvZGVNaXJyb3IuZ2V0TW9k
			ZShvcHRpb25zLCAidGV4dC9wbGFpbiIpOwogICAgfQogICAgcmV0dXJuIG1mYWN0b3J5KG9wdGlv
			bnMsIHNwZWMpOwogIH07CiAgQ29kZU1pcnJvci5saXN0TW9kZXMgPSBmdW5jdGlvbigpIHsKICAg
			IHZhciBsaXN0ID0gW107CiAgICBmb3IgKHZhciBtIGluIG1vZGVzKQogICAgICBpZiAobW9kZXMu
			cHJvcGVydHlJc0VudW1lcmFibGUobSkpIGxpc3QucHVzaChtKTsKICAgIHJldHVybiBsaXN0Owog
			IH07CiAgQ29kZU1pcnJvci5saXN0TUlNRXMgPSBmdW5jdGlvbigpIHsKICAgIHZhciBsaXN0ID0g
			W107CiAgICBmb3IgKHZhciBtIGluIG1pbWVNb2RlcykKICAgICAgaWYgKG1pbWVNb2Rlcy5wcm9w
			ZXJ0eUlzRW51bWVyYWJsZShtKSkgbGlzdC5wdXNoKHttaW1lOiBtLCBtb2RlOiBtaW1lTW9kZXNb
			bV19KTsKICAgIHJldHVybiBsaXN0OwogIH07CgogIHZhciBleHRlbnNpb25zID0gQ29kZU1pcnJv
			ci5leHRlbnNpb25zID0ge307CiAgQ29kZU1pcnJvci5kZWZpbmVFeHRlbnNpb24gPSBmdW5jdGlv
			bihuYW1lLCBmdW5jKSB7CiAgICBleHRlbnNpb25zW25hbWVdID0gZnVuYzsKICB9OwoKICB2YXIg
			Y29tbWFuZHMgPSBDb2RlTWlycm9yLmNvbW1hbmRzID0gewogICAgc2VsZWN0QWxsOiBmdW5jdGlv
			bihjbSkge2NtLnNldFNlbGVjdGlvbih7bGluZTogMCwgY2g6IDB9LCB7bGluZTogY20ubGluZUNv
			dW50KCkgLSAxfSk7fSwKICAgIGtpbGxMaW5lOiBmdW5jdGlvbihjbSkgewogICAgICB2YXIgZnJv
			bSA9IGNtLmdldEN1cnNvcih0cnVlKSwgdG8gPSBjbS5nZXRDdXJzb3IoZmFsc2UpLCBzZWwgPSAh
			cG9zRXEoZnJvbSwgdG8pOwogICAgICBpZiAoIXNlbCAmJiBjbS5nZXRMaW5lKGZyb20ubGluZSku
			bGVuZ3RoID09IGZyb20uY2gpIGNtLnJlcGxhY2VSYW5nZSgiIiwgZnJvbSwge2xpbmU6IGZyb20u
			bGluZSArIDEsIGNoOiAwfSk7CiAgICAgIGVsc2UgY20ucmVwbGFjZVJhbmdlKCIiLCBmcm9tLCBz
			ZWwgPyB0byA6IHtsaW5lOiBmcm9tLmxpbmV9KTsKICAgIH0sCiAgICBkZWxldGVMaW5lOiBmdW5j
			dGlvbihjbSkge3ZhciBsID0gY20uZ2V0Q3Vyc29yKCkubGluZTsgY20ucmVwbGFjZVJhbmdlKCIi
			LCB7bGluZTogbCwgY2g6IDB9LCB7bGluZTogbH0pO30sCiAgICB1bmRvOiBmdW5jdGlvbihjbSkg
			e2NtLnVuZG8oKTt9LAogICAgcmVkbzogZnVuY3Rpb24oY20pIHtjbS5yZWRvKCk7fSwKICAgIGdv
			RG9jU3RhcnQ6IGZ1bmN0aW9uKGNtKSB7Y20uc2V0Q3Vyc29yKDAsIDAsIHRydWUpO30sCiAgICBn
			b0RvY0VuZDogZnVuY3Rpb24oY20pIHtjbS5zZXRTZWxlY3Rpb24oe2xpbmU6IGNtLmxpbmVDb3Vu
			dCgpIC0gMX0sIG51bGwsIHRydWUpO30sCiAgICBnb0xpbmVTdGFydDogZnVuY3Rpb24oY20pIHtj
			bS5zZXRDdXJzb3IoY20uZ2V0Q3Vyc29yKCkubGluZSwgMCwgdHJ1ZSk7fSwKICAgIGdvTGluZVN0
			YXJ0U21hcnQ6IGZ1bmN0aW9uKGNtKSB7CiAgICAgIHZhciBjdXIgPSBjbS5nZXRDdXJzb3IoKTsK
			ICAgICAgdmFyIHRleHQgPSBjbS5nZXRMaW5lKGN1ci5saW5lKSwgZmlyc3ROb25XUyA9IE1hdGgu
			bWF4KDAsIHRleHQuc2VhcmNoKC9cUy8pKTsKICAgICAgY20uc2V0Q3Vyc29yKGN1ci5saW5lLCBj
			dXIuY2ggPD0gZmlyc3ROb25XUyAmJiBjdXIuY2ggPyAwIDogZmlyc3ROb25XUywgdHJ1ZSk7CiAg
			ICB9LAogICAgZ29MaW5lRW5kOiBmdW5jdGlvbihjbSkge2NtLnNldFNlbGVjdGlvbih7bGluZTog
			Y20uZ2V0Q3Vyc29yKCkubGluZX0sIG51bGwsIHRydWUpO30sCiAgICBnb0xpbmVVcDogZnVuY3Rp
			b24oY20pIHtjbS5tb3ZlVigtMSwgImxpbmUiKTt9LAogICAgZ29MaW5lRG93bjogZnVuY3Rpb24o
			Y20pIHtjbS5tb3ZlVigxLCAibGluZSIpO30sCiAgICBnb1BhZ2VVcDogZnVuY3Rpb24oY20pIHtj
			bS5tb3ZlVigtMSwgInBhZ2UiKTt9LAogICAgZ29QYWdlRG93bjogZnVuY3Rpb24oY20pIHtjbS5t
			b3ZlVigxLCAicGFnZSIpO30sCiAgICBnb0NoYXJMZWZ0OiBmdW5jdGlvbihjbSkge2NtLm1vdmVI
			KC0xLCAiY2hhciIpO30sCiAgICBnb0NoYXJSaWdodDogZnVuY3Rpb24oY20pIHtjbS5tb3ZlSCgx
			LCAiY2hhciIpO30sCiAgICBnb0NvbHVtbkxlZnQ6IGZ1bmN0aW9uKGNtKSB7Y20ubW92ZUgoLTEs
			ICJjb2x1bW4iKTt9LAogICAgZ29Db2x1bW5SaWdodDogZnVuY3Rpb24oY20pIHtjbS5tb3ZlSCgx
			LCAiY29sdW1uIik7fSwKICAgIGdvV29yZExlZnQ6IGZ1bmN0aW9uKGNtKSB7Y20ubW92ZUgoLTEs
			ICJ3b3JkIik7fSwKICAgIGdvV29yZFJpZ2h0OiBmdW5jdGlvbihjbSkge2NtLm1vdmVIKDEsICJ3
			b3JkIik7fSwKICAgIGRlbENoYXJMZWZ0OiBmdW5jdGlvbihjbSkge2NtLmRlbGV0ZUgoLTEsICJj
			aGFyIik7fSwKICAgIGRlbENoYXJSaWdodDogZnVuY3Rpb24oY20pIHtjbS5kZWxldGVIKDEsICJj
			aGFyIik7fSwKICAgIGRlbFdvcmRMZWZ0OiBmdW5jdGlvbihjbSkge2NtLmRlbGV0ZUgoLTEsICJ3
			b3JkIik7fSwKICAgIGRlbFdvcmRSaWdodDogZnVuY3Rpb24oY20pIHtjbS5kZWxldGVIKDEsICJ3
			b3JkIik7fSwKICAgIGluZGVudEF1dG86IGZ1bmN0aW9uKGNtKSB7Y20uaW5kZW50U2VsZWN0aW9u
			KCJzbWFydCIpO30sCiAgICBpbmRlbnRNb3JlOiBmdW5jdGlvbihjbSkge2NtLmluZGVudFNlbGVj
			dGlvbigiYWRkIik7fSwKICAgIGluZGVudExlc3M6IGZ1bmN0aW9uKGNtKSB7Y20uaW5kZW50U2Vs
			ZWN0aW9uKCJzdWJ0cmFjdCIpO30sCiAgICBpbnNlcnRUYWI6IGZ1bmN0aW9uKGNtKSB7Y20ucmVw
			bGFjZVNlbGVjdGlvbigiXHQiLCAiZW5kIik7fSwKICAgIHRyYW5zcG9zZUNoYXJzOiBmdW5jdGlv
			bihjbSkgewogICAgICB2YXIgY3VyID0gY20uZ2V0Q3Vyc29yKCksIGxpbmUgPSBjbS5nZXRMaW5l
			KGN1ci5saW5lKTsKICAgICAgaWYgKGN1ci5jaCA+IDAgJiYgY3VyLmNoIDwgbGluZS5sZW5ndGgg
			LSAxKQogICAgICAgIGNtLnJlcGxhY2VSYW5nZShsaW5lLmNoYXJBdChjdXIuY2gpICsgbGluZS5j
			aGFyQXQoY3VyLmNoIC0gMSksCiAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5lOiBjdXIubGlu
			ZSwgY2g6IGN1ci5jaCAtIDF9LCB7bGluZTogY3VyLmxpbmUsIGNoOiBjdXIuY2ggKyAxfSk7CiAg
			ICB9LAogICAgbmV3bGluZUFuZEluZGVudDogZnVuY3Rpb24oY20pIHsKICAgICAgY20ucmVwbGFj
			ZVNlbGVjdGlvbigiXG4iLCAiZW5kIik7CiAgICAgIGNtLmluZGVudExpbmUoY20uZ2V0Q3Vyc29y
			KCkubGluZSk7CiAgICB9LAogICAgdG9nZ2xlT3ZlcndyaXRlOiBmdW5jdGlvbihjbSkge2NtLnRv
			Z2dsZU92ZXJ3cml0ZSgpO30KICB9OwoKICB2YXIga2V5TWFwID0gQ29kZU1pcnJvci5rZXlNYXAg
			PSB7fTsKICBrZXlNYXAuYmFzaWMgPSB7CiAgICAiTGVmdCI6ICJnb0NoYXJMZWZ0IiwgIlJpZ2h0
			IjogImdvQ2hhclJpZ2h0IiwgIlVwIjogImdvTGluZVVwIiwgIkRvd24iOiAiZ29MaW5lRG93biIs
			CiAgICAiRW5kIjogImdvTGluZUVuZCIsICJIb21lIjogImdvTGluZVN0YXJ0U21hcnQiLCAiUGFn
			ZVVwIjogImdvUGFnZVVwIiwgIlBhZ2VEb3duIjogImdvUGFnZURvd24iLAogICAgIkRlbGV0ZSI6
			ICJkZWxDaGFyUmlnaHQiLCAiQmFja3NwYWNlIjogImRlbENoYXJMZWZ0IiwgIlRhYiI6ICJpbmRl
			bnRNb3JlIiwgIlNoaWZ0LVRhYiI6ICJpbmRlbnRMZXNzIiwKICAgICJFbnRlciI6ICJuZXdsaW5l
			QW5kSW5kZW50IiwgIkluc2VydCI6ICJ0b2dnbGVPdmVyd3JpdGUiCiAgfTsKICAvLyBOb3RlIHRo
			YXQgdGhlIHNhdmUgYW5kIGZpbmQtcmVsYXRlZCBjb21tYW5kcyBhcmVuJ3QgZGVmaW5lZCBieQog
			IC8vIGRlZmF1bHQuIFVua25vd24gY29tbWFuZHMgYXJlIHNpbXBseSBpZ25vcmVkLgogIGtleU1h
			cC5wY0RlZmF1bHQgPSB7CiAgICAiQ3RybC1BIjogInNlbGVjdEFsbCIsICJDdHJsLUQiOiAiZGVs
			ZXRlTGluZSIsICJDdHJsLVoiOiAidW5kbyIsICJTaGlmdC1DdHJsLVoiOiAicmVkbyIsICJDdHJs
			LVkiOiAicmVkbyIsCiAgICAiQ3RybC1Ib21lIjogImdvRG9jU3RhcnQiLCAiQWx0LVVwIjogImdv
			RG9jU3RhcnQiLCAiQ3RybC1FbmQiOiAiZ29Eb2NFbmQiLCAiQ3RybC1Eb3duIjogImdvRG9jRW5k
			IiwKICAgICJDdHJsLUxlZnQiOiAiZ29Xb3JkTGVmdCIsICJDdHJsLVJpZ2h0IjogImdvV29yZFJp
			Z2h0IiwgIkFsdC1MZWZ0IjogImdvTGluZVN0YXJ0IiwgIkFsdC1SaWdodCI6ICJnb0xpbmVFbmQi
			LAogICAgIkN0cmwtQmFja3NwYWNlIjogImRlbFdvcmRMZWZ0IiwgIkN0cmwtRGVsZXRlIjogImRl
			bFdvcmRSaWdodCIsICJDdHJsLVMiOiAic2F2ZSIsICJDdHJsLUYiOiAiZmluZCIsCiAgICAiQ3Ry
			bC1HIjogImZpbmROZXh0IiwgIlNoaWZ0LUN0cmwtRyI6ICJmaW5kUHJldiIsICJTaGlmdC1DdHJs
			LUYiOiAicmVwbGFjZSIsICJTaGlmdC1DdHJsLVIiOiAicmVwbGFjZUFsbCIsCiAgICBmYWxsdGhy
			b3VnaDogImJhc2ljIgogIH07CiAga2V5TWFwLm1hY0RlZmF1bHQgPSB7CiAgICAiQ21kLUEiOiAi
			c2VsZWN0QWxsIiwgIkNtZC1EIjogImRlbGV0ZUxpbmUiLCAiQ21kLVoiOiAidW5kbyIsICJTaGlm
			dC1DbWQtWiI6ICJyZWRvIiwgIkNtZC1ZIjogInJlZG8iLAogICAgIkNtZC1VcCI6ICJnb0RvY1N0
			YXJ0IiwgIkNtZC1FbmQiOiAiZ29Eb2NFbmQiLCAiQ21kLURvd24iOiAiZ29Eb2NFbmQiLCAiQWx0
			LUxlZnQiOiAiZ29Xb3JkTGVmdCIsCiAgICAiQWx0LVJpZ2h0IjogImdvV29yZFJpZ2h0IiwgIkNt
			ZC1MZWZ0IjogImdvTGluZVN0YXJ0IiwgIkNtZC1SaWdodCI6ICJnb0xpbmVFbmQiLCAiQWx0LUJh
			Y2tzcGFjZSI6ICJkZWxXb3JkTGVmdCIsCiAgICAiQ3RybC1BbHQtQmFja3NwYWNlIjogImRlbFdv
			cmRSaWdodCIsICJBbHQtRGVsZXRlIjogImRlbFdvcmRSaWdodCIsICJDbWQtUyI6ICJzYXZlIiwg
			IkNtZC1GIjogImZpbmQiLAogICAgIkNtZC1HIjogImZpbmROZXh0IiwgIlNoaWZ0LUNtZC1HIjog
			ImZpbmRQcmV2IiwgIkNtZC1BbHQtRiI6ICJyZXBsYWNlIiwgIlNoaWZ0LUNtZC1BbHQtRiI6ICJy
			ZXBsYWNlQWxsIiwKICAgIGZhbGx0aHJvdWdoOiBbImJhc2ljIiwgImVtYWNzeSJdCiAgfTsKICBr
			ZXlNYXBbImRlZmF1bHQiXSA9IG1hYyA/IGtleU1hcC5tYWNEZWZhdWx0IDoga2V5TWFwLnBjRGVm
			YXVsdDsKICBrZXlNYXAuZW1hY3N5ID0gewogICAgIkN0cmwtRiI6ICJnb0NoYXJSaWdodCIsICJD
			dHJsLUIiOiAiZ29DaGFyTGVmdCIsICJDdHJsLVAiOiAiZ29MaW5lVXAiLCAiQ3RybC1OIjogImdv
			TGluZURvd24iLAogICAgIkFsdC1GIjogImdvV29yZFJpZ2h0IiwgIkFsdC1CIjogImdvV29yZExl
			ZnQiLCAiQ3RybC1BIjogImdvTGluZVN0YXJ0IiwgIkN0cmwtRSI6ICJnb0xpbmVFbmQiLAogICAg
			IkN0cmwtViI6ICJnb1BhZ2VVcCIsICJTaGlmdC1DdHJsLVYiOiAiZ29QYWdlRG93biIsICJDdHJs
			LUQiOiAiZGVsQ2hhclJpZ2h0IiwgIkN0cmwtSCI6ICJkZWxDaGFyTGVmdCIsCiAgICAiQWx0LUQi
			OiAiZGVsV29yZFJpZ2h0IiwgIkFsdC1CYWNrc3BhY2UiOiAiZGVsV29yZExlZnQiLCAiQ3RybC1L
			IjogImtpbGxMaW5lIiwgIkN0cmwtVCI6ICJ0cmFuc3Bvc2VDaGFycyIKICB9OwoKICBmdW5jdGlv
			biBnZXRLZXlNYXAodmFsKSB7CiAgICBpZiAodHlwZW9mIHZhbCA9PSAic3RyaW5nIikgcmV0dXJu
			IGtleU1hcFt2YWxdOwogICAgZWxzZSByZXR1cm4gdmFsOwogIH0KICBmdW5jdGlvbiBsb29rdXBL
			ZXkobmFtZSwgZXh0cmFNYXAsIG1hcCwgaGFuZGxlKSB7CiAgICBmdW5jdGlvbiBsb29rdXAobWFw
			KSB7CiAgICAgIG1hcCA9IGdldEtleU1hcChtYXApOwogICAgICB2YXIgZm91bmQgPSBtYXBbbmFt
			ZV07CiAgICAgIGlmIChmb3VuZCAhPSBudWxsICYmIGhhbmRsZShmb3VuZCkpIHJldHVybiB0cnVl
			OwogICAgICBpZiAobWFwLmNhdGNoYWxsKSByZXR1cm4gaGFuZGxlKG1hcC5jYXRjaGFsbCk7CiAg
			ICAgIHZhciBmYWxsdGhyb3VnaCA9IG1hcC5mYWxsdGhyb3VnaDsKICAgICAgaWYgKGZhbGx0aHJv
			dWdoID09IG51bGwpIHJldHVybiBmYWxzZTsKICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9T
			dHJpbmcuY2FsbChmYWxsdGhyb3VnaCkgIT0gIltvYmplY3QgQXJyYXldIikKICAgICAgICByZXR1
			cm4gbG9va3VwKGZhbGx0aHJvdWdoKTsKICAgICAgZm9yICh2YXIgaSA9IDAsIGUgPSBmYWxsdGhy
			b3VnaC5sZW5ndGg7IGkgPCBlOyArK2kpIHsKICAgICAgICBpZiAobG9va3VwKGZhbGx0aHJvdWdo
			W2ldKSkgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAg
			aWYgKGV4dHJhTWFwICYmIGxvb2t1cChleHRyYU1hcCkpIHJldHVybiB0cnVlOwogICAgcmV0dXJu
			IGxvb2t1cChtYXApOwogIH0KICBmdW5jdGlvbiBpc01vZGlmaWVyS2V5KGV2ZW50KSB7CiAgICB2
			YXIgbmFtZSA9IGtleU5hbWVzW2VfcHJvcChldmVudCwgImtleUNvZGUiKV07CiAgICByZXR1cm4g
			bmFtZSA9PSAiQ3RybCIgfHwgbmFtZSA9PSAiQWx0IiB8fCBuYW1lID09ICJTaGlmdCIgfHwgbmFt
			ZSA9PSAiTW9kIjsKICB9CgogIENvZGVNaXJyb3IuZnJvbVRleHRBcmVhID0gZnVuY3Rpb24odGV4
			dGFyZWEsIG9wdGlvbnMpIHsKICAgIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9OwogICAgb3B0
			aW9ucy52YWx1ZSA9IHRleHRhcmVhLnZhbHVlOwogICAgaWYgKCFvcHRpb25zLnRhYmluZGV4ICYm
			IHRleHRhcmVhLnRhYmluZGV4KQogICAgICBvcHRpb25zLnRhYmluZGV4ID0gdGV4dGFyZWEudGFi
			aW5kZXg7CgogICAgZnVuY3Rpb24gc2F2ZSgpIHt0ZXh0YXJlYS52YWx1ZSA9IGluc3RhbmNlLmdl
			dFZhbHVlKCk7fQogICAgaWYgKHRleHRhcmVhLmZvcm0pIHsKICAgICAgLy8gRGVwbG9yYWJsZSBo
			YWNrIHRvIG1ha2UgdGhlIHN1Ym1pdCBtZXRob2QgZG8gdGhlIHJpZ2h0IHRoaW5nLgogICAgICB2
			YXIgcm1TdWJtaXQgPSBjb25uZWN0KHRleHRhcmVhLmZvcm0sICJzdWJtaXQiLCBzYXZlLCB0cnVl
			KTsKICAgICAgaWYgKHR5cGVvZiB0ZXh0YXJlYS5mb3JtLnN1Ym1pdCA9PSAiZnVuY3Rpb24iKSB7
			CiAgICAgICAgdmFyIHJlYWxTdWJtaXQgPSB0ZXh0YXJlYS5mb3JtLnN1Ym1pdDsKICAgICAgICBm
			dW5jdGlvbiB3cmFwcGVkU3VibWl0KCkgewogICAgICAgICAgc2F2ZSgpOwogICAgICAgICAgdGV4
			dGFyZWEuZm9ybS5zdWJtaXQgPSByZWFsU3VibWl0OwogICAgICAgICAgdGV4dGFyZWEuZm9ybS5z
			dWJtaXQoKTsKICAgICAgICAgIHRleHRhcmVhLmZvcm0uc3VibWl0ID0gd3JhcHBlZFN1Ym1pdDsK
			ICAgICAgICB9CiAgICAgICAgdGV4dGFyZWEuZm9ybS5zdWJtaXQgPSB3cmFwcGVkU3VibWl0Owog
			ICAgICB9CiAgICB9CgogICAgdGV4dGFyZWEuc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgIHZh
			ciBpbnN0YW5jZSA9IENvZGVNaXJyb3IoZnVuY3Rpb24obm9kZSkgewogICAgICB0ZXh0YXJlYS5w
			YXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCB0ZXh0YXJlYS5uZXh0U2libGluZyk7CiAgICB9
			LCBvcHRpb25zKTsKICAgIGluc3RhbmNlLnNhdmUgPSBzYXZlOwogICAgaW5zdGFuY2UuZ2V0VGV4
			dEFyZWEgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRleHRhcmVhOyB9OwogICAgaW5zdGFuY2UudG9U
			ZXh0QXJlYSA9IGZ1bmN0aW9uKCkgewogICAgICBzYXZlKCk7CiAgICAgIHRleHRhcmVhLnBhcmVu
			dE5vZGUucmVtb3ZlQ2hpbGQoaW5zdGFuY2UuZ2V0V3JhcHBlckVsZW1lbnQoKSk7CiAgICAgIHRl
			eHRhcmVhLnN0eWxlLmRpc3BsYXkgPSAiIjsKICAgICAgaWYgKHRleHRhcmVhLmZvcm0pIHsKICAg
			ICAgICBybVN1Ym1pdCgpOwogICAgICAgIGlmICh0eXBlb2YgdGV4dGFyZWEuZm9ybS5zdWJtaXQg
			PT0gImZ1bmN0aW9uIikKICAgICAgICAgIHRleHRhcmVhLmZvcm0uc3VibWl0ID0gcmVhbFN1Ym1p
			dDsKICAgICAgfQogICAgfTsKICAgIHJldHVybiBpbnN0YW5jZTsKICB9OwoKICAvLyBVdGlsaXR5
			IGZ1bmN0aW9ucyBmb3Igd29ya2luZyB3aXRoIHN0YXRlLiBFeHBvcnRlZCBiZWNhdXNlIG1vZGVz
			CiAgLy8gc29tZXRpbWVzIG5lZWQgdG8gZG8gdGhpcy4KICBmdW5jdGlvbiBjb3B5U3RhdGUobW9k
			ZSwgc3RhdGUpIHsKICAgIGlmIChzdGF0ZSA9PT0gdHJ1ZSkgcmV0dXJuIHN0YXRlOwogICAgaWYg
			KG1vZGUuY29weVN0YXRlKSByZXR1cm4gbW9kZS5jb3B5U3RhdGUoc3RhdGUpOwogICAgdmFyIG5z
			dGF0ZSA9IHt9OwogICAgZm9yICh2YXIgbiBpbiBzdGF0ZSkgewogICAgICB2YXIgdmFsID0gc3Rh
			dGVbbl07CiAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBBcnJheSkgdmFsID0gdmFsLmNvbmNhdChb
			XSk7CiAgICAgIG5zdGF0ZVtuXSA9IHZhbDsKICAgIH0KICAgIHJldHVybiBuc3RhdGU7CiAgfQog
			IENvZGVNaXJyb3IuY29weVN0YXRlID0gY29weVN0YXRlOwogIGZ1bmN0aW9uIHN0YXJ0U3RhdGUo
			bW9kZSwgYTEsIGEyKSB7CiAgICByZXR1cm4gbW9kZS5zdGFydFN0YXRlID8gbW9kZS5zdGFydFN0
			YXRlKGExLCBhMikgOiB0cnVlOwogIH0KICBDb2RlTWlycm9yLnN0YXJ0U3RhdGUgPSBzdGFydFN0
			YXRlOwoKICAvLyBUaGUgY2hhcmFjdGVyIHN0cmVhbSB1c2VkIGJ5IGEgbW9kZSdzIHBhcnNlci4K
			ICBmdW5jdGlvbiBTdHJpbmdTdHJlYW0oc3RyaW5nLCB0YWJTaXplKSB7CiAgICB0aGlzLnBvcyA9
			IHRoaXMuc3RhcnQgPSAwOwogICAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7CiAgICB0aGlzLnRhYlNp
			emUgPSB0YWJTaXplIHx8IDg7CiAgfQogIFN0cmluZ1N0cmVhbS5wcm90b3R5cGUgPSB7CiAgICBl
			b2w6IGZ1bmN0aW9uKCkge3JldHVybiB0aGlzLnBvcyA+PSB0aGlzLnN0cmluZy5sZW5ndGg7fSwK
			ICAgIHNvbDogZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXMucG9zID09IDA7fSwKICAgIHBlZWs6IGZ1
			bmN0aW9uKCkge3JldHVybiB0aGlzLnN0cmluZy5jaGFyQXQodGhpcy5wb3MpO30sCiAgICBuZXh0
			OiBmdW5jdGlvbigpIHsKICAgICAgaWYgKHRoaXMucG9zIDwgdGhpcy5zdHJpbmcubGVuZ3RoKQog
			ICAgICAgIHJldHVybiB0aGlzLnN0cmluZy5jaGFyQXQodGhpcy5wb3MrKyk7CiAgICB9LAogICAg
			ZWF0OiBmdW5jdGlvbihtYXRjaCkgewogICAgICB2YXIgY2ggPSB0aGlzLnN0cmluZy5jaGFyQXQo
			dGhpcy5wb3MpOwogICAgICBpZiAodHlwZW9mIG1hdGNoID09ICJzdHJpbmciKSB2YXIgb2sgPSBj
			aCA9PSBtYXRjaDsKICAgICAgZWxzZSB2YXIgb2sgPSBjaCAmJiAobWF0Y2gudGVzdCA/IG1hdGNo
			LnRlc3QoY2gpIDogbWF0Y2goY2gpKTsKICAgICAgaWYgKG9rKSB7Kyt0aGlzLnBvczsgcmV0dXJu
			IGNoO30KICAgIH0sCiAgICBlYXRXaGlsZTogZnVuY3Rpb24obWF0Y2gpIHsKICAgICAgdmFyIHN0
			YXJ0ID0gdGhpcy5wb3M7CiAgICAgIHdoaWxlICh0aGlzLmVhdChtYXRjaCkpe30KICAgICAgcmV0
			dXJuIHRoaXMucG9zID4gc3RhcnQ7CiAgICB9LAogICAgZWF0U3BhY2U6IGZ1bmN0aW9uKCkgewog
			ICAgICB2YXIgc3RhcnQgPSB0aGlzLnBvczsKICAgICAgd2hpbGUgKC9bXHNcdTAwYTBdLy50ZXN0
			KHRoaXMuc3RyaW5nLmNoYXJBdCh0aGlzLnBvcykpKSArK3RoaXMucG9zOwogICAgICByZXR1cm4g
			dGhpcy5wb3MgPiBzdGFydDsKICAgIH0sCiAgICBza2lwVG9FbmQ6IGZ1bmN0aW9uKCkge3RoaXMu
			cG9zID0gdGhpcy5zdHJpbmcubGVuZ3RoO30sCiAgICBza2lwVG86IGZ1bmN0aW9uKGNoKSB7CiAg
			ICAgIHZhciBmb3VuZCA9IHRoaXMuc3RyaW5nLmluZGV4T2YoY2gsIHRoaXMucG9zKTsKICAgICAg
			aWYgKGZvdW5kID4gLTEpIHt0aGlzLnBvcyA9IGZvdW5kOyByZXR1cm4gdHJ1ZTt9CiAgICB9LAog
			ICAgYmFja1VwOiBmdW5jdGlvbihuKSB7dGhpcy5wb3MgLT0gbjt9LAogICAgY29sdW1uOiBmdW5j
			dGlvbigpIHtyZXR1cm4gY291bnRDb2x1bW4odGhpcy5zdHJpbmcsIHRoaXMuc3RhcnQsIHRoaXMu
			dGFiU2l6ZSk7fSwKICAgIGluZGVudGF0aW9uOiBmdW5jdGlvbigpIHtyZXR1cm4gY291bnRDb2x1
			bW4odGhpcy5zdHJpbmcsIG51bGwsIHRoaXMudGFiU2l6ZSk7fSwKICAgIG1hdGNoOiBmdW5jdGlv
			bihwYXR0ZXJuLCBjb25zdW1lLCBjYXNlSW5zZW5zaXRpdmUpIHsKICAgICAgaWYgKHR5cGVvZiBw
			YXR0ZXJuID09ICJzdHJpbmciKSB7CiAgICAgICAgZnVuY3Rpb24gY2FzZWQoc3RyKSB7cmV0dXJu
			IGNhc2VJbnNlbnNpdGl2ZSA/IHN0ci50b0xvd2VyQ2FzZSgpIDogc3RyO30KICAgICAgICBpZiAo
			Y2FzZWQodGhpcy5zdHJpbmcpLmluZGV4T2YoY2FzZWQocGF0dGVybiksIHRoaXMucG9zKSA9PSB0
			aGlzLnBvcykgewogICAgICAgICAgaWYgKGNvbnN1bWUgIT09IGZhbHNlKSB0aGlzLnBvcyArPSBw
			YXR0ZXJuLmxlbmd0aDsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgfQog
			ICAgICBlbHNlIHsKICAgICAgICB2YXIgbWF0Y2ggPSB0aGlzLnN0cmluZy5zbGljZSh0aGlzLnBv
			cykubWF0Y2gocGF0dGVybik7CiAgICAgICAgaWYgKG1hdGNoICYmIGNvbnN1bWUgIT09IGZhbHNl
			KSB0aGlzLnBvcyArPSBtYXRjaFswXS5sZW5ndGg7CiAgICAgICAgcmV0dXJuIG1hdGNoOwogICAg
			ICB9CiAgICB9LAogICAgY3VycmVudDogZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdHJpbmcuc2xp
			Y2UodGhpcy5zdGFydCwgdGhpcy5wb3MpO30KICB9OwogIENvZGVNaXJyb3IuU3RyaW5nU3RyZWFt
			ID0gU3RyaW5nU3RyZWFtOwoKICBmdW5jdGlvbiBNYXJrZWRUZXh0KGZyb20sIHRvLCBjbGFzc05h
			bWUsIHNldCkgewogICAgdGhpcy5mcm9tID0gZnJvbTsgdGhpcy50byA9IHRvOyB0aGlzLnN0eWxl
			ID0gY2xhc3NOYW1lOyB0aGlzLnNldCA9IHNldDsKICB9CiAgTWFya2VkVGV4dC5wcm90b3R5cGUg
			PSB7CiAgICBhdHRhY2g6IGZ1bmN0aW9uKGxpbmUpIHsgdGhpcy5zZXQucHVzaChsaW5lKTsgfSwK
			ICAgIGRldGFjaDogZnVuY3Rpb24obGluZSkgewogICAgICB2YXIgaXggPSBpbmRleE9mKHRoaXMu
			c2V0LCBsaW5lKTsKICAgICAgaWYgKGl4ID4gLTEpIHRoaXMuc2V0LnNwbGljZShpeCwgMSk7CiAg
			ICB9LAogICAgc3BsaXQ6IGZ1bmN0aW9uKHBvcywgbGVuQmVmb3JlKSB7CiAgICAgIGlmICh0aGlz
			LnRvIDw9IHBvcyAmJiB0aGlzLnRvICE9IG51bGwpIHJldHVybiBudWxsOwogICAgICB2YXIgZnJv
			bSA9IHRoaXMuZnJvbSA8IHBvcyB8fCB0aGlzLmZyb20gPT0gbnVsbCA/IG51bGwgOiB0aGlzLmZy
			b20gLSBwb3MgKyBsZW5CZWZvcmU7CiAgICAgIHZhciB0byA9IHRoaXMudG8gPT0gbnVsbCA/IG51
			bGwgOiB0aGlzLnRvIC0gcG9zICsgbGVuQmVmb3JlOwogICAgICByZXR1cm4gbmV3IE1hcmtlZFRl
			eHQoZnJvbSwgdG8sIHRoaXMuc3R5bGUsIHRoaXMuc2V0KTsKICAgIH0sCiAgICBkdXA6IGZ1bmN0
			aW9uKCkgeyByZXR1cm4gbmV3IE1hcmtlZFRleHQobnVsbCwgbnVsbCwgdGhpcy5zdHlsZSwgdGhp
			cy5zZXQpOyB9LAogICAgY2xpcFRvOiBmdW5jdGlvbihmcm9tT3BlbiwgZnJvbSwgdG9PcGVuLCB0
			bywgZGlmZikgewogICAgICBpZiAodGhpcy5mcm9tICE9IG51bGwgJiYgdGhpcy5mcm9tID49IGZy
			b20pCiAgICAgICAgdGhpcy5mcm9tID0gTWF0aC5tYXgodG8sIHRoaXMuZnJvbSkgKyBkaWZmOwog
			ICAgICBpZiAodGhpcy50byAhPSBudWxsICYmIHRoaXMudG8gPiBmcm9tKQogICAgICAgIHRoaXMu
			dG8gPSB0byA8IHRoaXMudG8gPyB0aGlzLnRvICsgZGlmZiA6IGZyb207CiAgICAgIGlmIChmcm9t
			T3BlbiAmJiB0byA+IHRoaXMuZnJvbSAmJiAodG8gPCB0aGlzLnRvIHx8IHRoaXMudG8gPT0gbnVs
			bCkpCiAgICAgICAgdGhpcy5mcm9tID0gbnVsbDsKICAgICAgaWYgKHRvT3BlbiAmJiAoZnJvbSA8
			IHRoaXMudG8gfHwgdGhpcy50byA9PSBudWxsKSAmJiAoZnJvbSA+IHRoaXMuZnJvbSB8fCB0aGlz
			LmZyb20gPT0gbnVsbCkpCiAgICAgICAgdGhpcy50byA9IG51bGw7CiAgICB9LAogICAgaXNEZWFk
			OiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuZnJvbSAhPSBudWxsICYmIHRoaXMudG8gIT0gbnVs
			bCAmJiB0aGlzLmZyb20gPj0gdGhpcy50bzsgfSwKICAgIHNhbWVTZXQ6IGZ1bmN0aW9uKHgpIHsg
			cmV0dXJuIHRoaXMuc2V0ID09IHguc2V0OyB9CiAgfTsKCiAgZnVuY3Rpb24gQm9va21hcmsocG9z
			KSB7CiAgICB0aGlzLmZyb20gPSBwb3M7IHRoaXMudG8gPSBwb3M7IHRoaXMubGluZSA9IG51bGw7
			CiAgfQogIEJvb2ttYXJrLnByb3RvdHlwZSA9IHsKICAgIGF0dGFjaDogZnVuY3Rpb24obGluZSkg
			eyB0aGlzLmxpbmUgPSBsaW5lOyB9LAogICAgZGV0YWNoOiBmdW5jdGlvbihsaW5lKSB7IGlmICh0
			aGlzLmxpbmUgPT0gbGluZSkgdGhpcy5saW5lID0gbnVsbDsgfSwKICAgIHNwbGl0OiBmdW5jdGlv
			bihwb3MsIGxlbkJlZm9yZSkgewogICAgICBpZiAocG9zIDwgdGhpcy5mcm9tKSB7CiAgICAgICAg
			dGhpcy5mcm9tID0gdGhpcy50byA9ICh0aGlzLmZyb20gLSBwb3MpICsgbGVuQmVmb3JlOwogICAg
			ICAgIHJldHVybiB0aGlzOwogICAgICB9CiAgICB9LAogICAgaXNEZWFkOiBmdW5jdGlvbigpIHsg
			cmV0dXJuIHRoaXMuZnJvbSA+IHRoaXMudG87IH0sCiAgICBjbGlwVG86IGZ1bmN0aW9uKGZyb21P
			cGVuLCBmcm9tLCB0b09wZW4sIHRvLCBkaWZmKSB7CiAgICAgIGlmICgoZnJvbU9wZW4gfHwgZnJv
			bSA8IHRoaXMuZnJvbSkgJiYgKHRvT3BlbiB8fCB0byA+IHRoaXMudG8pKSB7CiAgICAgICAgdGhp
			cy5mcm9tID0gMDsgdGhpcy50byA9IC0xOwogICAgICB9IGVsc2UgaWYgKHRoaXMuZnJvbSA+IGZy
			b20pIHsKICAgICAgICB0aGlzLmZyb20gPSB0aGlzLnRvID0gTWF0aC5tYXgodG8sIHRoaXMuZnJv
			bSkgKyBkaWZmOwogICAgICB9CiAgICB9LAogICAgc2FtZVNldDogZnVuY3Rpb24oeCkgeyByZXR1
			cm4gZmFsc2U7IH0sCiAgICBmaW5kOiBmdW5jdGlvbigpIHsKICAgICAgaWYgKCF0aGlzLmxpbmUg
			fHwgIXRoaXMubGluZS5wYXJlbnQpIHJldHVybiBudWxsOwogICAgICByZXR1cm4ge2xpbmU6IGxp
			bmVObyh0aGlzLmxpbmUpLCBjaDogdGhpcy5mcm9tfTsKICAgIH0sCiAgICBjbGVhcjogZnVuY3Rp
			b24oKSB7CiAgICAgIGlmICh0aGlzLmxpbmUpIHsKICAgICAgICB2YXIgZm91bmQgPSBpbmRleE9m
			KHRoaXMubGluZS5tYXJrZWQsIHRoaXMpOwogICAgICAgIGlmIChmb3VuZCAhPSAtMSkgdGhpcy5s
			aW5lLm1hcmtlZC5zcGxpY2UoZm91bmQsIDEpOwogICAgICAgIHRoaXMubGluZSA9IG51bGw7CiAg
			ICAgIH0KICAgIH0KICB9OwoKICAvLyBMaW5lIG9iamVjdHMuIFRoZXNlIGhvbGQgc3RhdGUgcmVs
			YXRlZCB0byBhIGxpbmUsIGluY2x1ZGluZwogIC8vIGhpZ2hsaWdodGluZyBpbmZvICh0aGUgc3R5
			bGVzIGFycmF5KS4KICBmdW5jdGlvbiBMaW5lKHRleHQsIHN0eWxlcykgewogICAgdGhpcy5zdHls
			ZXMgPSBzdHlsZXMgfHwgW3RleHQsIG51bGxdOwogICAgdGhpcy50ZXh0ID0gdGV4dDsKICAgIHRo
			aXMuaGVpZ2h0ID0gMTsKICAgIHRoaXMubWFya2VkID0gdGhpcy5ndXR0ZXJNYXJrZXIgPSB0aGlz
			LmNsYXNzTmFtZSA9IHRoaXMuaGFuZGxlcnMgPSBudWxsOwogICAgdGhpcy5zdGF0ZUFmdGVyID0g
			dGhpcy5wYXJlbnQgPSB0aGlzLmhpZGRlbiA9IG51bGw7CiAgfQogIExpbmUuaW5oZXJpdE1hcmtz
			ID0gZnVuY3Rpb24odGV4dCwgb3JpZykgewogICAgdmFyIGxuID0gbmV3IExpbmUodGV4dCksIG1r
			ID0gb3JpZyAmJiBvcmlnLm1hcmtlZDsKICAgIGlmIChtaykgewogICAgICBmb3IgKHZhciBpID0g
			MDsgaSA8IG1rLmxlbmd0aDsgKytpKSB7CiAgICAgICAgaWYgKG1rW2ldLnRvID09IG51bGwgJiYg
			bWtbaV0uc3R5bGUpIHsKICAgICAgICAgIHZhciBuZXdtayA9IGxuLm1hcmtlZCB8fCAobG4ubWFy
			a2VkID0gW10pLCBtYXJrID0gbWtbaV07CiAgICAgICAgICB2YXIgbm1hcmsgPSBtYXJrLmR1cCgp
			OyBuZXdtay5wdXNoKG5tYXJrKTsgbm1hcmsuYXR0YWNoKGxuKTsKICAgICAgICB9CiAgICAgIH0K
			ICAgIH0KICAgIHJldHVybiBsbjsKICB9CiAgTGluZS5wcm90b3R5cGUgPSB7CiAgICAvLyBSZXBs
			YWNlIGEgcGllY2Ugb2YgYSBsaW5lLCBrZWVwaW5nIHRoZSBzdHlsZXMgYXJvdW5kIGl0IGludGFj
			dC4KICAgIHJlcGxhY2U6IGZ1bmN0aW9uKGZyb20sIHRvXywgdGV4dCkgewogICAgICB2YXIgc3Qg
			PSBbXSwgbWsgPSB0aGlzLm1hcmtlZCwgdG8gPSB0b18gPT0gbnVsbCA/IHRoaXMudGV4dC5sZW5n
			dGggOiB0b187CiAgICAgIGNvcHlTdHlsZXMoMCwgZnJvbSwgdGhpcy5zdHlsZXMsIHN0KTsKICAg
			ICAgaWYgKHRleHQpIHN0LnB1c2godGV4dCwgbnVsbCk7CiAgICAgIGNvcHlTdHlsZXModG8sIHRo
			aXMudGV4dC5sZW5ndGgsIHRoaXMuc3R5bGVzLCBzdCk7CiAgICAgIHRoaXMuc3R5bGVzID0gc3Q7
			CiAgICAgIHRoaXMudGV4dCA9IHRoaXMudGV4dC5zbGljZSgwLCBmcm9tKSArIHRleHQgKyB0aGlz
			LnRleHQuc2xpY2UodG8pOwogICAgICB0aGlzLnN0YXRlQWZ0ZXIgPSBudWxsOwogICAgICBpZiAo
			bWspIHsKICAgICAgICB2YXIgZGlmZiA9IHRleHQubGVuZ3RoIC0gKHRvIC0gZnJvbSk7CiAgICAg
			ICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtay5sZW5ndGg7ICsraSkgewogICAgICAgICAgdmFyIG1h
			cmsgPSBta1tpXTsKICAgICAgICAgIG1hcmsuY2xpcFRvKGZyb20gPT0gbnVsbCwgZnJvbSB8fCAw
			LCB0b18gPT0gbnVsbCwgdG8sIGRpZmYpOwogICAgICAgICAgaWYgKG1hcmsuaXNEZWFkKCkpIHtt
			YXJrLmRldGFjaCh0aGlzKTsgbWsuc3BsaWNlKGktLSwgMSk7fQogICAgICAgIH0KICAgICAgfQog
			ICAgfSwKICAgIC8vIFNwbGl0IGEgcGFydCBvZmYgYSBsaW5lLCBrZWVwaW5nIHN0eWxlcyBhbmQg
			bWFya2VycyBpbnRhY3QuCiAgICBzcGxpdDogZnVuY3Rpb24ocG9zLCB0ZXh0QmVmb3JlKSB7CiAg
			ICAgIHZhciBzdCA9IFt0ZXh0QmVmb3JlLCBudWxsXSwgbWsgPSB0aGlzLm1hcmtlZDsKICAgICAg
			Y29weVN0eWxlcyhwb3MsIHRoaXMudGV4dC5sZW5ndGgsIHRoaXMuc3R5bGVzLCBzdCk7CiAgICAg
			IHZhciB0YWtlbiA9IG5ldyBMaW5lKHRleHRCZWZvcmUgKyB0aGlzLnRleHQuc2xpY2UocG9zKSwg
			c3QpOwogICAgICBpZiAobWspIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1rLmxlbmd0
			aDsgKytpKSB7CiAgICAgICAgICB2YXIgbWFyayA9IG1rW2ldOwogICAgICAgICAgdmFyIG5ld21h
			cmsgPSBtYXJrLnNwbGl0KHBvcywgdGV4dEJlZm9yZS5sZW5ndGgpOwogICAgICAgICAgaWYgKG5l
			d21hcmspIHsKICAgICAgICAgICAgaWYgKCF0YWtlbi5tYXJrZWQpIHRha2VuLm1hcmtlZCA9IFtd
			OwogICAgICAgICAgICB0YWtlbi5tYXJrZWQucHVzaChuZXdtYXJrKTsgbmV3bWFyay5hdHRhY2go
			dGFrZW4pOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gdGFrZW47
			CiAgICB9LAogICAgYXBwZW5kOiBmdW5jdGlvbihsaW5lKSB7CiAgICAgIHZhciBteWxlbiA9IHRo
			aXMudGV4dC5sZW5ndGgsIG1rID0gbGluZS5tYXJrZWQsIG15bWsgPSB0aGlzLm1hcmtlZDsKICAg
			ICAgdGhpcy50ZXh0ICs9IGxpbmUudGV4dDsKICAgICAgY29weVN0eWxlcygwLCBsaW5lLnRleHQu
			bGVuZ3RoLCBsaW5lLnN0eWxlcywgdGhpcy5zdHlsZXMpOwogICAgICBpZiAobXltaykgewogICAg
			ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXltay5sZW5ndGg7ICsraSkKICAgICAgICAgIGlmICht
			eW1rW2ldLnRvID09IG51bGwpIG15bWtbaV0udG8gPSBteWxlbjsKICAgICAgfQogICAgICBpZiAo
			bWsgJiYgbWsubGVuZ3RoKSB7CiAgICAgICAgaWYgKCFteW1rKSB0aGlzLm1hcmtlZCA9IG15bWsg
			PSBbXTsKICAgICAgICBvdXRlcjogZm9yICh2YXIgaSA9IDA7IGkgPCBtay5sZW5ndGg7ICsraSkg
			ewogICAgICAgICAgdmFyIG1hcmsgPSBta1tpXTsKICAgICAgICAgIGlmICghbWFyay5mcm9tKSB7
			CiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbXltay5sZW5ndGg7ICsraikgewogICAg
			ICAgICAgICAgIHZhciBteW1hcmsgPSBteW1rW2pdOwogICAgICAgICAgICAgIGlmIChteW1hcmsu
			dG8gPT0gbXlsZW4gJiYgbXltYXJrLnNhbWVTZXQobWFyaykpIHsKICAgICAgICAgICAgICAgIG15
			bWFyay50byA9IG1hcmsudG8gPT0gbnVsbCA/IG51bGwgOiBtYXJrLnRvICsgbXlsZW47CiAgICAg
			ICAgICAgICAgICBpZiAobXltYXJrLmlzRGVhZCgpKSB7CiAgICAgICAgICAgICAgICAgIG15bWFy
			ay5kZXRhY2godGhpcyk7CiAgICAgICAgICAgICAgICAgIG1rLnNwbGljZShpLS0sIDEpOwogICAg
			ICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7CiAgICAgICAgICAg
			ICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBteW1rLnB1c2gobWFyayk7
			CiAgICAgICAgICBtYXJrLmF0dGFjaCh0aGlzKTsKICAgICAgICAgIG1hcmsuZnJvbSArPSBteWxl
			bjsKICAgICAgICAgIGlmIChtYXJrLnRvICE9IG51bGwpIG1hcmsudG8gKz0gbXlsZW47CiAgICAg
			ICAgfQogICAgICB9CiAgICB9LAogICAgZml4TWFya0VuZHM6IGZ1bmN0aW9uKG90aGVyKSB7CiAg
			ICAgIHZhciBtayA9IHRoaXMubWFya2VkLCBvbWsgPSBvdGhlci5tYXJrZWQ7CiAgICAgIGlmICgh
			bWspIHJldHVybjsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtay5sZW5ndGg7ICsraSkgewog
			ICAgICAgIHZhciBtYXJrID0gbWtbaV0sIGNsb3NlID0gbWFyay50byA9PSBudWxsOwogICAgICAg
			IGlmIChjbG9zZSAmJiBvbWspIHsKICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgb21rLmxl
			bmd0aDsgKytqKQogICAgICAgICAgICBpZiAob21rW2pdLnNhbWVTZXQobWFyaykpIHtjbG9zZSA9
			IGZhbHNlOyBicmVhazt9CiAgICAgICAgfQogICAgICAgIGlmIChjbG9zZSkgbWFyay50byA9IHRo
			aXMudGV4dC5sZW5ndGg7CiAgICAgIH0KICAgIH0sCiAgICBmaXhNYXJrU3RhcnRzOiBmdW5jdGlv
			bigpIHsKICAgICAgdmFyIG1rID0gdGhpcy5tYXJrZWQ7CiAgICAgIGlmICghbWspIHJldHVybjsK
			ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtay5sZW5ndGg7ICsraSkKICAgICAgICBpZiAobWtb
			aV0uZnJvbSA9PSBudWxsKSBta1tpXS5mcm9tID0gMDsKICAgIH0sCiAgICBhZGRNYXJrOiBmdW5j
			dGlvbihtYXJrKSB7CiAgICAgIG1hcmsuYXR0YWNoKHRoaXMpOwogICAgICBpZiAodGhpcy5tYXJr
			ZWQgPT0gbnVsbCkgdGhpcy5tYXJrZWQgPSBbXTsKICAgICAgdGhpcy5tYXJrZWQucHVzaChtYXJr
			KTsKICAgICAgdGhpcy5tYXJrZWQuc29ydChmdW5jdGlvbihhLCBiKXtyZXR1cm4gKGEuZnJvbSB8
			fCAwKSAtIChiLmZyb20gfHwgMCk7fSk7CiAgICB9LAogICAgLy8gUnVuIHRoZSBnaXZlbiBtb2Rl
			J3MgcGFyc2VyIG92ZXIgYSBsaW5lLCB1cGRhdGUgdGhlIHN0eWxlcwogICAgLy8gYXJyYXksIHdo
			aWNoIGNvbnRhaW5zIGFsdGVybmF0aW5nIGZyYWdtZW50cyBvZiB0ZXh0IGFuZCBDU1MKICAgIC8v
			IGNsYXNzZXMuCiAgICBoaWdobGlnaHQ6IGZ1bmN0aW9uKG1vZGUsIHN0YXRlLCB0YWJTaXplKSB7
			CiAgICAgIHZhciBzdHJlYW0gPSBuZXcgU3RyaW5nU3RyZWFtKHRoaXMudGV4dCwgdGFiU2l6ZSks
			IHN0ID0gdGhpcy5zdHlsZXMsIHBvcyA9IDA7CiAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2UsIGN1
			cldvcmQgPSBzdFswXSwgcHJldldvcmQ7CiAgICAgIGlmICh0aGlzLnRleHQgPT0gIiIgJiYgbW9k
			ZS5ibGFua0xpbmUpIG1vZGUuYmxhbmtMaW5lKHN0YXRlKTsKICAgICAgd2hpbGUgKCFzdHJlYW0u
			ZW9sKCkpIHsKICAgICAgICB2YXIgc3R5bGUgPSBtb2RlLnRva2VuKHN0cmVhbSwgc3RhdGUpOwog
			ICAgICAgIHZhciBzdWJzdHIgPSB0aGlzLnRleHQuc2xpY2Uoc3RyZWFtLnN0YXJ0LCBzdHJlYW0u
			cG9zKTsKICAgICAgICBzdHJlYW0uc3RhcnQgPSBzdHJlYW0ucG9zOwogICAgICAgIGlmIChwb3Mg
			JiYgc3RbcG9zLTFdID09IHN0eWxlKQogICAgICAgICAgc3RbcG9zLTJdICs9IHN1YnN0cjsKICAg
			ICAgICBlbHNlIGlmIChzdWJzdHIpIHsKICAgICAgICAgIGlmICghY2hhbmdlZCAmJiAoc3RbcG9z
			KzFdICE9IHN0eWxlIHx8IChwb3MgJiYgc3RbcG9zLTJdICE9IHByZXZXb3JkKSkpIGNoYW5nZWQg
			PSB0cnVlOwogICAgICAgICAgc3RbcG9zKytdID0gc3Vic3RyOyBzdFtwb3MrK10gPSBzdHlsZTsK
			ICAgICAgICAgIHByZXZXb3JkID0gY3VyV29yZDsgY3VyV29yZCA9IHN0W3Bvc107CiAgICAgICAg
			fQogICAgICAgIC8vIEdpdmUgdXAgd2hlbiBsaW5lIGlzIHJpZGljdWxvdXNseSBsb25nCiAgICAg
			ICAgaWYgKHN0cmVhbS5wb3MgPiA1MDAwKSB7CiAgICAgICAgICBzdFtwb3MrK10gPSB0aGlzLnRl
			eHQuc2xpY2Uoc3RyZWFtLnBvcyk7IHN0W3BvcysrXSA9IG51bGw7CiAgICAgICAgICBicmVhazsK
			ICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKHN0Lmxlbmd0aCAhPSBwb3MpIHtzdC5sZW5ndGgg
			PSBwb3M7IGNoYW5nZWQgPSB0cnVlO30KICAgICAgaWYgKHBvcyAmJiBzdFtwb3MtMl0gIT0gcHJl
			dldvcmQpIGNoYW5nZWQgPSB0cnVlOwogICAgICAvLyBTaG9ydCBsaW5lcyB3aXRoIHNpbXBsZSBo
			aWdobGlnaHRzIHJldHVybiBudWxsLCBhbmQgYXJlCiAgICAgIC8vIGNvdW50ZWQgYXMgY2hhbmdl
			ZCBieSB0aGUgZHJpdmVyIGJlY2F1c2UgdGhleSBhcmUgbGlrZWx5IHRvCiAgICAgIC8vIGhpZ2hs
			aWdodCB0aGUgc2FtZSB3YXkgaW4gdmFyaW91cyBjb250ZXh0cy4KICAgICAgcmV0dXJuIGNoYW5n
			ZWQgfHwgKHN0Lmxlbmd0aCA8IDUgJiYgdGhpcy50ZXh0Lmxlbmd0aCA8IDEwID8gbnVsbCA6IGZh
			bHNlKTsKICAgIH0sCiAgICAvLyBGZXRjaCB0aGUgcGFyc2VyIHRva2VuIGZvciBhIGdpdmVuIGNo
			YXJhY3Rlci4gVXNlZnVsIGZvciBoYWNrcwogICAgLy8gdGhhdCB3YW50IHRvIGluc3BlY3QgdGhl
			IG1vZGUgc3RhdGUgKHNheSwgZm9yIGNvbXBsZXRpb24pLgogICAgZ2V0VG9rZW5BdDogZnVuY3Rp
			b24obW9kZSwgc3RhdGUsIGNoKSB7CiAgICAgIHZhciB0eHQgPSB0aGlzLnRleHQsIHN0cmVhbSA9
			IG5ldyBTdHJpbmdTdHJlYW0odHh0KTsKICAgICAgd2hpbGUgKHN0cmVhbS5wb3MgPCBjaCAmJiAh
			c3RyZWFtLmVvbCgpKSB7CiAgICAgICAgc3RyZWFtLnN0YXJ0ID0gc3RyZWFtLnBvczsKICAgICAg
			ICB2YXIgc3R5bGUgPSBtb2RlLnRva2VuKHN0cmVhbSwgc3RhdGUpOwogICAgICB9CiAgICAgIHJl
			dHVybiB7c3RhcnQ6IHN0cmVhbS5zdGFydCwKICAgICAgICAgICAgICBlbmQ6IHN0cmVhbS5wb3Ms
			CiAgICAgICAgICAgICAgc3RyaW5nOiBzdHJlYW0uY3VycmVudCgpLAogICAgICAgICAgICAgIGNs
			YXNzTmFtZTogc3R5bGUgfHwgbnVsbCwKICAgICAgICAgICAgICBzdGF0ZTogc3RhdGV9OwogICAg
			fSwKICAgIGluZGVudGF0aW9uOiBmdW5jdGlvbih0YWJTaXplKSB7cmV0dXJuIGNvdW50Q29sdW1u
			KHRoaXMudGV4dCwgbnVsbCwgdGFiU2l6ZSk7fSwKICAgIC8vIFByb2R1Y2VzIGFuIEhUTUwgZnJh
			Z21lbnQgZm9yIHRoZSBsaW5lLCB0YWtpbmcgc2VsZWN0aW9uLAogICAgLy8gbWFya2luZywgYW5k
			IGhpZ2hsaWdodGluZyBpbnRvIGFjY291bnQuCiAgICBnZXRIVE1MOiBmdW5jdGlvbihtYWtlVGFi
			LCBlbmRBdCkgewogICAgICB2YXIgaHRtbCA9IFtdLCBmaXJzdCA9IHRydWUsIGNvbCA9IDA7CiAg
			ICAgIGZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGUpIHsKICAgICAgICBpZiAoIXRleHQpIHJldHVy
			bjsKICAgICAgICAvLyBXb3JrIGFyb3VuZCBhIGJ1ZyB3aGVyZSwgaW4gc29tZSBjb21wYXQgbW9k
			ZXMsIElFIGlnbm9yZXMgbGVhZGluZyBzcGFjZXMKICAgICAgICBpZiAoZmlyc3QgJiYgaWUgJiYg
			dGV4dC5jaGFyQXQoMCkgPT0gIiAiKSB0ZXh0ID0gIlx1MDBhMCIgKyB0ZXh0LnNsaWNlKDEpOwog
			ICAgICAgIGZpcnN0ID0gZmFsc2U7CiAgICAgICAgaWYgKHRleHQuaW5kZXhPZigiXHQiKSA9PSAt
			MSkgewogICAgICAgICAgY29sICs9IHRleHQubGVuZ3RoOwogICAgICAgICAgdmFyIGVzY2FwZWQg
			PSBodG1sRXNjYXBlKHRleHQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgZXNjYXBl
			ZCA9ICIiOwogICAgICAgICAgZm9yICh2YXIgcG9zID0gMDs7KSB7CiAgICAgICAgICAgIHZhciBp
			ZHggPSB0ZXh0LmluZGV4T2YoIlx0IiwgcG9zKTsKICAgICAgICAgICAgaWYgKGlkeCA9PSAtMSkg
			ewogICAgICAgICAgICAgIGVzY2FwZWQgKz0gaHRtbEVzY2FwZSh0ZXh0LnNsaWNlKHBvcykpOwog
			ICAgICAgICAgICAgIGNvbCArPSB0ZXh0Lmxlbmd0aCAtIHBvczsKICAgICAgICAgICAgICBicmVh
			azsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjb2wgKz0gaWR4IC0gcG9zOwog
			ICAgICAgICAgICAgIHZhciB0YWIgPSBtYWtlVGFiKGNvbCk7CiAgICAgICAgICAgICAgZXNjYXBl
			ZCArPSBodG1sRXNjYXBlKHRleHQuc2xpY2UocG9zLCBpZHgpKSArIHRhYi5odG1sOwogICAgICAg
			ICAgICAgIGNvbCArPSB0YWIud2lkdGg7CiAgICAgICAgICAgICAgcG9zID0gaWR4ICsgMTsKICAg
			ICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoc3R5bGUpIGh0bWwu
			cHVzaCgnPHNwYW4gY2xhc3M9IicsIHN0eWxlLCAnIj4nLCBlc2NhcGVkLCAiPC9zcGFuPiIpOwog
			ICAgICAgIGVsc2UgaHRtbC5wdXNoKGVzY2FwZWQpOwogICAgICB9CiAgICAgIHZhciBzdCA9IHRo
			aXMuc3R5bGVzLCBhbGxUZXh0ID0gdGhpcy50ZXh0LCBtYXJrZWQgPSB0aGlzLm1hcmtlZDsKICAg
			ICAgdmFyIGxlbiA9IGFsbFRleHQubGVuZ3RoOwogICAgICBpZiAoZW5kQXQgIT0gbnVsbCkgbGVu
			ID0gTWF0aC5taW4oZW5kQXQsIGxlbik7CiAgICAgIGZ1bmN0aW9uIHN0eWxlVG9DbGFzcyhzdHls
			ZSkgewogICAgICAgIGlmICghc3R5bGUpIHJldHVybiBudWxsOwogICAgICAgIHJldHVybiAiY20t
			IiArIHN0eWxlLnJlcGxhY2UoLyArL2csICIgY20tIik7CiAgICAgIH0KCiAgICAgIGlmICghYWxs
			VGV4dCAmJiBlbmRBdCA9PSBudWxsKQogICAgICAgIHNwYW4oIiAiKTsKICAgICAgZWxzZSBpZiAo
			IW1hcmtlZCB8fCAhbWFya2VkLmxlbmd0aCkKICAgICAgICBmb3IgKHZhciBpID0gMCwgY2ggPSAw
			OyBjaCA8IGxlbjsgaSs9MikgewogICAgICAgICAgdmFyIHN0ciA9IHN0W2ldLCBzdHlsZSA9IHN0
			W2krMV0sIGwgPSBzdHIubGVuZ3RoOwogICAgICAgICAgaWYgKGNoICsgbCA+IGxlbikgc3RyID0g
			c3RyLnNsaWNlKDAsIGxlbiAtIGNoKTsKICAgICAgICAgIGNoICs9IGw7CiAgICAgICAgICBzcGFu
			KHN0ciwgc3R5bGVUb0NsYXNzKHN0eWxlKSk7CiAgICAgICAgfQogICAgICBlbHNlIHsKICAgICAg
			ICB2YXIgcG9zID0gMCwgaSA9IDAsIHRleHQgPSAiIiwgc3R5bGUsIHNnID0gMDsKICAgICAgICB2
			YXIgbmV4dENoYW5nZSA9IG1hcmtlZFswXS5mcm9tIHx8IDAsIG1hcmtzID0gW10sIG1hcmtwb3Mg
			PSAwOwogICAgICAgIGZ1bmN0aW9uIGFkdmFuY2VNYXJrcygpIHsKICAgICAgICAgIHZhciBtOwog
			ICAgICAgICAgd2hpbGUgKG1hcmtwb3MgPCBtYXJrZWQubGVuZ3RoICYmCiAgICAgICAgICAgICAg
			ICAgKChtID0gbWFya2VkW21hcmtwb3NdKS5mcm9tID09IHBvcyB8fCBtLmZyb20gPT0gbnVsbCkp
			IHsKICAgICAgICAgICAgaWYgKG0uc3R5bGUgIT0gbnVsbCkgbWFya3MucHVzaChtKTsKICAgICAg
			ICAgICAgKyttYXJrcG9zOwogICAgICAgICAgfQogICAgICAgICAgbmV4dENoYW5nZSA9IG1hcmtw
			b3MgPCBtYXJrZWQubGVuZ3RoID8gbWFya2VkW21hcmtwb3NdLmZyb20gOiBJbmZpbml0eTsKICAg
			ICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFya3MubGVuZ3RoOyArK2kpIHsKICAgICAgICAg
			ICAgdmFyIHRvID0gbWFya3NbaV0udG8gfHwgSW5maW5pdHk7CiAgICAgICAgICAgIGlmICh0byA9
			PSBwb3MpIG1hcmtzLnNwbGljZShpLS0sIDEpOwogICAgICAgICAgICBlbHNlIG5leHRDaGFuZ2Ug
			PSBNYXRoLm1pbih0bywgbmV4dENoYW5nZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAg
			IHZhciBtID0gMDsKICAgICAgICB3aGlsZSAocG9zIDwgbGVuKSB7CiAgICAgICAgICBpZiAobmV4
			dENoYW5nZSA9PSBwb3MpIGFkdmFuY2VNYXJrcygpOwogICAgICAgICAgdmFyIHVwdG8gPSBNYXRo
			Lm1pbihsZW4sIG5leHRDaGFuZ2UpOwogICAgICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICAg
			ICAgaWYgKHRleHQpIHsKICAgICAgICAgICAgICB2YXIgZW5kID0gcG9zICsgdGV4dC5sZW5ndGg7
			CiAgICAgICAgICAgICAgdmFyIGFwcGxpZWRTdHlsZSA9IHN0eWxlOwogICAgICAgICAgICAgIGZv
			ciAodmFyIGogPSAwOyBqIDwgbWFya3MubGVuZ3RoOyArK2opCiAgICAgICAgICAgICAgICBhcHBs
			aWVkU3R5bGUgPSAoYXBwbGllZFN0eWxlID8gYXBwbGllZFN0eWxlICsgIiAiIDogIiIpICsgbWFy
			a3Nbal0uc3R5bGU7CiAgICAgICAgICAgICAgc3BhbihlbmQgPiB1cHRvID8gdGV4dC5zbGljZSgw
			LCB1cHRvIC0gcG9zKSA6IHRleHQsIGFwcGxpZWRTdHlsZSk7CiAgICAgICAgICAgICAgaWYgKGVu
			ZCA+PSB1cHRvKSB7dGV4dCA9IHRleHQuc2xpY2UodXB0byAtIHBvcyk7IHBvcyA9IHVwdG87IGJy
			ZWFrO30KICAgICAgICAgICAgICBwb3MgPSBlbmQ7CiAgICAgICAgICAgIH0KICAgICAgICAgICAg
			dGV4dCA9IHN0W2krK107IHN0eWxlID0gc3R5bGVUb0NsYXNzKHN0W2krK10pOwogICAgICAgICAg
			fQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gaHRtbC5qb2luKCIiKTsKICAgIH0sCiAg
			ICBjbGVhblVwOiBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5wYXJlbnQgPSBudWxsOwogICAgICBp
			ZiAodGhpcy5tYXJrZWQpCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGUgPSB0aGlzLm1hcmtlZC5s
			ZW5ndGg7IGkgPCBlOyArK2kpIHRoaXMubWFya2VkW2ldLmRldGFjaCh0aGlzKTsKICAgIH0KICB9
			OwogIC8vIFV0aWxpdHkgdXNlZCBieSByZXBsYWNlIGFuZCBzcGxpdCBhYm92ZQogIGZ1bmN0aW9u
			IGNvcHlTdHlsZXMoZnJvbSwgdG8sIHNvdXJjZSwgZGVzdCkgewogICAgZm9yICh2YXIgaSA9IDAs
			IHBvcyA9IDAsIHN0YXRlID0gMDsgcG9zIDwgdG87IGkrPTIpIHsKICAgICAgdmFyIHBhcnQgPSBz
			b3VyY2VbaV0sIGVuZCA9IHBvcyArIHBhcnQubGVuZ3RoOwogICAgICBpZiAoc3RhdGUgPT0gMCkg
			ewogICAgICAgIGlmIChlbmQgPiBmcm9tKSBkZXN0LnB1c2gocGFydC5zbGljZShmcm9tIC0gcG9z
			LCBNYXRoLm1pbihwYXJ0Lmxlbmd0aCwgdG8gLSBwb3MpKSwgc291cmNlW2krMV0pOwogICAgICAg
			IGlmIChlbmQgPj0gZnJvbSkgc3RhdGUgPSAxOwogICAgICB9CiAgICAgIGVsc2UgaWYgKHN0YXRl
			ID09IDEpIHsKICAgICAgICBpZiAoZW5kID4gdG8pIGRlc3QucHVzaChwYXJ0LnNsaWNlKDAsIHRv
			IC0gcG9zKSwgc291cmNlW2krMV0pOwogICAgICAgIGVsc2UgZGVzdC5wdXNoKHBhcnQsIHNvdXJj
			ZVtpKzFdKTsKICAgICAgfQogICAgICBwb3MgPSBlbmQ7CiAgICB9CiAgfQoKICAvLyBEYXRhIHN0
			cnVjdHVyZSB0aGF0IGhvbGRzIHRoZSBzZXF1ZW5jZSBvZiBsaW5lcy4KICBmdW5jdGlvbiBMZWFm
			Q2h1bmsobGluZXMpIHsKICAgIHRoaXMubGluZXMgPSBsaW5lczsKICAgIHRoaXMucGFyZW50ID0g
			bnVsbDsKICAgIGZvciAodmFyIGkgPSAwLCBlID0gbGluZXMubGVuZ3RoLCBoZWlnaHQgPSAwOyBp
			IDwgZTsgKytpKSB7CiAgICAgIGxpbmVzW2ldLnBhcmVudCA9IHRoaXM7CiAgICAgIGhlaWdodCAr
			PSBsaW5lc1tpXS5oZWlnaHQ7CiAgICB9CiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDsKICB9CiAg
			TGVhZkNodW5rLnByb3RvdHlwZSA9IHsKICAgIGNodW5rU2l6ZTogZnVuY3Rpb24oKSB7IHJldHVy
			biB0aGlzLmxpbmVzLmxlbmd0aDsgfSwKICAgIHJlbW92ZTogZnVuY3Rpb24oYXQsIG4sIGNhbGxi
			YWNrcykgewogICAgICBmb3IgKHZhciBpID0gYXQsIGUgPSBhdCArIG47IGkgPCBlOyArK2kpIHsK
			ICAgICAgICB2YXIgbGluZSA9IHRoaXMubGluZXNbaV07CiAgICAgICAgdGhpcy5oZWlnaHQgLT0g
			bGluZS5oZWlnaHQ7CiAgICAgICAgbGluZS5jbGVhblVwKCk7CiAgICAgICAgaWYgKGxpbmUuaGFu
			ZGxlcnMpCiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxpbmUuaGFuZGxlcnMubGVuZ3Ro
			OyArK2opIGNhbGxiYWNrcy5wdXNoKGxpbmUuaGFuZGxlcnNbal0pOwogICAgICB9CiAgICAgIHRo
			aXMubGluZXMuc3BsaWNlKGF0LCBuKTsKICAgIH0sCiAgICBjb2xsYXBzZTogZnVuY3Rpb24obGlu
			ZXMpIHsKICAgICAgbGluZXMuc3BsaWNlLmFwcGx5KGxpbmVzLCBbbGluZXMubGVuZ3RoLCAwXS5j
			b25jYXQodGhpcy5saW5lcykpOwogICAgfSwKICAgIGluc2VydEhlaWdodDogZnVuY3Rpb24oYXQs
			IGxpbmVzLCBoZWlnaHQpIHsKICAgICAgdGhpcy5oZWlnaHQgKz0gaGVpZ2h0OwogICAgICB0aGlz
			LmxpbmVzLnNwbGljZS5hcHBseSh0aGlzLmxpbmVzLCBbYXQsIDBdLmNvbmNhdChsaW5lcykpOwog
			ICAgICBmb3IgKHZhciBpID0gMCwgZSA9IGxpbmVzLmxlbmd0aDsgaSA8IGU7ICsraSkgbGluZXNb
			aV0ucGFyZW50ID0gdGhpczsKICAgIH0sCiAgICBpdGVyTjogZnVuY3Rpb24oYXQsIG4sIG9wKSB7
			CiAgICAgIGZvciAodmFyIGUgPSBhdCArIG47IGF0IDwgZTsgKythdCkKICAgICAgICBpZiAob3Ao
			dGhpcy5saW5lc1thdF0pKSByZXR1cm4gdHJ1ZTsKICAgIH0KICB9OwogIGZ1bmN0aW9uIEJyYW5j
			aENodW5rKGNoaWxkcmVuKSB7CiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47CiAgICB2YXIg
			c2l6ZSA9IDAsIGhlaWdodCA9IDA7CiAgICBmb3IgKHZhciBpID0gMCwgZSA9IGNoaWxkcmVuLmxl
			bmd0aDsgaSA8IGU7ICsraSkgewogICAgICB2YXIgY2ggPSBjaGlsZHJlbltpXTsKICAgICAgc2l6
			ZSArPSBjaC5jaHVua1NpemUoKTsgaGVpZ2h0ICs9IGNoLmhlaWdodDsKICAgICAgY2gucGFyZW50
			ID0gdGhpczsKICAgIH0KICAgIHRoaXMuc2l6ZSA9IHNpemU7CiAgICB0aGlzLmhlaWdodCA9IGhl
			aWdodDsKICAgIHRoaXMucGFyZW50ID0gbnVsbDsKICB9CiAgQnJhbmNoQ2h1bmsucHJvdG90eXBl
			ID0gewogICAgY2h1bmtTaXplOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuc2l6ZTsgfSwKICAg
			IHJlbW92ZTogZnVuY3Rpb24oYXQsIG4sIGNhbGxiYWNrcykgewogICAgICB0aGlzLnNpemUgLT0g
			bjsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7
			CiAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXSwgc3ogPSBjaGlsZC5jaHVua1Np
			emUoKTsKICAgICAgICBpZiAoYXQgPCBzeikgewogICAgICAgICAgdmFyIHJtID0gTWF0aC5taW4o
			biwgc3ogLSBhdCksIG9sZEhlaWdodCA9IGNoaWxkLmhlaWdodDsKICAgICAgICAgIGNoaWxkLnJl
			bW92ZShhdCwgcm0sIGNhbGxiYWNrcyk7CiAgICAgICAgICB0aGlzLmhlaWdodCAtPSBvbGRIZWln
			aHQgLSBjaGlsZC5oZWlnaHQ7CiAgICAgICAgICBpZiAoc3ogPT0gcm0pIHsgdGhpcy5jaGlsZHJl
			bi5zcGxpY2UoaS0tLCAxKTsgY2hpbGQucGFyZW50ID0gbnVsbDsgfQogICAgICAgICAgaWYgKChu
			IC09IHJtKSA9PSAwKSBicmVhazsKICAgICAgICAgIGF0ID0gMDsKICAgICAgICB9IGVsc2UgYXQg
			LT0gc3o7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuc2l6ZSAtIG4gPCAyNSkgewogICAgICAgIHZh
			ciBsaW5lcyA9IFtdOwogICAgICAgIHRoaXMuY29sbGFwc2UobGluZXMpOwogICAgICAgIHRoaXMu
			Y2hpbGRyZW4gPSBbbmV3IExlYWZDaHVuayhsaW5lcyldOwogICAgICAgIHRoaXMuY2hpbGRyZW5b
			MF0ucGFyZW50ID0gdGhpczsKICAgICAgfQogICAgfSwKICAgIGNvbGxhcHNlOiBmdW5jdGlvbihs
			aW5lcykgewogICAgICBmb3IgKHZhciBpID0gMCwgZSA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBp
			IDwgZTsgKytpKSB0aGlzLmNoaWxkcmVuW2ldLmNvbGxhcHNlKGxpbmVzKTsKICAgIH0sCiAgICBp
			bnNlcnQ6IGZ1bmN0aW9uKGF0LCBsaW5lcykgewogICAgICB2YXIgaGVpZ2h0ID0gMDsKICAgICAg
			Zm9yICh2YXIgaSA9IDAsIGUgPSBsaW5lcy5sZW5ndGg7IGkgPCBlOyArK2kpIGhlaWdodCArPSBs
			aW5lc1tpXS5oZWlnaHQ7CiAgICAgIHRoaXMuaW5zZXJ0SGVpZ2h0KGF0LCBsaW5lcywgaGVpZ2h0
			KTsKICAgIH0sCiAgICBpbnNlcnRIZWlnaHQ6IGZ1bmN0aW9uKGF0LCBsaW5lcywgaGVpZ2h0KSB7
			CiAgICAgIHRoaXMuc2l6ZSArPSBsaW5lcy5sZW5ndGg7CiAgICAgIHRoaXMuaGVpZ2h0ICs9IGhl
			aWdodDsKICAgICAgZm9yICh2YXIgaSA9IDAsIGUgPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8
			IGU7ICsraSkgewogICAgICAgIHZhciBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV0sIHN6ID0gY2hp
			bGQuY2h1bmtTaXplKCk7CiAgICAgICAgaWYgKGF0IDw9IHN6KSB7CiAgICAgICAgICBjaGlsZC5p
			bnNlcnRIZWlnaHQoYXQsIGxpbmVzLCBoZWlnaHQpOwogICAgICAgICAgaWYgKGNoaWxkLmxpbmVz
			ICYmIGNoaWxkLmxpbmVzLmxlbmd0aCA+IDUwKSB7CiAgICAgICAgICAgIHdoaWxlIChjaGlsZC5s
			aW5lcy5sZW5ndGggPiA1MCkgewogICAgICAgICAgICAgIHZhciBzcGlsbGVkID0gY2hpbGQubGlu
			ZXMuc3BsaWNlKGNoaWxkLmxpbmVzLmxlbmd0aCAtIDI1LCAyNSk7CiAgICAgICAgICAgICAgdmFy
			IG5ld2xlYWYgPSBuZXcgTGVhZkNodW5rKHNwaWxsZWQpOwogICAgICAgICAgICAgIGNoaWxkLmhl
			aWdodCAtPSBuZXdsZWFmLmhlaWdodDsKICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGlj
			ZShpICsgMSwgMCwgbmV3bGVhZik7CiAgICAgICAgICAgICAgbmV3bGVhZi5wYXJlbnQgPSB0aGlz
			OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMubWF5YmVTcGlsbCgpOwogICAgICAgICAg
			fQogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGF0IC09IHN6OwogICAgICB9CiAg
			ICB9LAogICAgbWF5YmVTcGlsbDogZnVuY3Rpb24oKSB7CiAgICAgIGlmICh0aGlzLmNoaWxkcmVu
			Lmxlbmd0aCA8PSAxMCkgcmV0dXJuOwogICAgICB2YXIgbWUgPSB0aGlzOwogICAgICBkbyB7CiAg
			ICAgICAgdmFyIHNwaWxsZWQgPSBtZS5jaGlsZHJlbi5zcGxpY2UobWUuY2hpbGRyZW4ubGVuZ3Ro
			IC0gNSwgNSk7CiAgICAgICAgdmFyIHNpYmxpbmcgPSBuZXcgQnJhbmNoQ2h1bmsoc3BpbGxlZCk7
			CiAgICAgICAgaWYgKCFtZS5wYXJlbnQpIHsgLy8gQmVjb21lIHRoZSBwYXJlbnQgbm9kZQogICAg
			ICAgICAgdmFyIGNvcHkgPSBuZXcgQnJhbmNoQ2h1bmsobWUuY2hpbGRyZW4pOwogICAgICAgICAg
			Y29weS5wYXJlbnQgPSBtZTsKICAgICAgICAgIG1lLmNoaWxkcmVuID0gW2NvcHksIHNpYmxpbmdd
			OwogICAgICAgICAgbWUgPSBjb3B5OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBtZS5zaXpl
			IC09IHNpYmxpbmcuc2l6ZTsKICAgICAgICAgIG1lLmhlaWdodCAtPSBzaWJsaW5nLmhlaWdodDsK
			ICAgICAgICAgIHZhciBteUluZGV4ID0gaW5kZXhPZihtZS5wYXJlbnQuY2hpbGRyZW4sIG1lKTsK
			ICAgICAgICAgIG1lLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UobXlJbmRleCArIDEsIDAsIHNpYmxp
			bmcpOwogICAgICAgIH0KICAgICAgICBzaWJsaW5nLnBhcmVudCA9IG1lLnBhcmVudDsKICAgICAg
			fSB3aGlsZSAobWUuY2hpbGRyZW4ubGVuZ3RoID4gMTApOwogICAgICBtZS5wYXJlbnQubWF5YmVT
			cGlsbCgpOwogICAgfSwKICAgIGl0ZXI6IGZ1bmN0aW9uKGZyb20sIHRvLCBvcCkgeyB0aGlzLml0
			ZXJOKGZyb20sIHRvIC0gZnJvbSwgb3ApOyB9LAogICAgaXRlck46IGZ1bmN0aW9uKGF0LCBuLCBv
			cCkgewogICAgICBmb3IgKHZhciBpID0gMCwgZSA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwg
			ZTsgKytpKSB7CiAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXSwgc3ogPSBjaGls
			ZC5jaHVua1NpemUoKTsKICAgICAgICBpZiAoYXQgPCBzeikgewogICAgICAgICAgdmFyIHVzZWQg
			PSBNYXRoLm1pbihuLCBzeiAtIGF0KTsKICAgICAgICAgIGlmIChjaGlsZC5pdGVyTihhdCwgdXNl
			ZCwgb3ApKSByZXR1cm4gdHJ1ZTsKICAgICAgICAgIGlmICgobiAtPSB1c2VkKSA9PSAwKSBicmVh
			azsKICAgICAgICAgIGF0ID0gMDsKICAgICAgICB9IGVsc2UgYXQgLT0gc3o7CiAgICAgIH0KICAg
			IH0KICB9OwoKICBmdW5jdGlvbiBnZXRMaW5lQXQoY2h1bmssIG4pIHsKICAgIHdoaWxlICghY2h1
			bmsubGluZXMpIHsKICAgICAgZm9yICh2YXIgaSA9IDA7OyArK2kpIHsKICAgICAgICB2YXIgY2hp
			bGQgPSBjaHVuay5jaGlsZHJlbltpXSwgc3ogPSBjaGlsZC5jaHVua1NpemUoKTsKICAgICAgICBp
			ZiAobiA8IHN6KSB7IGNodW5rID0gY2hpbGQ7IGJyZWFrOyB9CiAgICAgICAgbiAtPSBzejsKICAg
			ICAgfQogICAgfQogICAgcmV0dXJuIGNodW5rLmxpbmVzW25dOwogIH0KICBmdW5jdGlvbiBsaW5l
			Tm8obGluZSkgewogICAgaWYgKGxpbmUucGFyZW50ID09IG51bGwpIHJldHVybiBudWxsOwogICAg
			dmFyIGN1ciA9IGxpbmUucGFyZW50LCBubyA9IGluZGV4T2YoY3VyLmxpbmVzLCBsaW5lKTsKICAg
			IGZvciAodmFyIGNodW5rID0gY3VyLnBhcmVudDsgY2h1bms7IGN1ciA9IGNodW5rLCBjaHVuayA9
			IGNodW5rLnBhcmVudCkgewogICAgICBmb3IgKHZhciBpID0gMCwgZSA9IGNodW5rLmNoaWxkcmVu
			Lmxlbmd0aDsgOyArK2kpIHsKICAgICAgICBpZiAoY2h1bmsuY2hpbGRyZW5baV0gPT0gY3VyKSBi
			cmVhazsKICAgICAgICBubyArPSBjaHVuay5jaGlsZHJlbltpXS5jaHVua1NpemUoKTsKICAgICAg
			fQogICAgfQogICAgcmV0dXJuIG5vOwogIH0KICBmdW5jdGlvbiBsaW5lQXRIZWlnaHQoY2h1bmss
			IGgpIHsKICAgIHZhciBuID0gMDsKICAgIG91dGVyOiBkbyB7CiAgICAgIGZvciAodmFyIGkgPSAw
			LCBlID0gY2h1bmsuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgZTsgKytpKSB7CiAgICAgICAgdmFyIGNo
			aWxkID0gY2h1bmsuY2hpbGRyZW5baV0sIGNoID0gY2hpbGQuaGVpZ2h0OwogICAgICAgIGlmICho
			IDwgY2gpIHsgY2h1bmsgPSBjaGlsZDsgY29udGludWUgb3V0ZXI7IH0KICAgICAgICBoIC09IGNo
			OwogICAgICAgIG4gKz0gY2hpbGQuY2h1bmtTaXplKCk7CiAgICAgIH0KICAgICAgcmV0dXJuIG47
			CiAgICB9IHdoaWxlICghY2h1bmsubGluZXMpOwogICAgZm9yICh2YXIgaSA9IDAsIGUgPSBjaHVu
			ay5saW5lcy5sZW5ndGg7IGkgPCBlOyArK2kpIHsKICAgICAgdmFyIGxpbmUgPSBjaHVuay5saW5l
			c1tpXSwgbGggPSBsaW5lLmhlaWdodDsKICAgICAgaWYgKGggPCBsaCkgYnJlYWs7CiAgICAgIGgg
			LT0gbGg7CiAgICB9CiAgICByZXR1cm4gbiArIGk7CiAgfQogIGZ1bmN0aW9uIGhlaWdodEF0TGlu
			ZShjaHVuaywgbikgewogICAgdmFyIGggPSAwOwogICAgb3V0ZXI6IGRvIHsKICAgICAgZm9yICh2
			YXIgaSA9IDAsIGUgPSBjaHVuay5jaGlsZHJlbi5sZW5ndGg7IGkgPCBlOyArK2kpIHsKICAgICAg
			ICB2YXIgY2hpbGQgPSBjaHVuay5jaGlsZHJlbltpXSwgc3ogPSBjaGlsZC5jaHVua1NpemUoKTsK
			ICAgICAgICBpZiAobiA8IHN6KSB7IGNodW5rID0gY2hpbGQ7IGNvbnRpbnVlIG91dGVyOyB9CiAg
			ICAgICAgbiAtPSBzejsKICAgICAgICBoICs9IGNoaWxkLmhlaWdodDsKICAgICAgfQogICAgICBy
			ZXR1cm4gaDsKICAgIH0gd2hpbGUgKCFjaHVuay5saW5lcyk7CiAgICBmb3IgKHZhciBpID0gMDsg
			aSA8IG47ICsraSkgaCArPSBjaHVuay5saW5lc1tpXS5oZWlnaHQ7CiAgICByZXR1cm4gaDsKICB9
			CgogIC8vIFRoZSBoaXN0b3J5IG9iamVjdCAnY2h1bmtzJyBjaGFuZ2VzIHRoYXQgYXJlIG1hZGUg
			Y2xvc2UgdG9nZXRoZXIKICAvLyBhbmQgYXQgYWxtb3N0IHRoZSBzYW1lIHRpbWUgaW50byBiaWdn
			ZXIgdW5kb2FibGUgdW5pdHMuCiAgZnVuY3Rpb24gSGlzdG9yeSgpIHsKICAgIHRoaXMudGltZSA9
			IDA7CiAgICB0aGlzLmRvbmUgPSBbXTsgdGhpcy51bmRvbmUgPSBbXTsKICB9CiAgSGlzdG9yeS5w
			cm90b3R5cGUgPSB7CiAgICBhZGRDaGFuZ2U6IGZ1bmN0aW9uKHN0YXJ0LCBhZGRlZCwgb2xkKSB7
			CiAgICAgIHRoaXMudW5kb25lLmxlbmd0aCA9IDA7CiAgICAgIHZhciB0aW1lID0gK25ldyBEYXRl
			LCBjdXIgPSB0aGlzLmRvbmVbdGhpcy5kb25lLmxlbmd0aCAtIDFdLCBsYXN0ID0gY3VyICYmIGN1
			cltjdXIubGVuZ3RoIC0gMV07CiAgICAgIHZhciBkdGltZSA9IHRpbWUgLSB0aGlzLnRpbWU7CiAg
			ICAgIGlmIChkdGltZSA+IDQwMCB8fCAhbGFzdCkgewogICAgICAgIHRoaXMuZG9uZS5wdXNoKFt7
			c3RhcnQ6IHN0YXJ0LCBhZGRlZDogYWRkZWQsIG9sZDogb2xkfV0pOwogICAgICB9IGVsc2UgaWYg
			KGxhc3Quc3RhcnQgPiBzdGFydCArIG9sZC5sZW5ndGggfHwgbGFzdC5zdGFydCArIGxhc3QuYWRk
			ZWQgPCBzdGFydCAtIGxhc3QuYWRkZWQgKyBsYXN0Lm9sZC5sZW5ndGgpIHsKICAgICAgICBjdXIu
			cHVzaCh7c3RhcnQ6IHN0YXJ0LCBhZGRlZDogYWRkZWQsIG9sZDogb2xkfSk7CiAgICAgIH0gZWxz
			ZSB7CiAgICAgICAgdmFyIG9sZG9mZiA9IDA7CiAgICAgICAgaWYgKHN0YXJ0IDwgbGFzdC5zdGFy
			dCkgewogICAgICAgICAgZm9yICh2YXIgaSA9IGxhc3Quc3RhcnQgLSBzdGFydCAtIDE7IGkgPj0g
			MDsgLS1pKQogICAgICAgICAgICBsYXN0Lm9sZC51bnNoaWZ0KG9sZFtpXSk7CiAgICAgICAgICBs
			YXN0LmFkZGVkICs9IGxhc3Quc3RhcnQgLSBzdGFydDsKICAgICAgICAgIGxhc3Quc3RhcnQgPSBz
			dGFydDsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAobGFzdC5zdGFydCA8IHN0YXJ0KSB7CiAg
			ICAgICAgICBvbGRvZmYgPSBzdGFydCAtIGxhc3Quc3RhcnQ7CiAgICAgICAgICBhZGRlZCArPSBv
			bGRvZmY7CiAgICAgICAgfQogICAgICAgIGZvciAodmFyIGkgPSBsYXN0LmFkZGVkIC0gb2xkb2Zm
			LCBlID0gb2xkLmxlbmd0aDsgaSA8IGU7ICsraSkKICAgICAgICAgIGxhc3Qub2xkLnB1c2gob2xk
			W2ldKTsKICAgICAgICBpZiAobGFzdC5hZGRlZCA8IGFkZGVkKSBsYXN0LmFkZGVkID0gYWRkZWQ7
			CiAgICAgIH0KICAgICAgdGhpcy50aW1lID0gdGltZTsKICAgIH0KICB9OwoKICBmdW5jdGlvbiBz
			dG9wTWV0aG9kKCkge2Vfc3RvcCh0aGlzKTt9CiAgLy8gRW5zdXJlIGFuIGV2ZW50IGhhcyBhIHN0
			b3AgbWV0aG9kLgogIGZ1bmN0aW9uIGFkZFN0b3AoZXZlbnQpIHsKICAgIGlmICghZXZlbnQuc3Rv
			cCkgZXZlbnQuc3RvcCA9IHN0b3BNZXRob2Q7CiAgICByZXR1cm4gZXZlbnQ7CiAgfQoKICBmdW5j
			dGlvbiBlX3ByZXZlbnREZWZhdWx0KGUpIHsKICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnBy
			ZXZlbnREZWZhdWx0KCk7CiAgICBlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTsKICB9CiAgZnVu
			Y3Rpb24gZV9zdG9wUHJvcGFnYXRpb24oZSkgewogICAgaWYgKGUuc3RvcFByb3BhZ2F0aW9uKSBl
			LnN0b3BQcm9wYWdhdGlvbigpOwogICAgZWxzZSBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7CiAgfQog
			IGZ1bmN0aW9uIGVfc3RvcChlKSB7ZV9wcmV2ZW50RGVmYXVsdChlKTsgZV9zdG9wUHJvcGFnYXRp
			b24oZSk7fQogIENvZGVNaXJyb3IuZV9zdG9wID0gZV9zdG9wOwogIENvZGVNaXJyb3IuZV9wcmV2
			ZW50RGVmYXVsdCA9IGVfcHJldmVudERlZmF1bHQ7CiAgQ29kZU1pcnJvci5lX3N0b3BQcm9wYWdh
			dGlvbiA9IGVfc3RvcFByb3BhZ2F0aW9uOwoKICBmdW5jdGlvbiBlX3RhcmdldChlKSB7cmV0dXJu
			IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDt9CiAgZnVuY3Rpb24gZV9idXR0b24oZSkgewogICAg
			aWYgKGUud2hpY2gpIHJldHVybiBlLndoaWNoOwogICAgZWxzZSBpZiAoZS5idXR0b24gJiAxKSBy
			ZXR1cm4gMTsKICAgIGVsc2UgaWYgKGUuYnV0dG9uICYgMikgcmV0dXJuIDM7CiAgICBlbHNlIGlm
			IChlLmJ1dHRvbiAmIDQpIHJldHVybiAyOwogIH0KCiAgLy8gQWxsb3cgM3JkLXBhcnR5IGNvZGUg
			dG8gb3ZlcnJpZGUgZXZlbnQgcHJvcGVydGllcyBieSBhZGRpbmcgYW4gb3ZlcnJpZGUKICAvLyBv
			YmplY3QgdG8gYW4gZXZlbnQgb2JqZWN0LgogIGZ1bmN0aW9uIGVfcHJvcChlLCBwcm9wKSB7CiAg
			ICB2YXIgb3ZlcnJpZGRlbiA9IGUub3ZlcnJpZGUgJiYgZS5vdmVycmlkZS5oYXNPd25Qcm9wZXJ0
			eShwcm9wKTsKICAgIHJldHVybiBvdmVycmlkZGVuID8gZS5vdmVycmlkZVtwcm9wXSA6IGVbcHJv
			cF07CiAgfQoKICAvLyBFdmVudCBoYW5kbGVyIHJlZ2lzdHJhdGlvbi4gSWYgZGlzY29ubmVjdCBp
			cyB0cnVlLCBpdCdsbCByZXR1cm4gYQogIC8vIGZ1bmN0aW9uIHRoYXQgdW5yZWdpc3RlcnMgdGhl
			IGhhbmRsZXIuCiAgZnVuY3Rpb24gY29ubmVjdChub2RlLCB0eXBlLCBoYW5kbGVyLCBkaXNjb25u
			ZWN0KSB7CiAgICBpZiAodHlwZW9mIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA9PSAiZnVuY3Rpb24i
			KSB7CiAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7CiAg
			ICAgIGlmIChkaXNjb25uZWN0KSByZXR1cm4gZnVuY3Rpb24oKSB7bm9kZS5yZW1vdmVFdmVudExp
			c3RlbmVyKHR5cGUsIGhhbmRsZXIsIGZhbHNlKTt9OwogICAgfQogICAgZWxzZSB7CiAgICAgIHZh
			ciB3cmFwSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7aGFuZGxlcihldmVudCB8fCB3aW5kb3cu
			ZXZlbnQpO307CiAgICAgIG5vZGUuYXR0YWNoRXZlbnQoIm9uIiArIHR5cGUsIHdyYXBIYW5kbGVy
			KTsKICAgICAgaWYgKGRpc2Nvbm5lY3QpIHJldHVybiBmdW5jdGlvbigpIHtub2RlLmRldGFjaEV2
			ZW50KCJvbiIgKyB0eXBlLCB3cmFwSGFuZGxlcik7fTsKICAgIH0KICB9CiAgQ29kZU1pcnJvci5j
			b25uZWN0ID0gY29ubmVjdDsKCiAgZnVuY3Rpb24gRGVsYXllZCgpIHt0aGlzLmlkID0gbnVsbDt9
			CiAgRGVsYXllZC5wcm90b3R5cGUgPSB7c2V0OiBmdW5jdGlvbihtcywgZikge2NsZWFyVGltZW91
			dCh0aGlzLmlkKTsgdGhpcy5pZCA9IHNldFRpbWVvdXQoZiwgbXMpO319OwoKICB2YXIgUGFzcyA9
			IENvZGVNaXJyb3IuUGFzcyA9IHt0b1N0cmluZzogZnVuY3Rpb24oKXtyZXR1cm4gIkNvZGVNaXJy
			b3IuUGFzcyI7fX07CgogIC8vIERldGVjdCBkcmFnLWFuZC1kcm9wCiAgdmFyIGRyYWdBbmREcm9w
			ID0gZnVuY3Rpb24oKSB7CiAgICAvLyBJRTggaGFzIG9uZHJhZ3N0YXJ0IGFuZCBvbmRyb3AgcHJv
			cGVydGllcywgYnV0IGRvZXNuJ3Qgc2VlbSB0bwogICAgLy8gYWN0dWFsbHkgc3VwcG9ydCBvbmRy
			YWdzdGFydCB0aGUgd2F5IGl0J3Mgc3VwcG9zZWQgdG8gd29yay4KICAgIGlmICgvTVNJRSBbMS04
			XVxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSByZXR1cm4gZmFsc2U7CiAgICB2YXIgZGl2
			ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICByZXR1cm4gImRyYWdnYWJsZSIg
			aW4gZGl2OwogIH0oKTsKCiAgdmFyIGdlY2tvID0gL2dlY2tvXC9cZHs3fS9pLnRlc3QobmF2aWdh
			dG9yLnVzZXJBZ2VudCk7CiAgdmFyIGllID0gL01TSUUgXGQvLnRlc3QobmF2aWdhdG9yLnVzZXJB
			Z2VudCk7CiAgdmFyIGllX2x0OSA9IC9NU0lFIFsxLThdXGIvLnRlc3QobmF2aWdhdG9yLnVzZXJB
			Z2VudCk7CiAgdmFyIHdlYmtpdCA9IC9XZWJLaXRcLy8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50
			KTsKCiAgdmFyIGxpbmVTZXAgPSAiXG4iOwogIC8vIEZlYXR1cmUtZGV0ZWN0IHdoZXRoZXIgbmV3
			bGluZXMgaW4gdGV4dGFyZWFzIGFyZSBjb252ZXJ0ZWQgdG8gXHJcbgogIChmdW5jdGlvbiAoKSB7
			CiAgICB2YXIgdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0ZXh0YXJlYSIpOwogICAgdGUu
			dmFsdWUgPSAiZm9vXG5iYXIiOwogICAgaWYgKHRlLnZhbHVlLmluZGV4T2YoIlxyIikgPiAtMSkg
			bGluZVNlcCA9ICJcclxuIjsKICB9KCkpOwoKICAvLyBDb3VudHMgdGhlIGNvbHVtbiBvZmZzZXQg
			aW4gYSBzdHJpbmcsIHRha2luZyB0YWJzIGludG8gYWNjb3VudC4KICAvLyBVc2VkIG1vc3RseSB0
			byBmaW5kIGluZGVudGF0aW9uLgogIGZ1bmN0aW9uIGNvdW50Q29sdW1uKHN0cmluZywgZW5kLCB0
			YWJTaXplKSB7CiAgICBpZiAoZW5kID09IG51bGwpIHsKICAgICAgZW5kID0gc3RyaW5nLnNlYXJj
			aCgvW15cc1x1MDBhMF0vKTsKICAgICAgaWYgKGVuZCA9PSAtMSkgZW5kID0gc3RyaW5nLmxlbmd0
			aDsKICAgIH0KICAgIGZvciAodmFyIGkgPSAwLCBuID0gMDsgaSA8IGVuZDsgKytpKSB7CiAgICAg
			IGlmIChzdHJpbmcuY2hhckF0KGkpID09ICJcdCIpIG4gKz0gdGFiU2l6ZSAtIChuICUgdGFiU2l6
			ZSk7CiAgICAgIGVsc2UgKytuOwogICAgfQogICAgcmV0dXJuIG47CiAgfQoKICBmdW5jdGlvbiBj
			b21wdXRlZFN0eWxlKGVsdCkgewogICAgaWYgKGVsdC5jdXJyZW50U3R5bGUpIHJldHVybiBlbHQu
			Y3VycmVudFN0eWxlOwogICAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsdCwgbnVs
			bCk7CiAgfQoKICAvLyBGaW5kIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IGJ5IGZvbGxvd2lu
			ZyB0aGUgb2Zmc2V0UGFyZW50IGNoYWluLgogIC8vIElmIHNjcmVlbj09dHJ1ZSwgaXQgcmV0dXJu
			cyBzY3JlZW4gKHJhdGhlciB0aGFuIHBhZ2UpIGNvb3JkaW5hdGVzLgogIGZ1bmN0aW9uIGVsdE9m
			ZnNldChub2RlLCBzY3JlZW4pIHsKICAgIHZhciBib2QgPSBub2RlLm93bmVyRG9jdW1lbnQuYm9k
			eTsKICAgIHZhciB4ID0gMCwgeSA9IDAsIHNraXBCb2R5ID0gZmFsc2U7CiAgICBmb3IgKHZhciBu
			ID0gbm9kZTsgbjsgbiA9IG4ub2Zmc2V0UGFyZW50KSB7CiAgICAgIHZhciBvbCA9IG4ub2Zmc2V0
			TGVmdCwgb3QgPSBuLm9mZnNldFRvcDsKICAgICAgLy8gRmlyZWZveCByZXBvcnRzIHdlaXJkIGlu
			dmVydGVkIG9mZnNldHMgd2hlbiB0aGUgYm9keSBoYXMgYSBib3JkZXIuCiAgICAgIGlmIChuID09
			IGJvZCkgeyB4ICs9IE1hdGguYWJzKG9sKTsgeSArPSBNYXRoLmFicyhvdCk7IH0KICAgICAgZWxz
			ZSB7IHggKz0gb2wsIHkgKz0gb3Q7IH0KICAgICAgaWYgKHNjcmVlbiAmJiBjb21wdXRlZFN0eWxl
			KG4pLnBvc2l0aW9uID09ICJmaXhlZCIpCiAgICAgICAgc2tpcEJvZHkgPSB0cnVlOwogICAgfQog
			ICAgdmFyIGUgPSBzY3JlZW4gJiYgIXNraXBCb2R5ID8gbnVsbCA6IGJvZDsKICAgIGZvciAodmFy
			IG4gPSBub2RlLnBhcmVudE5vZGU7IG4gIT0gZTsgbiA9IG4ucGFyZW50Tm9kZSkKICAgICAgaWYg
			KG4uc2Nyb2xsTGVmdCAhPSBudWxsKSB7IHggLT0gbi5zY3JvbGxMZWZ0OyB5IC09IG4uc2Nyb2xs
			VG9wO30KICAgIHJldHVybiB7bGVmdDogeCwgdG9wOiB5fTsKICB9CiAgLy8gVXNlIHRoZSBmYXN0
			ZXIgYW5kIHNhbmVyIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBtZXRob2Qgd2hlbiBwb3NzaWJsZS4K
			ICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPSBu
			dWxsKSBlbHRPZmZzZXQgPSBmdW5jdGlvbihub2RlLCBzY3JlZW4pIHsKICAgIC8vIFRha2UgdGhl
			IHBhcnRzIG9mIGJvdW5kaW5nIGNsaWVudCByZWN0IHRoYXQgd2UgYXJlIGludGVyZXN0ZWQgaW4g
			c28gd2UgYXJlIGFibGUgdG8gZWRpdCBpZiBuZWVkIGJlLAogICAgLy8gc2luY2UgdGhlIHJldHVy
			bmVkIHZhbHVlIGNhbm5vdCBiZSBjaGFuZ2VkIGV4dGVybmFsbHkgKHRoZXkgYXJlIGtlcHQgaW4g
			c3luYyBhcyB0aGUgZWxlbWVudCBtb3ZlcyB3aXRoaW4gdGhlIHBhZ2UpCiAgICB0cnkgeyB2YXIg
			Ym94ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgYm94ID0geyB0b3A6IGJveC50b3As
			IGxlZnQ6IGJveC5sZWZ0IH07IH0KICAgIGNhdGNoKGUpIHsgYm94ID0ge3RvcDogMCwgbGVmdDog
			MH07IH0KICAgIGlmICghc2NyZWVuKSB7CiAgICAgIC8vIEdldCB0aGUgdG9wbGV2ZWwgc2Nyb2xs
			LCB3b3JraW5nIGFyb3VuZCBicm93c2VyIGRpZmZlcmVuY2VzLgogICAgICBpZiAod2luZG93LnBh
			Z2VZT2Zmc2V0ID09IG51bGwpIHsKICAgICAgICB2YXIgdCA9IGRvY3VtZW50LmRvY3VtZW50RWxl
			bWVudCB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGU7CiAgICAgICAgaWYgKHQuc2Nyb2xsVG9w
			ID09IG51bGwpIHQgPSBkb2N1bWVudC5ib2R5OwogICAgICAgIGJveC50b3AgKz0gdC5zY3JvbGxU
			b3A7IGJveC5sZWZ0ICs9IHQuc2Nyb2xsTGVmdDsKICAgICAgfSBlbHNlIHsKICAgICAgICBib3gu
			dG9wICs9IHdpbmRvdy5wYWdlWU9mZnNldDsgYm94LmxlZnQgKz0gd2luZG93LnBhZ2VYT2Zmc2V0
			OwogICAgICB9CiAgICB9CiAgICByZXR1cm4gYm94OwogIH07CgogIC8vIEdldCBhIG5vZGUncyB0
			ZXh0IGNvbnRlbnQuCiAgZnVuY3Rpb24gZWx0VGV4dChub2RlKSB7CiAgICByZXR1cm4gbm9kZS50
			ZXh0Q29udGVudCB8fCBub2RlLmlubmVyVGV4dCB8fCBub2RlLm5vZGVWYWx1ZSB8fCAiIjsKICB9
			CiAgZnVuY3Rpb24gc2VsZWN0SW5wdXQobm9kZSkgewogICAgaWYgKGlvcykgeyAvLyBNb2JpbGUg
			U2FmYXJpIGFwcGFyZW50bHkgaGFzIGEgYnVnIHdoZXJlIHNlbGVjdCgpIGlzIGJyb2tlbi4KICAg
			ICAgbm9kZS5zZWxlY3Rpb25TdGFydCA9IDA7CiAgICAgIG5vZGUuc2VsZWN0aW9uRW5kID0gbm9k
			ZS52YWx1ZS5sZW5ndGg7CiAgICB9IGVsc2Ugbm9kZS5zZWxlY3QoKTsKICB9CgogIC8vIE9wZXJh
			dGlvbnMgb24ge2xpbmUsIGNofSBvYmplY3RzLgogIGZ1bmN0aW9uIHBvc0VxKGEsIGIpIHtyZXR1
			cm4gYS5saW5lID09IGIubGluZSAmJiBhLmNoID09IGIuY2g7fQogIGZ1bmN0aW9uIHBvc0xlc3Mo
			YSwgYikge3JldHVybiBhLmxpbmUgPCBiLmxpbmUgfHwgKGEubGluZSA9PSBiLmxpbmUgJiYgYS5j
			aCA8IGIuY2gpO30KICBmdW5jdGlvbiBjb3B5UG9zKHgpIHtyZXR1cm4ge2xpbmU6IHgubGluZSwg
			Y2g6IHguY2h9O30KCiAgdmFyIGVzY2FwZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50
			KCJwcmUiKTsKICBmdW5jdGlvbiBodG1sRXNjYXBlKHN0cikgewogICAgZXNjYXBlRWxlbWVudC50
			ZXh0Q29udGVudCA9IHN0cjsKICAgIHJldHVybiBlc2NhcGVFbGVtZW50LmlubmVySFRNTDsKICB9
			CiAgLy8gUmVjZW50IChsYXRlIDIwMTEpIE9wZXJhIGJldGFzIGluc2VydCBib2d1cyBuZXdsaW5l
			cyBhdCB0aGUgc3RhcnQKICAvLyBvZiB0aGUgdGV4dENvbnRlbnQsIHNvIHdlIHN0cmlwIHRob3Nl
			LgogIGlmIChodG1sRXNjYXBlKCJhIikgPT0gIlxuYSIpCiAgICBodG1sRXNjYXBlID0gZnVuY3Rp
			b24oc3RyKSB7CiAgICAgIGVzY2FwZUVsZW1lbnQudGV4dENvbnRlbnQgPSBzdHI7CiAgICAgIHJl
			dHVybiBlc2NhcGVFbGVtZW50LmlubmVySFRNTC5zbGljZSgxKTsKICAgIH07CiAgLy8gU29tZSBJ
			RXMgZG9uJ3QgcHJlc2VydmUgdGFicyB0aHJvdWdoIGlubmVySFRNTAogIGVsc2UgaWYgKGh0bWxF
			c2NhcGUoIlx0IikgIT0gIlx0IikKICAgIGh0bWxFc2NhcGUgPSBmdW5jdGlvbihzdHIpIHsKICAg
			ICAgZXNjYXBlRWxlbWVudC5pbm5lckhUTUwgPSAiIjsKICAgICAgZXNjYXBlRWxlbWVudC5hcHBl
			bmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzdHIpKTsKICAgICAgcmV0dXJuIGVzY2Fw
			ZUVsZW1lbnQuaW5uZXJIVE1MOwogICAgfTsKICBDb2RlTWlycm9yLmh0bWxFc2NhcGUgPSBodG1s
			RXNjYXBlOwoKICAvLyBVc2VkIHRvIHBvc2l0aW9uIHRoZSBjdXJzb3IgYWZ0ZXIgYW4gdW5kby9y
			ZWRvIGJ5IGZpbmRpbmcgdGhlCiAgLy8gbGFzdCBlZGl0ZWQgY2hhcmFjdGVyLgogIGZ1bmN0aW9u
			IGVkaXRFbmQoZnJvbSwgdG8pIHsKICAgIGlmICghdG8pIHJldHVybiAwOwogICAgaWYgKCFmcm9t
			KSByZXR1cm4gdG8ubGVuZ3RoOwogICAgZm9yICh2YXIgaSA9IGZyb20ubGVuZ3RoLCBqID0gdG8u
			bGVuZ3RoOyBpID49IDAgJiYgaiA+PSAwOyAtLWksIC0taikKICAgICAgaWYgKGZyb20uY2hhckF0
			KGkpICE9IHRvLmNoYXJBdChqKSkgYnJlYWs7CiAgICByZXR1cm4gaiArIDE7CiAgfQoKICBmdW5j
			dGlvbiBpbmRleE9mKGNvbGxlY3Rpb24sIGVsdCkgewogICAgaWYgKGNvbGxlY3Rpb24uaW5kZXhP
			ZikgcmV0dXJuIGNvbGxlY3Rpb24uaW5kZXhPZihlbHQpOwogICAgZm9yICh2YXIgaSA9IDAsIGUg
			PSBjb2xsZWN0aW9uLmxlbmd0aDsgaSA8IGU7ICsraSkKICAgICAgaWYgKGNvbGxlY3Rpb25baV0g
			PT0gZWx0KSByZXR1cm4gaTsKICAgIHJldHVybiAtMTsKICB9CiAgZnVuY3Rpb24gaXNXb3JkQ2hh
			cihjaCkgewogICAgcmV0dXJuIC9cdy8udGVzdChjaCkgfHwgY2gudG9VcHBlckNhc2UoKSAhPSBj
			aC50b0xvd2VyQ2FzZSgpOwogIH0KCiAgLy8gU2VlIGlmICIiLnNwbGl0IGlzIHRoZSBicm9rZW4g
			SUUgdmVyc2lvbiwgaWYgc28sIHByb3ZpZGUgYW4KICAvLyBhbHRlcm5hdGl2ZSB3YXkgdG8gc3Bs
			aXQgbGluZXMuCiAgdmFyIHNwbGl0TGluZXMgPSAiXG5cbmIiLnNwbGl0KC9cbi8pLmxlbmd0aCAh
			PSAzID8gZnVuY3Rpb24oc3RyaW5nKSB7CiAgICB2YXIgcG9zID0gMCwgbmwsIHJlc3VsdCA9IFtd
			OwogICAgd2hpbGUgKChubCA9IHN0cmluZy5pbmRleE9mKCJcbiIsIHBvcykpID4gLTEpIHsKICAg
			ICAgcmVzdWx0LnB1c2goc3RyaW5nLnNsaWNlKHBvcywgc3RyaW5nLmNoYXJBdChubC0xKSA9PSAi
			XHIiID8gbmwgLSAxIDogbmwpKTsKICAgICAgcG9zID0gbmwgKyAxOwogICAgfQogICAgcmVzdWx0
			LnB1c2goc3RyaW5nLnNsaWNlKHBvcykpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9IDogZnVuY3Rp
			b24oc3RyaW5nKXtyZXR1cm4gc3RyaW5nLnNwbGl0KC9ccj9cbi8pO307CiAgQ29kZU1pcnJvci5z
			cGxpdExpbmVzID0gc3BsaXRMaW5lczsKCiAgdmFyIGhhc1NlbGVjdGlvbiA9IHdpbmRvdy5nZXRT
			ZWxlY3Rpb24gPyBmdW5jdGlvbih0ZSkgewogICAgdHJ5IHsgcmV0dXJuIHRlLnNlbGVjdGlvblN0
			YXJ0ICE9IHRlLnNlbGVjdGlvbkVuZDsgfQogICAgY2F0Y2goZSkgeyByZXR1cm4gZmFsc2U7IH0K
			ICB9IDogZnVuY3Rpb24odGUpIHsKICAgIHRyeSB7dmFyIHJhbmdlID0gdGUub3duZXJEb2N1bWVu
			dC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTt9CiAgICBjYXRjaChlKSB7fQogICAgaWYgKCFyYW5n
			ZSB8fCByYW5nZS5wYXJlbnRFbGVtZW50KCkgIT0gdGUpIHJldHVybiBmYWxzZTsKICAgIHJldHVy
			biByYW5nZS5jb21wYXJlRW5kUG9pbnRzKCJTdGFydFRvRW5kIiwgcmFuZ2UpICE9IDA7CiAgfTsK
			CiAgQ29kZU1pcnJvci5kZWZpbmVNb2RlKCJudWxsIiwgZnVuY3Rpb24oKSB7CiAgICByZXR1cm4g
			e3Rva2VuOiBmdW5jdGlvbihzdHJlYW0pIHtzdHJlYW0uc2tpcFRvRW5kKCk7fX07CiAgfSk7CiAg
			Q29kZU1pcnJvci5kZWZpbmVNSU1FKCJ0ZXh0L3BsYWluIiwgIm51bGwiKTsKCiAgdmFyIGtleU5h
			bWVzID0gezM6ICJFbnRlciIsIDg6ICJCYWNrc3BhY2UiLCA5OiAiVGFiIiwgMTM6ICJFbnRlciIs
			IDE2OiAiU2hpZnQiLCAxNzogIkN0cmwiLCAxODogIkFsdCIsCiAgICAgICAgICAgICAgICAgIDE5
			OiAiUGF1c2UiLCAyMDogIkNhcHNMb2NrIiwgMjc6ICJFc2MiLCAzMjogIlNwYWNlIiwgMzM6ICJQ
			YWdlVXAiLCAzNDogIlBhZ2VEb3duIiwgMzU6ICJFbmQiLAogICAgICAgICAgICAgICAgICAzNjog
			IkhvbWUiLCAzNzogIkxlZnQiLCAzODogIlVwIiwgMzk6ICJSaWdodCIsIDQwOiAiRG93biIsIDQ0
			OiAiUHJpbnRTY3JuIiwgNDU6ICJJbnNlcnQiLAogICAgICAgICAgICAgICAgICA0NjogIkRlbGV0
			ZSIsIDU5OiAiOyIsIDkxOiAiTW9kIiwgOTI6ICJNb2QiLCA5MzogIk1vZCIsIDE4NjogIjsiLCAx
			ODc6ICI9IiwgMTg4OiAiLCIsCiAgICAgICAgICAgICAgICAgIDE4OTogIi0iLCAxOTA6ICIuIiwg
			MTkxOiAiLyIsIDE5MjogImAiLCAyMTk6ICJbIiwgMjIwOiAiXFwiLCAyMjE6ICJdIiwgMjIyOiAi
			JyIsIDYzMjc2OiAiUGFnZVVwIiwKICAgICAgICAgICAgICAgICAgNjMyNzc6ICJQYWdlRG93biIs
			IDYzMjc1OiAiRW5kIiwgNjMyNzM6ICJIb21lIiwgNjMyMzQ6ICJMZWZ0IiwgNjMyMzI6ICJVcCIs
			IDYzMjM1OiAiUmlnaHQiLAogICAgICAgICAgICAgICAgICA2MzIzMzogIkRvd24iLCA2MzMwMjog
			Ikluc2VydCIsIDYzMjcyOiAiRGVsZXRlIn07CiAgQ29kZU1pcnJvci5rZXlOYW1lcyA9IGtleU5h
			bWVzOwogIChmdW5jdGlvbigpIHsKICAgIC8vIE51bWJlciBrZXlzCiAgICBmb3IgKHZhciBpID0g
			MDsgaSA8IDEwOyBpKyspIGtleU5hbWVzW2kgKyA0OF0gPSBTdHJpbmcoaSk7CiAgICAvLyBBbHBo
			YWJldGljIGtleXMKICAgIGZvciAodmFyIGkgPSA2NTsgaSA8PSA5MDsgaSsrKSBrZXlOYW1lc1tp
			XSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoaSk7CiAgICAvLyBGdW5jdGlvbiBrZXlzCiAgICBmb3Ig
			KHZhciBpID0gMTsgaSA8PSAxMjsgaSsrKSBrZXlOYW1lc1tpICsgMTExXSA9IGtleU5hbWVzW2kg
			KyA2MzIzNV0gPSAiRiIgKyBpOwogIH0pKCk7CgogIHJldHVybiBDb2RlTWlycm9yOwp9KSgpOwo=]]></Resource>
    <Resource ID="5cd10fee-6e10-5253-24ea-3edb0a87f9ec" Name="utils.js" Type="js"><![CDATA[Lyogc2VhcmNoY3Vyc29yICovCihmdW5jdGlvbigpe2Z1bmN0aW9uIFNlYXJjaEN1cnNvcihjbSxx
			dWVyeSxwb3MsY2FzZUZvbGQpe3RoaXMuYXRPY2N1cnJlbmNlPWZhbHNlO3RoaXMuY209Y207aWYo
			Y2FzZUZvbGQ9PW51bGwpY2FzZUZvbGQ9dHlwZW9mIHF1ZXJ5PT0ic3RyaW5nIiYmcXVlcnk9PXF1
			ZXJ5LnRvTG93ZXJDYXNlKCk7cG9zPXBvcz9jbS5jbGlwUG9zKHBvcyk6e2xpbmU6MCxjaDowfTt0
			aGlzLnBvcz17ZnJvbTpwb3MsdG86cG9zfTtpZih0eXBlb2YgcXVlcnkhPSJzdHJpbmciKXRoaXMu
			bWF0Y2hlcz1mdW5jdGlvbihyZXZlcnNlLHBvcyl7aWYocmV2ZXJzZSl7dmFyIGxpbmU9Y20uZ2V0
			TGluZShwb3MubGluZSkuc2xpY2UoMCxwb3MuY2gpLG1hdGNoPWxpbmUubWF0Y2gocXVlcnkpLHN0
			YXJ0PTA7d2hpbGUobWF0Y2gpe3ZhciBpbmQ9bGluZS5pbmRleE9mKG1hdGNoWzBdKTtzdGFydCs9
			aW5kO2xpbmU9bGluZS5zbGljZShpbmQrMSk7dmFyIG5ld21hdGNoPWxpbmUubWF0Y2gocXVlcnkp
			O2lmKG5ld21hdGNoKW1hdGNoPSBuZXdtYXRjaDtlbHNlIGJyZWFrO3N0YXJ0Kyt9fWVsc2UgdmFy
			IGxpbmU9Y20uZ2V0TGluZShwb3MubGluZSkuc2xpY2UocG9zLmNoKSxtYXRjaD1saW5lLm1hdGNo
			KHF1ZXJ5KSxzdGFydD1tYXRjaCYmcG9zLmNoK2xpbmUuaW5kZXhPZihtYXRjaFswXSk7aWYobWF0
			Y2gpcmV0dXJue2Zyb206e2xpbmU6cG9zLmxpbmUsY2g6c3RhcnR9LHRvOntsaW5lOnBvcy5saW5l
			LGNoOnN0YXJ0K21hdGNoWzBdLmxlbmd0aH0sbWF0Y2g6bWF0Y2h9fTtlbHNle2lmKGNhc2VGb2xk
			KXF1ZXJ5PXF1ZXJ5LnRvTG93ZXJDYXNlKCk7dmFyIGZvbGQ9Y2FzZUZvbGQ/ZnVuY3Rpb24oc3Ry
			KXtyZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCl9OmZ1bmN0aW9uKHN0cil7cmV0dXJuIHN0cn07dmFy
			IHRhcmdldD1xdWVyeS5zcGxpdCgiXG4iKTtpZih0YXJnZXQubGVuZ3RoPT0xKXRoaXMubWF0Y2hl
			cz1mdW5jdGlvbihyZXZlcnNlLHBvcyl7dmFyIGxpbmU9Zm9sZChjbS5nZXRMaW5lKHBvcy5saW5l
			KSksbGVuPXF1ZXJ5Lmxlbmd0aCwgbWF0Y2g7aWYocmV2ZXJzZT9wb3MuY2g+PWxlbiYmKG1hdGNo
			PWxpbmUubGFzdEluZGV4T2YocXVlcnkscG9zLmNoLWxlbikpIT0tMToobWF0Y2g9bGluZS5pbmRl
			eE9mKHF1ZXJ5LHBvcy5jaCkpIT0tMSlyZXR1cm57ZnJvbTp7bGluZTpwb3MubGluZSxjaDptYXRj
			aH0sdG86e2xpbmU6cG9zLmxpbmUsY2g6bWF0Y2grbGVufX19O2Vsc2UgdGhpcy5tYXRjaGVzPWZ1
			bmN0aW9uKHJldmVyc2UscG9zKXt2YXIgbG49cG9zLmxpbmUsaWR4PXJldmVyc2U/dGFyZ2V0Lmxl
			bmd0aC0xOjAsbWF0Y2g9dGFyZ2V0W2lkeF0sbGluZT1mb2xkKGNtLmdldExpbmUobG4pKTt2YXIg
			b2Zmc2V0QT1yZXZlcnNlP2xpbmUuaW5kZXhPZihtYXRjaCkrbWF0Y2gubGVuZ3RoOmxpbmUubGFz
			dEluZGV4T2YobWF0Y2gpO2lmKHJldmVyc2U/b2Zmc2V0QT49cG9zLmNofHxvZmZzZXRBIT1tYXRj
			aC5sZW5ndGg6b2Zmc2V0QTw9cG9zLmNofHxvZmZzZXRBIT1saW5lLmxlbmd0aC1tYXRjaC5sZW5n
			dGgpcmV0dXJuOyBmb3IoOzspe2lmKHJldmVyc2U/IWxuOmxuPT1jbS5saW5lQ291bnQoKS0xKXJl
			dHVybjtsaW5lPWZvbGQoY20uZ2V0TGluZShsbis9cmV2ZXJzZT8tMToxKSk7bWF0Y2g9dGFyZ2V0
			W3JldmVyc2U/LS1pZHg6KytpZHhdO2lmKGlkeD4wJiZpZHg8dGFyZ2V0Lmxlbmd0aC0xKWlmKGxp
			bmUhPW1hdGNoKXJldHVybjtlbHNlIGNvbnRpbnVlO3ZhciBvZmZzZXRCPXJldmVyc2U/bGluZS5s
			YXN0SW5kZXhPZihtYXRjaCk6bGluZS5pbmRleE9mKG1hdGNoKSttYXRjaC5sZW5ndGg7aWYocmV2
			ZXJzZT9vZmZzZXRCIT1saW5lLmxlbmd0aC1tYXRjaC5sZW5ndGg6b2Zmc2V0QiE9bWF0Y2gubGVu
			Z3RoKXJldHVybjt2YXIgc3RhcnQ9e2xpbmU6cG9zLmxpbmUsY2g6b2Zmc2V0QX0sZW5kPXtsaW5l
			OmxuLGNoOm9mZnNldEJ9O3JldHVybntmcm9tOnJldmVyc2U/ZW5kOnN0YXJ0LHRvOnJldmVyc2U/
			c3RhcnQ6ZW5kfX19fX1TZWFyY2hDdXJzb3IucHJvdG90eXBlPXtmaW5kTmV4dDpmdW5jdGlvbigp
			e3JldHVybiB0aGlzLmZpbmQoZmFsc2UpfSwgZmluZFByZXZpb3VzOmZ1bmN0aW9uKCl7cmV0dXJu
			IHRoaXMuZmluZCh0cnVlKX0sZmluZDpmdW5jdGlvbihyZXZlcnNlKXt2YXIgc2VsZj10aGlzLHBv
			cz10aGlzLmNtLmNsaXBQb3MocmV2ZXJzZT90aGlzLnBvcy5mcm9tOnRoaXMucG9zLnRvKTtmdW5j
			dGlvbiBzYXZlUG9zQW5kRmFpbChsaW5lKXt2YXIgcG9zPXtsaW5lOmxpbmUsY2g6MH07c2VsZi5w
			b3M9e2Zyb206cG9zLHRvOnBvc307c2VsZi5hdE9jY3VycmVuY2U9ZmFsc2U7cmV0dXJuIGZhbHNl
			fWZvcig7Oyl7aWYodGhpcy5wb3M9dGhpcy5tYXRjaGVzKHJldmVyc2UscG9zKSl7dGhpcy5hdE9j
			Y3VycmVuY2U9dHJ1ZTtyZXR1cm4gdGhpcy5wb3MubWF0Y2h8fHRydWV9aWYocmV2ZXJzZSl7aWYo
			IXBvcy5saW5lKXJldHVybiBzYXZlUG9zQW5kRmFpbCgwKTtwb3M9e2xpbmU6cG9zLmxpbmUtMSxj
			aDp0aGlzLmNtLmdldExpbmUocG9zLmxpbmUtMSkubGVuZ3RofX1lbHNle3ZhciBtYXhMaW5lPXRo
			aXMuY20ubGluZUNvdW50KCk7IGlmKHBvcy5saW5lPT1tYXhMaW5lLTEpcmV0dXJuIHNhdmVQb3NB
			bmRGYWlsKG1heExpbmUpO3Bvcz17bGluZTpwb3MubGluZSsxLGNoOjB9fX19LGZyb206ZnVuY3Rp
			b24oKXtpZih0aGlzLmF0T2NjdXJyZW5jZSlyZXR1cm4gdGhpcy5wb3MuZnJvbX0sdG86ZnVuY3Rp
			b24oKXtpZih0aGlzLmF0T2NjdXJyZW5jZSlyZXR1cm4gdGhpcy5wb3MudG99LHJlcGxhY2U6ZnVu
			Y3Rpb24obmV3VGV4dCl7dmFyIHNlbGY9dGhpcztpZih0aGlzLmF0T2NjdXJyZW5jZSlzZWxmLnBv
			cy50bz10aGlzLmNtLnJlcGxhY2VSYW5nZShuZXdUZXh0LHNlbGYucG9zLmZyb20sc2VsZi5wb3Mu
			dG8pfX07Q29kZU1pcnJvci5kZWZpbmVFeHRlbnNpb24oImdldFNlYXJjaEN1cnNvciIsZnVuY3Rp
			b24ocXVlcnkscG9zLGNhc2VGb2xkKXtyZXR1cm4gbmV3IFNlYXJjaEN1cnNvcih0aGlzLHF1ZXJ5
			LHBvcyxjYXNlRm9sZCl9KX0pKCk7Ci8qIG1hdGNoLWhpZ2hsaWdodGVyICovCihmdW5jdGlvbigp
			e3ZhciBERUZBVUxUX01JTl9DSEFSUz0yO2Z1bmN0aW9uIE1hdGNoSGlnaGxpZ2h0U3RhdGUoKXt0
			aGlzLm1hcmtlZD1bXX1mdW5jdGlvbiBnZXRNYXRjaEhpZ2hsaWdodFN0YXRlKGNtKXtyZXR1cm4g
			Y20uX21hdGNoSGlnaGxpZ2h0U3RhdGV8fChjbS5fbWF0Y2hIaWdobGlnaHRTdGF0ZT1uZXcgTWF0
			Y2hIaWdobGlnaHRTdGF0ZSl9ZnVuY3Rpb24gY2xlYXJNYXJrcyhjbSl7dmFyIHN0YXRlPWdldE1h
			dGNoSGlnaGxpZ2h0U3RhdGUoY20pO2Zvcih2YXIgaT0wO2k8c3RhdGUubWFya2VkLmxlbmd0aDsr
			K2kpc3RhdGUubWFya2VkW2ldLmNsZWFyKCk7c3RhdGUubWFya2VkPVtdfWZ1bmN0aW9uIG1hcmtE
			b2N1bWVudChjbSxjbGFzc05hbWUsbWluQ2hhcnMpe2NsZWFyTWFya3MoY20pO21pbkNoYXJzPXR5
			cGVvZiBtaW5DaGFycyE9PSJ1bmRlZmluZWQiP21pbkNoYXJzOkRFRkFVTFRfTUlOX0NIQVJTO2lm
			KGNtLnNvbWV0aGluZ1NlbGVjdGVkKCkmJmNtLmdldFNlbGVjdGlvbigpLmxlbmd0aD49IG1pbkNo
			YXJzKXt2YXIgc3RhdGU9Z2V0TWF0Y2hIaWdobGlnaHRTdGF0ZShjbSk7dmFyIHF1ZXJ5PWNtLmdl
			dFNlbGVjdGlvbigpO2NtLm9wZXJhdGlvbihmdW5jdGlvbigpe2lmKGNtLmxpbmVDb3VudCgpPDJF
			Mylmb3IodmFyIGN1cnNvcj1jbS5nZXRTZWFyY2hDdXJzb3IocXVlcnkpO2N1cnNvci5maW5kTmV4
			dCgpOylpZighKGN1cnNvci5mcm9tKCkubGluZT09PWNtLmdldEN1cnNvcih0cnVlKS5saW5lJiZj
			dXJzb3IuZnJvbSgpLmNoPT09Y20uZ2V0Q3Vyc29yKHRydWUpLmNoKSlzdGF0ZS5tYXJrZWQucHVz
			aChjbS5tYXJrVGV4dChjdXJzb3IuZnJvbSgpLGN1cnNvci50bygpLGNsYXNzTmFtZSkpfSl9fUNv
			ZGVNaXJyb3IuZGVmaW5lRXh0ZW5zaW9uKCJtYXRjaEhpZ2hsaWdodCIsZnVuY3Rpb24oY2xhc3NO
			YW1lLG1pbkNoYXJzKXttYXJrRG9jdW1lbnQodGhpcyxjbGFzc05hbWUsbWluQ2hhcnMpfSl9KSgp
			Owo=]]></Resource>
    <Resource ID="637e54fd-1431-0dee-2e82-f223db960509" Name="buttons" Type="gif"><![CDATA[R0lGODlhAAMYANU7AGOR1s/Tz/7+/vjumv8lJbTE5P37BoiGg6usr3t7esHR65aLW2CQPoqw6uGm
			DT9gp+3RaqWzzZaszc/h+AAAAEhGSC9TmP9oaP8A/2aBnE+C1OTq8ZCgsy8vMISUrbXOjN7d3om8
			YEFrwfDz+DFHYVJSULSoi6K96iF3EYu0jdKkXZ99KjY8Rnif4lBfdJmYlh8+h2JhYnVjSUA+PG1v
			c7++wCAcIBARED8vHwD//wAA/////wAAAAAAAAAAAAAAACH5BAEAADsALAAAAAAAAxgAAAb/wJ1w
			SCwaj8ikcslsOp/QqHRKrVqv2Kx2y+16v+CweEwum8/otHrNbrvf8Lh8Tq/b7/i8fs/v+/+AgYKD
			hIWGh4iJiouMjY6PkJGSURRXlZOYmZpPCi0aGgAAGg1OBaanpxERCputrmUKAAVVGxqvkhMnJwWs
			ThsKBScTG2cKERLIycoSvWICJxsjpBMNpFABCEMg2UunNaoBVybj4VPjJuVPGiPsIxsbDQACTAUC
			9vf3EiTNkyM1B3U+SVBCoaDBg5QOKhSjcCGUhgibSIBY0AUTDxpgCKG4RIOIIRQvJUEYkqDBHSWR
			hHSocuXJkS4Lmoz55EQDmzcLEFuyIVi1/2r8xESI1q4ouw0RlPg78OIAiBFMD9QYwalBLnjWoIDw
			ACJahBr08EXIEJRJgHMLBgyAIGPBgQXpkJwdl3Zt27dxk6ybwHfCCGoDu+EbLKHGviY3Eiu2gWBn
			lA6QIT9RfGMH5ScgSrCwo+ABQZAiRToJHZohaJCUDKguqNqAaCUZbAjhQEH2DhY06MEIPGXDg7K3
			ClndUSCeiOMadtE74fGBCAAtWE34ODNlEgnSJKT4wD2FB+gjeBsR8OLFBhA1yoNAX36eEwUNBFSj
			wmHoBhp5j9TLVyPDrCcmqDXACwMk8IEMMkDggAxLBKgWgQYiqCCDTOzVVzS1MBHBYPhwQP/Ch00E
			YEMJldVgQwfcRAHCDDOAcE0JJYQTAIz5JTFCDJXR0RlwqG1U2kOnbYREDBVUkMAOCczQQQlIzjBa
			kChB4VprrK1mQBM0nCCECxRYtAMHHpAhggUWWDHCCQD4CJFeGkwA2potcfTESg9Zd0RMMinRgE8A
			HJeBBg8kxwRzFvx5HHTBUAcGdg1IwF0IkIbgQQvhJVFDAiAcUEIMLyQQQwkHIJAAWEr909SRUDU1
			FRQRvBBAAS6QqsSGAQQwAQen4PSfEgiotcAHa0GgQgkrLLhErwP8GuywxVKohAAW8qWAAiNo4F4S
			G3J4DwgBkODEDTgKcUMJHUxRQwmyPlH/5BDrQpFAB45BQUMM3JyboxPz1kviDiI8UGYTeVryGhI2
			VDBEB5UcYMPATAQcRWurUQDxlVAszMEfZ4qyk51FTPBJA8RwHFwSLZTc5wMSTNDZKEw0ACgrEpAJ
			XQueVSfndWduFymkGVAqXhFNBTBCBTUEUAMCFYwQAFPPlndeeju8sF56L1yr4QsIZBBDE9ketZ89
			DYigpRIOLkADgmgX6yTZvp5Nw5+fCKTE0tFKW20M6RqRrT018G2P0t4iFq6JHbwwRQxbSwHjEIsv
			MSOoI9BgQwxOCREAkTUSgcAMRNcwAwWGP7F555+HXmedDjmcRMEHX1ICw0uo/sTEVbYG/8UJFNxb
			CgA8NiH3FHH7+y8UwZM5BZ6wq+mSzSITgfwSokCXwdj8sryEyzUTp0ELogz/BaM679zzBj9rjt8B
			RcJY5AEB0JDiEZdmumk484Iqat5KFJABDS7kxoQEAqiBCi5wgRPgowUFsAD1jkAgtSjIARB0gNqW
			0MC1OGAdRaGGPI4AAlftZQN98YsGaoAfbN2jBgSwBwH6BrhvxaADN7DBDWgQLydcDn9NaNwOdJiE
			GBgtRgmYXAkSEIAXlKACPEQC0sgFOiksEWGmO92cduCBS1gxeURgnRAQJoTXSUEmCQijGMWoBNpJ
			DGJFMhgTMkCBzUBBFBpBCZyU0Bnlsf/ECOTzl4vkGBElTMBfD5hFQ0ZGPBFsj3dDMOQCkcCc7MHH
			E2OK3c2WgJ0TaGdnIcgAyMqnDRpgDQEvoEECysOAUqZACUGjwT12YA8QEJFpT+CfC5Lyv7+B0IDV
			mAAALOAvVDpQQWDyQAb256UkNBACCqqbAADDwABsYIzQTMAGSGjCAK6QbyscAQgCx4QYligxUXSC
			DWwjhcQMwZw8uRy6aFCuAFTgBTFgzA72SEGE+U8KL7AnFRx2xyJUsQh56qdlEFaQG7iONC9pyQ5o
			QICGJiAHED1SEsyIRgFsoF1KYAEFMhCFAuymCjsyEwc4yseE6iUD9BykJCfZsObBhKX/AMVTR44z
			pn8pQJGDepkQaEqmOC7qTJeMVAY4sMkkCAAEMaCBUotGgxB8IAAhYMAplYifBKRvnkUiovve4wlP
			bG+RRuCAAAhIwPjYUgEx8yUyIShWW7qgmAwMFgTXgYO61tUdtjDCAewhNKOwo28CuKcRACiAa56Q
			AC1EjAzFdaIoIMAG4ZzMvdCphHFa9rKYHScTPGeQyG72cwXxbEtjisV/Og+hR7jB2nbAxR2KxqR3
			qkQCGkqAh0Z0CRCrXQUsig01KsGgJyDAEIQ7hn55j5CMiAAonCAK6rmpCbqIrnRxMh+c6UICCVgA
			AxbQgmqQLwoM4I4AIIWCJIDAkwgA/2VuRpneUNKTjqJ4gHM8EiYlcOAvIABGC+QTik9E4LhAWysE
			PSAAVSBgAi4oADeN8AIBOwAAI8DBBCSMA2rltQgJsAcCuFWrDm9jBAJI3BEIi0LAlngC3WpCDVRb
			iRVDVivjzBwTKnADsKx4tUmI0Q5mEMrKiAgBkssGk5RQA4SlN7Q7+B2RjYwAJCfECFik4mv4iYQb
			lEsIC+vilEcLzQMkwMtzogA7drsBbFh1CVW8AW13sOY9kASmp5WJS0tKp5cuz851jtOdo/AJsDLy
			E1I4wbQGbYrptkAJ2GFAVFegAhWsoJQM+C4UwnuPD5QXCUdN6lKRpNR5gcBqJPNIof80YAwAF8FD
			H/qQPATwF2BIwKdHOICDCewOlbmABBXAMRFk/cAL/mXCdrswEYhYRPTU4NjHXhq3dE2EtlqT1Svk
			S4pbepAbmOcJmZ0CUg0Sg/ciAYklGBGJOsApIbygAuRewsK40eRLFCB7q6MAu2U32iiYFkq/vfIO
			sryDCkSZtAU5QGsOgIKCS3SlBSGzmX377YPQtqG0TIL+diWFT8AbuYlQAHOEXaHk9O4I0f1JNUpG
			8kPjrMMB+IAKUC7pJ6AAUuMNwaWZUDIByKLiwLCAAjRQAH1EQR6iiNurlbCAXjsgAyNAgAQQwIEa
			cIADOEBC0SPo62FImC/VOsKo/mH/NGQnWypFToKz/WHRGuRXAdPG+BQ6Q3EwqLQJVQyoQIlArg7k
			RnKqjaeVqZCA1iSg4Cg4uBOKVGZRMbwJL6Dt+5CQARHEEc5F4Lkd+6hnOSZEzv+O8xwBNufYQn7y
			n0dCAfwLBV3e/AzYqdVTUV6rljshBYr+QFSnugTubaAFuvSzEkj9XxAA4AEk0LcTRDACVRh46Ek4
			ANWPDkJgFEAVUEeC8qluoatb+Ag0ONqpElC/XLvPRGLHB4hBGIBppV0PnS+DcdX+hC97+QBe/jIU
			KjAAClTA8MwrCG0JqJuLVSGt7JcIxfFcUaALaBABfmUUSCEFKQB4JtAE3OMmEHZ7/6AGPf7iLRHw
			If73BMbVUzDwgXOzADJQAXXlArfydCgYfUcQACJIgjiwF3aFdRwnBO6DAKHidceGACjyAuQUVuJn
			UShmfgsWgETYBQmgA0iYABiwhIK3BPSnFvZ3eE2geATAf2LQLx9HCZZQhJPgasugDKvQBxEAfBvI
			Bi5gV2hYV8xVFO8QDWnCYAlQAhDWDm04AgDQAe8UfgHALXy4h344hFwYiFZwAEioAwewhBjQhEnw
			hAIihU2AAASQFAhwAaIliJZ4iUUYCpq4iW+IBJzIiUyAaqk2iqOIiaYYBWEEf1+2ioPHObnmiE6Q
			Iot3irRYi7Z4i7iYi7q4i7zYixW++IvAGIzCOIzEWIzGeIzImIxZEAQAOw==]]></Resource>
    <Resource ID="94ed1ed3-118f-9ce1-8ad2-994ab5a03518" Name="toolbar" Type="gif"><![CDATA[R0lGODlhAQAaAKIAAOvr6/Ly8v///5mZme3t7QAAAAAAAAAAACH5BAAAAAAALAAAAAABABoAAAMJ
			KLHcQSDKCcRIADs=]]></Resource>
    <Resource ID="95be4415-7ccb-b87b-f50f-77c8485f6bd9" Name="_for_vdom.js" Type="js"><![CDATA[]]></Resource>
    <Resource ID="a7280e78-723d-4c0e-07b3-fb4b16697f8a" Name="Codeeditor_16x16_.png" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
			bWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdp
			bj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6
			eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0
			NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJo
			dHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlw
			dGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAv
			IiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RS
			ZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpD
			cmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNl
			SUQ9InhtcC5paWQ6ODhCMTE2RkQ3QkVBMTFFMkFENUZEQjgwQTA5OENCNjciIHhtcE1NOkRvY3Vt
			ZW50SUQ9InhtcC5kaWQ6ODhCMTE2RkU3QkVBMTFFMkFENUZEQjgwQTA5OENCNjciPiA8eG1wTU06
			RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo4OEIxMTZGQjdCRUExMUUyQUQ1
			RkRCODBBMDk4Q0I2NyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo4OEIxMTZGQzdCRUExMUUy
			QUQ1RkRCODBBMDk4Q0I2NyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1w
			bWV0YT4gPD94cGFja2V0IGVuZD0iciI/Ptr5jzAAAADRSURBVHjaYpw0aZInAwPDXCCWZCANPAfi
			ZCYyNTNA9cxlgWmePHkySbpzc3PBhjAxUAhYcMr4BDP8V1AGMxkf3GVg2LIWqzLsLrB3ZfjvH8bA
			+O0rGIPYIDHiXCAsyvA/t4yB4cBuBoZ5UyEuIMsLyABqEPFeIAEQZ4CKOthrxBnw9jUDw5WLDAyy
			ChCNQPw/NZ+BwdKO+DBgnNwJDMhyhv95FRCBd28ZGI4fIiEQga5gbCihYhgQiEZQrpKEpm1SwQuQ
			C1JADDI0PwVlZ4AAAwCgjTPF4WOwaQAAAABJRU5ErkJggg==]]></Resource>
    <Resource ID="c43c7089-459d-acc2-f636-fb4b23f22d5b" Name="Codeeditor_16x16_.png" Type="png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJ
			bWFnZVJlYWR5ccllPAAAAyJpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdp
			bj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6
			eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0
			NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJo
			dHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlw
			dGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAv
			IiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RS
			ZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpD
			cmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoV2luZG93cykiIHhtcE1NOkluc3RhbmNl
			SUQ9InhtcC5paWQ6ODhCMTE2RkQ3QkVBMTFFMkFENUZEQjgwQTA5OENCNjciIHhtcE1NOkRvY3Vt
			ZW50SUQ9InhtcC5kaWQ6ODhCMTE2RkU3QkVBMTFFMkFENUZEQjgwQTA5OENCNjciPiA8eG1wTU06
			RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo4OEIxMTZGQjdCRUExMUUyQUQ1
			RkRCODBBMDk4Q0I2NyIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo4OEIxMTZGQzdCRUExMUUy
			QUQ1RkRCODBBMDk4Q0I2NyIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1w
			bWV0YT4gPD94cGFja2V0IGVuZD0iciI/Ptr5jzAAAADRSURBVHjaYpw0aZInAwPDXCCWZCANPAfi
			ZCYyNTNA9cxlgWmePHkySbpzc3PBhjAxUAhYcMr4BDP8V1AGMxkf3GVg2LIWqzLsLrB3ZfjvH8bA
			+O0rGIPYIDHiXCAsyvA/t4yB4cBuBoZ5UyEuIMsLyABqEPFeIAEQZ4CKOthrxBnw9jUDw5WLDAyy
			ChCNQPw/NZ+BwdKO+DBgnNwJDMhyhv95FRCBd28ZGI4fIiEQga5gbCihYhgQiEZQrpKEpm1SwQuQ
			C1JADDI0PwVlZ4AAAwCgjTPF4WOwaQAAAABJRU5ErkJggg==]]></Resource>
    <Resource ID="25634bc0-f478-460c-bdcd-29c38d0c3f6c" Name="dialog.css" Type="css"><![CDATA[LkNvZGVNaXJyb3ItZGlhbG9nIHsNCiAgcG9zaXRpb246IGFic29sdXRlOw0KICBsZWZ0OiAwOyByaWdodDogMDsNCiAgYmFja2dyb3VuZDogaW5oZXJpdDsNCiAgei1pbmRleDogMTU7DQogIHBhZGRpbmc6IC4xZW0gLjhlbTsNCiAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgY29sb3I6IGluaGVyaXQ7DQp9DQoNCi5Db2RlTWlycm9yLWRpYWxvZy10b3Agew0KICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VlZTsNCiAgdG9wOiAwOw0KfQ0KDQouQ29kZU1pcnJvci1kaWFsb2ctYm90dG9tIHsNCiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNlZWU7DQogIGJvdHRvbTogMDsNCn0NCg0KLkNvZGVNaXJyb3ItZGlhbG9nIGlucHV0IHsNCiAgYm9yZGVyOiBub25lOw0KICBvdXRsaW5lOiBub25lOw0KICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsNCiAgd2lkdGg6IDIwZW07DQogIGNvbG9yOiBpbmhlcml0Ow0KICBmb250LWZhbWlseTogbW9ub3NwYWNlOw0KfQ0KDQouQ29kZU1pcnJvci1kaWFsb2cgYnV0dG9uIHsNCiAgZm9udC1zaXplOiA3MCU7DQp9]]></Resource>
    <Resource ID="618a76f6-eb25-4afe-bde0-f1b991b914e4" Name="activeline.js" Type="js"><![CDATA[Ly8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnMNCi8vIERpc3RyaWJ1dGVkIHVuZGVyIGFuIE1JVCBsaWNlbnNlOiBodHRwczovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0UNCg0KKGZ1bmN0aW9uKG1vZCkgew0KICBpZiAodHlwZW9mIGV4cG9ydHMgPT0gIm9iamVjdCIgJiYgdHlwZW9mIG1vZHVsZSA9PSAib2JqZWN0IikgLy8gQ29tbW9uSlMNCiAgICBtb2QocmVxdWlyZSgiLi4vLi4vbGliL2NvZGVtaXJyb3IiKSk7DQogIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSAvLyBBTUQNCiAgICBkZWZpbmUoWyIuLi8uLi9saWIvY29kZW1pcnJvciJdLCBtb2QpOw0KICBlbHNlIC8vIFBsYWluIGJyb3dzZXIgZW52DQogICAgbW9kKENvZGVNaXJyb3IpOw0KfSkoZnVuY3Rpb24oQ29kZU1pcnJvcikgew0KICAidXNlIHN0cmljdCI7DQogIHZhciBXUkFQX0NMQVNTID0gIkNvZGVNaXJyb3ItYWN0aXZlbGluZSI7DQogIHZhciBCQUNLX0NMQVNTID0gIkNvZGVNaXJyb3ItYWN0aXZlbGluZS1iYWNrZ3JvdW5kIjsNCiAgdmFyIEdVVFRfQ0xBU1MgPSAiQ29kZU1pcnJvci1hY3RpdmVsaW5lLWd1dHRlciI7DQoNCiAgQ29kZU1pcnJvci5kZWZpbmVPcHRpb24oInN0eWxlQWN0aXZlTGluZSIsIGZhbHNlLCBmdW5jdGlvbihjbSwgdmFsLCBvbGQpIHsNCiAgICB2YXIgcHJldiA9IG9sZCA9PSBDb2RlTWlycm9yLkluaXQgPyBmYWxzZSA6IG9sZDsNCiAgICBpZiAodmFsID09IHByZXYpIHJldHVybg0KICAgIGlmIChwcmV2KSB7DQogICAgICBjbS5vZmYoImJlZm9yZVNlbGVjdGlvbkNoYW5nZSIsIHNlbGVjdGlvbkNoYW5nZSk7DQogICAgICBjbGVhckFjdGl2ZUxpbmVzKGNtKTsNCiAgICAgIGRlbGV0ZSBjbS5zdGF0ZS5hY3RpdmVMaW5lczsNCiAgICB9DQogICAgaWYgKHZhbCkgew0KICAgICAgY20uc3RhdGUuYWN0aXZlTGluZXMgPSBbXTsNCiAgICAgIHVwZGF0ZUFjdGl2ZUxpbmVzKGNtLCBjbS5saXN0U2VsZWN0aW9ucygpKTsNCiAgICAgIGNtLm9uKCJiZWZvcmVTZWxlY3Rpb25DaGFuZ2UiLCBzZWxlY3Rpb25DaGFuZ2UpOw0KICAgIH0NCiAgfSk7DQoNCiAgZnVuY3Rpb24gY2xlYXJBY3RpdmVMaW5lcyhjbSkgew0KICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY20uc3RhdGUuYWN0aXZlTGluZXMubGVuZ3RoOyBpKyspIHsNCiAgICAgIGNtLnJlbW92ZUxpbmVDbGFzcyhjbS5zdGF0ZS5hY3RpdmVMaW5lc1tpXSwgIndyYXAiLCBXUkFQX0NMQVNTKTsNCiAgICAgIGNtLnJlbW92ZUxpbmVDbGFzcyhjbS5zdGF0ZS5hY3RpdmVMaW5lc1tpXSwgImJhY2tncm91bmQiLCBCQUNLX0NMQVNTKTsNCiAgICAgIGNtLnJlbW92ZUxpbmVDbGFzcyhjbS5zdGF0ZS5hY3RpdmVMaW5lc1tpXSwgImd1dHRlciIsIEdVVFRfQ0xBU1MpOw0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIHNhbWVBcnJheShhLCBiKSB7DQogICAgaWYgKGEubGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKQ0KICAgICAgaWYgKGFbaV0gIT0gYltpXSkgcmV0dXJuIGZhbHNlOw0KICAgIHJldHVybiB0cnVlOw0KICB9DQoNCiAgZnVuY3Rpb24gdXBkYXRlQWN0aXZlTGluZXMoY20sIHJhbmdlcykgew0KICAgIHZhciBhY3RpdmUgPSBbXTsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykgew0KICAgICAgdmFyIHJhbmdlID0gcmFuZ2VzW2ldOw0KICAgICAgdmFyIG9wdGlvbiA9IGNtLmdldE9wdGlvbigic3R5bGVBY3RpdmVMaW5lIik7DQogICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAib2JqZWN0IiAmJiBvcHRpb24ubm9uRW1wdHkgPyByYW5nZS5hbmNob3IubGluZSAhPSByYW5nZS5oZWFkLmxpbmUgOiAhcmFuZ2UuZW1wdHkoKSkNCiAgICAgICAgY29udGludWUNCiAgICAgIHZhciBsaW5lID0gY20uZ2V0TGluZUhhbmRsZVZpc3VhbFN0YXJ0KHJhbmdlLmhlYWQubGluZSk7DQogICAgICBpZiAoYWN0aXZlW2FjdGl2ZS5sZW5ndGggLSAxXSAhPSBsaW5lKSBhY3RpdmUucHVzaChsaW5lKTsNCiAgICB9DQogICAgaWYgKHNhbWVBcnJheShjbS5zdGF0ZS5hY3RpdmVMaW5lcywgYWN0aXZlKSkgcmV0dXJuOw0KICAgIGNtLm9wZXJhdGlvbihmdW5jdGlvbigpIHsNCiAgICAgIGNsZWFyQWN0aXZlTGluZXMoY20pOw0KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhY3RpdmUubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgY20uYWRkTGluZUNsYXNzKGFjdGl2ZVtpXSwgIndyYXAiLCBXUkFQX0NMQVNTKTsNCiAgICAgICAgY20uYWRkTGluZUNsYXNzKGFjdGl2ZVtpXSwgImJhY2tncm91bmQiLCBCQUNLX0NMQVNTKTsNCiAgICAgICAgY20uYWRkTGluZUNsYXNzKGFjdGl2ZVtpXSwgImd1dHRlciIsIEdVVFRfQ0xBU1MpOw0KICAgICAgfQ0KICAgICAgY20uc3RhdGUuYWN0aXZlTGluZXMgPSBhY3RpdmU7DQogICAgfSk7DQogIH0NCg0KICBmdW5jdGlvbiBzZWxlY3Rpb25DaGFuZ2UoY20sIHNlbCkgew0KICAgIHVwZGF0ZUFjdGl2ZUxpbmVzKGNtLCBzZWwucmFuZ2VzKTsNCiAgfQ0KfSk7]]></Resource>
    <Resource ID="dd098de4-af7a-473b-bd3a-8087be9fc197" Name="match-highlighter.js" Type="js"><![CDATA[Ly8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnMNCi8vIERpc3RyaWJ1dGVkIHVuZGVyIGFuIE1JVCBsaWNlbnNlOiBodHRwczovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0UNCg0KLy8gSGlnaGxpZ2h0aW5nIHRleHQgdGhhdCBtYXRjaGVzIHRoZSBzZWxlY3Rpb24NCi8vDQovLyBEZWZpbmVzIGFuIG9wdGlvbiBoaWdobGlnaHRTZWxlY3Rpb25NYXRjaGVzLCB3aGljaCwgd2hlbiBlbmFibGVkLA0KLy8gd2lsbCBzdHlsZSBzdHJpbmdzIHRoYXQgbWF0Y2ggdGhlIHNlbGVjdGlvbiB0aHJvdWdob3V0IHRoZQ0KLy8gZG9jdW1lbnQuDQovLw0KLy8gVGhlIG9wdGlvbiBjYW4gYmUgc2V0IHRvIHRydWUgdG8gc2ltcGx5IGVuYWJsZSBpdCwgb3IgdG8gYQ0KLy8ge21pbkNoYXJzLCBzdHlsZSwgd29yZHNPbmx5LCBzaG93VG9rZW4sIGRlbGF5fSBvYmplY3QgdG8gZXhwbGljaXRseQ0KLy8gY29uZmlndXJlIGl0LiBtaW5DaGFycyBpcyB0aGUgbWluaW11bSBhbW91bnQgb2YgY2hhcmFjdGVycyB0aGF0IHNob3VsZCBiZQ0KLy8gc2VsZWN0ZWQgZm9yIHRoZSBiZWhhdmlvciB0byBvY2N1ciwgYW5kIHN0eWxlIGlzIHRoZSB0b2tlbiBzdHlsZSB0bw0KLy8gYXBwbHkgdG8gdGhlIG1hdGNoZXMuIFRoaXMgd2lsbCBiZSBwcmVmaXhlZCBieSAiY20tIiB0byBjcmVhdGUgYW4NCi8vIGFjdHVhbCBDU1MgY2xhc3MgbmFtZS4gSWYgd29yZHNPbmx5IGlzIGVuYWJsZWQsIHRoZSBtYXRjaGVzIHdpbGwgYmUNCi8vIGhpZ2hsaWdodGVkIG9ubHkgaWYgdGhlIHNlbGVjdGVkIHRleHQgaXMgYSB3b3JkLiBzaG93VG9rZW4sIHdoZW4gZW5hYmxlZCwNCi8vIHdpbGwgY2F1c2UgdGhlIGN1cnJlbnQgdG9rZW4gdG8gYmUgaGlnaGxpZ2h0ZWQgd2hlbiBub3RoaW5nIGlzIHNlbGVjdGVkLg0KLy8gZGVsYXkgaXMgdXNlZCB0byBzcGVjaWZ5IGhvdyBtdWNoIHRpbWUgdG8gd2FpdCwgaW4gbWlsbGlzZWNvbmRzLCBiZWZvcmUNCi8vIGhpZ2hsaWdodGluZyB0aGUgbWF0Y2hlcy4gSWYgYW5ub3RhdGVTY3JvbGxiYXIgaXMgZW5hYmxlZCwgdGhlIG9jY3VyZW5jZXMNCi8vIHdpbGwgYmUgaGlnaGxpZ2h0ZWQgb24gdGhlIHNjcm9sbGJhciB2aWEgdGhlIG1hdGNoZXNvbnNjcm9sbGJhciBhZGRvbi4NCg0KKGZ1bmN0aW9uKG1vZCkgew0KICBpZiAodHlwZW9mIGV4cG9ydHMgPT0gIm9iamVjdCIgJiYgdHlwZW9mIG1vZHVsZSA9PSAib2JqZWN0IikgLy8gQ29tbW9uSlMNCiAgICBtb2QocmVxdWlyZSgiLi4vLi4vbGliL2NvZGVtaXJyb3IiKSwgcmVxdWlyZSgiLi9tYXRjaGVzb25zY3JvbGxiYXIiKSk7DQogIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSAvLyBBTUQNCiAgICBkZWZpbmUoWyIuLi8uLi9saWIvY29kZW1pcnJvciIsICIuL21hdGNoZXNvbnNjcm9sbGJhciJdLCBtb2QpOw0KICBlbHNlIC8vIFBsYWluIGJyb3dzZXIgZW52DQogICAgbW9kKENvZGVNaXJyb3IpOw0KfSkoZnVuY3Rpb24oQ29kZU1pcnJvcikgew0KICAidXNlIHN0cmljdCI7DQoNCiAgdmFyIGRlZmF1bHRzID0gew0KICAgIHN0eWxlOiAibWF0Y2hoaWdobGlnaHQiLA0KICAgIG1pbkNoYXJzOiAyLA0KICAgIGRlbGF5OiAxMDAsDQogICAgd29yZHNPbmx5OiBmYWxzZSwNCiAgICBhbm5vdGF0ZVNjcm9sbGJhcjogZmFsc2UsDQogICAgc2hvd1Rva2VuOiBmYWxzZSwNCiAgICB0cmltOiB0cnVlDQogIH0NCg0KICBmdW5jdGlvbiBTdGF0ZShvcHRpb25zKSB7DQogICAgdGhpcy5vcHRpb25zID0ge30NCiAgICBmb3IgKHZhciBuYW1lIGluIGRlZmF1bHRzKQ0KICAgICAgdGhpcy5vcHRpb25zW25hbWVdID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IG9wdGlvbnMgOiBkZWZhdWx0cylbbmFtZV0NCiAgICB0aGlzLm92ZXJsYXkgPSB0aGlzLnRpbWVvdXQgPSBudWxsOw0KICAgIHRoaXMubWF0Y2hlc29uc2Nyb2xsID0gbnVsbDsNCiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlOw0KICB9DQoNCiAgQ29kZU1pcnJvci5kZWZpbmVPcHRpb24oImhpZ2hsaWdodFNlbGVjdGlvbk1hdGNoZXMiLCBmYWxzZSwgZnVuY3Rpb24oY20sIHZhbCwgb2xkKSB7DQogICAgaWYgKG9sZCAmJiBvbGQgIT0gQ29kZU1pcnJvci5Jbml0KSB7DQogICAgICByZW1vdmVPdmVybGF5KGNtKTsNCiAgICAgIGNsZWFyVGltZW91dChjbS5zdGF0ZS5tYXRjaEhpZ2hsaWdodGVyLnRpbWVvdXQpOw0KICAgICAgY20uc3RhdGUubWF0Y2hIaWdobGlnaHRlciA9IG51bGw7DQogICAgICBjbS5vZmYoImN1cnNvckFjdGl2aXR5IiwgY3Vyc29yQWN0aXZpdHkpOw0KICAgICAgY20ub2ZmKCJmb2N1cyIsIG9uRm9jdXMpDQogICAgfQ0KICAgIGlmICh2YWwpIHsNCiAgICAgIHZhciBzdGF0ZSA9IGNtLnN0YXRlLm1hdGNoSGlnaGxpZ2h0ZXIgPSBuZXcgU3RhdGUodmFsKTsNCiAgICAgIGlmIChjbS5oYXNGb2N1cygpKSB7DQogICAgICAgIHN0YXRlLmFjdGl2ZSA9IHRydWUNCiAgICAgICAgaGlnaGxpZ2h0TWF0Y2hlcyhjbSkNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIGNtLm9uKCJmb2N1cyIsIG9uRm9jdXMpDQogICAgICB9DQogICAgICBjbS5vbigiY3Vyc29yQWN0aXZpdHkiLCBjdXJzb3JBY3Rpdml0eSk7DQogICAgfQ0KICB9KTsNCg0KICBmdW5jdGlvbiBjdXJzb3JBY3Rpdml0eShjbSkgew0KICAgIHZhciBzdGF0ZSA9IGNtLnN0YXRlLm1hdGNoSGlnaGxpZ2h0ZXI7DQogICAgaWYgKHN0YXRlLmFjdGl2ZSB8fCBjbS5oYXNGb2N1cygpKSBzY2hlZHVsZUhpZ2hsaWdodChjbSwgc3RhdGUpDQogIH0NCg0KICBmdW5jdGlvbiBvbkZvY3VzKGNtKSB7DQogICAgdmFyIHN0YXRlID0gY20uc3RhdGUubWF0Y2hIaWdobGlnaHRlcg0KICAgIGlmICghc3RhdGUuYWN0aXZlKSB7DQogICAgICBzdGF0ZS5hY3RpdmUgPSB0cnVlDQogICAgICBzY2hlZHVsZUhpZ2hsaWdodChjbSwgc3RhdGUpDQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gc2NoZWR1bGVIaWdobGlnaHQoY20sIHN0YXRlKSB7DQogICAgY2xlYXJUaW1lb3V0KHN0YXRlLnRpbWVvdXQpOw0KICAgIHN0YXRlLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge2hpZ2hsaWdodE1hdGNoZXMoY20pO30sIHN0YXRlLm9wdGlvbnMuZGVsYXkpOw0KICB9DQoNCiAgZnVuY3Rpb24gYWRkT3ZlcmxheShjbSwgcXVlcnksIGhhc0JvdW5kYXJ5LCBzdHlsZSkgew0KICAgIHZhciBzdGF0ZSA9IGNtLnN0YXRlLm1hdGNoSGlnaGxpZ2h0ZXI7DQogICAgY20uYWRkT3ZlcmxheShzdGF0ZS5vdmVybGF5ID0gbWFrZU92ZXJsYXkocXVlcnksIGhhc0JvdW5kYXJ5LCBzdHlsZSkpOw0KICAgIGlmIChzdGF0ZS5vcHRpb25zLmFubm90YXRlU2Nyb2xsYmFyICYmIGNtLnNob3dNYXRjaGVzT25TY3JvbGxiYXIpIHsNCiAgICAgIHZhciBzZWFyY2hGb3IgPSBoYXNCb3VuZGFyeSA/IG5ldyBSZWdFeHAoKC9cdy8udGVzdChxdWVyeS5jaGFyQXQoMCkpID8gIlxcYiIgOiAiIikgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5yZXBsYWNlKC9bXFxcWy4rKj8oKXt8XiRdL2csICJcXCQmIikgKw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoL1x3Ly50ZXN0KHF1ZXJ5LmNoYXJBdChxdWVyeS5sZW5ndGggLSAxKSkgPyAiXFxiIiA6ICIiKSkgOiBxdWVyeTsNCiAgICAgIHN0YXRlLm1hdGNoZXNvbnNjcm9sbCA9IGNtLnNob3dNYXRjaGVzT25TY3JvbGxiYXIoc2VhcmNoRm9yLCBmYWxzZSwNCiAgICAgICAge2NsYXNzTmFtZTogIkNvZGVNaXJyb3Itc2VsZWN0aW9uLWhpZ2hsaWdodC1zY3JvbGxiYXIifSk7DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gcmVtb3ZlT3ZlcmxheShjbSkgew0KICAgIHZhciBzdGF0ZSA9IGNtLnN0YXRlLm1hdGNoSGlnaGxpZ2h0ZXI7DQogICAgaWYgKHN0YXRlLm92ZXJsYXkpIHsNCiAgICAgIGNtLnJlbW92ZU92ZXJsYXkoc3RhdGUub3ZlcmxheSk7DQogICAgICBzdGF0ZS5vdmVybGF5ID0gbnVsbDsNCiAgICAgIGlmIChzdGF0ZS5tYXRjaGVzb25zY3JvbGwpIHsNCiAgICAgICAgc3RhdGUubWF0Y2hlc29uc2Nyb2xsLmNsZWFyKCk7DQogICAgICAgIHN0YXRlLm1hdGNoZXNvbnNjcm9sbCA9IG51bGw7DQogICAgICB9DQogICAgfQ0KICB9DQoNCiAgZnVuY3Rpb24gaGlnaGxpZ2h0TWF0Y2hlcyhjbSkgew0KICAgIGNtLm9wZXJhdGlvbihmdW5jdGlvbigpIHsNCiAgICAgIHZhciBzdGF0ZSA9IGNtLnN0YXRlLm1hdGNoSGlnaGxpZ2h0ZXI7DQogICAgICByZW1vdmVPdmVybGF5KGNtKTsNCiAgICAgIGlmICghY20uc29tZXRoaW5nU2VsZWN0ZWQoKSAmJiBzdGF0ZS5vcHRpb25zLnNob3dUb2tlbikgew0KICAgICAgICB2YXIgcmUgPSBzdGF0ZS5vcHRpb25zLnNob3dUb2tlbiA9PT0gdHJ1ZSA/IC9bXHckXS8gOiBzdGF0ZS5vcHRpb25zLnNob3dUb2tlbjsNCiAgICAgICAgdmFyIGN1ciA9IGNtLmdldEN1cnNvcigpLCBsaW5lID0gY20uZ2V0TGluZShjdXIubGluZSksIHN0YXJ0ID0gY3VyLmNoLCBlbmQgPSBzdGFydDsNCiAgICAgICAgd2hpbGUgKHN0YXJ0ICYmIHJlLnRlc3QobGluZS5jaGFyQXQoc3RhcnQgLSAxKSkpIC0tc3RhcnQ7DQogICAgICAgIHdoaWxlIChlbmQgPCBsaW5lLmxlbmd0aCAmJiByZS50ZXN0KGxpbmUuY2hhckF0KGVuZCkpKSArK2VuZDsNCiAgICAgICAgaWYgKHN0YXJ0IDwgZW5kKQ0KICAgICAgICAgIGFkZE92ZXJsYXkoY20sIGxpbmUuc2xpY2Uoc3RhcnQsIGVuZCksIHJlLCBzdGF0ZS5vcHRpb25zLnN0eWxlKTsNCiAgICAgICAgcmV0dXJuOw0KICAgICAgfQ0KICAgICAgdmFyIGZyb20gPSBjbS5nZXRDdXJzb3IoImZyb20iKSwgdG8gPSBjbS5nZXRDdXJzb3IoInRvIik7DQogICAgICBpZiAoZnJvbS5saW5lICE9IHRvLmxpbmUpIHJldHVybjsNCiAgICAgIGlmIChzdGF0ZS5vcHRpb25zLndvcmRzT25seSAmJiAhaXNXb3JkKGNtLCBmcm9tLCB0bykpIHJldHVybjsNCiAgICAgIHZhciBzZWxlY3Rpb24gPSBjbS5nZXRSYW5nZShmcm9tLCB0bykNCiAgICAgIGlmIChzdGF0ZS5vcHRpb25zLnRyaW0pIHNlbGVjdGlvbiA9IHNlbGVjdGlvbi5yZXBsYWNlKC9eXHMrfFxzKyQvZywgIiIpDQogICAgICBpZiAoc2VsZWN0aW9uLmxlbmd0aCA+PSBzdGF0ZS5vcHRpb25zLm1pbkNoYXJzKQ0KICAgICAgICBhZGRPdmVybGF5KGNtLCBzZWxlY3Rpb24sIGZhbHNlLCBzdGF0ZS5vcHRpb25zLnN0eWxlKTsNCiAgICB9KTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGlzV29yZChjbSwgZnJvbSwgdG8pIHsNCiAgICB2YXIgc3RyID0gY20uZ2V0UmFuZ2UoZnJvbSwgdG8pOw0KICAgIGlmIChzdHIubWF0Y2goL15cdyskLykgIT09IG51bGwpIHsNCiAgICAgICAgaWYgKGZyb20uY2ggPiAwKSB7DQogICAgICAgICAgICB2YXIgcG9zID0ge2xpbmU6IGZyb20ubGluZSwgY2g6IGZyb20uY2ggLSAxfTsNCiAgICAgICAgICAgIHZhciBjaHIgPSBjbS5nZXRSYW5nZShwb3MsIGZyb20pOw0KICAgICAgICAgICAgaWYgKGNoci5tYXRjaCgvXFcvKSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9DQogICAgICAgIGlmICh0by5jaCA8IGNtLmdldExpbmUoZnJvbS5saW5lKS5sZW5ndGgpIHsNCiAgICAgICAgICAgIHZhciBwb3MgPSB7bGluZTogdG8ubGluZSwgY2g6IHRvLmNoICsgMX07DQogICAgICAgICAgICB2YXIgY2hyID0gY20uZ2V0UmFuZ2UodG8sIHBvcyk7DQogICAgICAgICAgICBpZiAoY2hyLm1hdGNoKC9cVy8pID09PSBudWxsKSByZXR1cm4gZmFsc2U7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfSBlbHNlIHJldHVybiBmYWxzZTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGJvdW5kYXJpZXNBcm91bmQoc3RyZWFtLCByZSkgew0KICAgIHJldHVybiAoIXN0cmVhbS5zdGFydCB8fCAhcmUudGVzdChzdHJlYW0uc3RyaW5nLmNoYXJBdChzdHJlYW0uc3RhcnQgLSAxKSkpICYmDQogICAgICAoc3RyZWFtLnBvcyA9PSBzdHJlYW0uc3RyaW5nLmxlbmd0aCB8fCAhcmUudGVzdChzdHJlYW0uc3RyaW5nLmNoYXJBdChzdHJlYW0ucG9zKSkpOw0KICB9DQoNCiAgZnVuY3Rpb24gbWFrZU92ZXJsYXkocXVlcnksIGhhc0JvdW5kYXJ5LCBzdHlsZSkgew0KICAgIHJldHVybiB7dG9rZW46IGZ1bmN0aW9uKHN0cmVhbSkgew0KICAgICAgaWYgKHN0cmVhbS5tYXRjaChxdWVyeSkgJiYNCiAgICAgICAgICAoIWhhc0JvdW5kYXJ5IHx8IGJvdW5kYXJpZXNBcm91bmQoc3RyZWFtLCBoYXNCb3VuZGFyeSkpKQ0KICAgICAgICByZXR1cm4gc3R5bGU7DQogICAgICBzdHJlYW0ubmV4dCgpOw0KICAgICAgc3RyZWFtLnNraXBUbyhxdWVyeS5jaGFyQXQoMCkpIHx8IHN0cmVhbS5za2lwVG9FbmQoKTsNCiAgICB9fTsNCiAgfQ0KfSk7]]></Resource>
    <Resource ID="4aa2cd26-287d-4f83-b2f8-927b5593693e" Name="dialog.js" Type="js"><![CDATA[Ly8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnMNCi8vIERpc3RyaWJ1dGVkIHVuZGVyIGFuIE1JVCBsaWNlbnNlOiBodHRwczovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0UNCg0KLy8gT3BlbiBzaW1wbGUgZGlhbG9ncyBvbiB0b3Agb2YgYW4gZWRpdG9yLiBSZWxpZXMgb24gZGlhbG9nLmNzcy4NCg0KKGZ1bmN0aW9uKG1vZCkgew0KICBpZiAodHlwZW9mIGV4cG9ydHMgPT0gIm9iamVjdCIgJiYgdHlwZW9mIG1vZHVsZSA9PSAib2JqZWN0IikgLy8gQ29tbW9uSlMNCiAgICBtb2QocmVxdWlyZSgiLi4vLi4vbGliL2NvZGVtaXJyb3IiKSk7DQogIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSAvLyBBTUQNCiAgICBkZWZpbmUoWyIuLi8uLi9saWIvY29kZW1pcnJvciJdLCBtb2QpOw0KICBlbHNlIC8vIFBsYWluIGJyb3dzZXIgZW52DQogICAgbW9kKENvZGVNaXJyb3IpOw0KfSkoZnVuY3Rpb24oQ29kZU1pcnJvcikgew0KICBmdW5jdGlvbiBkaWFsb2dEaXYoY20sIHRlbXBsYXRlLCBib3R0b20pIHsNCiAgICB2YXIgd3JhcCA9IGNtLmdldFdyYXBwZXJFbGVtZW50KCk7DQogICAgdmFyIGRpYWxvZzsNCiAgICBkaWFsb2cgPSB3cmFwLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpKTsNCiAgICBpZiAoYm90dG9tKQ0KICAgICAgZGlhbG9nLmNsYXNzTmFtZSA9ICJDb2RlTWlycm9yLWRpYWxvZyBDb2RlTWlycm9yLWRpYWxvZy1ib3R0b20iOw0KICAgIGVsc2UNCiAgICAgIGRpYWxvZy5jbGFzc05hbWUgPSAiQ29kZU1pcnJvci1kaWFsb2cgQ29kZU1pcnJvci1kaWFsb2ctdG9wIjsNCg0KICAgIGlmICh0eXBlb2YgdGVtcGxhdGUgPT0gInN0cmluZyIpIHsNCiAgICAgIGRpYWxvZy5pbm5lckhUTUwgPSB0ZW1wbGF0ZTsNCiAgICB9IGVsc2UgeyAvLyBBc3N1bWluZyBpdCdzIGEgZGV0YWNoZWQgRE9NIGVsZW1lbnQuDQogICAgICBkaWFsb2cuYXBwZW5kQ2hpbGQodGVtcGxhdGUpOw0KICAgIH0NCiAgICBDb2RlTWlycm9yLmFkZENsYXNzKHdyYXAsICdkaWFsb2ctb3BlbmVkJyk7DQogICAgcmV0dXJuIGRpYWxvZzsNCiAgfQ0KDQogIGZ1bmN0aW9uIGNsb3NlTm90aWZpY2F0aW9uKGNtLCBuZXdWYWwpIHsNCiAgICBpZiAoY20uc3RhdGUuY3VycmVudE5vdGlmaWNhdGlvbkNsb3NlKQ0KICAgICAgY20uc3RhdGUuY3VycmVudE5vdGlmaWNhdGlvbkNsb3NlKCk7DQogICAgY20uc3RhdGUuY3VycmVudE5vdGlmaWNhdGlvbkNsb3NlID0gbmV3VmFsOw0KICB9DQoNCiAgQ29kZU1pcnJvci5kZWZpbmVFeHRlbnNpb24oIm9wZW5EaWFsb2ciLCBmdW5jdGlvbih0ZW1wbGF0ZSwgY2FsbGJhY2ssIG9wdGlvbnMpIHsNCiAgICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTsNCg0KICAgIGNsb3NlTm90aWZpY2F0aW9uKHRoaXMsIG51bGwpOw0KDQogICAgdmFyIGRpYWxvZyA9IGRpYWxvZ0Rpdih0aGlzLCB0ZW1wbGF0ZSwgb3B0aW9ucy5ib3R0b20pOw0KICAgIHZhciBjbG9zZWQgPSBmYWxzZSwgbWUgPSB0aGlzOw0KICAgIGZ1bmN0aW9uIGNsb3NlKG5ld1ZhbCkgew0KICAgICAgaWYgKHR5cGVvZiBuZXdWYWwgPT0gJ3N0cmluZycpIHsNCiAgICAgICAgaW5wLnZhbHVlID0gbmV3VmFsOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgaWYgKGNsb3NlZCkgcmV0dXJuOw0KICAgICAgICBjbG9zZWQgPSB0cnVlOw0KICAgICAgICBDb2RlTWlycm9yLnJtQ2xhc3MoZGlhbG9nLnBhcmVudE5vZGUsICdkaWFsb2ctb3BlbmVkJyk7DQogICAgICAgIGRpYWxvZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRpYWxvZyk7DQogICAgICAgIG1lLmZvY3VzKCk7DQoNCiAgICAgICAgaWYgKG9wdGlvbnMub25DbG9zZSkgb3B0aW9ucy5vbkNsb3NlKGRpYWxvZyk7DQogICAgICB9DQogICAgfQ0KDQogICAgdmFyIGlucCA9IGRpYWxvZy5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaW5wdXQiKVswXSwgYnV0dG9uOw0KICAgIGlmIChpbnApIHsNCiAgICAgIGlucC5mb2N1cygpOw0KDQogICAgICBpZiAob3B0aW9ucy52YWx1ZSkgew0KICAgICAgICBpbnAudmFsdWUgPSBvcHRpb25zLnZhbHVlOw0KICAgICAgICBpZiAob3B0aW9ucy5zZWxlY3RWYWx1ZU9uT3BlbiAhPT0gZmFsc2UpIHsNCiAgICAgICAgICBpbnAuc2VsZWN0KCk7DQogICAgICAgIH0NCiAgICAgIH0NCg0KICAgICAgaWYgKG9wdGlvbnMub25JbnB1dCkNCiAgICAgICAgQ29kZU1pcnJvci5vbihpbnAsICJpbnB1dCIsIGZ1bmN0aW9uKGUpIHsgb3B0aW9ucy5vbklucHV0KGUsIGlucC52YWx1ZSwgY2xvc2UpO30pOw0KICAgICAgaWYgKG9wdGlvbnMub25LZXlVcCkNCiAgICAgICAgQ29kZU1pcnJvci5vbihpbnAsICJrZXl1cCIsIGZ1bmN0aW9uKGUpIHtvcHRpb25zLm9uS2V5VXAoZSwgaW5wLnZhbHVlLCBjbG9zZSk7fSk7DQoNCiAgICAgIENvZGVNaXJyb3Iub24oaW5wLCAia2V5ZG93biIsIGZ1bmN0aW9uKGUpIHsNCiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5vbktleURvd24gJiYgb3B0aW9ucy5vbktleURvd24oZSwgaW5wLnZhbHVlLCBjbG9zZSkpIHsgcmV0dXJuOyB9DQogICAgICAgIGlmIChlLmtleUNvZGUgPT0gMjcgfHwgKG9wdGlvbnMuY2xvc2VPbkVudGVyICE9PSBmYWxzZSAmJiBlLmtleUNvZGUgPT0gMTMpKSB7DQogICAgICAgICAgaW5wLmJsdXIoKTsNCiAgICAgICAgICBDb2RlTWlycm9yLmVfc3RvcChlKTsNCiAgICAgICAgICBjbG9zZSgpOw0KICAgICAgICB9DQogICAgICAgIGlmIChlLmtleUNvZGUgPT0gMTMpIGNhbGxiYWNrKGlucC52YWx1ZSwgZSk7DQogICAgICB9KTsNCg0KICAgICAgaWYgKG9wdGlvbnMuY2xvc2VPbkJsdXIgIT09IGZhbHNlKSBDb2RlTWlycm9yLm9uKGRpYWxvZywgImZvY3Vzb3V0IiwgZnVuY3Rpb24gKGV2dCkgew0KICAgICAgICBpZiAoZXZ0LnJlbGF0ZWRUYXJnZXQgIT09IG51bGwpIGNsb3NlKCk7DQogICAgICB9KTsNCiAgICB9IGVsc2UgaWYgKGJ1dHRvbiA9IGRpYWxvZy5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYnV0dG9uIilbMF0pIHsNCiAgICAgIENvZGVNaXJyb3Iub24oYnV0dG9uLCAiY2xpY2siLCBmdW5jdGlvbigpIHsNCiAgICAgICAgY2xvc2UoKTsNCiAgICAgICAgbWUuZm9jdXMoKTsNCiAgICAgIH0pOw0KDQogICAgICBpZiAob3B0aW9ucy5jbG9zZU9uQmx1ciAhPT0gZmFsc2UpIENvZGVNaXJyb3Iub24oYnV0dG9uLCAiYmx1ciIsIGNsb3NlKTsNCg0KICAgICAgYnV0dG9uLmZvY3VzKCk7DQogICAgfQ0KICAgIHJldHVybiBjbG9zZTsNCiAgfSk7DQoNCiAgQ29kZU1pcnJvci5kZWZpbmVFeHRlbnNpb24oIm9wZW5Db25maXJtIiwgZnVuY3Rpb24odGVtcGxhdGUsIGNhbGxiYWNrcywgb3B0aW9ucykgew0KICAgIGNsb3NlTm90aWZpY2F0aW9uKHRoaXMsIG51bGwpOw0KICAgIHZhciBkaWFsb2cgPSBkaWFsb2dEaXYodGhpcywgdGVtcGxhdGUsIG9wdGlvbnMgJiYgb3B0aW9ucy5ib3R0b20pOw0KICAgIHZhciBidXR0b25zID0gZGlhbG9nLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJidXR0b24iKTsNCiAgICB2YXIgY2xvc2VkID0gZmFsc2UsIG1lID0gdGhpcywgYmx1cnJpbmcgPSAxOw0KICAgIGZ1bmN0aW9uIGNsb3NlKCkgew0KICAgICAgaWYgKGNsb3NlZCkgcmV0dXJuOw0KICAgICAgY2xvc2VkID0gdHJ1ZTsNCiAgICAgIENvZGVNaXJyb3Iucm1DbGFzcyhkaWFsb2cucGFyZW50Tm9kZSwgJ2RpYWxvZy1vcGVuZWQnKTsNCiAgICAgIGRpYWxvZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRpYWxvZyk7DQogICAgICBtZS5mb2N1cygpOw0KICAgIH0NCiAgICBidXR0b25zWzBdLmZvY3VzKCk7DQogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidXR0b25zLmxlbmd0aDsgKytpKSB7DQogICAgICB2YXIgYiA9IGJ1dHRvbnNbaV07DQogICAgICAoZnVuY3Rpb24oY2FsbGJhY2spIHsNCiAgICAgICAgQ29kZU1pcnJvci5vbihiLCAiY2xpY2siLCBmdW5jdGlvbihlKSB7DQogICAgICAgICAgQ29kZU1pcnJvci5lX3ByZXZlbnREZWZhdWx0KGUpOw0KICAgICAgICAgIGNsb3NlKCk7DQogICAgICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhtZSk7DQogICAgICAgIH0pOw0KICAgICAgfSkoY2FsbGJhY2tzW2ldKTsNCiAgICAgIENvZGVNaXJyb3Iub24oYiwgImJsdXIiLCBmdW5jdGlvbigpIHsNCiAgICAgICAgLS1ibHVycmluZzsNCiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHsgaWYgKGJsdXJyaW5nIDw9IDApIGNsb3NlKCk7IH0sIDIwMCk7DQogICAgICB9KTsNCiAgICAgIENvZGVNaXJyb3Iub24oYiwgImZvY3VzIiwgZnVuY3Rpb24oKSB7ICsrYmx1cnJpbmc7IH0pOw0KICAgIH0NCiAgfSk7DQoNCiAgLyoNCiAgICogb3Blbk5vdGlmaWNhdGlvbg0KICAgKiBPcGVucyBhIG5vdGlmaWNhdGlvbiwgdGhhdCBjYW4gYmUgY2xvc2VkIHdpdGggYW4gb3B0aW9uYWwgdGltZXINCiAgICogKGRlZmF1bHQgNTAwMG1zIHRpbWVyKSBhbmQgYWx3YXlzIGNsb3NlcyBvbiBjbGljay4NCiAgICoNCiAgICogSWYgYSBub3RpZmljYXRpb24gaXMgb3BlbmVkIHdoaWxlIGFub3RoZXIgaXMgb3BlbmVkLCBpdCB3aWxsIGNsb3NlIHRoZQ0KICAgKiBjdXJyZW50bHkgb3BlbmVkIG9uZSBhbmQgb3BlbiB0aGUgbmV3IG9uZSBpbW1lZGlhdGVseS4NCiAgICovDQogIENvZGVNaXJyb3IuZGVmaW5lRXh0ZW5zaW9uKCJvcGVuTm90aWZpY2F0aW9uIiwgZnVuY3Rpb24odGVtcGxhdGUsIG9wdGlvbnMpIHsNCiAgICBjbG9zZU5vdGlmaWNhdGlvbih0aGlzLCBjbG9zZSk7DQogICAgdmFyIGRpYWxvZyA9IGRpYWxvZ0Rpdih0aGlzLCB0ZW1wbGF0ZSwgb3B0aW9ucyAmJiBvcHRpb25zLmJvdHRvbSk7DQogICAgdmFyIGNsb3NlZCA9IGZhbHNlLCBkb25lVGltZXI7DQogICAgdmFyIGR1cmF0aW9uID0gb3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5kdXJhdGlvbiAhPT0gInVuZGVmaW5lZCIgPyBvcHRpb25zLmR1cmF0aW9uIDogNTAwMDsNCg0KICAgIGZ1bmN0aW9uIGNsb3NlKCkgew0KICAgICAgaWYgKGNsb3NlZCkgcmV0dXJuOw0KICAgICAgY2xvc2VkID0gdHJ1ZTsNCiAgICAgIGNsZWFyVGltZW91dChkb25lVGltZXIpOw0KICAgICAgQ29kZU1pcnJvci5ybUNsYXNzKGRpYWxvZy5wYXJlbnROb2RlLCAnZGlhbG9nLW9wZW5lZCcpOw0KICAgICAgZGlhbG9nLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZGlhbG9nKTsNCiAgICB9DQoNCiAgICBDb2RlTWlycm9yLm9uKGRpYWxvZywgJ2NsaWNrJywgZnVuY3Rpb24oZSkgew0KICAgICAgQ29kZU1pcnJvci5lX3ByZXZlbnREZWZhdWx0KGUpOw0KICAgICAgY2xvc2UoKTsNCiAgICB9KTsNCg0KICAgIGlmIChkdXJhdGlvbikNCiAgICAgIGRvbmVUaW1lciA9IHNldFRpbWVvdXQoY2xvc2UsIGR1cmF0aW9uKTsNCg0KICAgIHJldHVybiBjbG9zZTsNCiAgfSk7DQp9KTs=]]></Resource>
    <Resource ID="69646baf-4138-4033-8aec-8bf48e467c62" Name="jump_to_line.js" Type="js"><![CDATA[Ly8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnMNCi8vIERpc3RyaWJ1dGVkIHVuZGVyIGFuIE1JVCBsaWNlbnNlOiBodHRwczovL2NvZGVtaXJyb3IubmV0L0xJQ0VOU0UNCg0KLy8gRGVmaW5lcyBqdW1wVG9MaW5lIGNvbW1hbmQuIFVzZXMgZGlhbG9nLmpzIGlmIHByZXNlbnQuDQoNCihmdW5jdGlvbihtb2QpIHsNCiAgaWYgKHR5cGVvZiBleHBvcnRzID09ICJvYmplY3QiICYmIHR5cGVvZiBtb2R1bGUgPT0gIm9iamVjdCIpIC8vIENvbW1vbkpTDQogICAgbW9kKHJlcXVpcmUoIi4uLy4uL2xpYi9jb2RlbWlycm9yIiksIHJlcXVpcmUoIi4uL2RpYWxvZy9kaWFsb2ciKSk7DQogIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSAvLyBBTUQNCiAgICBkZWZpbmUoWyIuLi8uLi9saWIvY29kZW1pcnJvciIsICIuLi9kaWFsb2cvZGlhbG9nIl0sIG1vZCk7DQogIGVsc2UgLy8gUGxhaW4gYnJvd3NlciBlbnYNCiAgICBtb2QoQ29kZU1pcnJvcik7DQp9KShmdW5jdGlvbihDb2RlTWlycm9yKSB7DQogICJ1c2Ugc3RyaWN0IjsNCg0KICAvLyBkZWZhdWx0IHNlYXJjaCBwYW5lbCBsb2NhdGlvbg0KICBDb2RlTWlycm9yLmRlZmluZU9wdGlvbigic2VhcmNoIiwge2JvdHRvbTogZmFsc2V9KTsNCg0KICBmdW5jdGlvbiBkaWFsb2coY20sIHRleHQsIHNob3J0VGV4dCwgZGVmbHQsIGYpIHsNCiAgICBpZiAoY20ub3BlbkRpYWxvZykgY20ub3BlbkRpYWxvZyh0ZXh0LCBmLCB7dmFsdWU6IGRlZmx0LCBzZWxlY3RWYWx1ZU9uT3BlbjogdHJ1ZSwgYm90dG9tOiBjbS5vcHRpb25zLnNlYXJjaC5ib3R0b219KTsNCiAgICBlbHNlIGYocHJvbXB0KHNob3J0VGV4dCwgZGVmbHQpKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGdldEp1bXBEaWFsb2coY20pIHsNCiAgICByZXR1cm4gY20ucGhyYXNlKCJKdW1wIHRvIGxpbmU6IikgKyAnIDxpbnB1dCB0eXBlPSJ0ZXh0IiBzdHlsZT0id2lkdGg6IDEwZW0iIGNsYXNzPSJDb2RlTWlycm9yLXNlYXJjaC1maWVsZCIvPiA8c3BhbiBzdHlsZT0iY29sb3I6ICM4ODgiIGNsYXNzPSJDb2RlTWlycm9yLXNlYXJjaC1oaW50Ij4nICsgY20ucGhyYXNlKCIoVXNlIGxpbmU6Y29sdW1uIG9yIHNjcm9sbCUgc3ludGF4KSIpICsgJzwvc3Bhbj4nOw0KICB9DQoNCiAgZnVuY3Rpb24gaW50ZXJwcmV0TGluZShjbSwgc3RyaW5nKSB7DQogICAgdmFyIG51bSA9IE51bWJlcihzdHJpbmcpDQogICAgaWYgKC9eWy0rXS8udGVzdChzdHJpbmcpKSByZXR1cm4gY20uZ2V0Q3Vyc29yKCkubGluZSArIG51bQ0KICAgIGVsc2UgcmV0dXJuIG51bSAtIDENCiAgfQ0KDQogIENvZGVNaXJyb3IuY29tbWFuZHMuanVtcFRvTGluZSA9IGZ1bmN0aW9uKGNtKSB7DQogICAgdmFyIGN1ciA9IGNtLmdldEN1cnNvcigpOw0KICAgIGRpYWxvZyhjbSwgZ2V0SnVtcERpYWxvZyhjbSksIGNtLnBocmFzZSgiSnVtcCB0byBsaW5lOiIpLCAoY3VyLmxpbmUgKyAxKSArICI6IiArIGN1ci5jaCwgZnVuY3Rpb24ocG9zU3RyKSB7DQogICAgICBpZiAoIXBvc1N0cikgcmV0dXJuOw0KDQogICAgICB2YXIgbWF0Y2g7DQogICAgICBpZiAobWF0Y2ggPSAvXlxzKihbXCtcLV0/XGQrKVxzKlw6XHMqKFxkKylccyokLy5leGVjKHBvc1N0cikpIHsNCiAgICAgICAgY20uc2V0Q3Vyc29yKGludGVycHJldExpbmUoY20sIG1hdGNoWzFdKSwgTnVtYmVyKG1hdGNoWzJdKSkNCiAgICAgIH0gZWxzZSBpZiAobWF0Y2ggPSAvXlxzKihbXCtcLV0/XGQrKFwuXGQrKT8pXCVccyovLmV4ZWMocG9zU3RyKSkgew0KICAgICAgICB2YXIgbGluZSA9IE1hdGgucm91bmQoY20ubGluZUNvdW50KCkgKiBOdW1iZXIobWF0Y2hbMV0pIC8gMTAwKTsNCiAgICAgICAgaWYgKC9eWy0rXS8udGVzdChtYXRjaFsxXSkpIGxpbmUgPSBjdXIubGluZSArIGxpbmUgKyAxOw0KICAgICAgICBjbS5zZXRDdXJzb3IobGluZSAtIDEsIGN1ci5jaCk7DQogICAgICB9IGVsc2UgaWYgKG1hdGNoID0gL15ccypcOj9ccyooW1wrXC1dP1xkKylccyovLmV4ZWMocG9zU3RyKSkgew0KICAgICAgICBjbS5zZXRDdXJzb3IoaW50ZXJwcmV0TGluZShjbSwgbWF0Y2hbMV0pLCBjdXIuY2gpOw0KICAgICAgfQ0KICAgIH0pOw0KICB9Ow0KDQogIENvZGVNaXJyb3Iua2V5TWFwWyJkZWZhdWx0Il1bIkFsdC1HIl0gPSAianVtcFRvTGluZSI7DQp9KTs=]]></Resource>
    <Resource ID="0116ae12-49d8-4389-bb9d-fd74e73890bb" Name="search_cursor.js" Type="js"><![CDATA[]]></Resource>
    <Resource ID="9cc0dd1e-ae9c-4028-b77a-cd3dddc81b10" Name="code_editor_styles.css" Type="css"><![CDATA[]]></Resource>
    <Resource ID="f63a7b6c-28bc-42a7-9142-9446b5dd9ac3" Name="code_editor_serach.js" Type="js"><![CDATA[]]></Resource>
    <Resource ID="e205cbe1-7179-fe66-4f81-ab6d605b20b2" Name="table" Type="gif"><![CDATA[R0lGODlhGAAYAKIEANbT1v///6WmpUpNpf///wAAAAAAAAAAACH5BAEAAAQALAAAAAAYABgAAANQ
			SLrc/jDKSau9TOjNu4DCII4k+T1hqYqnIwBwLMttIwQBgOv5jtcZX2/IAy5esyTMqLgRhUUQdBpg
			EpDKmdXJ6wq3VG8V5ClrMOi0es1uXxIAOw==]]></Resource>
  </Resources>
  <SourceCode><![CDATA[class VDOM_codeeditor(VDOM_object):
	def check_unit(self, value):
		return value + "px" if value.isdigit() else value

	def render(self, contents=""):
		id = u"o_" + (self.id).replace('-', '_')

		display = u"display:none;" if self.visible == "0" else u"display:block;"
		width = u"width: {};".format(self.check_unit(self.width)) if self.width else u""
		height = u"height: {};".format(self.check_unit(self.height)) if self.height else u""
		top = u"top: {};".format(self.check_unit(self.top)) if self.top else u""
		left = u"left: {};".format(self.check_unit(self.left)) if self.left else u""

		style = u"""z-index: {zind}; {top} {left} overflow: visible; position: absolute;
			{width} {height} padding: 2px 5px 2px 5px; {display} font: 14px tahoma
			""".format(zind = self.zindex, top = top, left = left,
					width = width, height = height, display = display)

		if VDOM_CONFIG_1["DEBUG"] == "1":
			debug_info = u"objtype='codeeditor' objname='%s' ver='%s'" % (self.name, self.type.version)
		else:
			debug_info = u""
			
		is_readonly = "true" if self.is_readonly == "1" else "false"

		result = u"""
<style type="text/css">
#%(id)s .CodeMirror-scroll { %(height)s }
</style>
<div id="%(id)s" style="%(style)s" %(debug_info)s class="vdom_codeeditor %(classname)s">
	<textarea name="%(name)s" style='%(height)s %(width)s'>%(value)s</textarea>
</div>
<script type="text/javascript">
$(document).ready(() => {
    if (typeof window.%(id)s_codeeditor !== 'undefined') {
        window.%(id)s_codeeditor.toTextArea();
        delete(window.%(id)s_codeeditor);
    }


    window.%(id)s_codeeditor = CodeMirror.fromTextArea($('#%(id)s>textarea').get(0), {
        mode: '%(mode)s',
        lineNumbers: true,
        styleActiveLine: true,
        highlightSelectionMatches: {minChars: 2},
        readOnly: %(is_readonly)s,
    });
    //bug fix

    $('#%(id)s').parents('form:first').submit(function(){
        window.%(id)s_codeeditor.save();
    });

    window.%(id)s_codeeditor.refresh();

    const el = $('#%(id)s');

    var intervalId = setInterval(function() {
        if (el.is(':visible')) {
            window.%(id)s_codeeditor.refresh();
            clearInterval(intervalId);
        }
    }, 200);
});
</script>""" % {
				"mode":       self.syntax,
				"id":         id,
				"name":       self.customname or self.name,
				"style":      style,
				"value":      unicode(self.value).replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;'),
				"width":      width,
				"height":     height,
				"debug_info": debug_info,
				"is_readonly": is_readonly,
				"classname": self.classname
			}

		return VDOM_object.render(self, contents=result)

	def get_lines_amount (self, value) : 			
		count = value.count("\n")
		
		return int(count)+1
	
	def get_lines_text (self, value, text_height) :
		
		amount = self.get_lines_amount(value)
		
		lines = \
			u""" <text x="0" y="2" width="28" height="{text_height}" 
					font-family="tahoma" font-size="14" fill="#aaaaaa" align="right"> 
			""".format(text_height=text_height)
		
		i = 1
		while (i <= amount):
			text_y = (i-1)*17
			
			if text_y >= text_height :
				i = i + 1
				break
				
			text_h = 20 if text_y + 20 <= text_height else text_height-text_y
			lines += u""" <tspan y="{y}" height="{height}">{line_number}</tspan> """.format(y=text_y, line_number=i, height=text_h)
			i = i + 1
		
		lines += u" </text> "
		
		return lines
		
	def wysiwyg(self, contents=""):
		self.width, self.height, self.top, self.left = [int(self.ide_width), int(self.ide_height), int(self.ide_top), int(self.ide_left)]
		
		text_width = int(self.width) - 38
		text_height = int(self.height) - 2

		result = \
			u"""<container name="{name}" id="{id}" visible="{vis}" zindex="{zind}" hierarchy="{hierarchy}" order="{order}"
					top="{top}" left="{left}" width="{width}" height="{height}" 
					backgroundcolor="#ffffff" bordercolor="#cccccc">
					<svg>
						<rect x="1" y="1" width="28" height="{text_height}" fill="#F7F7F7"/>
						<line x1="30" y1="1" x2="30" y2="{line_y_end}" style="stroke:#eeeeee"/>
						<text x="40" y="17" width="{text_width}" height="{text_height}" font-family="Courier New" font-size="14">{value}</text>
						{lines}
					</svg>
				</container>
			""".format(
					id = self.id, vis = self.visible, zind = self.zindex,
					hierarchy = self.hierarchy, order = self.order,
					top = self.top, left = self.left, 
					width = self.width, height = self.height,
					text_width = text_width, text_height = text_height,
					line_y_end = 1+int(self.height)-2,
					value = self.value, name = self.name,
					lines = self.get_lines_text(self.value, text_height))

		return VDOM_object.wysiwyg(self, contents=result)
		
		
def on_update(object, attributes):
    o = object
    mods = {}
	
    for attr in ["left", "width", "height", "top"]:
        if attr in attributes:
            attr_value = attributes[attr]
            obj_value = o.attributes.get(attr, '').lower()
			
            if obj_value.isdigit() and attr_value.isdigit():
                mods[attr] = attr_value + "px"
                mods["ide_"+ attr] = attr_value
            elif obj_value.endswith("px") and (attr_value.isdigit() or "px" in attr_value):
                mods[attr] = attr_value.rstrip("px") + "px"
                mods["ide_"+ attr] = attr_value.rstrip("px")
            elif attr_value.isdigit() or "px" in attr_value:
                mods[attr] = attr_value if "px" in attr_value else obj_value
                mods["ide_"+ attr] = attr_value.rstrip("px")
            else:
                mods[attr] = attr_value
    attributes.update(mods)
    	
    return ""
    
def on_compile(object, attributes):
	for attr in ["left", "width", "height", "top"]:
		obj_value = object.attributes[attr]
		
		if obj_value.isdigit() or "px" in obj_value:
			object.attributes[attr] = obj_value.rstrip("px") + "px"]]></SourceCode>
  <Libraries>
    <Library Target="html"><![CDATA[<script type="text/javascript" src="/064add91-8595-0f40-10ea-09d38022edee.js"></script>]]></Library>
    <Library Target="html"><![CDATA[<script type='text/javascript' src='/0116ae12-49d8-4389-bb9d-fd74e73890bb.js'></script>]]></Library>
    <Library Target="html"><![CDATA[<script type='text/javascript' src='/95be4415-7ccb-b87b-f50f-77c8485f6bd9.js'></script>]]></Library>
    <Library Target="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/9cc0dd1e-ae9c-4028-b77a-cd3dddc81b10.css" />]]></Library>
    <Library Target="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/25634bc0-f478-460c-bdcd-29c38d0c3f6c.css" />]]></Library>
    <Library Target="html"><![CDATA[<script type='text/javascript' src='/4aa2cd26-287d-4f83-b2f8-927b5593693e.js'></script>]]></Library>
    <Library Target="html"><![CDATA[<script type='text/javascript' src='/f63a7b6c-28bc-42a7-9142-9446b5dd9ac3.js'></script>]]></Library>
    <Library Target="html"><![CDATA[<script type='text/javascript' src='/69646baf-4138-4033-8aec-8bf48e467c62.js'></script>]]></Library>
    <Library Target="html"><![CDATA[<script type='text/javascript' src='/dd098de4-af7a-473b-bd3a-8087be9fc197.js'></script>]]></Library>
    <Library Target="html"><![CDATA[<script type='text/javascript' src='/618a76f6-eb25-4afe-bde0-f1b991b914e4.js'></script>]]></Library>
    <Library Target="html"><![CDATA[<style type="text/css">
        .vdom_codeeditor {

       }

</style>]]></Library>
  </Libraries>
  <E2vdom>
    <Events>
      <Userinterfaceevents>
        <Event Name="click" Help="#Lang(513)">
          <Parameters>
            <Parameter Name="X" Order="0" VbType="" Help="#Lang(901)"/>
            <Parameter Name="Y" Order="0" VbType="" Help="#Lang(902)"/>
          </Parameters>
        </Event>
        <Event Name="getvalue" Help="#Lang(514)">
          <Parameters>
            <Parameter Name="value" Order="0" VbType="" Help="#Lang(903)"/>
          </Parameters>
        </Event>
      </Userinterfaceevents>
    </Events>
    <Actions>
      <Container ID="2330fe83-8cd6-4ed5-907d-11874e7ebcf4">
        <Action Help="#Lang(501)" InterfaceName="#Lang(601)" MethodName="getValue">
          <Parameters/>
          <SourceCode><![CDATA[eval('var x='+this.domCont.id+"_codeeditor.getValue(value);");
			execEventBinded(id.substring(2, id.length), "getvalue", {value:x});]]></SourceCode>
        </Action>
        <Action Help="#Lang(502)" InterfaceName="#Lang(602)" MethodName="hide">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(701)" ScriptName="fade" Help="#Lang(801)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[vdom_ui_hide(this.domCont, fade);]]></SourceCode>
        </Action>
        <Action Help="#Lang(503)" InterfaceName="#Lang(603)" MethodName="moveTo">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(702)" ScriptName="newX" Help="#Lang(802)" RegularExpressionValidation=".*"/>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(703)" ScriptName="newY" Help="#Lang(803)" RegularExpressionValidation=".*"/>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(704)" ScriptName="Effect" Help="#Lang(804)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[vdom_ui_moveTo(this.domCont, newX, newY, Effect);]]></SourceCode>
        </Action>
        <Action Help="#Lang(504)" InterfaceName="#Lang(604)" MethodName="refresh">
          <Parameters/>
          <SourceCode><![CDATA[eval(this.domCont.id+"_codeeditor.refresh();");]]></SourceCode>
        </Action>
        <Action Help="#Lang(505)" InterfaceName="#Lang(605)" MethodName="resizeTo">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(705)" ScriptName="width" Help="#Lang(805)" RegularExpressionValidation=".*"/>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(706)" ScriptName="height" Help="#Lang(806)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[var w = parseInt(width,10), h = parseInt(height,10), o = $q(this.domCont);
				o.width(w).height(h);
				$q('.CodeMirror-scroll', o).width(w).height(h);
				eval(this.domCont.id+"_codeeditor.refresh();");]]></SourceCode>
        </Action>
        <Action Help="#Lang(506)" InterfaceName="#Lang(606)" MethodName="setCursor">
          <Parameters>
            <Parameter DefaultValue="1" Interface="" InterfaceName="#Lang(707)" ScriptName="line" Help="#Lang(807)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[eval('window.'+this.domCont.id+'_codeeditor.focus(); window.'+this.domCont.id+'_codeeditor.setCursor('+parseInt(line,10)+');');]]></SourceCode>
        </Action>
        <Action Help="#Lang(507)" InterfaceName="#Lang(607)" MethodName="setFocus">
          <Parameters/>
          <SourceCode><![CDATA[eval('window.'+this.domCont.id+'_codeeditor.focus();');]]></SourceCode>
        </Action>
        <Action Help="#Lang(508)" InterfaceName="#Lang(608)" MethodName="setSyntax">
          <Parameters>
            <Parameter DefaultValue="'xml'" Interface="" InterfaceName="#Lang(708)" ScriptName="syntax" Help="#Lang(808)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[]]></SourceCode>
        </Action>
        <Action Help="#Lang(509)" InterfaceName="#Lang(609)" MethodName="setTheme">
          <Parameters>
            <Parameter DefaultValue="" Interface="" InterfaceName="#Lang(709)" ScriptName="theme" Help="#Lang(809)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[]]></SourceCode>
        </Action>
        <Action Help="#Lang(511)" InterfaceName="#Lang(611)" MethodName="setValue">
          <Parameters>
            <Parameter DefaultValue="" Interface="" InterfaceName="#Lang(711)" ScriptName="value" Help="#Lang(811)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[eval(this.domCont.id+"_codeeditor.setValue(value);");]]></SourceCode>
        </Action>
        <Action Help="#Lang(512)" InterfaceName="#Lang(612)" MethodName="show">
          <Parameters>
            <Parameter DefaultValue="0" Interface="" InterfaceName="#Lang(712)" ScriptName="fade" Help="#Lang(812)" RegularExpressionValidation=".*"/>
          </Parameters>
          <SourceCode><![CDATA[vdom_ui_show(this.domCont, fade);]]></SourceCode>
        </Action>
      </Container>
    </Actions>
  </E2vdom>
</Type>